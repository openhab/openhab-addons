<?xml version="1.0" encoding="UTF-8"?>
<thing:thing-descriptions bindingId="telegram"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:thing="https://openhab.org/schemas/thing-description/v1.0.0"
	xsi:schemaLocation="https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd">

	<thing-type id="telegramBot">
		<label>Telegram Bot</label>
		<description>Thing to receive the latest message send to a Telegram Bot.</description>

		<channels>
			<channel id="lastMessageText" typeId="lastMessageText"/>
			<channel id="lastMessageURL" typeId="lastMessageURL"/>
			<channel id="lastMessageDate" typeId="lastMessageDate"/>
			<channel id="lastMessageName" typeId="lastMessageName"/>
			<channel id="lastMessageUsername" typeId="lastMessageUsername"/>
			<channel id="chatId" typeId="chatId"/>
			<channel id="replyId" typeId="replyId"/>
			<channel id="messageEvent" typeId="messageEvent"/>
			<channel id="messageRawEvent" typeId="messageRawEvent"/>
			<channel id="callbackEvent" typeId="callbackEvent"/>
			<channel id="callbackRawEvent" typeId="callbackRawEvent"/>
		</channels>

		<config-description>
			<parameter name="botToken" type="text" required="true">
				<label>Bot Token</label>
				<description>Enter the bot token you received from the "BotFather".</description>
			</parameter>
			<parameter name="chatIds" type="text" required="true" multiple="true">
				<label>Chat Id(s)</label>
				<description>One or more chat id(s). Access modifiers ("&lt;" for inbound only, "&gt;" for outbound only) can be
					used as prefix (optional).</description>
			</parameter>
			<parameter name="parseMode" type="text" required="false">
				<label>Parse Mode</label>
				<options>
					<option value="">No Formatting</option>
					<option value="HTML">HTML</option>
					<option value="Markdown">Markdown</option>
				</options>
				<default></default>
				<description>Support for formatted messages, values: Markdown or HTML. Default: no formatting is used.</description>
			</parameter>
			<parameter name="proxyHost" type="text">
				<context>network-address</context>
				<label>Proxy Host</label>
				<description>Enter your proxy host. It will be used for telegram binding only and doesn't affect entire system.</description>
			</parameter>
			<parameter name="proxyPort" type="integer" max="65535" min="1" required="false">
				<label>Proxy Port</label>
				<description>Enter your proxy port.</description>
			</parameter>
			<parameter name="proxyType" type="text" required="false">
				<label>Proxy Type</label>
				<options>
					<option value="SOCKS5">SOCKS5</option>
					<option value="HTTP">HTTP</option>
				</options>
				<default>SOCKS5</default>
				<description>Enter your proxy type. Default: SOCKS5</description>
			</parameter>
			<parameter name="longPollingTime" type="integer" min="0" max="50" unit="s">
				<label>Long Polling Time</label>
				<description>Enter the long polling time in seconds.</description>
				<default>25</default>
			</parameter>
		</config-description>
	</thing-type>

	<channel-type id="lastMessageText">
		<item-type>String</item-type>
		<label>Last Message Text</label>
		<description>Contains the latest message text as a string</description>
		<state readOnly="true"/>
	</channel-type>

	<channel-type id="lastMessageURL">
		<item-type>String</item-type>
		<label>Last Message URL</label>
		<description>Contains the URL of the latest message</description>
		<state readOnly="true"/>
	</channel-type>

	<channel-type id="lastMessageDate">
		<item-type>DateTime</item-type>
		<label>Last Message Date</label>
		<description>Contains the latest message date as a DateTime</description>
		<state readOnly="true"/>
	</channel-type>

	<channel-type id="lastMessageName">
		<item-type>String</item-type>
		<label>Last Message Name</label>
		<description>Contains the latest message senders name as a string</description>
		<state readOnly="true"/>
	</channel-type>

	<channel-type id="lastMessageUsername">
		<item-type>String</item-type>
		<label>Last Message Username</label>
		<description>Contains the latest message senders username as a string</description>
		<state readOnly="true"/>
	</channel-type>

	<channel-type id="chatId">
		<item-type>String</item-type>
		<label>Chat Id</label>
		<description>Contains the id of chat from where the message was received.</description>
		<state readOnly="true"/>
	</channel-type>

	<channel-type id="replyId">
		<item-type>String</item-type>
		<label>Reply Id</label>
		<description>Contains the id of the reply which was passed to sendTelegram() as replyId. This id can be used to have
			an unambiguous assignment of the user reply to the message which was sent by the bot.</description>
		<state readOnly="true"/>
	</channel-type>

	<channel-type id="messageEvent" advanced="true">
		<kind>trigger</kind>
		<label>Message Received</label>
		<description>
			<![CDATA[
			Message encoded as JSON.<br />
			Event payload could contain the following, but `null` values will not be present:
			<ul>
				<li>Long `message_id` - Unique message ID in this chat</li>
				<li>String `from` - First and/or last name of sender</li>
				<li>Long `chat_id` - Unique chat ID</li>
				<li>String `text` - Message text</li>
				<li>String `animation_url` - URL to download animation from</li>
				<li>String `audio_url` - URL to download audio from</li>
				<li>String `document_url` - URL to download file from</li>
				<li>Array `photo_url` - Array of URLs to download photos from</li>
				<li>String `sticker_url` - URL to download sticker from</li>
				<li>String `video_url` - URL to download video from</li>
				<li>String `video_note_url` - URL to download video note from</li>
				<li>String `voice_url` - URL to download voice clip from</li>
			</ul>
			]]>
		</description>
		<event></event>
	</channel-type>

	<channel-type id="messageRawEvent" advanced="true">
		<kind>trigger</kind>
		<label>Raw Message Received</label>
		<description>Raw Message from the Telegram library as JSON.</description>
		<event></event>
	</channel-type>

	<channel-type id="callbackEvent" advanced="true">
		<kind>trigger</kind>
		<label>Query Callback Received</label>
		<description>
			<![CDATA[
			Callback Query response encoded as JSON.<br />
			Event payload could contain the following, but `null` values will not be present:
			<ul>
				<li>Long `message_id` - Unique message ID of the original Query message</li>
				<li>String `from` - First and/or last name of sender</li>
				<li>Long `chat_id` - Unique chat ID</li>
				<li>String `callback_id` - Unique callback ID to send receipt confirmation to</li>
				<li>String `reply_id` - Plain text name of original Query</li>
				<li>String `text` - Selected response text from options give in original Query</li>
			</ul>
			]]>
		</description>
		<event></event>
	</channel-type>

	<channel-type id="callbackRawEvent" advanced="true">
		<kind>trigger</kind>
		<label>Raw Callback Query Received</label>
		<description>Raw Callback Query response from the Telegram library encoded as JSON.</description>
		<event></event>
	</channel-type>

</thing:thing-descriptions>
