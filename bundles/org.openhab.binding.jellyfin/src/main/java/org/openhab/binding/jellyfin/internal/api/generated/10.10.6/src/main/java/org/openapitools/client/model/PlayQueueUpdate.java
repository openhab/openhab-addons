/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupRepeatMode;
import org.openapitools.client.model.GroupShuffleMode;
import org.openapitools.client.model.PlayQueueUpdateReason;
import org.openapitools.client.model.SyncPlayQueueItem;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class PlayQueueUpdate.
 */
@JsonPropertyOrder({
  PlayQueueUpdate.JSON_PROPERTY_REASON,
  PlayQueueUpdate.JSON_PROPERTY_LAST_UPDATE,
  PlayQueueUpdate.JSON_PROPERTY_PLAYLIST,
  PlayQueueUpdate.JSON_PROPERTY_PLAYING_ITEM_INDEX,
  PlayQueueUpdate.JSON_PROPERTY_START_POSITION_TICKS,
  PlayQueueUpdate.JSON_PROPERTY_IS_PLAYING,
  PlayQueueUpdate.JSON_PROPERTY_SHUFFLE_MODE,
  PlayQueueUpdate.JSON_PROPERTY_REPEAT_MODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:58.939457991Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class PlayQueueUpdate {
  public static final String JSON_PROPERTY_REASON = "Reason";
  @javax.annotation.Nullable
  private PlayQueueUpdateReason reason;

  public static final String JSON_PROPERTY_LAST_UPDATE = "LastUpdate";
  @javax.annotation.Nullable
  private OffsetDateTime lastUpdate;

  public static final String JSON_PROPERTY_PLAYLIST = "Playlist";
  @javax.annotation.Nullable
  private List<SyncPlayQueueItem> playlist = new ArrayList<>();

  public static final String JSON_PROPERTY_PLAYING_ITEM_INDEX = "PlayingItemIndex";
  @javax.annotation.Nullable
  private Integer playingItemIndex;

  public static final String JSON_PROPERTY_START_POSITION_TICKS = "StartPositionTicks";
  @javax.annotation.Nullable
  private Long startPositionTicks;

  public static final String JSON_PROPERTY_IS_PLAYING = "IsPlaying";
  @javax.annotation.Nullable
  private Boolean isPlaying;

  public static final String JSON_PROPERTY_SHUFFLE_MODE = "ShuffleMode";
  @javax.annotation.Nullable
  private GroupShuffleMode shuffleMode;

  public static final String JSON_PROPERTY_REPEAT_MODE = "RepeatMode";
  @javax.annotation.Nullable
  private GroupRepeatMode repeatMode;

  public PlayQueueUpdate() { 
  }

  public PlayQueueUpdate reason(@javax.annotation.Nullable PlayQueueUpdateReason reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Gets the request type that originated this update.
   * @return reason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PlayQueueUpdateReason getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReason(@javax.annotation.Nullable PlayQueueUpdateReason reason) {
    this.reason = reason;
  }


  public PlayQueueUpdate lastUpdate(@javax.annotation.Nullable OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Gets the UTC time of the last change to the playing queue.
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }


  @JsonProperty(JSON_PROPERTY_LAST_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastUpdate(@javax.annotation.Nullable OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public PlayQueueUpdate playlist(@javax.annotation.Nullable List<SyncPlayQueueItem> playlist) {
    this.playlist = playlist;
    return this;
  }

  public PlayQueueUpdate addPlaylistItem(SyncPlayQueueItem playlistItem) {
    if (this.playlist == null) {
      this.playlist = new ArrayList<>();
    }
    this.playlist.add(playlistItem);
    return this;
  }

  /**
   * Gets the playlist.
   * @return playlist
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAYLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<SyncPlayQueueItem> getPlaylist() {
    return playlist;
  }


  @JsonProperty(JSON_PROPERTY_PLAYLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlaylist(@javax.annotation.Nullable List<SyncPlayQueueItem> playlist) {
    this.playlist = playlist;
  }


  public PlayQueueUpdate playingItemIndex(@javax.annotation.Nullable Integer playingItemIndex) {
    this.playingItemIndex = playingItemIndex;
    return this;
  }

  /**
   * Gets the playing item index in the playlist.
   * @return playingItemIndex
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAYING_ITEM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPlayingItemIndex() {
    return playingItemIndex;
  }


  @JsonProperty(JSON_PROPERTY_PLAYING_ITEM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlayingItemIndex(@javax.annotation.Nullable Integer playingItemIndex) {
    this.playingItemIndex = playingItemIndex;
  }


  public PlayQueueUpdate startPositionTicks(@javax.annotation.Nullable Long startPositionTicks) {
    this.startPositionTicks = startPositionTicks;
    return this;
  }

  /**
   * Gets the start position ticks.
   * @return startPositionTicks
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_POSITION_TICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getStartPositionTicks() {
    return startPositionTicks;
  }


  @JsonProperty(JSON_PROPERTY_START_POSITION_TICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartPositionTicks(@javax.annotation.Nullable Long startPositionTicks) {
    this.startPositionTicks = startPositionTicks;
  }


  public PlayQueueUpdate isPlaying(@javax.annotation.Nullable Boolean isPlaying) {
    this.isPlaying = isPlaying;
    return this;
  }

  /**
   * Gets a value indicating whether the current item is playing.
   * @return isPlaying
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_PLAYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsPlaying() {
    return isPlaying;
  }


  @JsonProperty(JSON_PROPERTY_IS_PLAYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsPlaying(@javax.annotation.Nullable Boolean isPlaying) {
    this.isPlaying = isPlaying;
  }


  public PlayQueueUpdate shuffleMode(@javax.annotation.Nullable GroupShuffleMode shuffleMode) {
    this.shuffleMode = shuffleMode;
    return this;
  }

  /**
   * Gets the shuffle mode.
   * @return shuffleMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHUFFLE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public GroupShuffleMode getShuffleMode() {
    return shuffleMode;
  }


  @JsonProperty(JSON_PROPERTY_SHUFFLE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShuffleMode(@javax.annotation.Nullable GroupShuffleMode shuffleMode) {
    this.shuffleMode = shuffleMode;
  }


  public PlayQueueUpdate repeatMode(@javax.annotation.Nullable GroupRepeatMode repeatMode) {
    this.repeatMode = repeatMode;
    return this;
  }

  /**
   * Gets the repeat mode.
   * @return repeatMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPEAT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public GroupRepeatMode getRepeatMode() {
    return repeatMode;
  }


  @JsonProperty(JSON_PROPERTY_REPEAT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepeatMode(@javax.annotation.Nullable GroupRepeatMode repeatMode) {
    this.repeatMode = repeatMode;
  }


  /**
   * Return true if this PlayQueueUpdate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayQueueUpdate playQueueUpdate = (PlayQueueUpdate) o;
    return Objects.equals(this.reason, playQueueUpdate.reason) &&
        Objects.equals(this.lastUpdate, playQueueUpdate.lastUpdate) &&
        Objects.equals(this.playlist, playQueueUpdate.playlist) &&
        Objects.equals(this.playingItemIndex, playQueueUpdate.playingItemIndex) &&
        Objects.equals(this.startPositionTicks, playQueueUpdate.startPositionTicks) &&
        Objects.equals(this.isPlaying, playQueueUpdate.isPlaying) &&
        Objects.equals(this.shuffleMode, playQueueUpdate.shuffleMode) &&
        Objects.equals(this.repeatMode, playQueueUpdate.repeatMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, lastUpdate, playlist, playingItemIndex, startPositionTicks, isPlaying, shuffleMode, repeatMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayQueueUpdate {\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    playlist: ").append(toIndentedString(playlist)).append("\n");
    sb.append("    playingItemIndex: ").append(toIndentedString(playingItemIndex)).append("\n");
    sb.append("    startPositionTicks: ").append(toIndentedString(startPositionTicks)).append("\n");
    sb.append("    isPlaying: ").append(toIndentedString(isPlaying)).append("\n");
    sb.append("    shuffleMode: ").append(toIndentedString(shuffleMode)).append("\n");
    sb.append("    repeatMode: ").append(toIndentedString(repeatMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Reason` to the URL query string
    if (getReason() != null) {
      joiner.add(String.format("%sReason%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getReason()))));
    }

    // add `LastUpdate` to the URL query string
    if (getLastUpdate() != null) {
      joiner.add(String.format("%sLastUpdate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLastUpdate()))));
    }

    // add `Playlist` to the URL query string
    if (getPlaylist() != null) {
      for (int i = 0; i < getPlaylist().size(); i++) {
        if (getPlaylist().get(i) != null) {
          joiner.add(getPlaylist().get(i).toUrlQueryString(String.format("%sPlaylist%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `PlayingItemIndex` to the URL query string
    if (getPlayingItemIndex() != null) {
      joiner.add(String.format("%sPlayingItemIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPlayingItemIndex()))));
    }

    // add `StartPositionTicks` to the URL query string
    if (getStartPositionTicks() != null) {
      joiner.add(String.format("%sStartPositionTicks%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getStartPositionTicks()))));
    }

    // add `IsPlaying` to the URL query string
    if (getIsPlaying() != null) {
      joiner.add(String.format("%sIsPlaying%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsPlaying()))));
    }

    // add `ShuffleMode` to the URL query string
    if (getShuffleMode() != null) {
      joiner.add(String.format("%sShuffleMode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getShuffleMode()))));
    }

    // add `RepeatMode` to the URL query string
    if (getRepeatMode() != null) {
      joiner.add(String.format("%sRepeatMode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRepeatMode()))));
    }

    return joiner.toString();
  }
}

