/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import java.io.File;
import org.openapitools.client.model.ProblemDetails;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:40.061690683Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class DlnaServerApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DlnaServerApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DlnaServerApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getConnectionManager(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getConnectionManagerWithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getConnectionManagerWithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConnectionManagerRequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConnectionManager", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConnectionManagerRequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getConnectionManager");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ConnectionManager"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getConnectionManager2(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getConnectionManager2WithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getConnectionManager2WithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConnectionManager2RequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConnectionManager2", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConnectionManager2RequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getConnectionManager2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getConnectionManager3(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getConnectionManager3WithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getConnectionManager3WithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConnectionManager3RequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConnectionManager3", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConnectionManager3RequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getConnectionManager3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna content directory xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getContentDirectory(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getContentDirectoryWithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna content directory xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getContentDirectoryWithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getContentDirectoryRequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getContentDirectory", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getContentDirectoryRequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getContentDirectory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ContentDirectory"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna content directory xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getContentDirectory2(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getContentDirectory2WithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna content directory xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getContentDirectory2WithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getContentDirectory2RequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getContentDirectory2", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getContentDirectory2RequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getContentDirectory2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna content directory xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getContentDirectory3(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getContentDirectory3WithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna content directory xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getContentDirectory3WithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getContentDirectory3RequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getContentDirectory3", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getContentDirectory3RequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getContentDirectory3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get Description Xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getDescriptionXml(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getDescriptionXmlWithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Get Description Xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getDescriptionXmlWithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDescriptionXmlRequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDescriptionXml", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDescriptionXmlRequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getDescriptionXml");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/description"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get Description Xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getDescriptionXml2(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getDescriptionXml2WithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Get Description Xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getDescriptionXml2WithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDescriptionXml2RequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDescriptionXml2", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDescriptionXml2RequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getDescriptionXml2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/description.xml"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a server icon.
   * 
   * @param fileName The icon filename. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getIcon(String fileName) throws ApiException {
    ApiResponse<File> localVarResponse = getIconWithHttpInfo(fileName);
    return localVarResponse.getData();
  }

  /**
   * Gets a server icon.
   * 
   * @param fileName The icon filename. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getIconWithHttpInfo(String fileName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIconRequestBuilder(fileName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIcon", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIconRequestBuilder(String fileName) throws ApiException {
    // verify the required parameter 'fileName' is set
    if (fileName == null) {
      throw new ApiException(400, "Missing the required parameter 'fileName' when calling getIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/icons/{fileName}"
        .replace("{fileName}", ApiClient.urlEncode(fileName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a server icon.
   * 
   * @param serverId Server UUID. (required)
   * @param fileName The icon filename. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getIconId(String serverId, String fileName) throws ApiException {
    ApiResponse<File> localVarResponse = getIconIdWithHttpInfo(serverId, fileName);
    return localVarResponse.getData();
  }

  /**
   * Gets a server icon.
   * 
   * @param serverId Server UUID. (required)
   * @param fileName The icon filename. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getIconIdWithHttpInfo(String serverId, String fileName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIconIdRequestBuilder(serverId, fileName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIconId", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIconIdRequestBuilder(String serverId, String fileName) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getIconId");
    }
    // verify the required parameter 'fileName' is set
    if (fileName == null) {
      throw new ApiException(400, "Missing the required parameter 'fileName' when calling getIconId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/icons/{fileName}"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()))
        .replace("{fileName}", ApiClient.urlEncode(fileName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getMediaReceiverRegistrar(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getMediaReceiverRegistrarWithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getMediaReceiverRegistrarWithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMediaReceiverRegistrarRequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMediaReceiverRegistrar", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMediaReceiverRegistrarRequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getMediaReceiverRegistrar");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getMediaReceiverRegistrar2(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getMediaReceiverRegistrar2WithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getMediaReceiverRegistrar2WithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMediaReceiverRegistrar2RequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMediaReceiverRegistrar2", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMediaReceiverRegistrar2RequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getMediaReceiverRegistrar2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getMediaReceiverRegistrar3(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = getMediaReceiverRegistrar3WithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Gets Dlna media receiver registrar xml.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getMediaReceiverRegistrar3WithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMediaReceiverRegistrar3RequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMediaReceiverRegistrar3", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMediaReceiverRegistrar3RequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling getMediaReceiverRegistrar3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Process a connection manager control request.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File processConnectionManagerControlRequest(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = processConnectionManagerControlRequestWithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Process a connection manager control request.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> processConnectionManagerControlRequestWithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processConnectionManagerControlRequestRequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processConnectionManagerControlRequest", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processConnectionManagerControlRequestRequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling processConnectionManagerControlRequest");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ConnectionManager/Control"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Process a content directory control request.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File processContentDirectoryControlRequest(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = processContentDirectoryControlRequestWithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Process a content directory control request.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> processContentDirectoryControlRequestWithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processContentDirectoryControlRequestRequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processContentDirectoryControlRequest", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processContentDirectoryControlRequestRequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling processContentDirectoryControlRequest");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/ContentDirectory/Control"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Process a media receiver registrar control request.
   * 
   * @param serverId Server UUID. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File processMediaReceiverRegistrarControlRequest(String serverId) throws ApiException {
    ApiResponse<File> localVarResponse = processMediaReceiverRegistrarControlRequestWithHttpInfo(serverId);
    return localVarResponse.getData();
  }

  /**
   * Process a media receiver registrar control request.
   * 
   * @param serverId Server UUID. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> processMediaReceiverRegistrarControlRequestWithHttpInfo(String serverId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = processMediaReceiverRegistrarControlRequestRequestBuilder(serverId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("processMediaReceiverRegistrarControlRequest", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder processMediaReceiverRegistrarControlRequestRequestBuilder(String serverId) throws ApiException {
    // verify the required parameter 'serverId' is set
    if (serverId == null) {
      throw new ApiException(400, "Missing the required parameter 'serverId' when calling processMediaReceiverRegistrarControlRequest");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/Control"
        .replace("{serverId}", ApiClient.urlEncode(serverId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/xml");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
