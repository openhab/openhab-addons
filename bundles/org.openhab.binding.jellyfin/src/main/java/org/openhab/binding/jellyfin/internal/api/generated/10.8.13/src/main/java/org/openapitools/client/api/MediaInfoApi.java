/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import java.io.File;
import org.openapitools.client.model.LiveStreamResponse;
import org.openapitools.client.model.OpenLiveStreamDto;
import org.openapitools.client.model.PlaybackInfoDto;
import org.openapitools.client.model.PlaybackInfoResponse;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class MediaInfoApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public MediaInfoApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MediaInfoApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Closes a media source.
   * 
   * @param liveStreamId The livestream id. (required)
   * @throws ApiException if fails to make API call
   */
  public void closeLiveStream(String liveStreamId) throws ApiException {
    closeLiveStreamWithHttpInfo(liveStreamId);
  }

  /**
   * Closes a media source.
   * 
   * @param liveStreamId The livestream id. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> closeLiveStreamWithHttpInfo(String liveStreamId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = closeLiveStreamRequestBuilder(liveStreamId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("closeLiveStream", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder closeLiveStreamRequestBuilder(String liveStreamId) throws ApiException {
    // verify the required parameter 'liveStreamId' is set
    if (liveStreamId == null) {
      throw new ApiException(400, "Missing the required parameter 'liveStreamId' when calling closeLiveStream");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/LiveStreams/Close";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "liveStreamId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("liveStreamId", liveStreamId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Tests the network with a request with the size of the bitrate.
   * 
   * @param size The bitrate. Defaults to 102400. (optional, default to 102400)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getBitrateTestBytes(Integer size) throws ApiException {
    ApiResponse<File> localVarResponse = getBitrateTestBytesWithHttpInfo(size);
    return localVarResponse.getData();
  }

  /**
   * Tests the network with a request with the size of the bitrate.
   * 
   * @param size The bitrate. Defaults to 102400. (optional, default to 102400)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getBitrateTestBytesWithHttpInfo(Integer size) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBitrateTestBytesRequestBuilder(size);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBitrateTestBytes", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBitrateTestBytesRequestBuilder(Integer size) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Playback/BitrateTest";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/octet-stream");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets live playback media info for an item.
   * 
   * @param itemId The item id. (required)
   * @param userId The user id. (required)
   * @return PlaybackInfoResponse
   * @throws ApiException if fails to make API call
   */
  public PlaybackInfoResponse getPlaybackInfo(UUID itemId, UUID userId) throws ApiException {
    ApiResponse<PlaybackInfoResponse> localVarResponse = getPlaybackInfoWithHttpInfo(itemId, userId);
    return localVarResponse.getData();
  }

  /**
   * Gets live playback media info for an item.
   * 
   * @param itemId The item id. (required)
   * @param userId The user id. (required)
   * @return ApiResponse&lt;PlaybackInfoResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PlaybackInfoResponse> getPlaybackInfoWithHttpInfo(UUID itemId, UUID userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlaybackInfoRequestBuilder(itemId, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlaybackInfo", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PlaybackInfoResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PlaybackInfoResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PlaybackInfoResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlaybackInfoRequestBuilder(UUID itemId, UUID userId) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getPlaybackInfo");
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getPlaybackInfo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/PlaybackInfo"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets live playback media info for an item.
   * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
   * @param itemId The item id. (required)
   * @param userId The user id. (optional)
   * @param maxStreamingBitrate The maximum streaming bitrate. (optional)
   * @param startTimeTicks The start time in ticks. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param maxAudioChannels The maximum number of audio channels. (optional)
   * @param mediaSourceId The media source id. (optional)
   * @param liveStreamId The livestream id. (optional)
   * @param autoOpenLiveStream Whether to auto open the livestream. (optional)
   * @param enableDirectPlay Whether to enable direct play. Default: true. (optional)
   * @param enableDirectStream Whether to enable direct stream. Default: true. (optional)
   * @param enableTranscoding Whether to enable transcoding. Default: true. (optional)
   * @param allowVideoStreamCopy Whether to allow to copy the video stream. Default: true. (optional)
   * @param allowAudioStreamCopy Whether to allow to copy the audio stream. Default: true. (optional)
   * @param playbackInfoDto The playback info. (optional)
   * @return PlaybackInfoResponse
   * @throws ApiException if fails to make API call
   */
  public PlaybackInfoResponse getPostedPlaybackInfo(UUID itemId, UUID userId, Integer maxStreamingBitrate, Long startTimeTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer maxAudioChannels, String mediaSourceId, String liveStreamId, Boolean autoOpenLiveStream, Boolean enableDirectPlay, Boolean enableDirectStream, Boolean enableTranscoding, Boolean allowVideoStreamCopy, Boolean allowAudioStreamCopy, PlaybackInfoDto playbackInfoDto) throws ApiException {
    ApiResponse<PlaybackInfoResponse> localVarResponse = getPostedPlaybackInfoWithHttpInfo(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto);
    return localVarResponse.getData();
  }

  /**
   * Gets live playback media info for an item.
   * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
   * @param itemId The item id. (required)
   * @param userId The user id. (optional)
   * @param maxStreamingBitrate The maximum streaming bitrate. (optional)
   * @param startTimeTicks The start time in ticks. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param maxAudioChannels The maximum number of audio channels. (optional)
   * @param mediaSourceId The media source id. (optional)
   * @param liveStreamId The livestream id. (optional)
   * @param autoOpenLiveStream Whether to auto open the livestream. (optional)
   * @param enableDirectPlay Whether to enable direct play. Default: true. (optional)
   * @param enableDirectStream Whether to enable direct stream. Default: true. (optional)
   * @param enableTranscoding Whether to enable transcoding. Default: true. (optional)
   * @param allowVideoStreamCopy Whether to allow to copy the video stream. Default: true. (optional)
   * @param allowAudioStreamCopy Whether to allow to copy the audio stream. Default: true. (optional)
   * @param playbackInfoDto The playback info. (optional)
   * @return ApiResponse&lt;PlaybackInfoResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PlaybackInfoResponse> getPostedPlaybackInfoWithHttpInfo(UUID itemId, UUID userId, Integer maxStreamingBitrate, Long startTimeTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer maxAudioChannels, String mediaSourceId, String liveStreamId, Boolean autoOpenLiveStream, Boolean enableDirectPlay, Boolean enableDirectStream, Boolean enableTranscoding, Boolean allowVideoStreamCopy, Boolean allowAudioStreamCopy, PlaybackInfoDto playbackInfoDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPostedPlaybackInfoRequestBuilder(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPostedPlaybackInfo", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PlaybackInfoResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PlaybackInfoResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PlaybackInfoResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPostedPlaybackInfoRequestBuilder(UUID itemId, UUID userId, Integer maxStreamingBitrate, Long startTimeTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer maxAudioChannels, String mediaSourceId, String liveStreamId, Boolean autoOpenLiveStream, Boolean enableDirectPlay, Boolean enableDirectStream, Boolean enableTranscoding, Boolean allowVideoStreamCopy, Boolean allowAudioStreamCopy, PlaybackInfoDto playbackInfoDto) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getPostedPlaybackInfo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/PlaybackInfo"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "maxStreamingBitrate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxStreamingBitrate", maxStreamingBitrate));
    localVarQueryParameterBaseName = "startTimeTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimeTicks", startTimeTicks));
    localVarQueryParameterBaseName = "audioStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("audioStreamIndex", audioStreamIndex));
    localVarQueryParameterBaseName = "subtitleStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subtitleStreamIndex", subtitleStreamIndex));
    localVarQueryParameterBaseName = "maxAudioChannels";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxAudioChannels", maxAudioChannels));
    localVarQueryParameterBaseName = "mediaSourceId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mediaSourceId", mediaSourceId));
    localVarQueryParameterBaseName = "liveStreamId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("liveStreamId", liveStreamId));
    localVarQueryParameterBaseName = "autoOpenLiveStream";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("autoOpenLiveStream", autoOpenLiveStream));
    localVarQueryParameterBaseName = "enableDirectPlay";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableDirectPlay", enableDirectPlay));
    localVarQueryParameterBaseName = "enableDirectStream";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableDirectStream", enableDirectStream));
    localVarQueryParameterBaseName = "enableTranscoding";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableTranscoding", enableTranscoding));
    localVarQueryParameterBaseName = "allowVideoStreamCopy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allowVideoStreamCopy", allowVideoStreamCopy));
    localVarQueryParameterBaseName = "allowAudioStreamCopy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("allowAudioStreamCopy", allowAudioStreamCopy));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(playbackInfoDto);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Opens a media source.
   * 
   * @param openToken The open token. (optional)
   * @param userId The user id. (optional)
   * @param playSessionId The play session id. (optional)
   * @param maxStreamingBitrate The maximum streaming bitrate. (optional)
   * @param startTimeTicks The start time in ticks. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param maxAudioChannels The maximum number of audio channels. (optional)
   * @param itemId The item id. (optional)
   * @param enableDirectPlay Whether to enable direct play. Default: true. (optional)
   * @param enableDirectStream Whether to enable direct stream. Default: true. (optional)
   * @param openLiveStreamDto The open live stream dto. (optional)
   * @return LiveStreamResponse
   * @throws ApiException if fails to make API call
   */
  public LiveStreamResponse openLiveStream(String openToken, UUID userId, String playSessionId, Integer maxStreamingBitrate, Long startTimeTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer maxAudioChannels, UUID itemId, Boolean enableDirectPlay, Boolean enableDirectStream, OpenLiveStreamDto openLiveStreamDto) throws ApiException {
    ApiResponse<LiveStreamResponse> localVarResponse = openLiveStreamWithHttpInfo(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto);
    return localVarResponse.getData();
  }

  /**
   * Opens a media source.
   * 
   * @param openToken The open token. (optional)
   * @param userId The user id. (optional)
   * @param playSessionId The play session id. (optional)
   * @param maxStreamingBitrate The maximum streaming bitrate. (optional)
   * @param startTimeTicks The start time in ticks. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param maxAudioChannels The maximum number of audio channels. (optional)
   * @param itemId The item id. (optional)
   * @param enableDirectPlay Whether to enable direct play. Default: true. (optional)
   * @param enableDirectStream Whether to enable direct stream. Default: true. (optional)
   * @param openLiveStreamDto The open live stream dto. (optional)
   * @return ApiResponse&lt;LiveStreamResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LiveStreamResponse> openLiveStreamWithHttpInfo(String openToken, UUID userId, String playSessionId, Integer maxStreamingBitrate, Long startTimeTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer maxAudioChannels, UUID itemId, Boolean enableDirectPlay, Boolean enableDirectStream, OpenLiveStreamDto openLiveStreamDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = openLiveStreamRequestBuilder(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("openLiveStream", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<LiveStreamResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<LiveStreamResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<LiveStreamResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder openLiveStreamRequestBuilder(String openToken, UUID userId, String playSessionId, Integer maxStreamingBitrate, Long startTimeTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer maxAudioChannels, UUID itemId, Boolean enableDirectPlay, Boolean enableDirectStream, OpenLiveStreamDto openLiveStreamDto) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/LiveStreams/Open";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "openToken";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("openToken", openToken));
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "playSessionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playSessionId", playSessionId));
    localVarQueryParameterBaseName = "maxStreamingBitrate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxStreamingBitrate", maxStreamingBitrate));
    localVarQueryParameterBaseName = "startTimeTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTimeTicks", startTimeTicks));
    localVarQueryParameterBaseName = "audioStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("audioStreamIndex", audioStreamIndex));
    localVarQueryParameterBaseName = "subtitleStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subtitleStreamIndex", subtitleStreamIndex));
    localVarQueryParameterBaseName = "maxAudioChannels";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxAudioChannels", maxAudioChannels));
    localVarQueryParameterBaseName = "itemId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("itemId", itemId));
    localVarQueryParameterBaseName = "enableDirectPlay";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableDirectPlay", enableDirectPlay));
    localVarQueryParameterBaseName = "enableDirectStream";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableDirectStream", enableDirectStream));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openLiveStreamDto);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
