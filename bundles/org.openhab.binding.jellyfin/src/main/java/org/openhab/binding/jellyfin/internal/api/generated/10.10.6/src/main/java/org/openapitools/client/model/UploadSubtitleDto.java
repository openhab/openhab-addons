/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Upload subtitles dto.
 */
@JsonPropertyOrder({
  UploadSubtitleDto.JSON_PROPERTY_LANGUAGE,
  UploadSubtitleDto.JSON_PROPERTY_FORMAT,
  UploadSubtitleDto.JSON_PROPERTY_IS_FORCED,
  UploadSubtitleDto.JSON_PROPERTY_IS_HEARING_IMPAIRED,
  UploadSubtitleDto.JSON_PROPERTY_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:58.939457991Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class UploadSubtitleDto {
  public static final String JSON_PROPERTY_LANGUAGE = "Language";
  @javax.annotation.Nonnull
  private String language;

  public static final String JSON_PROPERTY_FORMAT = "Format";
  @javax.annotation.Nonnull
  private String format;

  public static final String JSON_PROPERTY_IS_FORCED = "IsForced";
  @javax.annotation.Nonnull
  private Boolean isForced;

  public static final String JSON_PROPERTY_IS_HEARING_IMPAIRED = "IsHearingImpaired";
  @javax.annotation.Nonnull
  private Boolean isHearingImpaired;

  public static final String JSON_PROPERTY_DATA = "Data";
  @javax.annotation.Nonnull
  private String data;

  public UploadSubtitleDto() { 
  }

  public UploadSubtitleDto language(@javax.annotation.Nonnull String language) {
    this.language = language;
    return this;
  }

  /**
   * Gets or sets the subtitle language.
   * @return language
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLanguage(@javax.annotation.Nonnull String language) {
    this.language = language;
  }


  public UploadSubtitleDto format(@javax.annotation.Nonnull String format) {
    this.format = format;
    return this;
  }

  /**
   * Gets or sets the subtitle format.
   * @return format
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getFormat() {
    return format;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFormat(@javax.annotation.Nonnull String format) {
    this.format = format;
  }


  public UploadSubtitleDto isForced(@javax.annotation.Nonnull Boolean isForced) {
    this.isForced = isForced;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the subtitle is forced.
   * @return isForced
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_FORCED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getIsForced() {
    return isForced;
  }


  @JsonProperty(JSON_PROPERTY_IS_FORCED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsForced(@javax.annotation.Nonnull Boolean isForced) {
    this.isForced = isForced;
  }


  public UploadSubtitleDto isHearingImpaired(@javax.annotation.Nonnull Boolean isHearingImpaired) {
    this.isHearingImpaired = isHearingImpaired;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the subtitle is for hearing impaired.
   * @return isHearingImpaired
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_HEARING_IMPAIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getIsHearingImpaired() {
    return isHearingImpaired;
  }


  @JsonProperty(JSON_PROPERTY_IS_HEARING_IMPAIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsHearingImpaired(@javax.annotation.Nonnull Boolean isHearingImpaired) {
    this.isHearingImpaired = isHearingImpaired;
  }


  public UploadSubtitleDto data(@javax.annotation.Nonnull String data) {
    this.data = data;
    return this;
  }

  /**
   * Gets or sets the subtitle data.
   * @return data
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(@javax.annotation.Nonnull String data) {
    this.data = data;
  }


  /**
   * Return true if this UploadSubtitleDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadSubtitleDto uploadSubtitleDto = (UploadSubtitleDto) o;
    return Objects.equals(this.language, uploadSubtitleDto.language) &&
        Objects.equals(this.format, uploadSubtitleDto.format) &&
        Objects.equals(this.isForced, uploadSubtitleDto.isForced) &&
        Objects.equals(this.isHearingImpaired, uploadSubtitleDto.isHearingImpaired) &&
        Objects.equals(this.data, uploadSubtitleDto.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, format, isForced, isHearingImpaired, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadSubtitleDto {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    isForced: ").append(toIndentedString(isForced)).append("\n");
    sb.append("    isHearingImpaired: ").append(toIndentedString(isHearingImpaired)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Language` to the URL query string
    if (getLanguage() != null) {
      joiner.add(String.format("%sLanguage%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLanguage()))));
    }

    // add `Format` to the URL query string
    if (getFormat() != null) {
      joiner.add(String.format("%sFormat%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFormat()))));
    }

    // add `IsForced` to the URL query string
    if (getIsForced() != null) {
      joiner.add(String.format("%sIsForced%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsForced()))));
    }

    // add `IsHearingImpaired` to the URL query string
    if (getIsHearingImpaired() != null) {
      joiner.add(String.format("%sIsHearingImpaired%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsHearingImpaired()))));
    }

    // add `Data` to the URL query string
    if (getData() != null) {
      joiner.add(String.format("%sData%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getData()))));
    }

    return joiner.toString();
  }
}

