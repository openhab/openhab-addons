/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeinterlaceMethod;
import org.openapitools.client.model.DownMixStereoAlgorithms;
import org.openapitools.client.model.EncoderPreset;
import org.openapitools.client.model.HardwareAccelerationType;
import org.openapitools.client.model.TonemappingAlgorithm;
import org.openapitools.client.model.TonemappingMode;
import org.openapitools.client.model.TonemappingRange;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class EncodingOptions.
 */
@JsonPropertyOrder({
  EncodingOptions.JSON_PROPERTY_ENCODING_THREAD_COUNT,
  EncodingOptions.JSON_PROPERTY_TRANSCODING_TEMP_PATH,
  EncodingOptions.JSON_PROPERTY_FALLBACK_FONT_PATH,
  EncodingOptions.JSON_PROPERTY_ENABLE_FALLBACK_FONT,
  EncodingOptions.JSON_PROPERTY_ENABLE_AUDIO_VBR,
  EncodingOptions.JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST,
  EncodingOptions.JSON_PROPERTY_DOWN_MIX_STEREO_ALGORITHM,
  EncodingOptions.JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE,
  EncodingOptions.JSON_PROPERTY_ENABLE_THROTTLING,
  EncodingOptions.JSON_PROPERTY_THROTTLE_DELAY_SECONDS,
  EncodingOptions.JSON_PROPERTY_ENABLE_SEGMENT_DELETION,
  EncodingOptions.JSON_PROPERTY_SEGMENT_KEEP_SECONDS,
  EncodingOptions.JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE,
  EncodingOptions.JSON_PROPERTY_ENCODER_APP_PATH,
  EncodingOptions.JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY,
  EncodingOptions.JSON_PROPERTY_VAAPI_DEVICE,
  EncodingOptions.JSON_PROPERTY_QSV_DEVICE,
  EncodingOptions.JSON_PROPERTY_ENABLE_TONEMAPPING,
  EncodingOptions.JSON_PROPERTY_ENABLE_VPP_TONEMAPPING,
  EncodingOptions.JSON_PROPERTY_ENABLE_VIDEO_TOOLBOX_TONEMAPPING,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_ALGORITHM,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_MODE,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_RANGE,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_DESAT,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_PEAK,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_PARAM,
  EncodingOptions.JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS,
  EncodingOptions.JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST,
  EncodingOptions.JSON_PROPERTY_H264_CRF,
  EncodingOptions.JSON_PROPERTY_H265_CRF,
  EncodingOptions.JSON_PROPERTY_ENCODER_PRESET,
  EncodingOptions.JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE,
  EncodingOptions.JSON_PROPERTY_DEINTERLACE_METHOD,
  EncodingOptions.JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC,
  EncodingOptions.JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9,
  EncodingOptions.JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC_REXT,
  EncodingOptions.JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH12_HEVC_REXT,
  EncodingOptions.JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER,
  EncodingOptions.JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER,
  EncodingOptions.JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER,
  EncodingOptions.JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER,
  EncodingOptions.JSON_PROPERTY_ENABLE_HARDWARE_ENCODING,
  EncodingOptions.JSON_PROPERTY_ALLOW_HEVC_ENCODING,
  EncodingOptions.JSON_PROPERTY_ALLOW_AV1_ENCODING,
  EncodingOptions.JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION,
  EncodingOptions.JSON_PROPERTY_HARDWARE_DECODING_CODECS,
  EncodingOptions.JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class EncodingOptions {
  public static final String JSON_PROPERTY_ENCODING_THREAD_COUNT = "EncodingThreadCount";
  @javax.annotation.Nullable
  private Integer encodingThreadCount;

  public static final String JSON_PROPERTY_TRANSCODING_TEMP_PATH = "TranscodingTempPath";
  private JsonNullable<String> transcodingTempPath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FALLBACK_FONT_PATH = "FallbackFontPath";
  private JsonNullable<String> fallbackFontPath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENABLE_FALLBACK_FONT = "EnableFallbackFont";
  @javax.annotation.Nullable
  private Boolean enableFallbackFont;

  public static final String JSON_PROPERTY_ENABLE_AUDIO_VBR = "EnableAudioVbr";
  @javax.annotation.Nullable
  private Boolean enableAudioVbr;

  public static final String JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST = "DownMixAudioBoost";
  @javax.annotation.Nullable
  private Double downMixAudioBoost;

  public static final String JSON_PROPERTY_DOWN_MIX_STEREO_ALGORITHM = "DownMixStereoAlgorithm";
  @javax.annotation.Nullable
  private DownMixStereoAlgorithms downMixStereoAlgorithm;

  public static final String JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE = "MaxMuxingQueueSize";
  @javax.annotation.Nullable
  private Integer maxMuxingQueueSize;

  public static final String JSON_PROPERTY_ENABLE_THROTTLING = "EnableThrottling";
  @javax.annotation.Nullable
  private Boolean enableThrottling;

  public static final String JSON_PROPERTY_THROTTLE_DELAY_SECONDS = "ThrottleDelaySeconds";
  @javax.annotation.Nullable
  private Integer throttleDelaySeconds;

  public static final String JSON_PROPERTY_ENABLE_SEGMENT_DELETION = "EnableSegmentDeletion";
  @javax.annotation.Nullable
  private Boolean enableSegmentDeletion;

  public static final String JSON_PROPERTY_SEGMENT_KEEP_SECONDS = "SegmentKeepSeconds";
  @javax.annotation.Nullable
  private Integer segmentKeepSeconds;

  public static final String JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE = "HardwareAccelerationType";
  @javax.annotation.Nullable
  private HardwareAccelerationType hardwareAccelerationType;

  public static final String JSON_PROPERTY_ENCODER_APP_PATH = "EncoderAppPath";
  private JsonNullable<String> encoderAppPath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY = "EncoderAppPathDisplay";
  private JsonNullable<String> encoderAppPathDisplay = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VAAPI_DEVICE = "VaapiDevice";
  private JsonNullable<String> vaapiDevice = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_QSV_DEVICE = "QsvDevice";
  private JsonNullable<String> qsvDevice = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENABLE_TONEMAPPING = "EnableTonemapping";
  @javax.annotation.Nullable
  private Boolean enableTonemapping;

  public static final String JSON_PROPERTY_ENABLE_VPP_TONEMAPPING = "EnableVppTonemapping";
  @javax.annotation.Nullable
  private Boolean enableVppTonemapping;

  public static final String JSON_PROPERTY_ENABLE_VIDEO_TOOLBOX_TONEMAPPING = "EnableVideoToolboxTonemapping";
  @javax.annotation.Nullable
  private Boolean enableVideoToolboxTonemapping;

  public static final String JSON_PROPERTY_TONEMAPPING_ALGORITHM = "TonemappingAlgorithm";
  @javax.annotation.Nullable
  private TonemappingAlgorithm tonemappingAlgorithm;

  public static final String JSON_PROPERTY_TONEMAPPING_MODE = "TonemappingMode";
  @javax.annotation.Nullable
  private TonemappingMode tonemappingMode;

  public static final String JSON_PROPERTY_TONEMAPPING_RANGE = "TonemappingRange";
  @javax.annotation.Nullable
  private TonemappingRange tonemappingRange;

  public static final String JSON_PROPERTY_TONEMAPPING_DESAT = "TonemappingDesat";
  @javax.annotation.Nullable
  private Double tonemappingDesat;

  public static final String JSON_PROPERTY_TONEMAPPING_PEAK = "TonemappingPeak";
  @javax.annotation.Nullable
  private Double tonemappingPeak;

  public static final String JSON_PROPERTY_TONEMAPPING_PARAM = "TonemappingParam";
  @javax.annotation.Nullable
  private Double tonemappingParam;

  public static final String JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS = "VppTonemappingBrightness";
  @javax.annotation.Nullable
  private Double vppTonemappingBrightness;

  public static final String JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST = "VppTonemappingContrast";
  @javax.annotation.Nullable
  private Double vppTonemappingContrast;

  public static final String JSON_PROPERTY_H264_CRF = "H264Crf";
  @javax.annotation.Nullable
  private Integer h264Crf;

  public static final String JSON_PROPERTY_H265_CRF = "H265Crf";
  @javax.annotation.Nullable
  private Integer h265Crf;

  public static final String JSON_PROPERTY_ENCODER_PRESET = "EncoderPreset";
  private JsonNullable<EncoderPreset> encoderPreset = JsonNullable.<EncoderPreset>undefined();

  public static final String JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE = "DeinterlaceDoubleRate";
  @javax.annotation.Nullable
  private Boolean deinterlaceDoubleRate;

  public static final String JSON_PROPERTY_DEINTERLACE_METHOD = "DeinterlaceMethod";
  @javax.annotation.Nullable
  private DeinterlaceMethod deinterlaceMethod;

  public static final String JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC = "EnableDecodingColorDepth10Hevc";
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth10Hevc;

  public static final String JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9 = "EnableDecodingColorDepth10Vp9";
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth10Vp9;

  public static final String JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC_REXT = "EnableDecodingColorDepth10HevcRext";
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth10HevcRext;

  public static final String JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH12_HEVC_REXT = "EnableDecodingColorDepth12HevcRext";
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth12HevcRext;

  public static final String JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER = "EnableEnhancedNvdecDecoder";
  @javax.annotation.Nullable
  private Boolean enableEnhancedNvdecDecoder;

  public static final String JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER = "PreferSystemNativeHwDecoder";
  @javax.annotation.Nullable
  private Boolean preferSystemNativeHwDecoder;

  public static final String JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER = "EnableIntelLowPowerH264HwEncoder";
  @javax.annotation.Nullable
  private Boolean enableIntelLowPowerH264HwEncoder;

  public static final String JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER = "EnableIntelLowPowerHevcHwEncoder";
  @javax.annotation.Nullable
  private Boolean enableIntelLowPowerHevcHwEncoder;

  public static final String JSON_PROPERTY_ENABLE_HARDWARE_ENCODING = "EnableHardwareEncoding";
  @javax.annotation.Nullable
  private Boolean enableHardwareEncoding;

  public static final String JSON_PROPERTY_ALLOW_HEVC_ENCODING = "AllowHevcEncoding";
  @javax.annotation.Nullable
  private Boolean allowHevcEncoding;

  public static final String JSON_PROPERTY_ALLOW_AV1_ENCODING = "AllowAv1Encoding";
  @javax.annotation.Nullable
  private Boolean allowAv1Encoding;

  public static final String JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION = "EnableSubtitleExtraction";
  @javax.annotation.Nullable
  private Boolean enableSubtitleExtraction;

  public static final String JSON_PROPERTY_HARDWARE_DECODING_CODECS = "HardwareDecodingCodecs";
  private JsonNullable<List<String>> hardwareDecodingCodecs = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS = "AllowOnDemandMetadataBasedKeyframeExtractionForExtensions";
  private JsonNullable<List<String>> allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>undefined();

  public EncodingOptions() { 
  }

  public EncodingOptions encodingThreadCount(@javax.annotation.Nullable Integer encodingThreadCount) {
    this.encodingThreadCount = encodingThreadCount;
    return this;
  }

  /**
   * Gets or sets the thread count used for encoding.
   * @return encodingThreadCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCODING_THREAD_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getEncodingThreadCount() {
    return encodingThreadCount;
  }


  @JsonProperty(JSON_PROPERTY_ENCODING_THREAD_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncodingThreadCount(@javax.annotation.Nullable Integer encodingThreadCount) {
    this.encodingThreadCount = encodingThreadCount;
  }


  public EncodingOptions transcodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = JsonNullable.<String>of(transcodingTempPath);
    return this;
  }

  /**
   * Gets or sets the temporary transcoding path.
   * @return transcodingTempPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTranscodingTempPath() {
        return transcodingTempPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSCODING_TEMP_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTranscodingTempPath_JsonNullable() {
    return transcodingTempPath;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSCODING_TEMP_PATH)
  public void setTranscodingTempPath_JsonNullable(JsonNullable<String> transcodingTempPath) {
    this.transcodingTempPath = transcodingTempPath;
  }

  public void setTranscodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = JsonNullable.<String>of(transcodingTempPath);
  }


  public EncodingOptions fallbackFontPath(@javax.annotation.Nullable String fallbackFontPath) {
    this.fallbackFontPath = JsonNullable.<String>of(fallbackFontPath);
    return this;
  }

  /**
   * Gets or sets the path to the fallback font.
   * @return fallbackFontPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getFallbackFontPath() {
        return fallbackFontPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FALLBACK_FONT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFallbackFontPath_JsonNullable() {
    return fallbackFontPath;
  }
  
  @JsonProperty(JSON_PROPERTY_FALLBACK_FONT_PATH)
  public void setFallbackFontPath_JsonNullable(JsonNullable<String> fallbackFontPath) {
    this.fallbackFontPath = fallbackFontPath;
  }

  public void setFallbackFontPath(@javax.annotation.Nullable String fallbackFontPath) {
    this.fallbackFontPath = JsonNullable.<String>of(fallbackFontPath);
  }


  public EncodingOptions enableFallbackFont(@javax.annotation.Nullable Boolean enableFallbackFont) {
    this.enableFallbackFont = enableFallbackFont;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to use the fallback font.
   * @return enableFallbackFont
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_FALLBACK_FONT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableFallbackFont() {
    return enableFallbackFont;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_FALLBACK_FONT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableFallbackFont(@javax.annotation.Nullable Boolean enableFallbackFont) {
    this.enableFallbackFont = enableFallbackFont;
  }


  public EncodingOptions enableAudioVbr(@javax.annotation.Nullable Boolean enableAudioVbr) {
    this.enableAudioVbr = enableAudioVbr;
    return this;
  }

  /**
   * Gets or sets a value indicating whether audio VBR is enabled.
   * @return enableAudioVbr
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_AUDIO_VBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableAudioVbr() {
    return enableAudioVbr;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_AUDIO_VBR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableAudioVbr(@javax.annotation.Nullable Boolean enableAudioVbr) {
    this.enableAudioVbr = enableAudioVbr;
  }


  public EncodingOptions downMixAudioBoost(@javax.annotation.Nullable Double downMixAudioBoost) {
    this.downMixAudioBoost = downMixAudioBoost;
    return this;
  }

  /**
   * Gets or sets the audio boost applied when downmixing audio.
   * @return downMixAudioBoost
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getDownMixAudioBoost() {
    return downMixAudioBoost;
  }


  @JsonProperty(JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownMixAudioBoost(@javax.annotation.Nullable Double downMixAudioBoost) {
    this.downMixAudioBoost = downMixAudioBoost;
  }


  public EncodingOptions downMixStereoAlgorithm(@javax.annotation.Nullable DownMixStereoAlgorithms downMixStereoAlgorithm) {
    this.downMixStereoAlgorithm = downMixStereoAlgorithm;
    return this;
  }

  /**
   * Gets or sets the algorithm used for downmixing audio to stereo.
   * @return downMixStereoAlgorithm
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWN_MIX_STEREO_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DownMixStereoAlgorithms getDownMixStereoAlgorithm() {
    return downMixStereoAlgorithm;
  }


  @JsonProperty(JSON_PROPERTY_DOWN_MIX_STEREO_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownMixStereoAlgorithm(@javax.annotation.Nullable DownMixStereoAlgorithms downMixStereoAlgorithm) {
    this.downMixStereoAlgorithm = downMixStereoAlgorithm;
  }


  public EncodingOptions maxMuxingQueueSize(@javax.annotation.Nullable Integer maxMuxingQueueSize) {
    this.maxMuxingQueueSize = maxMuxingQueueSize;
    return this;
  }

  /**
   * Gets or sets the maximum size of the muxing queue.
   * @return maxMuxingQueueSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMaxMuxingQueueSize() {
    return maxMuxingQueueSize;
  }


  @JsonProperty(JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxMuxingQueueSize(@javax.annotation.Nullable Integer maxMuxingQueueSize) {
    this.maxMuxingQueueSize = maxMuxingQueueSize;
  }


  public EncodingOptions enableThrottling(@javax.annotation.Nullable Boolean enableThrottling) {
    this.enableThrottling = enableThrottling;
    return this;
  }

  /**
   * Gets or sets a value indicating whether throttling is enabled.
   * @return enableThrottling
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_THROTTLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableThrottling() {
    return enableThrottling;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_THROTTLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableThrottling(@javax.annotation.Nullable Boolean enableThrottling) {
    this.enableThrottling = enableThrottling;
  }


  public EncodingOptions throttleDelaySeconds(@javax.annotation.Nullable Integer throttleDelaySeconds) {
    this.throttleDelaySeconds = throttleDelaySeconds;
    return this;
  }

  /**
   * Gets or sets the delay after which throttling happens.
   * @return throttleDelaySeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THROTTLE_DELAY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getThrottleDelaySeconds() {
    return throttleDelaySeconds;
  }


  @JsonProperty(JSON_PROPERTY_THROTTLE_DELAY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrottleDelaySeconds(@javax.annotation.Nullable Integer throttleDelaySeconds) {
    this.throttleDelaySeconds = throttleDelaySeconds;
  }


  public EncodingOptions enableSegmentDeletion(@javax.annotation.Nullable Boolean enableSegmentDeletion) {
    this.enableSegmentDeletion = enableSegmentDeletion;
    return this;
  }

  /**
   * Gets or sets a value indicating whether segment deletion is enabled.
   * @return enableSegmentDeletion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SEGMENT_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableSegmentDeletion() {
    return enableSegmentDeletion;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SEGMENT_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSegmentDeletion(@javax.annotation.Nullable Boolean enableSegmentDeletion) {
    this.enableSegmentDeletion = enableSegmentDeletion;
  }


  public EncodingOptions segmentKeepSeconds(@javax.annotation.Nullable Integer segmentKeepSeconds) {
    this.segmentKeepSeconds = segmentKeepSeconds;
    return this;
  }

  /**
   * Gets or sets seconds for which segments should be kept before being deleted.
   * @return segmentKeepSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEGMENT_KEEP_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getSegmentKeepSeconds() {
    return segmentKeepSeconds;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_KEEP_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSegmentKeepSeconds(@javax.annotation.Nullable Integer segmentKeepSeconds) {
    this.segmentKeepSeconds = segmentKeepSeconds;
  }


  public EncodingOptions hardwareAccelerationType(@javax.annotation.Nullable HardwareAccelerationType hardwareAccelerationType) {
    this.hardwareAccelerationType = hardwareAccelerationType;
    return this;
  }

  /**
   * Gets or sets the hardware acceleration type.
   * @return hardwareAccelerationType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public HardwareAccelerationType getHardwareAccelerationType() {
    return hardwareAccelerationType;
  }


  @JsonProperty(JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHardwareAccelerationType(@javax.annotation.Nullable HardwareAccelerationType hardwareAccelerationType) {
    this.hardwareAccelerationType = hardwareAccelerationType;
  }


  public EncodingOptions encoderAppPath(@javax.annotation.Nullable String encoderAppPath) {
    this.encoderAppPath = JsonNullable.<String>of(encoderAppPath);
    return this;
  }

  /**
   * Gets or sets the FFmpeg path as set by the user via the UI.
   * @return encoderAppPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getEncoderAppPath() {
        return encoderAppPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEncoderAppPath_JsonNullable() {
    return encoderAppPath;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH)
  public void setEncoderAppPath_JsonNullable(JsonNullable<String> encoderAppPath) {
    this.encoderAppPath = encoderAppPath;
  }

  public void setEncoderAppPath(@javax.annotation.Nullable String encoderAppPath) {
    this.encoderAppPath = JsonNullable.<String>of(encoderAppPath);
  }


  public EncodingOptions encoderAppPathDisplay(@javax.annotation.Nullable String encoderAppPathDisplay) {
    this.encoderAppPathDisplay = JsonNullable.<String>of(encoderAppPathDisplay);
    return this;
  }

  /**
   * Gets or sets the current FFmpeg path being used by the system and displayed on the transcode page.
   * @return encoderAppPathDisplay
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getEncoderAppPathDisplay() {
        return encoderAppPathDisplay.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEncoderAppPathDisplay_JsonNullable() {
    return encoderAppPathDisplay;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY)
  public void setEncoderAppPathDisplay_JsonNullable(JsonNullable<String> encoderAppPathDisplay) {
    this.encoderAppPathDisplay = encoderAppPathDisplay;
  }

  public void setEncoderAppPathDisplay(@javax.annotation.Nullable String encoderAppPathDisplay) {
    this.encoderAppPathDisplay = JsonNullable.<String>of(encoderAppPathDisplay);
  }


  public EncodingOptions vaapiDevice(@javax.annotation.Nullable String vaapiDevice) {
    this.vaapiDevice = JsonNullable.<String>of(vaapiDevice);
    return this;
  }

  /**
   * Gets or sets the VA-API device.
   * @return vaapiDevice
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getVaapiDevice() {
        return vaapiDevice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VAAPI_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getVaapiDevice_JsonNullable() {
    return vaapiDevice;
  }
  
  @JsonProperty(JSON_PROPERTY_VAAPI_DEVICE)
  public void setVaapiDevice_JsonNullable(JsonNullable<String> vaapiDevice) {
    this.vaapiDevice = vaapiDevice;
  }

  public void setVaapiDevice(@javax.annotation.Nullable String vaapiDevice) {
    this.vaapiDevice = JsonNullable.<String>of(vaapiDevice);
  }


  public EncodingOptions qsvDevice(@javax.annotation.Nullable String qsvDevice) {
    this.qsvDevice = JsonNullable.<String>of(qsvDevice);
    return this;
  }

  /**
   * Gets or sets the QSV device.
   * @return qsvDevice
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getQsvDevice() {
        return qsvDevice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_QSV_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getQsvDevice_JsonNullable() {
    return qsvDevice;
  }
  
  @JsonProperty(JSON_PROPERTY_QSV_DEVICE)
  public void setQsvDevice_JsonNullable(JsonNullable<String> qsvDevice) {
    this.qsvDevice = qsvDevice;
  }

  public void setQsvDevice(@javax.annotation.Nullable String qsvDevice) {
    this.qsvDevice = JsonNullable.<String>of(qsvDevice);
  }


  public EncodingOptions enableTonemapping(@javax.annotation.Nullable Boolean enableTonemapping) {
    this.enableTonemapping = enableTonemapping;
    return this;
  }

  /**
   * Gets or sets a value indicating whether tonemapping is enabled.
   * @return enableTonemapping
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableTonemapping() {
    return enableTonemapping;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableTonemapping(@javax.annotation.Nullable Boolean enableTonemapping) {
    this.enableTonemapping = enableTonemapping;
  }


  public EncodingOptions enableVppTonemapping(@javax.annotation.Nullable Boolean enableVppTonemapping) {
    this.enableVppTonemapping = enableVppTonemapping;
    return this;
  }

  /**
   * Gets or sets a value indicating whether VPP tonemapping is enabled.
   * @return enableVppTonemapping
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_VPP_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableVppTonemapping() {
    return enableVppTonemapping;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_VPP_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableVppTonemapping(@javax.annotation.Nullable Boolean enableVppTonemapping) {
    this.enableVppTonemapping = enableVppTonemapping;
  }


  public EncodingOptions enableVideoToolboxTonemapping(@javax.annotation.Nullable Boolean enableVideoToolboxTonemapping) {
    this.enableVideoToolboxTonemapping = enableVideoToolboxTonemapping;
    return this;
  }

  /**
   * Gets or sets a value indicating whether videotoolbox tonemapping is enabled.
   * @return enableVideoToolboxTonemapping
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_VIDEO_TOOLBOX_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableVideoToolboxTonemapping() {
    return enableVideoToolboxTonemapping;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_VIDEO_TOOLBOX_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableVideoToolboxTonemapping(@javax.annotation.Nullable Boolean enableVideoToolboxTonemapping) {
    this.enableVideoToolboxTonemapping = enableVideoToolboxTonemapping;
  }


  public EncodingOptions tonemappingAlgorithm(@javax.annotation.Nullable TonemappingAlgorithm tonemappingAlgorithm) {
    this.tonemappingAlgorithm = tonemappingAlgorithm;
    return this;
  }

  /**
   * Gets or sets the tone-mapping algorithm.
   * @return tonemappingAlgorithm
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TonemappingAlgorithm getTonemappingAlgorithm() {
    return tonemappingAlgorithm;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingAlgorithm(@javax.annotation.Nullable TonemappingAlgorithm tonemappingAlgorithm) {
    this.tonemappingAlgorithm = tonemappingAlgorithm;
  }


  public EncodingOptions tonemappingMode(@javax.annotation.Nullable TonemappingMode tonemappingMode) {
    this.tonemappingMode = tonemappingMode;
    return this;
  }

  /**
   * Gets or sets the tone-mapping mode.
   * @return tonemappingMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TonemappingMode getTonemappingMode() {
    return tonemappingMode;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingMode(@javax.annotation.Nullable TonemappingMode tonemappingMode) {
    this.tonemappingMode = tonemappingMode;
  }


  public EncodingOptions tonemappingRange(@javax.annotation.Nullable TonemappingRange tonemappingRange) {
    this.tonemappingRange = tonemappingRange;
    return this;
  }

  /**
   * Gets or sets the tone-mapping range.
   * @return tonemappingRange
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TonemappingRange getTonemappingRange() {
    return tonemappingRange;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingRange(@javax.annotation.Nullable TonemappingRange tonemappingRange) {
    this.tonemappingRange = tonemappingRange;
  }


  public EncodingOptions tonemappingDesat(@javax.annotation.Nullable Double tonemappingDesat) {
    this.tonemappingDesat = tonemappingDesat;
    return this;
  }

  /**
   * Gets or sets the tone-mapping desaturation.
   * @return tonemappingDesat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_DESAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getTonemappingDesat() {
    return tonemappingDesat;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_DESAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingDesat(@javax.annotation.Nullable Double tonemappingDesat) {
    this.tonemappingDesat = tonemappingDesat;
  }


  public EncodingOptions tonemappingPeak(@javax.annotation.Nullable Double tonemappingPeak) {
    this.tonemappingPeak = tonemappingPeak;
    return this;
  }

  /**
   * Gets or sets the tone-mapping peak.
   * @return tonemappingPeak
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PEAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getTonemappingPeak() {
    return tonemappingPeak;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PEAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingPeak(@javax.annotation.Nullable Double tonemappingPeak) {
    this.tonemappingPeak = tonemappingPeak;
  }


  public EncodingOptions tonemappingParam(@javax.annotation.Nullable Double tonemappingParam) {
    this.tonemappingParam = tonemappingParam;
    return this;
  }

  /**
   * Gets or sets the tone-mapping parameters.
   * @return tonemappingParam
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PARAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getTonemappingParam() {
    return tonemappingParam;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PARAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingParam(@javax.annotation.Nullable Double tonemappingParam) {
    this.tonemappingParam = tonemappingParam;
  }


  public EncodingOptions vppTonemappingBrightness(@javax.annotation.Nullable Double vppTonemappingBrightness) {
    this.vppTonemappingBrightness = vppTonemappingBrightness;
    return this;
  }

  /**
   * Gets or sets the VPP tone-mapping brightness.
   * @return vppTonemappingBrightness
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getVppTonemappingBrightness() {
    return vppTonemappingBrightness;
  }


  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVppTonemappingBrightness(@javax.annotation.Nullable Double vppTonemappingBrightness) {
    this.vppTonemappingBrightness = vppTonemappingBrightness;
  }


  public EncodingOptions vppTonemappingContrast(@javax.annotation.Nullable Double vppTonemappingContrast) {
    this.vppTonemappingContrast = vppTonemappingContrast;
    return this;
  }

  /**
   * Gets or sets the VPP tone-mapping contrast.
   * @return vppTonemappingContrast
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getVppTonemappingContrast() {
    return vppTonemappingContrast;
  }


  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVppTonemappingContrast(@javax.annotation.Nullable Double vppTonemappingContrast) {
    this.vppTonemappingContrast = vppTonemappingContrast;
  }


  public EncodingOptions h264Crf(@javax.annotation.Nullable Integer h264Crf) {
    this.h264Crf = h264Crf;
    return this;
  }

  /**
   * Gets or sets the H264 CRF.
   * @return h264Crf
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_H264_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getH264Crf() {
    return h264Crf;
  }


  @JsonProperty(JSON_PROPERTY_H264_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setH264Crf(@javax.annotation.Nullable Integer h264Crf) {
    this.h264Crf = h264Crf;
  }


  public EncodingOptions h265Crf(@javax.annotation.Nullable Integer h265Crf) {
    this.h265Crf = h265Crf;
    return this;
  }

  /**
   * Gets or sets the H265 CRF.
   * @return h265Crf
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_H265_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getH265Crf() {
    return h265Crf;
  }


  @JsonProperty(JSON_PROPERTY_H265_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setH265Crf(@javax.annotation.Nullable Integer h265Crf) {
    this.h265Crf = h265Crf;
  }


  public EncodingOptions encoderPreset(@javax.annotation.Nullable EncoderPreset encoderPreset) {
    this.encoderPreset = JsonNullable.<EncoderPreset>of(encoderPreset);
    return this;
  }

  /**
   * Gets or sets the encoder preset.
   * @return encoderPreset
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public EncoderPreset getEncoderPreset() {
        return encoderPreset.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_PRESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<EncoderPreset> getEncoderPreset_JsonNullable() {
    return encoderPreset;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_PRESET)
  public void setEncoderPreset_JsonNullable(JsonNullable<EncoderPreset> encoderPreset) {
    this.encoderPreset = encoderPreset;
  }

  public void setEncoderPreset(@javax.annotation.Nullable EncoderPreset encoderPreset) {
    this.encoderPreset = JsonNullable.<EncoderPreset>of(encoderPreset);
  }


  public EncodingOptions deinterlaceDoubleRate(@javax.annotation.Nullable Boolean deinterlaceDoubleRate) {
    this.deinterlaceDoubleRate = deinterlaceDoubleRate;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the framerate is doubled when deinterlacing.
   * @return deinterlaceDoubleRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDeinterlaceDoubleRate() {
    return deinterlaceDoubleRate;
  }


  @JsonProperty(JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeinterlaceDoubleRate(@javax.annotation.Nullable Boolean deinterlaceDoubleRate) {
    this.deinterlaceDoubleRate = deinterlaceDoubleRate;
  }


  public EncodingOptions deinterlaceMethod(@javax.annotation.Nullable DeinterlaceMethod deinterlaceMethod) {
    this.deinterlaceMethod = deinterlaceMethod;
    return this;
  }

  /**
   * Gets or sets the deinterlace method.
   * @return deinterlaceMethod
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEINTERLACE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DeinterlaceMethod getDeinterlaceMethod() {
    return deinterlaceMethod;
  }


  @JsonProperty(JSON_PROPERTY_DEINTERLACE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeinterlaceMethod(@javax.annotation.Nullable DeinterlaceMethod deinterlaceMethod) {
    this.deinterlaceMethod = deinterlaceMethod;
  }


  public EncodingOptions enableDecodingColorDepth10Hevc(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Hevc) {
    this.enableDecodingColorDepth10Hevc = enableDecodingColorDepth10Hevc;
    return this;
  }

  /**
   * Gets or sets a value indicating whether 10bit HEVC decoding is enabled.
   * @return enableDecodingColorDepth10Hevc
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableDecodingColorDepth10Hevc() {
    return enableDecodingColorDepth10Hevc;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDecodingColorDepth10Hevc(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Hevc) {
    this.enableDecodingColorDepth10Hevc = enableDecodingColorDepth10Hevc;
  }


  public EncodingOptions enableDecodingColorDepth10Vp9(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Vp9) {
    this.enableDecodingColorDepth10Vp9 = enableDecodingColorDepth10Vp9;
    return this;
  }

  /**
   * Gets or sets a value indicating whether 10bit VP9 decoding is enabled.
   * @return enableDecodingColorDepth10Vp9
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableDecodingColorDepth10Vp9() {
    return enableDecodingColorDepth10Vp9;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDecodingColorDepth10Vp9(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Vp9) {
    this.enableDecodingColorDepth10Vp9 = enableDecodingColorDepth10Vp9;
  }


  public EncodingOptions enableDecodingColorDepth10HevcRext(@javax.annotation.Nullable Boolean enableDecodingColorDepth10HevcRext) {
    this.enableDecodingColorDepth10HevcRext = enableDecodingColorDepth10HevcRext;
    return this;
  }

  /**
   * Gets or sets a value indicating whether 8/10bit HEVC RExt decoding is enabled.
   * @return enableDecodingColorDepth10HevcRext
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC_REXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableDecodingColorDepth10HevcRext() {
    return enableDecodingColorDepth10HevcRext;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC_REXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDecodingColorDepth10HevcRext(@javax.annotation.Nullable Boolean enableDecodingColorDepth10HevcRext) {
    this.enableDecodingColorDepth10HevcRext = enableDecodingColorDepth10HevcRext;
  }


  public EncodingOptions enableDecodingColorDepth12HevcRext(@javax.annotation.Nullable Boolean enableDecodingColorDepth12HevcRext) {
    this.enableDecodingColorDepth12HevcRext = enableDecodingColorDepth12HevcRext;
    return this;
  }

  /**
   * Gets or sets a value indicating whether 12bit HEVC RExt decoding is enabled.
   * @return enableDecodingColorDepth12HevcRext
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH12_HEVC_REXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableDecodingColorDepth12HevcRext() {
    return enableDecodingColorDepth12HevcRext;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH12_HEVC_REXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDecodingColorDepth12HevcRext(@javax.annotation.Nullable Boolean enableDecodingColorDepth12HevcRext) {
    this.enableDecodingColorDepth12HevcRext = enableDecodingColorDepth12HevcRext;
  }


  public EncodingOptions enableEnhancedNvdecDecoder(@javax.annotation.Nullable Boolean enableEnhancedNvdecDecoder) {
    this.enableEnhancedNvdecDecoder = enableEnhancedNvdecDecoder;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the enhanced NVDEC is enabled.
   * @return enableEnhancedNvdecDecoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableEnhancedNvdecDecoder() {
    return enableEnhancedNvdecDecoder;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableEnhancedNvdecDecoder(@javax.annotation.Nullable Boolean enableEnhancedNvdecDecoder) {
    this.enableEnhancedNvdecDecoder = enableEnhancedNvdecDecoder;
  }


  public EncodingOptions preferSystemNativeHwDecoder(@javax.annotation.Nullable Boolean preferSystemNativeHwDecoder) {
    this.preferSystemNativeHwDecoder = preferSystemNativeHwDecoder;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the system native hardware decoder should be used.
   * @return preferSystemNativeHwDecoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPreferSystemNativeHwDecoder() {
    return preferSystemNativeHwDecoder;
  }


  @JsonProperty(JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreferSystemNativeHwDecoder(@javax.annotation.Nullable Boolean preferSystemNativeHwDecoder) {
    this.preferSystemNativeHwDecoder = preferSystemNativeHwDecoder;
  }


  public EncodingOptions enableIntelLowPowerH264HwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerH264HwEncoder) {
    this.enableIntelLowPowerH264HwEncoder = enableIntelLowPowerH264HwEncoder;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the Intel H264 low-power hardware encoder should be used.
   * @return enableIntelLowPowerH264HwEncoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIntelLowPowerH264HwEncoder() {
    return enableIntelLowPowerH264HwEncoder;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIntelLowPowerH264HwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerH264HwEncoder) {
    this.enableIntelLowPowerH264HwEncoder = enableIntelLowPowerH264HwEncoder;
  }


  public EncodingOptions enableIntelLowPowerHevcHwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerHevcHwEncoder) {
    this.enableIntelLowPowerHevcHwEncoder = enableIntelLowPowerHevcHwEncoder;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the Intel HEVC low-power hardware encoder should be used.
   * @return enableIntelLowPowerHevcHwEncoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIntelLowPowerHevcHwEncoder() {
    return enableIntelLowPowerHevcHwEncoder;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIntelLowPowerHevcHwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerHevcHwEncoder) {
    this.enableIntelLowPowerHevcHwEncoder = enableIntelLowPowerHevcHwEncoder;
  }


  public EncodingOptions enableHardwareEncoding(@javax.annotation.Nullable Boolean enableHardwareEncoding) {
    this.enableHardwareEncoding = enableHardwareEncoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether hardware encoding is enabled.
   * @return enableHardwareEncoding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_HARDWARE_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableHardwareEncoding() {
    return enableHardwareEncoding;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_HARDWARE_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableHardwareEncoding(@javax.annotation.Nullable Boolean enableHardwareEncoding) {
    this.enableHardwareEncoding = enableHardwareEncoding;
  }


  public EncodingOptions allowHevcEncoding(@javax.annotation.Nullable Boolean allowHevcEncoding) {
    this.allowHevcEncoding = allowHevcEncoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether HEVC encoding is enabled.
   * @return allowHevcEncoding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_HEVC_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAllowHevcEncoding() {
    return allowHevcEncoding;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_HEVC_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowHevcEncoding(@javax.annotation.Nullable Boolean allowHevcEncoding) {
    this.allowHevcEncoding = allowHevcEncoding;
  }


  public EncodingOptions allowAv1Encoding(@javax.annotation.Nullable Boolean allowAv1Encoding) {
    this.allowAv1Encoding = allowAv1Encoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether AV1 encoding is enabled.
   * @return allowAv1Encoding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_AV1_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAllowAv1Encoding() {
    return allowAv1Encoding;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_AV1_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowAv1Encoding(@javax.annotation.Nullable Boolean allowAv1Encoding) {
    this.allowAv1Encoding = allowAv1Encoding;
  }


  public EncodingOptions enableSubtitleExtraction(@javax.annotation.Nullable Boolean enableSubtitleExtraction) {
    this.enableSubtitleExtraction = enableSubtitleExtraction;
    return this;
  }

  /**
   * Gets or sets a value indicating whether subtitle extraction is enabled.
   * @return enableSubtitleExtraction
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableSubtitleExtraction() {
    return enableSubtitleExtraction;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSubtitleExtraction(@javax.annotation.Nullable Boolean enableSubtitleExtraction) {
    this.enableSubtitleExtraction = enableSubtitleExtraction;
  }


  public EncodingOptions hardwareDecodingCodecs(@javax.annotation.Nullable List<String> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = JsonNullable.<List<String>>of(hardwareDecodingCodecs);
    return this;
  }

  public EncodingOptions addHardwareDecodingCodecsItem(String hardwareDecodingCodecsItem) {
    if (this.hardwareDecodingCodecs == null || !this.hardwareDecodingCodecs.isPresent()) {
      this.hardwareDecodingCodecs = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.hardwareDecodingCodecs.get().add(hardwareDecodingCodecsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Gets or sets the codecs hardware encoding is used for.
   * @return hardwareDecodingCodecs
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getHardwareDecodingCodecs() {
        return hardwareDecodingCodecs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HARDWARE_DECODING_CODECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getHardwareDecodingCodecs_JsonNullable() {
    return hardwareDecodingCodecs;
  }
  
  @JsonProperty(JSON_PROPERTY_HARDWARE_DECODING_CODECS)
  public void setHardwareDecodingCodecs_JsonNullable(JsonNullable<List<String>> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = hardwareDecodingCodecs;
  }

  public void setHardwareDecodingCodecs(@javax.annotation.Nullable List<String> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = JsonNullable.<List<String>>of(hardwareDecodingCodecs);
  }


  public EncodingOptions allowOnDemandMetadataBasedKeyframeExtractionForExtensions(@javax.annotation.Nullable List<String> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>of(allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
    return this;
  }

  public EncodingOptions addAllowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem(String allowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem) {
    if (this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions == null || !this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions.isPresent()) {
      this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions.get().add(allowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Gets or sets the file extensions on-demand metadata based keyframe extraction is enabled for.
   * @return allowOnDemandMetadataBasedKeyframeExtractionForExtensions
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions() {
        return allowOnDemandMetadataBasedKeyframeExtractionForExtensions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions_JsonNullable() {
    return allowOnDemandMetadataBasedKeyframeExtractionForExtensions;
  }
  
  @JsonProperty(JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS)
  public void setAllowOnDemandMetadataBasedKeyframeExtractionForExtensions_JsonNullable(JsonNullable<List<String>> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = allowOnDemandMetadataBasedKeyframeExtractionForExtensions;
  }

  public void setAllowOnDemandMetadataBasedKeyframeExtractionForExtensions(@javax.annotation.Nullable List<String> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>of(allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
  }


  /**
   * Return true if this EncodingOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncodingOptions encodingOptions = (EncodingOptions) o;
    return Objects.equals(this.encodingThreadCount, encodingOptions.encodingThreadCount) &&
        equalsNullable(this.transcodingTempPath, encodingOptions.transcodingTempPath) &&
        equalsNullable(this.fallbackFontPath, encodingOptions.fallbackFontPath) &&
        Objects.equals(this.enableFallbackFont, encodingOptions.enableFallbackFont) &&
        Objects.equals(this.enableAudioVbr, encodingOptions.enableAudioVbr) &&
        Objects.equals(this.downMixAudioBoost, encodingOptions.downMixAudioBoost) &&
        Objects.equals(this.downMixStereoAlgorithm, encodingOptions.downMixStereoAlgorithm) &&
        Objects.equals(this.maxMuxingQueueSize, encodingOptions.maxMuxingQueueSize) &&
        Objects.equals(this.enableThrottling, encodingOptions.enableThrottling) &&
        Objects.equals(this.throttleDelaySeconds, encodingOptions.throttleDelaySeconds) &&
        Objects.equals(this.enableSegmentDeletion, encodingOptions.enableSegmentDeletion) &&
        Objects.equals(this.segmentKeepSeconds, encodingOptions.segmentKeepSeconds) &&
        Objects.equals(this.hardwareAccelerationType, encodingOptions.hardwareAccelerationType) &&
        equalsNullable(this.encoderAppPath, encodingOptions.encoderAppPath) &&
        equalsNullable(this.encoderAppPathDisplay, encodingOptions.encoderAppPathDisplay) &&
        equalsNullable(this.vaapiDevice, encodingOptions.vaapiDevice) &&
        equalsNullable(this.qsvDevice, encodingOptions.qsvDevice) &&
        Objects.equals(this.enableTonemapping, encodingOptions.enableTonemapping) &&
        Objects.equals(this.enableVppTonemapping, encodingOptions.enableVppTonemapping) &&
        Objects.equals(this.enableVideoToolboxTonemapping, encodingOptions.enableVideoToolboxTonemapping) &&
        Objects.equals(this.tonemappingAlgorithm, encodingOptions.tonemappingAlgorithm) &&
        Objects.equals(this.tonemappingMode, encodingOptions.tonemappingMode) &&
        Objects.equals(this.tonemappingRange, encodingOptions.tonemappingRange) &&
        Objects.equals(this.tonemappingDesat, encodingOptions.tonemappingDesat) &&
        Objects.equals(this.tonemappingPeak, encodingOptions.tonemappingPeak) &&
        Objects.equals(this.tonemappingParam, encodingOptions.tonemappingParam) &&
        Objects.equals(this.vppTonemappingBrightness, encodingOptions.vppTonemappingBrightness) &&
        Objects.equals(this.vppTonemappingContrast, encodingOptions.vppTonemappingContrast) &&
        Objects.equals(this.h264Crf, encodingOptions.h264Crf) &&
        Objects.equals(this.h265Crf, encodingOptions.h265Crf) &&
        equalsNullable(this.encoderPreset, encodingOptions.encoderPreset) &&
        Objects.equals(this.deinterlaceDoubleRate, encodingOptions.deinterlaceDoubleRate) &&
        Objects.equals(this.deinterlaceMethod, encodingOptions.deinterlaceMethod) &&
        Objects.equals(this.enableDecodingColorDepth10Hevc, encodingOptions.enableDecodingColorDepth10Hevc) &&
        Objects.equals(this.enableDecodingColorDepth10Vp9, encodingOptions.enableDecodingColorDepth10Vp9) &&
        Objects.equals(this.enableDecodingColorDepth10HevcRext, encodingOptions.enableDecodingColorDepth10HevcRext) &&
        Objects.equals(this.enableDecodingColorDepth12HevcRext, encodingOptions.enableDecodingColorDepth12HevcRext) &&
        Objects.equals(this.enableEnhancedNvdecDecoder, encodingOptions.enableEnhancedNvdecDecoder) &&
        Objects.equals(this.preferSystemNativeHwDecoder, encodingOptions.preferSystemNativeHwDecoder) &&
        Objects.equals(this.enableIntelLowPowerH264HwEncoder, encodingOptions.enableIntelLowPowerH264HwEncoder) &&
        Objects.equals(this.enableIntelLowPowerHevcHwEncoder, encodingOptions.enableIntelLowPowerHevcHwEncoder) &&
        Objects.equals(this.enableHardwareEncoding, encodingOptions.enableHardwareEncoding) &&
        Objects.equals(this.allowHevcEncoding, encodingOptions.allowHevcEncoding) &&
        Objects.equals(this.allowAv1Encoding, encodingOptions.allowAv1Encoding) &&
        Objects.equals(this.enableSubtitleExtraction, encodingOptions.enableSubtitleExtraction) &&
        equalsNullable(this.hardwareDecodingCodecs, encodingOptions.hardwareDecodingCodecs) &&
        equalsNullable(this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions, encodingOptions.allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodingThreadCount, hashCodeNullable(transcodingTempPath), hashCodeNullable(fallbackFontPath), enableFallbackFont, enableAudioVbr, downMixAudioBoost, downMixStereoAlgorithm, maxMuxingQueueSize, enableThrottling, throttleDelaySeconds, enableSegmentDeletion, segmentKeepSeconds, hardwareAccelerationType, hashCodeNullable(encoderAppPath), hashCodeNullable(encoderAppPathDisplay), hashCodeNullable(vaapiDevice), hashCodeNullable(qsvDevice), enableTonemapping, enableVppTonemapping, enableVideoToolboxTonemapping, tonemappingAlgorithm, tonemappingMode, tonemappingRange, tonemappingDesat, tonemappingPeak, tonemappingParam, vppTonemappingBrightness, vppTonemappingContrast, h264Crf, h265Crf, hashCodeNullable(encoderPreset), deinterlaceDoubleRate, deinterlaceMethod, enableDecodingColorDepth10Hevc, enableDecodingColorDepth10Vp9, enableDecodingColorDepth10HevcRext, enableDecodingColorDepth12HevcRext, enableEnhancedNvdecDecoder, preferSystemNativeHwDecoder, enableIntelLowPowerH264HwEncoder, enableIntelLowPowerHevcHwEncoder, enableHardwareEncoding, allowHevcEncoding, allowAv1Encoding, enableSubtitleExtraction, hashCodeNullable(hardwareDecodingCodecs), hashCodeNullable(allowOnDemandMetadataBasedKeyframeExtractionForExtensions));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncodingOptions {\n");
    sb.append("    encodingThreadCount: ").append(toIndentedString(encodingThreadCount)).append("\n");
    sb.append("    transcodingTempPath: ").append(toIndentedString(transcodingTempPath)).append("\n");
    sb.append("    fallbackFontPath: ").append(toIndentedString(fallbackFontPath)).append("\n");
    sb.append("    enableFallbackFont: ").append(toIndentedString(enableFallbackFont)).append("\n");
    sb.append("    enableAudioVbr: ").append(toIndentedString(enableAudioVbr)).append("\n");
    sb.append("    downMixAudioBoost: ").append(toIndentedString(downMixAudioBoost)).append("\n");
    sb.append("    downMixStereoAlgorithm: ").append(toIndentedString(downMixStereoAlgorithm)).append("\n");
    sb.append("    maxMuxingQueueSize: ").append(toIndentedString(maxMuxingQueueSize)).append("\n");
    sb.append("    enableThrottling: ").append(toIndentedString(enableThrottling)).append("\n");
    sb.append("    throttleDelaySeconds: ").append(toIndentedString(throttleDelaySeconds)).append("\n");
    sb.append("    enableSegmentDeletion: ").append(toIndentedString(enableSegmentDeletion)).append("\n");
    sb.append("    segmentKeepSeconds: ").append(toIndentedString(segmentKeepSeconds)).append("\n");
    sb.append("    hardwareAccelerationType: ").append(toIndentedString(hardwareAccelerationType)).append("\n");
    sb.append("    encoderAppPath: ").append(toIndentedString(encoderAppPath)).append("\n");
    sb.append("    encoderAppPathDisplay: ").append(toIndentedString(encoderAppPathDisplay)).append("\n");
    sb.append("    vaapiDevice: ").append(toIndentedString(vaapiDevice)).append("\n");
    sb.append("    qsvDevice: ").append(toIndentedString(qsvDevice)).append("\n");
    sb.append("    enableTonemapping: ").append(toIndentedString(enableTonemapping)).append("\n");
    sb.append("    enableVppTonemapping: ").append(toIndentedString(enableVppTonemapping)).append("\n");
    sb.append("    enableVideoToolboxTonemapping: ").append(toIndentedString(enableVideoToolboxTonemapping)).append("\n");
    sb.append("    tonemappingAlgorithm: ").append(toIndentedString(tonemappingAlgorithm)).append("\n");
    sb.append("    tonemappingMode: ").append(toIndentedString(tonemappingMode)).append("\n");
    sb.append("    tonemappingRange: ").append(toIndentedString(tonemappingRange)).append("\n");
    sb.append("    tonemappingDesat: ").append(toIndentedString(tonemappingDesat)).append("\n");
    sb.append("    tonemappingPeak: ").append(toIndentedString(tonemappingPeak)).append("\n");
    sb.append("    tonemappingParam: ").append(toIndentedString(tonemappingParam)).append("\n");
    sb.append("    vppTonemappingBrightness: ").append(toIndentedString(vppTonemappingBrightness)).append("\n");
    sb.append("    vppTonemappingContrast: ").append(toIndentedString(vppTonemappingContrast)).append("\n");
    sb.append("    h264Crf: ").append(toIndentedString(h264Crf)).append("\n");
    sb.append("    h265Crf: ").append(toIndentedString(h265Crf)).append("\n");
    sb.append("    encoderPreset: ").append(toIndentedString(encoderPreset)).append("\n");
    sb.append("    deinterlaceDoubleRate: ").append(toIndentedString(deinterlaceDoubleRate)).append("\n");
    sb.append("    deinterlaceMethod: ").append(toIndentedString(deinterlaceMethod)).append("\n");
    sb.append("    enableDecodingColorDepth10Hevc: ").append(toIndentedString(enableDecodingColorDepth10Hevc)).append("\n");
    sb.append("    enableDecodingColorDepth10Vp9: ").append(toIndentedString(enableDecodingColorDepth10Vp9)).append("\n");
    sb.append("    enableDecodingColorDepth10HevcRext: ").append(toIndentedString(enableDecodingColorDepth10HevcRext)).append("\n");
    sb.append("    enableDecodingColorDepth12HevcRext: ").append(toIndentedString(enableDecodingColorDepth12HevcRext)).append("\n");
    sb.append("    enableEnhancedNvdecDecoder: ").append(toIndentedString(enableEnhancedNvdecDecoder)).append("\n");
    sb.append("    preferSystemNativeHwDecoder: ").append(toIndentedString(preferSystemNativeHwDecoder)).append("\n");
    sb.append("    enableIntelLowPowerH264HwEncoder: ").append(toIndentedString(enableIntelLowPowerH264HwEncoder)).append("\n");
    sb.append("    enableIntelLowPowerHevcHwEncoder: ").append(toIndentedString(enableIntelLowPowerHevcHwEncoder)).append("\n");
    sb.append("    enableHardwareEncoding: ").append(toIndentedString(enableHardwareEncoding)).append("\n");
    sb.append("    allowHevcEncoding: ").append(toIndentedString(allowHevcEncoding)).append("\n");
    sb.append("    allowAv1Encoding: ").append(toIndentedString(allowAv1Encoding)).append("\n");
    sb.append("    enableSubtitleExtraction: ").append(toIndentedString(enableSubtitleExtraction)).append("\n");
    sb.append("    hardwareDecodingCodecs: ").append(toIndentedString(hardwareDecodingCodecs)).append("\n");
    sb.append("    allowOnDemandMetadataBasedKeyframeExtractionForExtensions: ").append(toIndentedString(allowOnDemandMetadataBasedKeyframeExtractionForExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `EncodingThreadCount` to the URL query string
    if (getEncodingThreadCount() != null) {
      joiner.add(String.format("%sEncodingThreadCount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncodingThreadCount()))));
    }

    // add `TranscodingTempPath` to the URL query string
    if (getTranscodingTempPath() != null) {
      joiner.add(String.format("%sTranscodingTempPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTranscodingTempPath()))));
    }

    // add `FallbackFontPath` to the URL query string
    if (getFallbackFontPath() != null) {
      joiner.add(String.format("%sFallbackFontPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFallbackFontPath()))));
    }

    // add `EnableFallbackFont` to the URL query string
    if (getEnableFallbackFont() != null) {
      joiner.add(String.format("%sEnableFallbackFont%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableFallbackFont()))));
    }

    // add `EnableAudioVbr` to the URL query string
    if (getEnableAudioVbr() != null) {
      joiner.add(String.format("%sEnableAudioVbr%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableAudioVbr()))));
    }

    // add `DownMixAudioBoost` to the URL query string
    if (getDownMixAudioBoost() != null) {
      joiner.add(String.format("%sDownMixAudioBoost%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDownMixAudioBoost()))));
    }

    // add `DownMixStereoAlgorithm` to the URL query string
    if (getDownMixStereoAlgorithm() != null) {
      joiner.add(String.format("%sDownMixStereoAlgorithm%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDownMixStereoAlgorithm()))));
    }

    // add `MaxMuxingQueueSize` to the URL query string
    if (getMaxMuxingQueueSize() != null) {
      joiner.add(String.format("%sMaxMuxingQueueSize%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxMuxingQueueSize()))));
    }

    // add `EnableThrottling` to the URL query string
    if (getEnableThrottling() != null) {
      joiner.add(String.format("%sEnableThrottling%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableThrottling()))));
    }

    // add `ThrottleDelaySeconds` to the URL query string
    if (getThrottleDelaySeconds() != null) {
      joiner.add(String.format("%sThrottleDelaySeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getThrottleDelaySeconds()))));
    }

    // add `EnableSegmentDeletion` to the URL query string
    if (getEnableSegmentDeletion() != null) {
      joiner.add(String.format("%sEnableSegmentDeletion%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableSegmentDeletion()))));
    }

    // add `SegmentKeepSeconds` to the URL query string
    if (getSegmentKeepSeconds() != null) {
      joiner.add(String.format("%sSegmentKeepSeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSegmentKeepSeconds()))));
    }

    // add `HardwareAccelerationType` to the URL query string
    if (getHardwareAccelerationType() != null) {
      joiner.add(String.format("%sHardwareAccelerationType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHardwareAccelerationType()))));
    }

    // add `EncoderAppPath` to the URL query string
    if (getEncoderAppPath() != null) {
      joiner.add(String.format("%sEncoderAppPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderAppPath()))));
    }

    // add `EncoderAppPathDisplay` to the URL query string
    if (getEncoderAppPathDisplay() != null) {
      joiner.add(String.format("%sEncoderAppPathDisplay%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderAppPathDisplay()))));
    }

    // add `VaapiDevice` to the URL query string
    if (getVaapiDevice() != null) {
      joiner.add(String.format("%sVaapiDevice%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVaapiDevice()))));
    }

    // add `QsvDevice` to the URL query string
    if (getQsvDevice() != null) {
      joiner.add(String.format("%sQsvDevice%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getQsvDevice()))));
    }

    // add `EnableTonemapping` to the URL query string
    if (getEnableTonemapping() != null) {
      joiner.add(String.format("%sEnableTonemapping%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableTonemapping()))));
    }

    // add `EnableVppTonemapping` to the URL query string
    if (getEnableVppTonemapping() != null) {
      joiner.add(String.format("%sEnableVppTonemapping%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableVppTonemapping()))));
    }

    // add `EnableVideoToolboxTonemapping` to the URL query string
    if (getEnableVideoToolboxTonemapping() != null) {
      joiner.add(String.format("%sEnableVideoToolboxTonemapping%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableVideoToolboxTonemapping()))));
    }

    // add `TonemappingAlgorithm` to the URL query string
    if (getTonemappingAlgorithm() != null) {
      joiner.add(String.format("%sTonemappingAlgorithm%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingAlgorithm()))));
    }

    // add `TonemappingMode` to the URL query string
    if (getTonemappingMode() != null) {
      joiner.add(String.format("%sTonemappingMode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingMode()))));
    }

    // add `TonemappingRange` to the URL query string
    if (getTonemappingRange() != null) {
      joiner.add(String.format("%sTonemappingRange%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingRange()))));
    }

    // add `TonemappingDesat` to the URL query string
    if (getTonemappingDesat() != null) {
      joiner.add(String.format("%sTonemappingDesat%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingDesat()))));
    }

    // add `TonemappingPeak` to the URL query string
    if (getTonemappingPeak() != null) {
      joiner.add(String.format("%sTonemappingPeak%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingPeak()))));
    }

    // add `TonemappingParam` to the URL query string
    if (getTonemappingParam() != null) {
      joiner.add(String.format("%sTonemappingParam%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingParam()))));
    }

    // add `VppTonemappingBrightness` to the URL query string
    if (getVppTonemappingBrightness() != null) {
      joiner.add(String.format("%sVppTonemappingBrightness%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVppTonemappingBrightness()))));
    }

    // add `VppTonemappingContrast` to the URL query string
    if (getVppTonemappingContrast() != null) {
      joiner.add(String.format("%sVppTonemappingContrast%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVppTonemappingContrast()))));
    }

    // add `H264Crf` to the URL query string
    if (getH264Crf() != null) {
      joiner.add(String.format("%sH264Crf%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getH264Crf()))));
    }

    // add `H265Crf` to the URL query string
    if (getH265Crf() != null) {
      joiner.add(String.format("%sH265Crf%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getH265Crf()))));
    }

    // add `EncoderPreset` to the URL query string
    if (getEncoderPreset() != null) {
      joiner.add(String.format("%sEncoderPreset%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderPreset()))));
    }

    // add `DeinterlaceDoubleRate` to the URL query string
    if (getDeinterlaceDoubleRate() != null) {
      joiner.add(String.format("%sDeinterlaceDoubleRate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeinterlaceDoubleRate()))));
    }

    // add `DeinterlaceMethod` to the URL query string
    if (getDeinterlaceMethod() != null) {
      joiner.add(String.format("%sDeinterlaceMethod%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeinterlaceMethod()))));
    }

    // add `EnableDecodingColorDepth10Hevc` to the URL query string
    if (getEnableDecodingColorDepth10Hevc() != null) {
      joiner.add(String.format("%sEnableDecodingColorDepth10Hevc%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDecodingColorDepth10Hevc()))));
    }

    // add `EnableDecodingColorDepth10Vp9` to the URL query string
    if (getEnableDecodingColorDepth10Vp9() != null) {
      joiner.add(String.format("%sEnableDecodingColorDepth10Vp9%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDecodingColorDepth10Vp9()))));
    }

    // add `EnableDecodingColorDepth10HevcRext` to the URL query string
    if (getEnableDecodingColorDepth10HevcRext() != null) {
      joiner.add(String.format("%sEnableDecodingColorDepth10HevcRext%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDecodingColorDepth10HevcRext()))));
    }

    // add `EnableDecodingColorDepth12HevcRext` to the URL query string
    if (getEnableDecodingColorDepth12HevcRext() != null) {
      joiner.add(String.format("%sEnableDecodingColorDepth12HevcRext%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDecodingColorDepth12HevcRext()))));
    }

    // add `EnableEnhancedNvdecDecoder` to the URL query string
    if (getEnableEnhancedNvdecDecoder() != null) {
      joiner.add(String.format("%sEnableEnhancedNvdecDecoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableEnhancedNvdecDecoder()))));
    }

    // add `PreferSystemNativeHwDecoder` to the URL query string
    if (getPreferSystemNativeHwDecoder() != null) {
      joiner.add(String.format("%sPreferSystemNativeHwDecoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPreferSystemNativeHwDecoder()))));
    }

    // add `EnableIntelLowPowerH264HwEncoder` to the URL query string
    if (getEnableIntelLowPowerH264HwEncoder() != null) {
      joiner.add(String.format("%sEnableIntelLowPowerH264HwEncoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIntelLowPowerH264HwEncoder()))));
    }

    // add `EnableIntelLowPowerHevcHwEncoder` to the URL query string
    if (getEnableIntelLowPowerHevcHwEncoder() != null) {
      joiner.add(String.format("%sEnableIntelLowPowerHevcHwEncoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIntelLowPowerHevcHwEncoder()))));
    }

    // add `EnableHardwareEncoding` to the URL query string
    if (getEnableHardwareEncoding() != null) {
      joiner.add(String.format("%sEnableHardwareEncoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableHardwareEncoding()))));
    }

    // add `AllowHevcEncoding` to the URL query string
    if (getAllowHevcEncoding() != null) {
      joiner.add(String.format("%sAllowHevcEncoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAllowHevcEncoding()))));
    }

    // add `AllowAv1Encoding` to the URL query string
    if (getAllowAv1Encoding() != null) {
      joiner.add(String.format("%sAllowAv1Encoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAllowAv1Encoding()))));
    }

    // add `EnableSubtitleExtraction` to the URL query string
    if (getEnableSubtitleExtraction() != null) {
      joiner.add(String.format("%sEnableSubtitleExtraction%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableSubtitleExtraction()))));
    }

    // add `HardwareDecodingCodecs` to the URL query string
    if (getHardwareDecodingCodecs() != null) {
      for (int i = 0; i < getHardwareDecodingCodecs().size(); i++) {
        joiner.add(String.format("%sHardwareDecodingCodecs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getHardwareDecodingCodecs().get(i)))));
      }
    }

    // add `AllowOnDemandMetadataBasedKeyframeExtractionForExtensions` to the URL query string
    if (getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions() != null) {
      for (int i = 0; i < getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions().size(); i++) {
        joiner.add(String.format("%sAllowOnDemandMetadataBasedKeyframeExtractionForExtensions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions().get(i)))));
      }
    }

    return joiner.toString();
  }
}

