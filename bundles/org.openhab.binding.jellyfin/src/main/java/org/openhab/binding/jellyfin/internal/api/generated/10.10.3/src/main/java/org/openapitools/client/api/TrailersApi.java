/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.BaseItemKind;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.ItemFilter;
import org.openapitools.client.model.ItemSortBy;
import org.openapitools.client.model.LocationType;
import org.openapitools.client.model.MediaType;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SeriesStatus;
import org.openapitools.client.model.SortOrder;
import java.util.UUID;
import org.openapitools.client.model.VideoType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrailersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrailersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrailersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTrailers
     * @param userId The user id supplied as query parameter; this is required when not using an API key. (optional)
     * @param maxOfficialRating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param hasThemeSong Optional filter by items with theme songs. (optional)
     * @param hasThemeVideo Optional filter by items with theme videos. (optional)
     * @param hasSubtitles Optional filter by items with subtitles. (optional)
     * @param hasSpecialFeature Optional filter by items with special features. (optional)
     * @param hasTrailer Optional filter by items with trailers. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param parentIndexNumber Optional filter by parent index number. (optional)
     * @param hasParentalRating Optional filter by items that have or do not have a parental rating. (optional)
     * @param isHd Optional filter by items that are HD or not. (optional)
     * @param is4K Optional filter by items that are 4K or not. (optional)
     * @param locationTypes Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param excludeLocationTypes Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param isMissing Optional filter by items that are missing episodes or not. (optional)
     * @param isUnaired Optional filter by items that are unaired episodes or not. (optional)
     * @param minCommunityRating Optional filter by minimum community rating. (optional)
     * @param minCriticRating Optional filter by minimum critic rating. (optional)
     * @param minPremiereDate Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param minDateLastSaved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param minDateLastSavedForUser Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param maxPremiereDate Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param hasOverview Optional filter by items that have an overview or not. (optional)
     * @param hasImdbId Optional filter by items that have an IMDb id or not. (optional)
     * @param hasTmdbId Optional filter by items that have a TMDb id or not. (optional)
     * @param hasTvdbId Optional filter by items that have a TVDb id or not. (optional)
     * @param isMovie Optional filter for live tv movies. (optional)
     * @param isSeries Optional filter for live tv series. (optional)
     * @param isNews Optional filter for live tv news. (optional)
     * @param isKids Optional filter for live tv kids. (optional)
     * @param isSports Optional filter for live tv sports. (optional)
     * @param excludeItemIds Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param searchTerm Optional. Filter based on a search term. (optional)
     * @param sortOrder Sort Order - Ascending, Descending. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param excludeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param isFavorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param mediaTypes Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param imageTypes Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param isPlayed Optional filter by items that are played, or not. (optional)
     * @param genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param officialRatings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param enableUserData Optional, include user data. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param personIds Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param personTypes Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param excludeArtistIds Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param artistIds Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param albumArtistIds Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param contributingArtistIds Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param albumIds Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param videoTypes Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param minOfficialRating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param isLocked Optional filter by items that are locked. (optional)
     * @param isPlaceHolder Optional filter by items that are placeholders. (optional)
     * @param hasOfficialRating Optional filter by items that have official ratings. (optional)
     * @param collapseBoxSetItems Whether or not to hide items behind their boxsets. (optional)
     * @param minWidth Optional. Filter by the minimum width of the item. (optional)
     * @param minHeight Optional. Filter by the minimum height of the item. (optional)
     * @param maxWidth Optional. Filter by the maximum width of the item. (optional)
     * @param maxHeight Optional. Filter by the maximum height of the item. (optional)
     * @param is3D Optional filter by items that are 3D, or not. (optional)
     * @param seriesStatus Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param nameStartsWithOrGreater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param nameStartsWith Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param nameLessThan Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param studioIds Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param genreIds Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param enableTotalRecordCount Optional. Enable the total record count. (optional, default to true)
     * @param enableImages Optional, include image information in output. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailersCall(UUID userId, String maxOfficialRating, Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, UUID adjacentTo, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, Boolean is4K, List<LocationType> locationTypes, List<LocationType> excludeLocationTypes, Boolean isMissing, Boolean isUnaired, Double minCommunityRating, Double minCriticRating, OffsetDateTime minPremiereDate, OffsetDateTime minDateLastSaved, OffsetDateTime minDateLastSavedForUser, OffsetDateTime maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, List<UUID> excludeItemIds, Integer startIndex, Integer limit, Boolean recursive, String searchTerm, List<SortOrder> sortOrder, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<ItemFilter> filters, Boolean isFavorite, List<MediaType> mediaTypes, List<ImageType> imageTypes, List<ItemSortBy> sortBy, Boolean isPlayed, List<String> genres, List<String> officialRatings, List<String> tags, List<Integer> years, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes, String person, List<UUID> personIds, List<String> personTypes, List<String> studios, List<String> artists, List<UUID> excludeArtistIds, List<UUID> artistIds, List<UUID> albumArtistIds, List<UUID> contributingArtistIds, List<String> albums, List<UUID> albumIds, List<UUID> ids, List<VideoType> videoTypes, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Integer minWidth, Integer minHeight, Integer maxWidth, Integer maxHeight, Boolean is3D, List<SeriesStatus> seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<UUID> studioIds, List<UUID> genreIds, Boolean enableTotalRecordCount, Boolean enableImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Trailers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (maxOfficialRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxOfficialRating", maxOfficialRating));
        }

        if (hasThemeSong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasThemeSong", hasThemeSong));
        }

        if (hasThemeVideo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasThemeVideo", hasThemeVideo));
        }

        if (hasSubtitles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSubtitles", hasSubtitles));
        }

        if (hasSpecialFeature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSpecialFeature", hasSpecialFeature));
        }

        if (hasTrailer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTrailer", hasTrailer));
        }

        if (adjacentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adjacentTo", adjacentTo));
        }

        if (parentIndexNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentIndexNumber", parentIndexNumber));
        }

        if (hasParentalRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasParentalRating", hasParentalRating));
        }

        if (isHd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHd", isHd));
        }

        if (is4K != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is4K", is4K));
        }

        if (locationTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "locationTypes", locationTypes));
        }

        if (excludeLocationTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeLocationTypes", excludeLocationTypes));
        }

        if (isMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMissing", isMissing));
        }

        if (isUnaired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUnaired", isUnaired));
        }

        if (minCommunityRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCommunityRating", minCommunityRating));
        }

        if (minCriticRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCriticRating", minCriticRating));
        }

        if (minPremiereDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPremiereDate", minPremiereDate));
        }

        if (minDateLastSaved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDateLastSaved", minDateLastSaved));
        }

        if (minDateLastSavedForUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDateLastSavedForUser", minDateLastSavedForUser));
        }

        if (maxPremiereDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPremiereDate", maxPremiereDate));
        }

        if (hasOverview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasOverview", hasOverview));
        }

        if (hasImdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasImdbId", hasImdbId));
        }

        if (hasTmdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTmdbId", hasTmdbId));
        }

        if (hasTvdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTvdbId", hasTvdbId));
        }

        if (isMovie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMovie", isMovie));
        }

        if (isSeries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSeries", isSeries));
        }

        if (isNews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isNews", isNews));
        }

        if (isKids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isKids", isKids));
        }

        if (isSports != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSports", isSports));
        }

        if (excludeItemIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeItemIds", excludeItemIds));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (sortOrder != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortOrder", sortOrder));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (excludeItemTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeItemTypes", excludeItemTypes));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters", filters));
        }

        if (isFavorite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFavorite", isFavorite));
        }

        if (mediaTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mediaTypes", mediaTypes));
        }

        if (imageTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "imageTypes", imageTypes));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (isPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPlayed", isPlayed));
        }

        if (genres != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "genres", genres));
        }

        if (officialRatings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "officialRatings", officialRatings));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (years != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "years", years));
        }

        if (enableUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUserData", enableUserData));
        }

        if (imageTypeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypeLimit", imageTypeLimit));
        }

        if (enableImageTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
        }

        if (person != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person", person));
        }

        if (personIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "personIds", personIds));
        }

        if (personTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "personTypes", personTypes));
        }

        if (studios != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "studios", studios));
        }

        if (artists != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "artists", artists));
        }

        if (excludeArtistIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeArtistIds", excludeArtistIds));
        }

        if (artistIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "artistIds", artistIds));
        }

        if (albumArtistIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "albumArtistIds", albumArtistIds));
        }

        if (contributingArtistIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributingArtistIds", contributingArtistIds));
        }

        if (albums != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "albums", albums));
        }

        if (albumIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "albumIds", albumIds));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (videoTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "videoTypes", videoTypes));
        }

        if (minOfficialRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minOfficialRating", minOfficialRating));
        }

        if (isLocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLocked", isLocked));
        }

        if (isPlaceHolder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPlaceHolder", isPlaceHolder));
        }

        if (hasOfficialRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasOfficialRating", hasOfficialRating));
        }

        if (collapseBoxSetItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collapseBoxSetItems", collapseBoxSetItems));
        }

        if (minWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minWidth", minWidth));
        }

        if (minHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minHeight", minHeight));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (is3D != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is3D", is3D));
        }

        if (seriesStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "seriesStatus", seriesStatus));
        }

        if (nameStartsWithOrGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameStartsWithOrGreater", nameStartsWithOrGreater));
        }

        if (nameStartsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameStartsWith", nameStartsWith));
        }

        if (nameLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameLessThan", nameLessThan));
        }

        if (studioIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "studioIds", studioIds));
        }

        if (genreIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "genreIds", genreIds));
        }

        if (enableTotalRecordCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableTotalRecordCount", enableTotalRecordCount));
        }

        if (enableImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImages", enableImages));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrailersValidateBeforeCall(UUID userId, String maxOfficialRating, Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, UUID adjacentTo, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, Boolean is4K, List<LocationType> locationTypes, List<LocationType> excludeLocationTypes, Boolean isMissing, Boolean isUnaired, Double minCommunityRating, Double minCriticRating, OffsetDateTime minPremiereDate, OffsetDateTime minDateLastSaved, OffsetDateTime minDateLastSavedForUser, OffsetDateTime maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, List<UUID> excludeItemIds, Integer startIndex, Integer limit, Boolean recursive, String searchTerm, List<SortOrder> sortOrder, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<ItemFilter> filters, Boolean isFavorite, List<MediaType> mediaTypes, List<ImageType> imageTypes, List<ItemSortBy> sortBy, Boolean isPlayed, List<String> genres, List<String> officialRatings, List<String> tags, List<Integer> years, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes, String person, List<UUID> personIds, List<String> personTypes, List<String> studios, List<String> artists, List<UUID> excludeArtistIds, List<UUID> artistIds, List<UUID> albumArtistIds, List<UUID> contributingArtistIds, List<String> albums, List<UUID> albumIds, List<UUID> ids, List<VideoType> videoTypes, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Integer minWidth, Integer minHeight, Integer maxWidth, Integer maxHeight, Boolean is3D, List<SeriesStatus> seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<UUID> studioIds, List<UUID> genreIds, Boolean enableTotalRecordCount, Boolean enableImages, final ApiCallback _callback) throws ApiException {
        return getTrailersCall(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isMovie, isSeries, isNews, isKids, isSports, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, _callback);

    }

    /**
     * Finds movies and trailers similar to a given trailer.
     * 
     * @param userId The user id supplied as query parameter; this is required when not using an API key. (optional)
     * @param maxOfficialRating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param hasThemeSong Optional filter by items with theme songs. (optional)
     * @param hasThemeVideo Optional filter by items with theme videos. (optional)
     * @param hasSubtitles Optional filter by items with subtitles. (optional)
     * @param hasSpecialFeature Optional filter by items with special features. (optional)
     * @param hasTrailer Optional filter by items with trailers. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param parentIndexNumber Optional filter by parent index number. (optional)
     * @param hasParentalRating Optional filter by items that have or do not have a parental rating. (optional)
     * @param isHd Optional filter by items that are HD or not. (optional)
     * @param is4K Optional filter by items that are 4K or not. (optional)
     * @param locationTypes Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param excludeLocationTypes Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param isMissing Optional filter by items that are missing episodes or not. (optional)
     * @param isUnaired Optional filter by items that are unaired episodes or not. (optional)
     * @param minCommunityRating Optional filter by minimum community rating. (optional)
     * @param minCriticRating Optional filter by minimum critic rating. (optional)
     * @param minPremiereDate Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param minDateLastSaved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param minDateLastSavedForUser Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param maxPremiereDate Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param hasOverview Optional filter by items that have an overview or not. (optional)
     * @param hasImdbId Optional filter by items that have an IMDb id or not. (optional)
     * @param hasTmdbId Optional filter by items that have a TMDb id or not. (optional)
     * @param hasTvdbId Optional filter by items that have a TVDb id or not. (optional)
     * @param isMovie Optional filter for live tv movies. (optional)
     * @param isSeries Optional filter for live tv series. (optional)
     * @param isNews Optional filter for live tv news. (optional)
     * @param isKids Optional filter for live tv kids. (optional)
     * @param isSports Optional filter for live tv sports. (optional)
     * @param excludeItemIds Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param searchTerm Optional. Filter based on a search term. (optional)
     * @param sortOrder Sort Order - Ascending, Descending. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param excludeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param isFavorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param mediaTypes Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param imageTypes Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param isPlayed Optional filter by items that are played, or not. (optional)
     * @param genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param officialRatings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param enableUserData Optional, include user data. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param personIds Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param personTypes Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param excludeArtistIds Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param artistIds Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param albumArtistIds Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param contributingArtistIds Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param albumIds Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param videoTypes Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param minOfficialRating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param isLocked Optional filter by items that are locked. (optional)
     * @param isPlaceHolder Optional filter by items that are placeholders. (optional)
     * @param hasOfficialRating Optional filter by items that have official ratings. (optional)
     * @param collapseBoxSetItems Whether or not to hide items behind their boxsets. (optional)
     * @param minWidth Optional. Filter by the minimum width of the item. (optional)
     * @param minHeight Optional. Filter by the minimum height of the item. (optional)
     * @param maxWidth Optional. Filter by the maximum width of the item. (optional)
     * @param maxHeight Optional. Filter by the maximum height of the item. (optional)
     * @param is3D Optional filter by items that are 3D, or not. (optional)
     * @param seriesStatus Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param nameStartsWithOrGreater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param nameStartsWith Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param nameLessThan Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param studioIds Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param genreIds Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param enableTotalRecordCount Optional. Enable the total record count. (optional, default to true)
     * @param enableImages Optional, include image information in output. (optional, default to true)
     * @return BaseItemDtoQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BaseItemDtoQueryResult getTrailers(UUID userId, String maxOfficialRating, Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, UUID adjacentTo, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, Boolean is4K, List<LocationType> locationTypes, List<LocationType> excludeLocationTypes, Boolean isMissing, Boolean isUnaired, Double minCommunityRating, Double minCriticRating, OffsetDateTime minPremiereDate, OffsetDateTime minDateLastSaved, OffsetDateTime minDateLastSavedForUser, OffsetDateTime maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, List<UUID> excludeItemIds, Integer startIndex, Integer limit, Boolean recursive, String searchTerm, List<SortOrder> sortOrder, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<ItemFilter> filters, Boolean isFavorite, List<MediaType> mediaTypes, List<ImageType> imageTypes, List<ItemSortBy> sortBy, Boolean isPlayed, List<String> genres, List<String> officialRatings, List<String> tags, List<Integer> years, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes, String person, List<UUID> personIds, List<String> personTypes, List<String> studios, List<String> artists, List<UUID> excludeArtistIds, List<UUID> artistIds, List<UUID> albumArtistIds, List<UUID> contributingArtistIds, List<String> albums, List<UUID> albumIds, List<UUID> ids, List<VideoType> videoTypes, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Integer minWidth, Integer minHeight, Integer maxWidth, Integer maxHeight, Boolean is3D, List<SeriesStatus> seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<UUID> studioIds, List<UUID> genreIds, Boolean enableTotalRecordCount, Boolean enableImages) throws ApiException {
        ApiResponse<BaseItemDtoQueryResult> localVarResp = getTrailersWithHttpInfo(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isMovie, isSeries, isNews, isKids, isSports, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages);
        return localVarResp.getData();
    }

    /**
     * Finds movies and trailers similar to a given trailer.
     * 
     * @param userId The user id supplied as query parameter; this is required when not using an API key. (optional)
     * @param maxOfficialRating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param hasThemeSong Optional filter by items with theme songs. (optional)
     * @param hasThemeVideo Optional filter by items with theme videos. (optional)
     * @param hasSubtitles Optional filter by items with subtitles. (optional)
     * @param hasSpecialFeature Optional filter by items with special features. (optional)
     * @param hasTrailer Optional filter by items with trailers. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param parentIndexNumber Optional filter by parent index number. (optional)
     * @param hasParentalRating Optional filter by items that have or do not have a parental rating. (optional)
     * @param isHd Optional filter by items that are HD or not. (optional)
     * @param is4K Optional filter by items that are 4K or not. (optional)
     * @param locationTypes Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param excludeLocationTypes Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param isMissing Optional filter by items that are missing episodes or not. (optional)
     * @param isUnaired Optional filter by items that are unaired episodes or not. (optional)
     * @param minCommunityRating Optional filter by minimum community rating. (optional)
     * @param minCriticRating Optional filter by minimum critic rating. (optional)
     * @param minPremiereDate Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param minDateLastSaved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param minDateLastSavedForUser Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param maxPremiereDate Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param hasOverview Optional filter by items that have an overview or not. (optional)
     * @param hasImdbId Optional filter by items that have an IMDb id or not. (optional)
     * @param hasTmdbId Optional filter by items that have a TMDb id or not. (optional)
     * @param hasTvdbId Optional filter by items that have a TVDb id or not. (optional)
     * @param isMovie Optional filter for live tv movies. (optional)
     * @param isSeries Optional filter for live tv series. (optional)
     * @param isNews Optional filter for live tv news. (optional)
     * @param isKids Optional filter for live tv kids. (optional)
     * @param isSports Optional filter for live tv sports. (optional)
     * @param excludeItemIds Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param searchTerm Optional. Filter based on a search term. (optional)
     * @param sortOrder Sort Order - Ascending, Descending. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param excludeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param isFavorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param mediaTypes Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param imageTypes Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param isPlayed Optional filter by items that are played, or not. (optional)
     * @param genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param officialRatings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param enableUserData Optional, include user data. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param personIds Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param personTypes Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param excludeArtistIds Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param artistIds Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param albumArtistIds Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param contributingArtistIds Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param albumIds Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param videoTypes Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param minOfficialRating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param isLocked Optional filter by items that are locked. (optional)
     * @param isPlaceHolder Optional filter by items that are placeholders. (optional)
     * @param hasOfficialRating Optional filter by items that have official ratings. (optional)
     * @param collapseBoxSetItems Whether or not to hide items behind their boxsets. (optional)
     * @param minWidth Optional. Filter by the minimum width of the item. (optional)
     * @param minHeight Optional. Filter by the minimum height of the item. (optional)
     * @param maxWidth Optional. Filter by the maximum width of the item. (optional)
     * @param maxHeight Optional. Filter by the maximum height of the item. (optional)
     * @param is3D Optional filter by items that are 3D, or not. (optional)
     * @param seriesStatus Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param nameStartsWithOrGreater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param nameStartsWith Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param nameLessThan Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param studioIds Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param genreIds Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param enableTotalRecordCount Optional. Enable the total record count. (optional, default to true)
     * @param enableImages Optional, include image information in output. (optional, default to true)
     * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseItemDtoQueryResult> getTrailersWithHttpInfo(UUID userId, String maxOfficialRating, Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, UUID adjacentTo, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, Boolean is4K, List<LocationType> locationTypes, List<LocationType> excludeLocationTypes, Boolean isMissing, Boolean isUnaired, Double minCommunityRating, Double minCriticRating, OffsetDateTime minPremiereDate, OffsetDateTime minDateLastSaved, OffsetDateTime minDateLastSavedForUser, OffsetDateTime maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, List<UUID> excludeItemIds, Integer startIndex, Integer limit, Boolean recursive, String searchTerm, List<SortOrder> sortOrder, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<ItemFilter> filters, Boolean isFavorite, List<MediaType> mediaTypes, List<ImageType> imageTypes, List<ItemSortBy> sortBy, Boolean isPlayed, List<String> genres, List<String> officialRatings, List<String> tags, List<Integer> years, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes, String person, List<UUID> personIds, List<String> personTypes, List<String> studios, List<String> artists, List<UUID> excludeArtistIds, List<UUID> artistIds, List<UUID> albumArtistIds, List<UUID> contributingArtistIds, List<String> albums, List<UUID> albumIds, List<UUID> ids, List<VideoType> videoTypes, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Integer minWidth, Integer minHeight, Integer maxWidth, Integer maxHeight, Boolean is3D, List<SeriesStatus> seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<UUID> studioIds, List<UUID> genreIds, Boolean enableTotalRecordCount, Boolean enableImages) throws ApiException {
        okhttp3.Call localVarCall = getTrailersValidateBeforeCall(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isMovie, isSeries, isNews, isKids, isSports, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, null);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finds movies and trailers similar to a given trailer. (asynchronously)
     * 
     * @param userId The user id supplied as query parameter; this is required when not using an API key. (optional)
     * @param maxOfficialRating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param hasThemeSong Optional filter by items with theme songs. (optional)
     * @param hasThemeVideo Optional filter by items with theme videos. (optional)
     * @param hasSubtitles Optional filter by items with subtitles. (optional)
     * @param hasSpecialFeature Optional filter by items with special features. (optional)
     * @param hasTrailer Optional filter by items with trailers. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param parentIndexNumber Optional filter by parent index number. (optional)
     * @param hasParentalRating Optional filter by items that have or do not have a parental rating. (optional)
     * @param isHd Optional filter by items that are HD or not. (optional)
     * @param is4K Optional filter by items that are 4K or not. (optional)
     * @param locationTypes Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param excludeLocationTypes Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param isMissing Optional filter by items that are missing episodes or not. (optional)
     * @param isUnaired Optional filter by items that are unaired episodes or not. (optional)
     * @param minCommunityRating Optional filter by minimum community rating. (optional)
     * @param minCriticRating Optional filter by minimum critic rating. (optional)
     * @param minPremiereDate Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param minDateLastSaved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param minDateLastSavedForUser Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param maxPremiereDate Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param hasOverview Optional filter by items that have an overview or not. (optional)
     * @param hasImdbId Optional filter by items that have an IMDb id or not. (optional)
     * @param hasTmdbId Optional filter by items that have a TMDb id or not. (optional)
     * @param hasTvdbId Optional filter by items that have a TVDb id or not. (optional)
     * @param isMovie Optional filter for live tv movies. (optional)
     * @param isSeries Optional filter for live tv series. (optional)
     * @param isNews Optional filter for live tv news. (optional)
     * @param isKids Optional filter for live tv kids. (optional)
     * @param isSports Optional filter for live tv sports. (optional)
     * @param excludeItemIds Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param searchTerm Optional. Filter based on a search term. (optional)
     * @param sortOrder Sort Order - Ascending, Descending. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param excludeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param isFavorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param mediaTypes Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param imageTypes Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param isPlayed Optional filter by items that are played, or not. (optional)
     * @param genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param officialRatings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param enableUserData Optional, include user data. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param personIds Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param personTypes Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param excludeArtistIds Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param artistIds Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param albumArtistIds Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param contributingArtistIds Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param albumIds Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param videoTypes Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param minOfficialRating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param isLocked Optional filter by items that are locked. (optional)
     * @param isPlaceHolder Optional filter by items that are placeholders. (optional)
     * @param hasOfficialRating Optional filter by items that have official ratings. (optional)
     * @param collapseBoxSetItems Whether or not to hide items behind their boxsets. (optional)
     * @param minWidth Optional. Filter by the minimum width of the item. (optional)
     * @param minHeight Optional. Filter by the minimum height of the item. (optional)
     * @param maxWidth Optional. Filter by the maximum width of the item. (optional)
     * @param maxHeight Optional. Filter by the maximum height of the item. (optional)
     * @param is3D Optional filter by items that are 3D, or not. (optional)
     * @param seriesStatus Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param nameStartsWithOrGreater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param nameStartsWith Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param nameLessThan Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param studioIds Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param genreIds Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param enableTotalRecordCount Optional. Enable the total record count. (optional, default to true)
     * @param enableImages Optional, include image information in output. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailersAsync(UUID userId, String maxOfficialRating, Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, UUID adjacentTo, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, Boolean is4K, List<LocationType> locationTypes, List<LocationType> excludeLocationTypes, Boolean isMissing, Boolean isUnaired, Double minCommunityRating, Double minCriticRating, OffsetDateTime minPremiereDate, OffsetDateTime minDateLastSaved, OffsetDateTime minDateLastSavedForUser, OffsetDateTime maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, List<UUID> excludeItemIds, Integer startIndex, Integer limit, Boolean recursive, String searchTerm, List<SortOrder> sortOrder, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<ItemFilter> filters, Boolean isFavorite, List<MediaType> mediaTypes, List<ImageType> imageTypes, List<ItemSortBy> sortBy, Boolean isPlayed, List<String> genres, List<String> officialRatings, List<String> tags, List<Integer> years, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes, String person, List<UUID> personIds, List<String> personTypes, List<String> studios, List<String> artists, List<UUID> excludeArtistIds, List<UUID> artistIds, List<UUID> albumArtistIds, List<UUID> contributingArtistIds, List<String> albums, List<UUID> albumIds, List<UUID> ids, List<VideoType> videoTypes, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Integer minWidth, Integer minHeight, Integer maxWidth, Integer maxHeight, Boolean is3D, List<SeriesStatus> seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<UUID> studioIds, List<UUID> genreIds, Boolean enableTotalRecordCount, Boolean enableImages, final ApiCallback<BaseItemDtoQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrailersValidateBeforeCall(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isMovie, isSeries, isNews, isKids, isSports, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, _callback);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
