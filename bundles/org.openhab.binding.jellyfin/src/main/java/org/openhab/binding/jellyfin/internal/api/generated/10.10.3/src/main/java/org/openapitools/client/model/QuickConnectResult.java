/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stores the state of an quick connect request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class QuickConnectResult {
  public static final String SERIALIZED_NAME_AUTHENTICATED = "Authenticated";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED)
  @javax.annotation.Nullable
  private Boolean authenticated;

  public static final String SERIALIZED_NAME_SECRET = "Secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  @javax.annotation.Nullable
  private String secret;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_DEVICE_ID = "DeviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  @javax.annotation.Nullable
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  @javax.annotation.Nullable
  private String deviceName;

  public static final String SERIALIZED_NAME_APP_NAME = "AppName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  @javax.annotation.Nullable
  private String appName;

  public static final String SERIALIZED_NAME_APP_VERSION = "AppVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  @javax.annotation.Nullable
  private String appVersion;

  public static final String SERIALIZED_NAME_DATE_ADDED = "DateAdded";
  @SerializedName(SERIALIZED_NAME_DATE_ADDED)
  @javax.annotation.Nullable
  private OffsetDateTime dateAdded;

  public QuickConnectResult() {
  }

  public QuickConnectResult authenticated(@javax.annotation.Nullable Boolean authenticated) {
    this.authenticated = authenticated;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this request is authorized.
   * @return authenticated
   */
  @javax.annotation.Nullable
  public Boolean getAuthenticated() {
    return authenticated;
  }

  public void setAuthenticated(@javax.annotation.Nullable Boolean authenticated) {
    this.authenticated = authenticated;
  }


  public QuickConnectResult secret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Gets the secret value used to uniquely identify this request. Can be used to retrieve authentication information.
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
  }


  public QuickConnectResult code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Gets the user facing code used so the user can quickly differentiate this request from others.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public QuickConnectResult deviceId(@javax.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Gets the requesting device id.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(@javax.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
  }


  public QuickConnectResult deviceName(@javax.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Gets the requesting device name.
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(@javax.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
  }


  public QuickConnectResult appName(@javax.annotation.Nullable String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Gets the requesting app name.
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(@javax.annotation.Nullable String appName) {
    this.appName = appName;
  }


  public QuickConnectResult appVersion(@javax.annotation.Nullable String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * Gets the requesting app version.
   * @return appVersion
   */
  @javax.annotation.Nullable
  public String getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(@javax.annotation.Nullable String appVersion) {
    this.appVersion = appVersion;
  }


  public QuickConnectResult dateAdded(@javax.annotation.Nullable OffsetDateTime dateAdded) {
    this.dateAdded = dateAdded;
    return this;
  }

  /**
   * Gets or sets the DateTime that this request was created.
   * @return dateAdded
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateAdded() {
    return dateAdded;
  }

  public void setDateAdded(@javax.annotation.Nullable OffsetDateTime dateAdded) {
    this.dateAdded = dateAdded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuickConnectResult quickConnectResult = (QuickConnectResult) o;
    return Objects.equals(this.authenticated, quickConnectResult.authenticated) &&
        Objects.equals(this.secret, quickConnectResult.secret) &&
        Objects.equals(this.code, quickConnectResult.code) &&
        Objects.equals(this.deviceId, quickConnectResult.deviceId) &&
        Objects.equals(this.deviceName, quickConnectResult.deviceName) &&
        Objects.equals(this.appName, quickConnectResult.appName) &&
        Objects.equals(this.appVersion, quickConnectResult.appVersion) &&
        Objects.equals(this.dateAdded, quickConnectResult.dateAdded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticated, secret, code, deviceId, deviceName, appName, appVersion, dateAdded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuickConnectResult {\n");
    sb.append("    authenticated: ").append(toIndentedString(authenticated)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    dateAdded: ").append(toIndentedString(dateAdded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Authenticated");
    openapiFields.add("Secret");
    openapiFields.add("Code");
    openapiFields.add("DeviceId");
    openapiFields.add("DeviceName");
    openapiFields.add("AppName");
    openapiFields.add("AppVersion");
    openapiFields.add("DateAdded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuickConnectResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuickConnectResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuickConnectResult is not found in the empty JSON string", QuickConnectResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuickConnectResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuickConnectResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Secret") != null && !jsonObj.get("Secret").isJsonNull()) && !jsonObj.get("Secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Secret").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("DeviceId") != null && !jsonObj.get("DeviceId").isJsonNull()) && !jsonObj.get("DeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceId").toString()));
      }
      if ((jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) && !jsonObj.get("DeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceName").toString()));
      }
      if ((jsonObj.get("AppName") != null && !jsonObj.get("AppName").isJsonNull()) && !jsonObj.get("AppName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AppName").toString()));
      }
      if ((jsonObj.get("AppVersion") != null && !jsonObj.get("AppVersion").isJsonNull()) && !jsonObj.get("AppVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AppVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuickConnectResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuickConnectResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuickConnectResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuickConnectResult.class));

       return (TypeAdapter<T>) new TypeAdapter<QuickConnectResult>() {
           @Override
           public void write(JsonWriter out, QuickConnectResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuickConnectResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuickConnectResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuickConnectResult
   * @throws IOException if the JSON string is invalid with respect to QuickConnectResult
   */
  public static QuickConnectResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuickConnectResult.class);
  }

  /**
   * Convert an instance of QuickConnectResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

