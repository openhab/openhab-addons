/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * ControlResponse
 */
@JsonPropertyOrder({
  ControlResponse.JSON_PROPERTY_HEADERS,
  ControlResponse.JSON_PROPERTY_XML,
  ControlResponse.JSON_PROPERTY_IS_SUCCESSFUL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ControlResponse {
  public static final String JSON_PROPERTY_HEADERS = "Headers";
  @javax.annotation.Nullable
  private Map<String, String> headers = new HashMap<>();

  public static final String JSON_PROPERTY_XML = "Xml";
  @javax.annotation.Nullable
  private String xml;

  public static final String JSON_PROPERTY_IS_SUCCESSFUL = "IsSuccessful";
  @javax.annotation.Nullable
  private Boolean isSuccessful;

  public ControlResponse() { 
  }

  @JsonCreator
  public ControlResponse(
    @JsonProperty(JSON_PROPERTY_HEADERS) Map<String, String> headers
  ) {
  this();
    this.headers = headers;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getHeaders() {
    return headers;
  }




  public ControlResponse xml(@javax.annotation.Nullable String xml) {
    this.xml = xml;
    return this;
  }

  /**
   * Get xml
   * @return xml
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_XML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getXml() {
    return xml;
  }


  @JsonProperty(JSON_PROPERTY_XML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setXml(@javax.annotation.Nullable String xml) {
    this.xml = xml;
  }


  public ControlResponse isSuccessful(@javax.annotation.Nullable Boolean isSuccessful) {
    this.isSuccessful = isSuccessful;
    return this;
  }

  /**
   * Get isSuccessful
   * @return isSuccessful
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsSuccessful() {
    return isSuccessful;
  }


  @JsonProperty(JSON_PROPERTY_IS_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSuccessful(@javax.annotation.Nullable Boolean isSuccessful) {
    this.isSuccessful = isSuccessful;
  }


  /**
   * Return true if this ControlResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControlResponse controlResponse = (ControlResponse) o;
    return Objects.equals(this.headers, controlResponse.headers) &&
        Objects.equals(this.xml, controlResponse.xml) &&
        Objects.equals(this.isSuccessful, controlResponse.isSuccessful);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headers, xml, isSuccessful);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControlResponse {\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    xml: ").append(toIndentedString(xml)).append("\n");
    sb.append("    isSuccessful: ").append(toIndentedString(isSuccessful)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Headers` to the URL query string
    if (getHeaders() != null) {
      for (String _key : getHeaders().keySet()) {
        joiner.add(String.format("%sHeaders%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getHeaders().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getHeaders().get(_key)))));
      }
    }

    // add `Xml` to the URL query string
    if (getXml() != null) {
      joiner.add(String.format("%sXml%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getXml()))));
    }

    // add `IsSuccessful` to the URL query string
    if (getIsSuccessful() != null) {
      joiner.add(String.format("%sIsSuccessful%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsSuccessful()))));
    }

    return joiner.toString();
  }
}

