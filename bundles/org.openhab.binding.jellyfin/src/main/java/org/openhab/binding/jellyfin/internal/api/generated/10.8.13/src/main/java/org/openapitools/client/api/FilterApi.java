/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.BaseItemKind;
import org.openapitools.client.model.QueryFilters;
import org.openapitools.client.model.QueryFiltersLegacy;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:40.061690683Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FilterApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public FilterApi() {
    this(Configuration.getDefaultApiClient());
  }

  public FilterApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets query filters.
   * 
   * @param userId Optional. User id. (optional)
   * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
   * @param isAiring Optional. Is item airing. (optional)
   * @param isMovie Optional. Is item movie. (optional)
   * @param isSports Optional. Is item sports. (optional)
   * @param isKids Optional. Is item kids. (optional)
   * @param isNews Optional. Is item news. (optional)
   * @param isSeries Optional. Is item series. (optional)
   * @param recursive Optional. Search recursive. (optional)
   * @return QueryFilters
   * @throws ApiException if fails to make API call
   */
  public QueryFilters getQueryFilters(UUID userId, UUID parentId, List<BaseItemKind> includeItemTypes, Boolean isAiring, Boolean isMovie, Boolean isSports, Boolean isKids, Boolean isNews, Boolean isSeries, Boolean recursive) throws ApiException {
    ApiResponse<QueryFilters> localVarResponse = getQueryFiltersWithHttpInfo(userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive);
    return localVarResponse.getData();
  }

  /**
   * Gets query filters.
   * 
   * @param userId Optional. User id. (optional)
   * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
   * @param isAiring Optional. Is item airing. (optional)
   * @param isMovie Optional. Is item movie. (optional)
   * @param isSports Optional. Is item sports. (optional)
   * @param isKids Optional. Is item kids. (optional)
   * @param isNews Optional. Is item news. (optional)
   * @param isSeries Optional. Is item series. (optional)
   * @param recursive Optional. Search recursive. (optional)
   * @return ApiResponse&lt;QueryFilters&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<QueryFilters> getQueryFiltersWithHttpInfo(UUID userId, UUID parentId, List<BaseItemKind> includeItemTypes, Boolean isAiring, Boolean isMovie, Boolean isSports, Boolean isKids, Boolean isNews, Boolean isSeries, Boolean recursive) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getQueryFiltersRequestBuilder(userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getQueryFilters", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<QueryFilters>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<QueryFilters>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<QueryFilters>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getQueryFiltersRequestBuilder(UUID userId, UUID parentId, List<BaseItemKind> includeItemTypes, Boolean isAiring, Boolean isMovie, Boolean isSports, Boolean isKids, Boolean isNews, Boolean isSeries, Boolean recursive) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/Filters2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));
    localVarQueryParameterBaseName = "includeItemTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "includeItemTypes", includeItemTypes));
    localVarQueryParameterBaseName = "isAiring";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isAiring", isAiring));
    localVarQueryParameterBaseName = "isMovie";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isMovie", isMovie));
    localVarQueryParameterBaseName = "isSports";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isSports", isSports));
    localVarQueryParameterBaseName = "isKids";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isKids", isKids));
    localVarQueryParameterBaseName = "isNews";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isNews", isNews));
    localVarQueryParameterBaseName = "isSeries";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isSeries", isSeries));
    localVarQueryParameterBaseName = "recursive";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recursive", recursive));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets legacy query filters.
   * 
   * @param userId Optional. User id. (optional)
   * @param parentId Optional. Parent id. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
   * @param mediaTypes Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
   * @return QueryFiltersLegacy
   * @throws ApiException if fails to make API call
   */
  public QueryFiltersLegacy getQueryFiltersLegacy(UUID userId, UUID parentId, List<BaseItemKind> includeItemTypes, List<String> mediaTypes) throws ApiException {
    ApiResponse<QueryFiltersLegacy> localVarResponse = getQueryFiltersLegacyWithHttpInfo(userId, parentId, includeItemTypes, mediaTypes);
    return localVarResponse.getData();
  }

  /**
   * Gets legacy query filters.
   * 
   * @param userId Optional. User id. (optional)
   * @param parentId Optional. Parent id. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
   * @param mediaTypes Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
   * @return ApiResponse&lt;QueryFiltersLegacy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<QueryFiltersLegacy> getQueryFiltersLegacyWithHttpInfo(UUID userId, UUID parentId, List<BaseItemKind> includeItemTypes, List<String> mediaTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getQueryFiltersLegacyRequestBuilder(userId, parentId, includeItemTypes, mediaTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getQueryFiltersLegacy", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<QueryFiltersLegacy>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<QueryFiltersLegacy>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<QueryFiltersLegacy>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getQueryFiltersLegacyRequestBuilder(UUID userId, UUID parentId, List<BaseItemKind> includeItemTypes, List<String> mediaTypes) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/Filters";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));
    localVarQueryParameterBaseName = "includeItemTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "includeItemTypes", includeItemTypes));
    localVarQueryParameterBaseName = "mediaTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "mediaTypes", mediaTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
