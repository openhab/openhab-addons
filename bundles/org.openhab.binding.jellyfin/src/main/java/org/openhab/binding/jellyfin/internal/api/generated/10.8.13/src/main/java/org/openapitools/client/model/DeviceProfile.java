/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodecProfile;
import org.openapitools.client.model.ContainerProfile;
import org.openapitools.client.model.DeviceIdentification;
import org.openapitools.client.model.DirectPlayProfile;
import org.openapitools.client.model.ResponseProfile;
import org.openapitools.client.model.SubtitleProfile;
import org.openapitools.client.model.TranscodingProfile;
import org.openapitools.client.model.XmlAttribute;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.  &lt;br /&gt;  Specifically, it defines the supported &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles\&quot;&gt;containers&lt;/see&gt; and  &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles\&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)  the device is able to direct play (without transcoding or remuxing),  as well as which &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles\&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&#39;t.
 */
@JsonPropertyOrder({
  DeviceProfile.JSON_PROPERTY_NAME,
  DeviceProfile.JSON_PROPERTY_ID,
  DeviceProfile.JSON_PROPERTY_IDENTIFICATION,
  DeviceProfile.JSON_PROPERTY_FRIENDLY_NAME,
  DeviceProfile.JSON_PROPERTY_MANUFACTURER,
  DeviceProfile.JSON_PROPERTY_MANUFACTURER_URL,
  DeviceProfile.JSON_PROPERTY_MODEL_NAME,
  DeviceProfile.JSON_PROPERTY_MODEL_DESCRIPTION,
  DeviceProfile.JSON_PROPERTY_MODEL_NUMBER,
  DeviceProfile.JSON_PROPERTY_MODEL_URL,
  DeviceProfile.JSON_PROPERTY_SERIAL_NUMBER,
  DeviceProfile.JSON_PROPERTY_ENABLE_ALBUM_ART_IN_DIDL,
  DeviceProfile.JSON_PROPERTY_ENABLE_SINGLE_ALBUM_ART_LIMIT,
  DeviceProfile.JSON_PROPERTY_ENABLE_SINGLE_SUBTITLE_LIMIT,
  DeviceProfile.JSON_PROPERTY_SUPPORTED_MEDIA_TYPES,
  DeviceProfile.JSON_PROPERTY_USER_ID,
  DeviceProfile.JSON_PROPERTY_ALBUM_ART_PN,
  DeviceProfile.JSON_PROPERTY_MAX_ALBUM_ART_WIDTH,
  DeviceProfile.JSON_PROPERTY_MAX_ALBUM_ART_HEIGHT,
  DeviceProfile.JSON_PROPERTY_MAX_ICON_WIDTH,
  DeviceProfile.JSON_PROPERTY_MAX_ICON_HEIGHT,
  DeviceProfile.JSON_PROPERTY_MAX_STREAMING_BITRATE,
  DeviceProfile.JSON_PROPERTY_MAX_STATIC_BITRATE,
  DeviceProfile.JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE,
  DeviceProfile.JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE,
  DeviceProfile.JSON_PROPERTY_SONY_AGGREGATION_FLAGS,
  DeviceProfile.JSON_PROPERTY_PROTOCOL_INFO,
  DeviceProfile.JSON_PROPERTY_TIMELINE_OFFSET_SECONDS,
  DeviceProfile.JSON_PROPERTY_REQUIRES_PLAIN_VIDEO_ITEMS,
  DeviceProfile.JSON_PROPERTY_REQUIRES_PLAIN_FOLDERS,
  DeviceProfile.JSON_PROPERTY_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR,
  DeviceProfile.JSON_PROPERTY_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS,
  DeviceProfile.JSON_PROPERTY_XML_ROOT_ATTRIBUTES,
  DeviceProfile.JSON_PROPERTY_DIRECT_PLAY_PROFILES,
  DeviceProfile.JSON_PROPERTY_TRANSCODING_PROFILES,
  DeviceProfile.JSON_PROPERTY_CONTAINER_PROFILES,
  DeviceProfile.JSON_PROPERTY_CODEC_PROFILES,
  DeviceProfile.JSON_PROPERTY_RESPONSE_PROFILES,
  DeviceProfile.JSON_PROPERTY_SUBTITLE_PROFILES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class DeviceProfile {
  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ID = "Id";
  private JsonNullable<String> id = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IDENTIFICATION = "Identification";
  private JsonNullable<DeviceIdentification> identification = JsonNullable.<DeviceIdentification>undefined();

  public static final String JSON_PROPERTY_FRIENDLY_NAME = "FriendlyName";
  private JsonNullable<String> friendlyName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MANUFACTURER = "Manufacturer";
  private JsonNullable<String> manufacturer = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MANUFACTURER_URL = "ManufacturerUrl";
  private JsonNullable<String> manufacturerUrl = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MODEL_NAME = "ModelName";
  private JsonNullable<String> modelName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MODEL_DESCRIPTION = "ModelDescription";
  private JsonNullable<String> modelDescription = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MODEL_NUMBER = "ModelNumber";
  private JsonNullable<String> modelNumber = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MODEL_URL = "ModelUrl";
  private JsonNullable<String> modelUrl = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SERIAL_NUMBER = "SerialNumber";
  private JsonNullable<String> serialNumber = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENABLE_ALBUM_ART_IN_DIDL = "EnableAlbumArtInDidl";
  @javax.annotation.Nullable
  private Boolean enableAlbumArtInDidl = false;

  public static final String JSON_PROPERTY_ENABLE_SINGLE_ALBUM_ART_LIMIT = "EnableSingleAlbumArtLimit";
  @javax.annotation.Nullable
  private Boolean enableSingleAlbumArtLimit = false;

  public static final String JSON_PROPERTY_ENABLE_SINGLE_SUBTITLE_LIMIT = "EnableSingleSubtitleLimit";
  @javax.annotation.Nullable
  private Boolean enableSingleSubtitleLimit = false;

  public static final String JSON_PROPERTY_SUPPORTED_MEDIA_TYPES = "SupportedMediaTypes";
  @javax.annotation.Nullable
  private String supportedMediaTypes;

  public static final String JSON_PROPERTY_USER_ID = "UserId";
  private JsonNullable<String> userId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ALBUM_ART_PN = "AlbumArtPn";
  private JsonNullable<String> albumArtPn = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MAX_ALBUM_ART_WIDTH = "MaxAlbumArtWidth";
  private JsonNullable<Integer> maxAlbumArtWidth = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_ALBUM_ART_HEIGHT = "MaxAlbumArtHeight";
  private JsonNullable<Integer> maxAlbumArtHeight = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_ICON_WIDTH = "MaxIconWidth";
  private JsonNullable<Integer> maxIconWidth = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_ICON_HEIGHT = "MaxIconHeight";
  private JsonNullable<Integer> maxIconHeight = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_STREAMING_BITRATE = "MaxStreamingBitrate";
  private JsonNullable<Integer> maxStreamingBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_STATIC_BITRATE = "MaxStaticBitrate";
  private JsonNullable<Integer> maxStaticBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE = "MusicStreamingTranscodingBitrate";
  private JsonNullable<Integer> musicStreamingTranscodingBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE = "MaxStaticMusicBitrate";
  private JsonNullable<Integer> maxStaticMusicBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SONY_AGGREGATION_FLAGS = "SonyAggregationFlags";
  private JsonNullable<String> sonyAggregationFlags = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PROTOCOL_INFO = "ProtocolInfo";
  private JsonNullable<String> protocolInfo = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TIMELINE_OFFSET_SECONDS = "TimelineOffsetSeconds";
  @javax.annotation.Nullable
  private Integer timelineOffsetSeconds = 0;

  public static final String JSON_PROPERTY_REQUIRES_PLAIN_VIDEO_ITEMS = "RequiresPlainVideoItems";
  @javax.annotation.Nullable
  private Boolean requiresPlainVideoItems = false;

  public static final String JSON_PROPERTY_REQUIRES_PLAIN_FOLDERS = "RequiresPlainFolders";
  @javax.annotation.Nullable
  private Boolean requiresPlainFolders = false;

  public static final String JSON_PROPERTY_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR = "EnableMSMediaReceiverRegistrar";
  @javax.annotation.Nullable
  private Boolean enableMSMediaReceiverRegistrar = false;

  public static final String JSON_PROPERTY_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS = "IgnoreTranscodeByteRangeRequests";
  @javax.annotation.Nullable
  private Boolean ignoreTranscodeByteRangeRequests = false;

  public static final String JSON_PROPERTY_XML_ROOT_ATTRIBUTES = "XmlRootAttributes";
  @javax.annotation.Nullable
  private List<XmlAttribute> xmlRootAttributes = new ArrayList<>();

  public static final String JSON_PROPERTY_DIRECT_PLAY_PROFILES = "DirectPlayProfiles";
  @javax.annotation.Nullable
  private List<DirectPlayProfile> directPlayProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_TRANSCODING_PROFILES = "TranscodingProfiles";
  @javax.annotation.Nullable
  private List<TranscodingProfile> transcodingProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTAINER_PROFILES = "ContainerProfiles";
  @javax.annotation.Nullable
  private List<ContainerProfile> containerProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_CODEC_PROFILES = "CodecProfiles";
  @javax.annotation.Nullable
  private List<CodecProfile> codecProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_RESPONSE_PROFILES = "ResponseProfiles";
  @javax.annotation.Nullable
  private List<ResponseProfile> responseProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_SUBTITLE_PROFILES = "SubtitleProfiles";
  @javax.annotation.Nullable
  private List<SubtitleProfile> subtitleProfiles = new ArrayList<>();

  public DeviceProfile() { 
  }

  public DeviceProfile name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Gets or sets the name of this device profile.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public DeviceProfile id(@javax.annotation.Nullable String id) {
    this.id = JsonNullable.<String>of(id);
    return this;
  }

  /**
   * Gets or sets the Id.
   * @return id
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<String> id) {
    this.id = id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = JsonNullable.<String>of(id);
  }


  public DeviceProfile identification(@javax.annotation.Nullable DeviceIdentification identification) {
    this.identification = JsonNullable.<DeviceIdentification>of(identification);
    return this;
  }

  /**
   * Gets or sets the Identification.
   * @return identification
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public DeviceIdentification getIdentification() {
        return identification.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IDENTIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DeviceIdentification> getIdentification_JsonNullable() {
    return identification;
  }
  
  @JsonProperty(JSON_PROPERTY_IDENTIFICATION)
  public void setIdentification_JsonNullable(JsonNullable<DeviceIdentification> identification) {
    this.identification = identification;
  }

  public void setIdentification(@javax.annotation.Nullable DeviceIdentification identification) {
    this.identification = JsonNullable.<DeviceIdentification>of(identification);
  }


  public DeviceProfile friendlyName(@javax.annotation.Nullable String friendlyName) {
    this.friendlyName = JsonNullable.<String>of(friendlyName);
    return this;
  }

  /**
   * Gets or sets the friendly name of the device profile, which can be shown to users.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getFriendlyName() {
        return friendlyName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FRIENDLY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFriendlyName_JsonNullable() {
    return friendlyName;
  }
  
  @JsonProperty(JSON_PROPERTY_FRIENDLY_NAME)
  public void setFriendlyName_JsonNullable(JsonNullable<String> friendlyName) {
    this.friendlyName = friendlyName;
  }

  public void setFriendlyName(@javax.annotation.Nullable String friendlyName) {
    this.friendlyName = JsonNullable.<String>of(friendlyName);
  }


  public DeviceProfile manufacturer(@javax.annotation.Nullable String manufacturer) {
    this.manufacturer = JsonNullable.<String>of(manufacturer);
    return this;
  }

  /**
   * Gets or sets the manufacturer of the device which this profile represents.
   * @return manufacturer
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getManufacturer() {
        return manufacturer.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MANUFACTURER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getManufacturer_JsonNullable() {
    return manufacturer;
  }
  
  @JsonProperty(JSON_PROPERTY_MANUFACTURER)
  public void setManufacturer_JsonNullable(JsonNullable<String> manufacturer) {
    this.manufacturer = manufacturer;
  }

  public void setManufacturer(@javax.annotation.Nullable String manufacturer) {
    this.manufacturer = JsonNullable.<String>of(manufacturer);
  }


  public DeviceProfile manufacturerUrl(@javax.annotation.Nullable String manufacturerUrl) {
    this.manufacturerUrl = JsonNullable.<String>of(manufacturerUrl);
    return this;
  }

  /**
   * Gets or sets an url for the manufacturer of the device which this profile represents.
   * @return manufacturerUrl
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getManufacturerUrl() {
        return manufacturerUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MANUFACTURER_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getManufacturerUrl_JsonNullable() {
    return manufacturerUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_MANUFACTURER_URL)
  public void setManufacturerUrl_JsonNullable(JsonNullable<String> manufacturerUrl) {
    this.manufacturerUrl = manufacturerUrl;
  }

  public void setManufacturerUrl(@javax.annotation.Nullable String manufacturerUrl) {
    this.manufacturerUrl = JsonNullable.<String>of(manufacturerUrl);
  }


  public DeviceProfile modelName(@javax.annotation.Nullable String modelName) {
    this.modelName = JsonNullable.<String>of(modelName);
    return this;
  }

  /**
   * Gets or sets the model name of the device which this profile represents.
   * @return modelName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getModelName() {
        return modelName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getModelName_JsonNullable() {
    return modelName;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  public void setModelName_JsonNullable(JsonNullable<String> modelName) {
    this.modelName = modelName;
  }

  public void setModelName(@javax.annotation.Nullable String modelName) {
    this.modelName = JsonNullable.<String>of(modelName);
  }


  public DeviceProfile modelDescription(@javax.annotation.Nullable String modelDescription) {
    this.modelDescription = JsonNullable.<String>of(modelDescription);
    return this;
  }

  /**
   * Gets or sets the model description of the device which this profile represents.
   * @return modelDescription
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getModelDescription() {
        return modelDescription.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getModelDescription_JsonNullable() {
    return modelDescription;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL_DESCRIPTION)
  public void setModelDescription_JsonNullable(JsonNullable<String> modelDescription) {
    this.modelDescription = modelDescription;
  }

  public void setModelDescription(@javax.annotation.Nullable String modelDescription) {
    this.modelDescription = JsonNullable.<String>of(modelDescription);
  }


  public DeviceProfile modelNumber(@javax.annotation.Nullable String modelNumber) {
    this.modelNumber = JsonNullable.<String>of(modelNumber);
    return this;
  }

  /**
   * Gets or sets the model number of the device which this profile represents.
   * @return modelNumber
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getModelNumber() {
        return modelNumber.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getModelNumber_JsonNullable() {
    return modelNumber;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL_NUMBER)
  public void setModelNumber_JsonNullable(JsonNullable<String> modelNumber) {
    this.modelNumber = modelNumber;
  }

  public void setModelNumber(@javax.annotation.Nullable String modelNumber) {
    this.modelNumber = JsonNullable.<String>of(modelNumber);
  }


  public DeviceProfile modelUrl(@javax.annotation.Nullable String modelUrl) {
    this.modelUrl = JsonNullable.<String>of(modelUrl);
    return this;
  }

  /**
   * Gets or sets the ModelUrl.
   * @return modelUrl
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getModelUrl() {
        return modelUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getModelUrl_JsonNullable() {
    return modelUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL_URL)
  public void setModelUrl_JsonNullable(JsonNullable<String> modelUrl) {
    this.modelUrl = modelUrl;
  }

  public void setModelUrl(@javax.annotation.Nullable String modelUrl) {
    this.modelUrl = JsonNullable.<String>of(modelUrl);
  }


  public DeviceProfile serialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = JsonNullable.<String>of(serialNumber);
    return this;
  }

  /**
   * Gets or sets the serial number of the device which this profile represents.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getSerialNumber() {
        return serialNumber.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSerialNumber_JsonNullable() {
    return serialNumber;
  }
  
  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  public void setSerialNumber_JsonNullable(JsonNullable<String> serialNumber) {
    this.serialNumber = serialNumber;
  }

  public void setSerialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = JsonNullable.<String>of(serialNumber);
  }


  public DeviceProfile enableAlbumArtInDidl(@javax.annotation.Nullable Boolean enableAlbumArtInDidl) {
    this.enableAlbumArtInDidl = enableAlbumArtInDidl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableAlbumArtInDidl.
   * @return enableAlbumArtInDidl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_ALBUM_ART_IN_DIDL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableAlbumArtInDidl() {
    return enableAlbumArtInDidl;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_ALBUM_ART_IN_DIDL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableAlbumArtInDidl(@javax.annotation.Nullable Boolean enableAlbumArtInDidl) {
    this.enableAlbumArtInDidl = enableAlbumArtInDidl;
  }


  public DeviceProfile enableSingleAlbumArtLimit(@javax.annotation.Nullable Boolean enableSingleAlbumArtLimit) {
    this.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableSingleAlbumArtLimit.
   * @return enableSingleAlbumArtLimit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SINGLE_ALBUM_ART_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableSingleAlbumArtLimit() {
    return enableSingleAlbumArtLimit;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SINGLE_ALBUM_ART_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSingleAlbumArtLimit(@javax.annotation.Nullable Boolean enableSingleAlbumArtLimit) {
    this.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
  }


  public DeviceProfile enableSingleSubtitleLimit(@javax.annotation.Nullable Boolean enableSingleSubtitleLimit) {
    this.enableSingleSubtitleLimit = enableSingleSubtitleLimit;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableSingleSubtitleLimit.
   * @return enableSingleSubtitleLimit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SINGLE_SUBTITLE_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableSingleSubtitleLimit() {
    return enableSingleSubtitleLimit;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SINGLE_SUBTITLE_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSingleSubtitleLimit(@javax.annotation.Nullable Boolean enableSingleSubtitleLimit) {
    this.enableSingleSubtitleLimit = enableSingleSubtitleLimit;
  }


  public DeviceProfile supportedMediaTypes(@javax.annotation.Nullable String supportedMediaTypes) {
    this.supportedMediaTypes = supportedMediaTypes;
    return this;
  }

  /**
   * Gets or sets the SupportedMediaTypes.
   * @return supportedMediaTypes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_MEDIA_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSupportedMediaTypes() {
    return supportedMediaTypes;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_MEDIA_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedMediaTypes(@javax.annotation.Nullable String supportedMediaTypes) {
    this.supportedMediaTypes = supportedMediaTypes;
  }


  public DeviceProfile userId(@javax.annotation.Nullable String userId) {
    this.userId = JsonNullable.<String>of(userId);
    return this;
  }

  /**
   * Gets or sets the UserId.
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getUserId() {
        return userId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUserId_JsonNullable() {
    return userId;
  }
  
  @JsonProperty(JSON_PROPERTY_USER_ID)
  public void setUserId_JsonNullable(JsonNullable<String> userId) {
    this.userId = userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = JsonNullable.<String>of(userId);
  }


  public DeviceProfile albumArtPn(@javax.annotation.Nullable String albumArtPn) {
    this.albumArtPn = JsonNullable.<String>of(albumArtPn);
    return this;
  }

  /**
   * Gets or sets the AlbumArtPn.
   * @return albumArtPn
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getAlbumArtPn() {
        return albumArtPn.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALBUM_ART_PN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAlbumArtPn_JsonNullable() {
    return albumArtPn;
  }
  
  @JsonProperty(JSON_PROPERTY_ALBUM_ART_PN)
  public void setAlbumArtPn_JsonNullable(JsonNullable<String> albumArtPn) {
    this.albumArtPn = albumArtPn;
  }

  public void setAlbumArtPn(@javax.annotation.Nullable String albumArtPn) {
    this.albumArtPn = JsonNullable.<String>of(albumArtPn);
  }


  public DeviceProfile maxAlbumArtWidth(@javax.annotation.Nullable Integer maxAlbumArtWidth) {
    this.maxAlbumArtWidth = JsonNullable.<Integer>of(maxAlbumArtWidth);
    return this;
  }

  /**
   * Gets or sets the MaxAlbumArtWidth.
   * @return maxAlbumArtWidth
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxAlbumArtWidth() {
        return maxAlbumArtWidth.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_ALBUM_ART_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxAlbumArtWidth_JsonNullable() {
    return maxAlbumArtWidth;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_ALBUM_ART_WIDTH)
  public void setMaxAlbumArtWidth_JsonNullable(JsonNullable<Integer> maxAlbumArtWidth) {
    this.maxAlbumArtWidth = maxAlbumArtWidth;
  }

  public void setMaxAlbumArtWidth(@javax.annotation.Nullable Integer maxAlbumArtWidth) {
    this.maxAlbumArtWidth = JsonNullable.<Integer>of(maxAlbumArtWidth);
  }


  public DeviceProfile maxAlbumArtHeight(@javax.annotation.Nullable Integer maxAlbumArtHeight) {
    this.maxAlbumArtHeight = JsonNullable.<Integer>of(maxAlbumArtHeight);
    return this;
  }

  /**
   * Gets or sets the MaxAlbumArtHeight.
   * @return maxAlbumArtHeight
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxAlbumArtHeight() {
        return maxAlbumArtHeight.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_ALBUM_ART_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxAlbumArtHeight_JsonNullable() {
    return maxAlbumArtHeight;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_ALBUM_ART_HEIGHT)
  public void setMaxAlbumArtHeight_JsonNullable(JsonNullable<Integer> maxAlbumArtHeight) {
    this.maxAlbumArtHeight = maxAlbumArtHeight;
  }

  public void setMaxAlbumArtHeight(@javax.annotation.Nullable Integer maxAlbumArtHeight) {
    this.maxAlbumArtHeight = JsonNullable.<Integer>of(maxAlbumArtHeight);
  }


  public DeviceProfile maxIconWidth(@javax.annotation.Nullable Integer maxIconWidth) {
    this.maxIconWidth = JsonNullable.<Integer>of(maxIconWidth);
    return this;
  }

  /**
   * Gets or sets the maximum allowed width of embedded icons.
   * @return maxIconWidth
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxIconWidth() {
        return maxIconWidth.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_ICON_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxIconWidth_JsonNullable() {
    return maxIconWidth;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_ICON_WIDTH)
  public void setMaxIconWidth_JsonNullable(JsonNullable<Integer> maxIconWidth) {
    this.maxIconWidth = maxIconWidth;
  }

  public void setMaxIconWidth(@javax.annotation.Nullable Integer maxIconWidth) {
    this.maxIconWidth = JsonNullable.<Integer>of(maxIconWidth);
  }


  public DeviceProfile maxIconHeight(@javax.annotation.Nullable Integer maxIconHeight) {
    this.maxIconHeight = JsonNullable.<Integer>of(maxIconHeight);
    return this;
  }

  /**
   * Gets or sets the maximum allowed height of embedded icons.
   * @return maxIconHeight
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxIconHeight() {
        return maxIconHeight.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_ICON_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxIconHeight_JsonNullable() {
    return maxIconHeight;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_ICON_HEIGHT)
  public void setMaxIconHeight_JsonNullable(JsonNullable<Integer> maxIconHeight) {
    this.maxIconHeight = maxIconHeight;
  }

  public void setMaxIconHeight(@javax.annotation.Nullable Integer maxIconHeight) {
    this.maxIconHeight = JsonNullable.<Integer>of(maxIconHeight);
  }


  public DeviceProfile maxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = JsonNullable.<Integer>of(maxStreamingBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for all streamed content.
   * @return maxStreamingBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxStreamingBitrate() {
        return maxStreamingBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_STREAMING_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxStreamingBitrate_JsonNullable() {
    return maxStreamingBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_STREAMING_BITRATE)
  public void setMaxStreamingBitrate_JsonNullable(JsonNullable<Integer> maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
  }

  public void setMaxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = JsonNullable.<Integer>of(maxStreamingBitrate);
  }


  public DeviceProfile maxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = JsonNullable.<Integer>of(maxStaticBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed content (&#x3D; direct played files).
   * @return maxStaticBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxStaticBitrate() {
        return maxStaticBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_STATIC_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxStaticBitrate_JsonNullable() {
    return maxStaticBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_STATIC_BITRATE)
  public void setMaxStaticBitrate_JsonNullable(JsonNullable<Integer> maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
  }

  public void setMaxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = JsonNullable.<Integer>of(maxStaticBitrate);
  }


  public DeviceProfile musicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = JsonNullable.<Integer>of(musicStreamingTranscodingBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for transcoded music streams.
   * @return musicStreamingTranscodingBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMusicStreamingTranscodingBitrate() {
        return musicStreamingTranscodingBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMusicStreamingTranscodingBitrate_JsonNullable() {
    return musicStreamingTranscodingBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE)
  public void setMusicStreamingTranscodingBitrate_JsonNullable(JsonNullable<Integer> musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
  }

  public void setMusicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = JsonNullable.<Integer>of(musicStreamingTranscodingBitrate);
  }


  public DeviceProfile maxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = JsonNullable.<Integer>of(maxStaticMusicBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed (&#x3D; direct played) music files.
   * @return maxStaticMusicBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxStaticMusicBitrate() {
        return maxStaticMusicBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxStaticMusicBitrate_JsonNullable() {
    return maxStaticMusicBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE)
  public void setMaxStaticMusicBitrate_JsonNullable(JsonNullable<Integer> maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
  }

  public void setMaxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = JsonNullable.<Integer>of(maxStaticMusicBitrate);
  }


  public DeviceProfile sonyAggregationFlags(@javax.annotation.Nullable String sonyAggregationFlags) {
    this.sonyAggregationFlags = JsonNullable.<String>of(sonyAggregationFlags);
    return this;
  }

  /**
   * Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.
   * @return sonyAggregationFlags
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getSonyAggregationFlags() {
        return sonyAggregationFlags.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SONY_AGGREGATION_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSonyAggregationFlags_JsonNullable() {
    return sonyAggregationFlags;
  }
  
  @JsonProperty(JSON_PROPERTY_SONY_AGGREGATION_FLAGS)
  public void setSonyAggregationFlags_JsonNullable(JsonNullable<String> sonyAggregationFlags) {
    this.sonyAggregationFlags = sonyAggregationFlags;
  }

  public void setSonyAggregationFlags(@javax.annotation.Nullable String sonyAggregationFlags) {
    this.sonyAggregationFlags = JsonNullable.<String>of(sonyAggregationFlags);
  }


  public DeviceProfile protocolInfo(@javax.annotation.Nullable String protocolInfo) {
    this.protocolInfo = JsonNullable.<String>of(protocolInfo);
    return this;
  }

  /**
   * Gets or sets the ProtocolInfo.
   * @return protocolInfo
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getProtocolInfo() {
        return protocolInfo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROTOCOL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getProtocolInfo_JsonNullable() {
    return protocolInfo;
  }
  
  @JsonProperty(JSON_PROPERTY_PROTOCOL_INFO)
  public void setProtocolInfo_JsonNullable(JsonNullable<String> protocolInfo) {
    this.protocolInfo = protocolInfo;
  }

  public void setProtocolInfo(@javax.annotation.Nullable String protocolInfo) {
    this.protocolInfo = JsonNullable.<String>of(protocolInfo);
  }


  public DeviceProfile timelineOffsetSeconds(@javax.annotation.Nullable Integer timelineOffsetSeconds) {
    this.timelineOffsetSeconds = timelineOffsetSeconds;
    return this;
  }

  /**
   * Gets or sets the TimelineOffsetSeconds.
   * @return timelineOffsetSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMELINE_OFFSET_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTimelineOffsetSeconds() {
    return timelineOffsetSeconds;
  }


  @JsonProperty(JSON_PROPERTY_TIMELINE_OFFSET_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimelineOffsetSeconds(@javax.annotation.Nullable Integer timelineOffsetSeconds) {
    this.timelineOffsetSeconds = timelineOffsetSeconds;
  }


  public DeviceProfile requiresPlainVideoItems(@javax.annotation.Nullable Boolean requiresPlainVideoItems) {
    this.requiresPlainVideoItems = requiresPlainVideoItems;
    return this;
  }

  /**
   * Gets or sets a value indicating whether RequiresPlainVideoItems.
   * @return requiresPlainVideoItems
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_PLAIN_VIDEO_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequiresPlainVideoItems() {
    return requiresPlainVideoItems;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_PLAIN_VIDEO_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresPlainVideoItems(@javax.annotation.Nullable Boolean requiresPlainVideoItems) {
    this.requiresPlainVideoItems = requiresPlainVideoItems;
  }


  public DeviceProfile requiresPlainFolders(@javax.annotation.Nullable Boolean requiresPlainFolders) {
    this.requiresPlainFolders = requiresPlainFolders;
    return this;
  }

  /**
   * Gets or sets a value indicating whether RequiresPlainFolders.
   * @return requiresPlainFolders
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_PLAIN_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequiresPlainFolders() {
    return requiresPlainFolders;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_PLAIN_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresPlainFolders(@javax.annotation.Nullable Boolean requiresPlainFolders) {
    this.requiresPlainFolders = requiresPlainFolders;
  }


  public DeviceProfile enableMSMediaReceiverRegistrar(@javax.annotation.Nullable Boolean enableMSMediaReceiverRegistrar) {
    this.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.
   * @return enableMSMediaReceiverRegistrar
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableMSMediaReceiverRegistrar() {
    return enableMSMediaReceiverRegistrar;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableMSMediaReceiverRegistrar(@javax.annotation.Nullable Boolean enableMSMediaReceiverRegistrar) {
    this.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar;
  }


  public DeviceProfile ignoreTranscodeByteRangeRequests(@javax.annotation.Nullable Boolean ignoreTranscodeByteRangeRequests) {
    this.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
    return this;
  }

  /**
   * Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.
   * @return ignoreTranscodeByteRangeRequests
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIgnoreTranscodeByteRangeRequests() {
    return ignoreTranscodeByteRangeRequests;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreTranscodeByteRangeRequests(@javax.annotation.Nullable Boolean ignoreTranscodeByteRangeRequests) {
    this.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
  }


  public DeviceProfile xmlRootAttributes(@javax.annotation.Nullable List<XmlAttribute> xmlRootAttributes) {
    this.xmlRootAttributes = xmlRootAttributes;
    return this;
  }

  public DeviceProfile addXmlRootAttributesItem(XmlAttribute xmlRootAttributesItem) {
    if (this.xmlRootAttributes == null) {
      this.xmlRootAttributes = new ArrayList<>();
    }
    this.xmlRootAttributes.add(xmlRootAttributesItem);
    return this;
  }

  /**
   * Gets or sets the XmlRootAttributes.
   * @return xmlRootAttributes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_XML_ROOT_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<XmlAttribute> getXmlRootAttributes() {
    return xmlRootAttributes;
  }


  @JsonProperty(JSON_PROPERTY_XML_ROOT_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setXmlRootAttributes(@javax.annotation.Nullable List<XmlAttribute> xmlRootAttributes) {
    this.xmlRootAttributes = xmlRootAttributes;
  }


  public DeviceProfile directPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
    return this;
  }

  public DeviceProfile addDirectPlayProfilesItem(DirectPlayProfile directPlayProfilesItem) {
    if (this.directPlayProfiles == null) {
      this.directPlayProfiles = new ArrayList<>();
    }
    this.directPlayProfiles.add(directPlayProfilesItem);
    return this;
  }

  /**
   * Gets or sets the direct play profiles.
   * @return directPlayProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_PLAY_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<DirectPlayProfile> getDirectPlayProfiles() {
    return directPlayProfiles;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_PLAY_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
  }


  public DeviceProfile transcodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
    return this;
  }

  public DeviceProfile addTranscodingProfilesItem(TranscodingProfile transcodingProfilesItem) {
    if (this.transcodingProfiles == null) {
      this.transcodingProfiles = new ArrayList<>();
    }
    this.transcodingProfiles.add(transcodingProfilesItem);
    return this;
  }

  /**
   * Gets or sets the transcoding profiles.
   * @return transcodingProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSCODING_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<TranscodingProfile> getTranscodingProfiles() {
    return transcodingProfiles;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCODING_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
  }


  public DeviceProfile containerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
    return this;
  }

  public DeviceProfile addContainerProfilesItem(ContainerProfile containerProfilesItem) {
    if (this.containerProfiles == null) {
      this.containerProfiles = new ArrayList<>();
    }
    this.containerProfiles.add(containerProfilesItem);
    return this;
  }

  /**
   * Gets or sets the container profiles.
   * @return containerProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINER_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ContainerProfile> getContainerProfiles() {
    return containerProfiles;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
  }


  public DeviceProfile codecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
    return this;
  }

  public DeviceProfile addCodecProfilesItem(CodecProfile codecProfilesItem) {
    if (this.codecProfiles == null) {
      this.codecProfiles = new ArrayList<>();
    }
    this.codecProfiles.add(codecProfilesItem);
    return this;
  }

  /**
   * Gets or sets the codec profiles.
   * @return codecProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODEC_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<CodecProfile> getCodecProfiles() {
    return codecProfiles;
  }


  @JsonProperty(JSON_PROPERTY_CODEC_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
  }


  public DeviceProfile responseProfiles(@javax.annotation.Nullable List<ResponseProfile> responseProfiles) {
    this.responseProfiles = responseProfiles;
    return this;
  }

  public DeviceProfile addResponseProfilesItem(ResponseProfile responseProfilesItem) {
    if (this.responseProfiles == null) {
      this.responseProfiles = new ArrayList<>();
    }
    this.responseProfiles.add(responseProfilesItem);
    return this;
  }

  /**
   * Gets or sets the ResponseProfiles.
   * @return responseProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ResponseProfile> getResponseProfiles() {
    return responseProfiles;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseProfiles(@javax.annotation.Nullable List<ResponseProfile> responseProfiles) {
    this.responseProfiles = responseProfiles;
  }


  public DeviceProfile subtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
    return this;
  }

  public DeviceProfile addSubtitleProfilesItem(SubtitleProfile subtitleProfilesItem) {
    if (this.subtitleProfiles == null) {
      this.subtitleProfiles = new ArrayList<>();
    }
    this.subtitleProfiles.add(subtitleProfilesItem);
    return this;
  }

  /**
   * Gets or sets the subtitle profiles.
   * @return subtitleProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTITLE_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<SubtitleProfile> getSubtitleProfiles() {
    return subtitleProfiles;
  }


  @JsonProperty(JSON_PROPERTY_SUBTITLE_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
  }


  /**
   * Return true if this DeviceProfile object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceProfile deviceProfile = (DeviceProfile) o;
    return equalsNullable(this.name, deviceProfile.name) &&
        equalsNullable(this.id, deviceProfile.id) &&
        equalsNullable(this.identification, deviceProfile.identification) &&
        equalsNullable(this.friendlyName, deviceProfile.friendlyName) &&
        equalsNullable(this.manufacturer, deviceProfile.manufacturer) &&
        equalsNullable(this.manufacturerUrl, deviceProfile.manufacturerUrl) &&
        equalsNullable(this.modelName, deviceProfile.modelName) &&
        equalsNullable(this.modelDescription, deviceProfile.modelDescription) &&
        equalsNullable(this.modelNumber, deviceProfile.modelNumber) &&
        equalsNullable(this.modelUrl, deviceProfile.modelUrl) &&
        equalsNullable(this.serialNumber, deviceProfile.serialNumber) &&
        Objects.equals(this.enableAlbumArtInDidl, deviceProfile.enableAlbumArtInDidl) &&
        Objects.equals(this.enableSingleAlbumArtLimit, deviceProfile.enableSingleAlbumArtLimit) &&
        Objects.equals(this.enableSingleSubtitleLimit, deviceProfile.enableSingleSubtitleLimit) &&
        Objects.equals(this.supportedMediaTypes, deviceProfile.supportedMediaTypes) &&
        equalsNullable(this.userId, deviceProfile.userId) &&
        equalsNullable(this.albumArtPn, deviceProfile.albumArtPn) &&
        equalsNullable(this.maxAlbumArtWidth, deviceProfile.maxAlbumArtWidth) &&
        equalsNullable(this.maxAlbumArtHeight, deviceProfile.maxAlbumArtHeight) &&
        equalsNullable(this.maxIconWidth, deviceProfile.maxIconWidth) &&
        equalsNullable(this.maxIconHeight, deviceProfile.maxIconHeight) &&
        equalsNullable(this.maxStreamingBitrate, deviceProfile.maxStreamingBitrate) &&
        equalsNullable(this.maxStaticBitrate, deviceProfile.maxStaticBitrate) &&
        equalsNullable(this.musicStreamingTranscodingBitrate, deviceProfile.musicStreamingTranscodingBitrate) &&
        equalsNullable(this.maxStaticMusicBitrate, deviceProfile.maxStaticMusicBitrate) &&
        equalsNullable(this.sonyAggregationFlags, deviceProfile.sonyAggregationFlags) &&
        equalsNullable(this.protocolInfo, deviceProfile.protocolInfo) &&
        Objects.equals(this.timelineOffsetSeconds, deviceProfile.timelineOffsetSeconds) &&
        Objects.equals(this.requiresPlainVideoItems, deviceProfile.requiresPlainVideoItems) &&
        Objects.equals(this.requiresPlainFolders, deviceProfile.requiresPlainFolders) &&
        Objects.equals(this.enableMSMediaReceiverRegistrar, deviceProfile.enableMSMediaReceiverRegistrar) &&
        Objects.equals(this.ignoreTranscodeByteRangeRequests, deviceProfile.ignoreTranscodeByteRangeRequests) &&
        Objects.equals(this.xmlRootAttributes, deviceProfile.xmlRootAttributes) &&
        Objects.equals(this.directPlayProfiles, deviceProfile.directPlayProfiles) &&
        Objects.equals(this.transcodingProfiles, deviceProfile.transcodingProfiles) &&
        Objects.equals(this.containerProfiles, deviceProfile.containerProfiles) &&
        Objects.equals(this.codecProfiles, deviceProfile.codecProfiles) &&
        Objects.equals(this.responseProfiles, deviceProfile.responseProfiles) &&
        Objects.equals(this.subtitleProfiles, deviceProfile.subtitleProfiles);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(id), hashCodeNullable(identification), hashCodeNullable(friendlyName), hashCodeNullable(manufacturer), hashCodeNullable(manufacturerUrl), hashCodeNullable(modelName), hashCodeNullable(modelDescription), hashCodeNullable(modelNumber), hashCodeNullable(modelUrl), hashCodeNullable(serialNumber), enableAlbumArtInDidl, enableSingleAlbumArtLimit, enableSingleSubtitleLimit, supportedMediaTypes, hashCodeNullable(userId), hashCodeNullable(albumArtPn), hashCodeNullable(maxAlbumArtWidth), hashCodeNullable(maxAlbumArtHeight), hashCodeNullable(maxIconWidth), hashCodeNullable(maxIconHeight), hashCodeNullable(maxStreamingBitrate), hashCodeNullable(maxStaticBitrate), hashCodeNullable(musicStreamingTranscodingBitrate), hashCodeNullable(maxStaticMusicBitrate), hashCodeNullable(sonyAggregationFlags), hashCodeNullable(protocolInfo), timelineOffsetSeconds, requiresPlainVideoItems, requiresPlainFolders, enableMSMediaReceiverRegistrar, ignoreTranscodeByteRangeRequests, xmlRootAttributes, directPlayProfiles, transcodingProfiles, containerProfiles, codecProfiles, responseProfiles, subtitleProfiles);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceProfile {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    manufacturerUrl: ").append(toIndentedString(manufacturerUrl)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelDescription: ").append(toIndentedString(modelDescription)).append("\n");
    sb.append("    modelNumber: ").append(toIndentedString(modelNumber)).append("\n");
    sb.append("    modelUrl: ").append(toIndentedString(modelUrl)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    enableAlbumArtInDidl: ").append(toIndentedString(enableAlbumArtInDidl)).append("\n");
    sb.append("    enableSingleAlbumArtLimit: ").append(toIndentedString(enableSingleAlbumArtLimit)).append("\n");
    sb.append("    enableSingleSubtitleLimit: ").append(toIndentedString(enableSingleSubtitleLimit)).append("\n");
    sb.append("    supportedMediaTypes: ").append(toIndentedString(supportedMediaTypes)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    albumArtPn: ").append(toIndentedString(albumArtPn)).append("\n");
    sb.append("    maxAlbumArtWidth: ").append(toIndentedString(maxAlbumArtWidth)).append("\n");
    sb.append("    maxAlbumArtHeight: ").append(toIndentedString(maxAlbumArtHeight)).append("\n");
    sb.append("    maxIconWidth: ").append(toIndentedString(maxIconWidth)).append("\n");
    sb.append("    maxIconHeight: ").append(toIndentedString(maxIconHeight)).append("\n");
    sb.append("    maxStreamingBitrate: ").append(toIndentedString(maxStreamingBitrate)).append("\n");
    sb.append("    maxStaticBitrate: ").append(toIndentedString(maxStaticBitrate)).append("\n");
    sb.append("    musicStreamingTranscodingBitrate: ").append(toIndentedString(musicStreamingTranscodingBitrate)).append("\n");
    sb.append("    maxStaticMusicBitrate: ").append(toIndentedString(maxStaticMusicBitrate)).append("\n");
    sb.append("    sonyAggregationFlags: ").append(toIndentedString(sonyAggregationFlags)).append("\n");
    sb.append("    protocolInfo: ").append(toIndentedString(protocolInfo)).append("\n");
    sb.append("    timelineOffsetSeconds: ").append(toIndentedString(timelineOffsetSeconds)).append("\n");
    sb.append("    requiresPlainVideoItems: ").append(toIndentedString(requiresPlainVideoItems)).append("\n");
    sb.append("    requiresPlainFolders: ").append(toIndentedString(requiresPlainFolders)).append("\n");
    sb.append("    enableMSMediaReceiverRegistrar: ").append(toIndentedString(enableMSMediaReceiverRegistrar)).append("\n");
    sb.append("    ignoreTranscodeByteRangeRequests: ").append(toIndentedString(ignoreTranscodeByteRangeRequests)).append("\n");
    sb.append("    xmlRootAttributes: ").append(toIndentedString(xmlRootAttributes)).append("\n");
    sb.append("    directPlayProfiles: ").append(toIndentedString(directPlayProfiles)).append("\n");
    sb.append("    transcodingProfiles: ").append(toIndentedString(transcodingProfiles)).append("\n");
    sb.append("    containerProfiles: ").append(toIndentedString(containerProfiles)).append("\n");
    sb.append("    codecProfiles: ").append(toIndentedString(codecProfiles)).append("\n");
    sb.append("    responseProfiles: ").append(toIndentedString(responseProfiles)).append("\n");
    sb.append("    subtitleProfiles: ").append(toIndentedString(subtitleProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `Identification` to the URL query string
    if (getIdentification() != null) {
      joiner.add(getIdentification().toUrlQueryString(prefix + "Identification" + suffix));
    }

    // add `FriendlyName` to the URL query string
    if (getFriendlyName() != null) {
      joiner.add(String.format("%sFriendlyName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFriendlyName()))));
    }

    // add `Manufacturer` to the URL query string
    if (getManufacturer() != null) {
      joiner.add(String.format("%sManufacturer%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getManufacturer()))));
    }

    // add `ManufacturerUrl` to the URL query string
    if (getManufacturerUrl() != null) {
      joiner.add(String.format("%sManufacturerUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getManufacturerUrl()))));
    }

    // add `ModelName` to the URL query string
    if (getModelName() != null) {
      joiner.add(String.format("%sModelName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getModelName()))));
    }

    // add `ModelDescription` to the URL query string
    if (getModelDescription() != null) {
      joiner.add(String.format("%sModelDescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getModelDescription()))));
    }

    // add `ModelNumber` to the URL query string
    if (getModelNumber() != null) {
      joiner.add(String.format("%sModelNumber%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getModelNumber()))));
    }

    // add `ModelUrl` to the URL query string
    if (getModelUrl() != null) {
      joiner.add(String.format("%sModelUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getModelUrl()))));
    }

    // add `SerialNumber` to the URL query string
    if (getSerialNumber() != null) {
      joiner.add(String.format("%sSerialNumber%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSerialNumber()))));
    }

    // add `EnableAlbumArtInDidl` to the URL query string
    if (getEnableAlbumArtInDidl() != null) {
      joiner.add(String.format("%sEnableAlbumArtInDidl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableAlbumArtInDidl()))));
    }

    // add `EnableSingleAlbumArtLimit` to the URL query string
    if (getEnableSingleAlbumArtLimit() != null) {
      joiner.add(String.format("%sEnableSingleAlbumArtLimit%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableSingleAlbumArtLimit()))));
    }

    // add `EnableSingleSubtitleLimit` to the URL query string
    if (getEnableSingleSubtitleLimit() != null) {
      joiner.add(String.format("%sEnableSingleSubtitleLimit%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableSingleSubtitleLimit()))));
    }

    // add `SupportedMediaTypes` to the URL query string
    if (getSupportedMediaTypes() != null) {
      joiner.add(String.format("%sSupportedMediaTypes%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSupportedMediaTypes()))));
    }

    // add `UserId` to the URL query string
    if (getUserId() != null) {
      joiner.add(String.format("%sUserId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUserId()))));
    }

    // add `AlbumArtPn` to the URL query string
    if (getAlbumArtPn() != null) {
      joiner.add(String.format("%sAlbumArtPn%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAlbumArtPn()))));
    }

    // add `MaxAlbumArtWidth` to the URL query string
    if (getMaxAlbumArtWidth() != null) {
      joiner.add(String.format("%sMaxAlbumArtWidth%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxAlbumArtWidth()))));
    }

    // add `MaxAlbumArtHeight` to the URL query string
    if (getMaxAlbumArtHeight() != null) {
      joiner.add(String.format("%sMaxAlbumArtHeight%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxAlbumArtHeight()))));
    }

    // add `MaxIconWidth` to the URL query string
    if (getMaxIconWidth() != null) {
      joiner.add(String.format("%sMaxIconWidth%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxIconWidth()))));
    }

    // add `MaxIconHeight` to the URL query string
    if (getMaxIconHeight() != null) {
      joiner.add(String.format("%sMaxIconHeight%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxIconHeight()))));
    }

    // add `MaxStreamingBitrate` to the URL query string
    if (getMaxStreamingBitrate() != null) {
      joiner.add(String.format("%sMaxStreamingBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxStreamingBitrate()))));
    }

    // add `MaxStaticBitrate` to the URL query string
    if (getMaxStaticBitrate() != null) {
      joiner.add(String.format("%sMaxStaticBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxStaticBitrate()))));
    }

    // add `MusicStreamingTranscodingBitrate` to the URL query string
    if (getMusicStreamingTranscodingBitrate() != null) {
      joiner.add(String.format("%sMusicStreamingTranscodingBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMusicStreamingTranscodingBitrate()))));
    }

    // add `MaxStaticMusicBitrate` to the URL query string
    if (getMaxStaticMusicBitrate() != null) {
      joiner.add(String.format("%sMaxStaticMusicBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxStaticMusicBitrate()))));
    }

    // add `SonyAggregationFlags` to the URL query string
    if (getSonyAggregationFlags() != null) {
      joiner.add(String.format("%sSonyAggregationFlags%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSonyAggregationFlags()))));
    }

    // add `ProtocolInfo` to the URL query string
    if (getProtocolInfo() != null) {
      joiner.add(String.format("%sProtocolInfo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getProtocolInfo()))));
    }

    // add `TimelineOffsetSeconds` to the URL query string
    if (getTimelineOffsetSeconds() != null) {
      joiner.add(String.format("%sTimelineOffsetSeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTimelineOffsetSeconds()))));
    }

    // add `RequiresPlainVideoItems` to the URL query string
    if (getRequiresPlainVideoItems() != null) {
      joiner.add(String.format("%sRequiresPlainVideoItems%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequiresPlainVideoItems()))));
    }

    // add `RequiresPlainFolders` to the URL query string
    if (getRequiresPlainFolders() != null) {
      joiner.add(String.format("%sRequiresPlainFolders%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequiresPlainFolders()))));
    }

    // add `EnableMSMediaReceiverRegistrar` to the URL query string
    if (getEnableMSMediaReceiverRegistrar() != null) {
      joiner.add(String.format("%sEnableMSMediaReceiverRegistrar%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableMSMediaReceiverRegistrar()))));
    }

    // add `IgnoreTranscodeByteRangeRequests` to the URL query string
    if (getIgnoreTranscodeByteRangeRequests() != null) {
      joiner.add(String.format("%sIgnoreTranscodeByteRangeRequests%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIgnoreTranscodeByteRangeRequests()))));
    }

    // add `XmlRootAttributes` to the URL query string
    if (getXmlRootAttributes() != null) {
      for (int i = 0; i < getXmlRootAttributes().size(); i++) {
        if (getXmlRootAttributes().get(i) != null) {
          joiner.add(getXmlRootAttributes().get(i).toUrlQueryString(String.format("%sXmlRootAttributes%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `DirectPlayProfiles` to the URL query string
    if (getDirectPlayProfiles() != null) {
      for (int i = 0; i < getDirectPlayProfiles().size(); i++) {
        if (getDirectPlayProfiles().get(i) != null) {
          joiner.add(getDirectPlayProfiles().get(i).toUrlQueryString(String.format("%sDirectPlayProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `TranscodingProfiles` to the URL query string
    if (getTranscodingProfiles() != null) {
      for (int i = 0; i < getTranscodingProfiles().size(); i++) {
        if (getTranscodingProfiles().get(i) != null) {
          joiner.add(getTranscodingProfiles().get(i).toUrlQueryString(String.format("%sTranscodingProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `ContainerProfiles` to the URL query string
    if (getContainerProfiles() != null) {
      for (int i = 0; i < getContainerProfiles().size(); i++) {
        if (getContainerProfiles().get(i) != null) {
          joiner.add(getContainerProfiles().get(i).toUrlQueryString(String.format("%sContainerProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `CodecProfiles` to the URL query string
    if (getCodecProfiles() != null) {
      for (int i = 0; i < getCodecProfiles().size(); i++) {
        if (getCodecProfiles().get(i) != null) {
          joiner.add(getCodecProfiles().get(i).toUrlQueryString(String.format("%sCodecProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `ResponseProfiles` to the URL query string
    if (getResponseProfiles() != null) {
      for (int i = 0; i < getResponseProfiles().size(); i++) {
        if (getResponseProfiles().get(i) != null) {
          joiner.add(getResponseProfiles().get(i).toUrlQueryString(String.format("%sResponseProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `SubtitleProfiles` to the URL query string
    if (getSubtitleProfiles() != null) {
      for (int i = 0; i < getSubtitleProfiles().size(); i++) {
        if (getSubtitleProfiles().get(i) != null) {
          joiner.add(getSubtitleProfiles().get(i).toUrlQueryString(String.format("%sSubtitleProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

