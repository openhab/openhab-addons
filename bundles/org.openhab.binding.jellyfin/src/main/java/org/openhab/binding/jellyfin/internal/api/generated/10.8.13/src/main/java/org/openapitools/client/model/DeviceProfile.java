/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodecProfile;
import org.openapitools.client.model.ContainerProfile;
import org.openapitools.client.model.DeviceIdentification;
import org.openapitools.client.model.DirectPlayProfile;
import org.openapitools.client.model.ResponseProfile;
import org.openapitools.client.model.SubtitleProfile;
import org.openapitools.client.model.TranscodingProfile;
import org.openapitools.client.model.XmlAttribute;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.  &lt;br /&gt;  Specifically, it defines the supported &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles\&quot;&gt;containers&lt;/see&gt; and  &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles\&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)  the device is able to direct play (without transcoding or remuxing),  as well as which &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles\&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&#39;t.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class DeviceProfile {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  @javax.annotation.Nullable
  private DeviceIdentification identification;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "FriendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  @javax.annotation.Nullable
  private String friendlyName;

  public static final String SERIALIZED_NAME_MANUFACTURER = "Manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  @javax.annotation.Nullable
  private String manufacturer;

  public static final String SERIALIZED_NAME_MANUFACTURER_URL = "ManufacturerUrl";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_URL)
  @javax.annotation.Nullable
  private String manufacturerUrl;

  public static final String SERIALIZED_NAME_MODEL_NAME = "ModelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  @javax.annotation.Nullable
  private String modelName;

  public static final String SERIALIZED_NAME_MODEL_DESCRIPTION = "ModelDescription";
  @SerializedName(SERIALIZED_NAME_MODEL_DESCRIPTION)
  @javax.annotation.Nullable
  private String modelDescription;

  public static final String SERIALIZED_NAME_MODEL_NUMBER = "ModelNumber";
  @SerializedName(SERIALIZED_NAME_MODEL_NUMBER)
  @javax.annotation.Nullable
  private String modelNumber;

  public static final String SERIALIZED_NAME_MODEL_URL = "ModelUrl";
  @SerializedName(SERIALIZED_NAME_MODEL_URL)
  @javax.annotation.Nullable
  private String modelUrl;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  @javax.annotation.Nullable
  private String serialNumber;

  public static final String SERIALIZED_NAME_ENABLE_ALBUM_ART_IN_DIDL = "EnableAlbumArtInDidl";
  @SerializedName(SERIALIZED_NAME_ENABLE_ALBUM_ART_IN_DIDL)
  @javax.annotation.Nullable
  private Boolean enableAlbumArtInDidl = false;

  public static final String SERIALIZED_NAME_ENABLE_SINGLE_ALBUM_ART_LIMIT = "EnableSingleAlbumArtLimit";
  @SerializedName(SERIALIZED_NAME_ENABLE_SINGLE_ALBUM_ART_LIMIT)
  @javax.annotation.Nullable
  private Boolean enableSingleAlbumArtLimit = false;

  public static final String SERIALIZED_NAME_ENABLE_SINGLE_SUBTITLE_LIMIT = "EnableSingleSubtitleLimit";
  @SerializedName(SERIALIZED_NAME_ENABLE_SINGLE_SUBTITLE_LIMIT)
  @javax.annotation.Nullable
  private Boolean enableSingleSubtitleLimit = false;

  public static final String SERIALIZED_NAME_SUPPORTED_MEDIA_TYPES = "SupportedMediaTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_MEDIA_TYPES)
  @javax.annotation.Nullable
  private String supportedMediaTypes;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public static final String SERIALIZED_NAME_ALBUM_ART_PN = "AlbumArtPn";
  @SerializedName(SERIALIZED_NAME_ALBUM_ART_PN)
  @javax.annotation.Nullable
  private String albumArtPn;

  public static final String SERIALIZED_NAME_MAX_ALBUM_ART_WIDTH = "MaxAlbumArtWidth";
  @SerializedName(SERIALIZED_NAME_MAX_ALBUM_ART_WIDTH)
  @javax.annotation.Nullable
  private Integer maxAlbumArtWidth;

  public static final String SERIALIZED_NAME_MAX_ALBUM_ART_HEIGHT = "MaxAlbumArtHeight";
  @SerializedName(SERIALIZED_NAME_MAX_ALBUM_ART_HEIGHT)
  @javax.annotation.Nullable
  private Integer maxAlbumArtHeight;

  public static final String SERIALIZED_NAME_MAX_ICON_WIDTH = "MaxIconWidth";
  @SerializedName(SERIALIZED_NAME_MAX_ICON_WIDTH)
  @javax.annotation.Nullable
  private Integer maxIconWidth;

  public static final String SERIALIZED_NAME_MAX_ICON_HEIGHT = "MaxIconHeight";
  @SerializedName(SERIALIZED_NAME_MAX_ICON_HEIGHT)
  @javax.annotation.Nullable
  private Integer maxIconHeight;

  public static final String SERIALIZED_NAME_MAX_STREAMING_BITRATE = "MaxStreamingBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STREAMING_BITRATE)
  @javax.annotation.Nullable
  private Integer maxStreamingBitrate;

  public static final String SERIALIZED_NAME_MAX_STATIC_BITRATE = "MaxStaticBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STATIC_BITRATE)
  @javax.annotation.Nullable
  private Integer maxStaticBitrate;

  public static final String SERIALIZED_NAME_MUSIC_STREAMING_TRANSCODING_BITRATE = "MusicStreamingTranscodingBitrate";
  @SerializedName(SERIALIZED_NAME_MUSIC_STREAMING_TRANSCODING_BITRATE)
  @javax.annotation.Nullable
  private Integer musicStreamingTranscodingBitrate;

  public static final String SERIALIZED_NAME_MAX_STATIC_MUSIC_BITRATE = "MaxStaticMusicBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STATIC_MUSIC_BITRATE)
  @javax.annotation.Nullable
  private Integer maxStaticMusicBitrate;

  public static final String SERIALIZED_NAME_SONY_AGGREGATION_FLAGS = "SonyAggregationFlags";
  @SerializedName(SERIALIZED_NAME_SONY_AGGREGATION_FLAGS)
  @javax.annotation.Nullable
  private String sonyAggregationFlags;

  public static final String SERIALIZED_NAME_PROTOCOL_INFO = "ProtocolInfo";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_INFO)
  @javax.annotation.Nullable
  private String protocolInfo;

  public static final String SERIALIZED_NAME_TIMELINE_OFFSET_SECONDS = "TimelineOffsetSeconds";
  @SerializedName(SERIALIZED_NAME_TIMELINE_OFFSET_SECONDS)
  @javax.annotation.Nullable
  private Integer timelineOffsetSeconds = 0;

  public static final String SERIALIZED_NAME_REQUIRES_PLAIN_VIDEO_ITEMS = "RequiresPlainVideoItems";
  @SerializedName(SERIALIZED_NAME_REQUIRES_PLAIN_VIDEO_ITEMS)
  @javax.annotation.Nullable
  private Boolean requiresPlainVideoItems = false;

  public static final String SERIALIZED_NAME_REQUIRES_PLAIN_FOLDERS = "RequiresPlainFolders";
  @SerializedName(SERIALIZED_NAME_REQUIRES_PLAIN_FOLDERS)
  @javax.annotation.Nullable
  private Boolean requiresPlainFolders = false;

  public static final String SERIALIZED_NAME_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR = "EnableMSMediaReceiverRegistrar";
  @SerializedName(SERIALIZED_NAME_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR)
  @javax.annotation.Nullable
  private Boolean enableMSMediaReceiverRegistrar = false;

  public static final String SERIALIZED_NAME_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS = "IgnoreTranscodeByteRangeRequests";
  @SerializedName(SERIALIZED_NAME_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS)
  @javax.annotation.Nullable
  private Boolean ignoreTranscodeByteRangeRequests = false;

  public static final String SERIALIZED_NAME_XML_ROOT_ATTRIBUTES = "XmlRootAttributes";
  @SerializedName(SERIALIZED_NAME_XML_ROOT_ATTRIBUTES)
  @javax.annotation.Nullable
  private List<XmlAttribute> xmlRootAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIRECT_PLAY_PROFILES = "DirectPlayProfiles";
  @SerializedName(SERIALIZED_NAME_DIRECT_PLAY_PROFILES)
  @javax.annotation.Nullable
  private List<DirectPlayProfile> directPlayProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSCODING_PROFILES = "TranscodingProfiles";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_PROFILES)
  @javax.annotation.Nullable
  private List<TranscodingProfile> transcodingProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER_PROFILES = "ContainerProfiles";
  @SerializedName(SERIALIZED_NAME_CONTAINER_PROFILES)
  @javax.annotation.Nullable
  private List<ContainerProfile> containerProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODEC_PROFILES = "CodecProfiles";
  @SerializedName(SERIALIZED_NAME_CODEC_PROFILES)
  @javax.annotation.Nullable
  private List<CodecProfile> codecProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_PROFILES = "ResponseProfiles";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PROFILES)
  @javax.annotation.Nullable
  private List<ResponseProfile> responseProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBTITLE_PROFILES = "SubtitleProfiles";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_PROFILES)
  @javax.annotation.Nullable
  private List<SubtitleProfile> subtitleProfiles = new ArrayList<>();

  public DeviceProfile() {
  }

  public DeviceProfile name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name of this device profile.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public DeviceProfile id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public DeviceProfile identification(@javax.annotation.Nullable DeviceIdentification identification) {
    this.identification = identification;
    return this;
  }

  /**
   * Gets or sets the Identification.
   * @return identification
   */
  @javax.annotation.Nullable
  public DeviceIdentification getIdentification() {
    return identification;
  }

  public void setIdentification(@javax.annotation.Nullable DeviceIdentification identification) {
    this.identification = identification;
  }


  public DeviceProfile friendlyName(@javax.annotation.Nullable String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Gets or sets the friendly name of the device profile, which can be shown to users.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(@javax.annotation.Nullable String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public DeviceProfile manufacturer(@javax.annotation.Nullable String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Gets or sets the manufacturer of the device which this profile represents.
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(@javax.annotation.Nullable String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceProfile manufacturerUrl(@javax.annotation.Nullable String manufacturerUrl) {
    this.manufacturerUrl = manufacturerUrl;
    return this;
  }

  /**
   * Gets or sets an url for the manufacturer of the device which this profile represents.
   * @return manufacturerUrl
   */
  @javax.annotation.Nullable
  public String getManufacturerUrl() {
    return manufacturerUrl;
  }

  public void setManufacturerUrl(@javax.annotation.Nullable String manufacturerUrl) {
    this.manufacturerUrl = manufacturerUrl;
  }


  public DeviceProfile modelName(@javax.annotation.Nullable String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Gets or sets the model name of the device which this profile represents.
   * @return modelName
   */
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(@javax.annotation.Nullable String modelName) {
    this.modelName = modelName;
  }


  public DeviceProfile modelDescription(@javax.annotation.Nullable String modelDescription) {
    this.modelDescription = modelDescription;
    return this;
  }

  /**
   * Gets or sets the model description of the device which this profile represents.
   * @return modelDescription
   */
  @javax.annotation.Nullable
  public String getModelDescription() {
    return modelDescription;
  }

  public void setModelDescription(@javax.annotation.Nullable String modelDescription) {
    this.modelDescription = modelDescription;
  }


  public DeviceProfile modelNumber(@javax.annotation.Nullable String modelNumber) {
    this.modelNumber = modelNumber;
    return this;
  }

  /**
   * Gets or sets the model number of the device which this profile represents.
   * @return modelNumber
   */
  @javax.annotation.Nullable
  public String getModelNumber() {
    return modelNumber;
  }

  public void setModelNumber(@javax.annotation.Nullable String modelNumber) {
    this.modelNumber = modelNumber;
  }


  public DeviceProfile modelUrl(@javax.annotation.Nullable String modelUrl) {
    this.modelUrl = modelUrl;
    return this;
  }

  /**
   * Gets or sets the ModelUrl.
   * @return modelUrl
   */
  @javax.annotation.Nullable
  public String getModelUrl() {
    return modelUrl;
  }

  public void setModelUrl(@javax.annotation.Nullable String modelUrl) {
    this.modelUrl = modelUrl;
  }


  public DeviceProfile serialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Gets or sets the serial number of the device which this profile represents.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public DeviceProfile enableAlbumArtInDidl(@javax.annotation.Nullable Boolean enableAlbumArtInDidl) {
    this.enableAlbumArtInDidl = enableAlbumArtInDidl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableAlbumArtInDidl.
   * @return enableAlbumArtInDidl
   */
  @javax.annotation.Nullable
  public Boolean getEnableAlbumArtInDidl() {
    return enableAlbumArtInDidl;
  }

  public void setEnableAlbumArtInDidl(@javax.annotation.Nullable Boolean enableAlbumArtInDidl) {
    this.enableAlbumArtInDidl = enableAlbumArtInDidl;
  }


  public DeviceProfile enableSingleAlbumArtLimit(@javax.annotation.Nullable Boolean enableSingleAlbumArtLimit) {
    this.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableSingleAlbumArtLimit.
   * @return enableSingleAlbumArtLimit
   */
  @javax.annotation.Nullable
  public Boolean getEnableSingleAlbumArtLimit() {
    return enableSingleAlbumArtLimit;
  }

  public void setEnableSingleAlbumArtLimit(@javax.annotation.Nullable Boolean enableSingleAlbumArtLimit) {
    this.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
  }


  public DeviceProfile enableSingleSubtitleLimit(@javax.annotation.Nullable Boolean enableSingleSubtitleLimit) {
    this.enableSingleSubtitleLimit = enableSingleSubtitleLimit;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableSingleSubtitleLimit.
   * @return enableSingleSubtitleLimit
   */
  @javax.annotation.Nullable
  public Boolean getEnableSingleSubtitleLimit() {
    return enableSingleSubtitleLimit;
  }

  public void setEnableSingleSubtitleLimit(@javax.annotation.Nullable Boolean enableSingleSubtitleLimit) {
    this.enableSingleSubtitleLimit = enableSingleSubtitleLimit;
  }


  public DeviceProfile supportedMediaTypes(@javax.annotation.Nullable String supportedMediaTypes) {
    this.supportedMediaTypes = supportedMediaTypes;
    return this;
  }

  /**
   * Gets or sets the SupportedMediaTypes.
   * @return supportedMediaTypes
   */
  @javax.annotation.Nullable
  public String getSupportedMediaTypes() {
    return supportedMediaTypes;
  }

  public void setSupportedMediaTypes(@javax.annotation.Nullable String supportedMediaTypes) {
    this.supportedMediaTypes = supportedMediaTypes;
  }


  public DeviceProfile userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Gets or sets the UserId.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }


  public DeviceProfile albumArtPn(@javax.annotation.Nullable String albumArtPn) {
    this.albumArtPn = albumArtPn;
    return this;
  }

  /**
   * Gets or sets the AlbumArtPn.
   * @return albumArtPn
   */
  @javax.annotation.Nullable
  public String getAlbumArtPn() {
    return albumArtPn;
  }

  public void setAlbumArtPn(@javax.annotation.Nullable String albumArtPn) {
    this.albumArtPn = albumArtPn;
  }


  public DeviceProfile maxAlbumArtWidth(@javax.annotation.Nullable Integer maxAlbumArtWidth) {
    this.maxAlbumArtWidth = maxAlbumArtWidth;
    return this;
  }

  /**
   * Gets or sets the MaxAlbumArtWidth.
   * @return maxAlbumArtWidth
   */
  @javax.annotation.Nullable
  public Integer getMaxAlbumArtWidth() {
    return maxAlbumArtWidth;
  }

  public void setMaxAlbumArtWidth(@javax.annotation.Nullable Integer maxAlbumArtWidth) {
    this.maxAlbumArtWidth = maxAlbumArtWidth;
  }


  public DeviceProfile maxAlbumArtHeight(@javax.annotation.Nullable Integer maxAlbumArtHeight) {
    this.maxAlbumArtHeight = maxAlbumArtHeight;
    return this;
  }

  /**
   * Gets or sets the MaxAlbumArtHeight.
   * @return maxAlbumArtHeight
   */
  @javax.annotation.Nullable
  public Integer getMaxAlbumArtHeight() {
    return maxAlbumArtHeight;
  }

  public void setMaxAlbumArtHeight(@javax.annotation.Nullable Integer maxAlbumArtHeight) {
    this.maxAlbumArtHeight = maxAlbumArtHeight;
  }


  public DeviceProfile maxIconWidth(@javax.annotation.Nullable Integer maxIconWidth) {
    this.maxIconWidth = maxIconWidth;
    return this;
  }

  /**
   * Gets or sets the maximum allowed width of embedded icons.
   * @return maxIconWidth
   */
  @javax.annotation.Nullable
  public Integer getMaxIconWidth() {
    return maxIconWidth;
  }

  public void setMaxIconWidth(@javax.annotation.Nullable Integer maxIconWidth) {
    this.maxIconWidth = maxIconWidth;
  }


  public DeviceProfile maxIconHeight(@javax.annotation.Nullable Integer maxIconHeight) {
    this.maxIconHeight = maxIconHeight;
    return this;
  }

  /**
   * Gets or sets the maximum allowed height of embedded icons.
   * @return maxIconHeight
   */
  @javax.annotation.Nullable
  public Integer getMaxIconHeight() {
    return maxIconHeight;
  }

  public void setMaxIconHeight(@javax.annotation.Nullable Integer maxIconHeight) {
    this.maxIconHeight = maxIconHeight;
  }


  public DeviceProfile maxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for all streamed content.
   * @return maxStreamingBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStreamingBitrate() {
    return maxStreamingBitrate;
  }

  public void setMaxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
  }


  public DeviceProfile maxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed content (&#x3D; direct played files).
   * @return maxStaticBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStaticBitrate() {
    return maxStaticBitrate;
  }

  public void setMaxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
  }


  public DeviceProfile musicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for transcoded music streams.
   * @return musicStreamingTranscodingBitrate
   */
  @javax.annotation.Nullable
  public Integer getMusicStreamingTranscodingBitrate() {
    return musicStreamingTranscodingBitrate;
  }

  public void setMusicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
  }


  public DeviceProfile maxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed (&#x3D; direct played) music files.
   * @return maxStaticMusicBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStaticMusicBitrate() {
    return maxStaticMusicBitrate;
  }

  public void setMaxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
  }


  public DeviceProfile sonyAggregationFlags(@javax.annotation.Nullable String sonyAggregationFlags) {
    this.sonyAggregationFlags = sonyAggregationFlags;
    return this;
  }

  /**
   * Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.
   * @return sonyAggregationFlags
   */
  @javax.annotation.Nullable
  public String getSonyAggregationFlags() {
    return sonyAggregationFlags;
  }

  public void setSonyAggregationFlags(@javax.annotation.Nullable String sonyAggregationFlags) {
    this.sonyAggregationFlags = sonyAggregationFlags;
  }


  public DeviceProfile protocolInfo(@javax.annotation.Nullable String protocolInfo) {
    this.protocolInfo = protocolInfo;
    return this;
  }

  /**
   * Gets or sets the ProtocolInfo.
   * @return protocolInfo
   */
  @javax.annotation.Nullable
  public String getProtocolInfo() {
    return protocolInfo;
  }

  public void setProtocolInfo(@javax.annotation.Nullable String protocolInfo) {
    this.protocolInfo = protocolInfo;
  }


  public DeviceProfile timelineOffsetSeconds(@javax.annotation.Nullable Integer timelineOffsetSeconds) {
    this.timelineOffsetSeconds = timelineOffsetSeconds;
    return this;
  }

  /**
   * Gets or sets the TimelineOffsetSeconds.
   * @return timelineOffsetSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimelineOffsetSeconds() {
    return timelineOffsetSeconds;
  }

  public void setTimelineOffsetSeconds(@javax.annotation.Nullable Integer timelineOffsetSeconds) {
    this.timelineOffsetSeconds = timelineOffsetSeconds;
  }


  public DeviceProfile requiresPlainVideoItems(@javax.annotation.Nullable Boolean requiresPlainVideoItems) {
    this.requiresPlainVideoItems = requiresPlainVideoItems;
    return this;
  }

  /**
   * Gets or sets a value indicating whether RequiresPlainVideoItems.
   * @return requiresPlainVideoItems
   */
  @javax.annotation.Nullable
  public Boolean getRequiresPlainVideoItems() {
    return requiresPlainVideoItems;
  }

  public void setRequiresPlainVideoItems(@javax.annotation.Nullable Boolean requiresPlainVideoItems) {
    this.requiresPlainVideoItems = requiresPlainVideoItems;
  }


  public DeviceProfile requiresPlainFolders(@javax.annotation.Nullable Boolean requiresPlainFolders) {
    this.requiresPlainFolders = requiresPlainFolders;
    return this;
  }

  /**
   * Gets or sets a value indicating whether RequiresPlainFolders.
   * @return requiresPlainFolders
   */
  @javax.annotation.Nullable
  public Boolean getRequiresPlainFolders() {
    return requiresPlainFolders;
  }

  public void setRequiresPlainFolders(@javax.annotation.Nullable Boolean requiresPlainFolders) {
    this.requiresPlainFolders = requiresPlainFolders;
  }


  public DeviceProfile enableMSMediaReceiverRegistrar(@javax.annotation.Nullable Boolean enableMSMediaReceiverRegistrar) {
    this.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.
   * @return enableMSMediaReceiverRegistrar
   */
  @javax.annotation.Nullable
  public Boolean getEnableMSMediaReceiverRegistrar() {
    return enableMSMediaReceiverRegistrar;
  }

  public void setEnableMSMediaReceiverRegistrar(@javax.annotation.Nullable Boolean enableMSMediaReceiverRegistrar) {
    this.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar;
  }


  public DeviceProfile ignoreTranscodeByteRangeRequests(@javax.annotation.Nullable Boolean ignoreTranscodeByteRangeRequests) {
    this.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
    return this;
  }

  /**
   * Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.
   * @return ignoreTranscodeByteRangeRequests
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreTranscodeByteRangeRequests() {
    return ignoreTranscodeByteRangeRequests;
  }

  public void setIgnoreTranscodeByteRangeRequests(@javax.annotation.Nullable Boolean ignoreTranscodeByteRangeRequests) {
    this.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
  }


  public DeviceProfile xmlRootAttributes(@javax.annotation.Nullable List<XmlAttribute> xmlRootAttributes) {
    this.xmlRootAttributes = xmlRootAttributes;
    return this;
  }

  public DeviceProfile addXmlRootAttributesItem(XmlAttribute xmlRootAttributesItem) {
    if (this.xmlRootAttributes == null) {
      this.xmlRootAttributes = new ArrayList<>();
    }
    this.xmlRootAttributes.add(xmlRootAttributesItem);
    return this;
  }

  /**
   * Gets or sets the XmlRootAttributes.
   * @return xmlRootAttributes
   */
  @javax.annotation.Nullable
  public List<XmlAttribute> getXmlRootAttributes() {
    return xmlRootAttributes;
  }

  public void setXmlRootAttributes(@javax.annotation.Nullable List<XmlAttribute> xmlRootAttributes) {
    this.xmlRootAttributes = xmlRootAttributes;
  }


  public DeviceProfile directPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
    return this;
  }

  public DeviceProfile addDirectPlayProfilesItem(DirectPlayProfile directPlayProfilesItem) {
    if (this.directPlayProfiles == null) {
      this.directPlayProfiles = new ArrayList<>();
    }
    this.directPlayProfiles.add(directPlayProfilesItem);
    return this;
  }

  /**
   * Gets or sets the direct play profiles.
   * @return directPlayProfiles
   */
  @javax.annotation.Nullable
  public List<DirectPlayProfile> getDirectPlayProfiles() {
    return directPlayProfiles;
  }

  public void setDirectPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
  }


  public DeviceProfile transcodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
    return this;
  }

  public DeviceProfile addTranscodingProfilesItem(TranscodingProfile transcodingProfilesItem) {
    if (this.transcodingProfiles == null) {
      this.transcodingProfiles = new ArrayList<>();
    }
    this.transcodingProfiles.add(transcodingProfilesItem);
    return this;
  }

  /**
   * Gets or sets the transcoding profiles.
   * @return transcodingProfiles
   */
  @javax.annotation.Nullable
  public List<TranscodingProfile> getTranscodingProfiles() {
    return transcodingProfiles;
  }

  public void setTranscodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
  }


  public DeviceProfile containerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
    return this;
  }

  public DeviceProfile addContainerProfilesItem(ContainerProfile containerProfilesItem) {
    if (this.containerProfiles == null) {
      this.containerProfiles = new ArrayList<>();
    }
    this.containerProfiles.add(containerProfilesItem);
    return this;
  }

  /**
   * Gets or sets the container profiles.
   * @return containerProfiles
   */
  @javax.annotation.Nullable
  public List<ContainerProfile> getContainerProfiles() {
    return containerProfiles;
  }

  public void setContainerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
  }


  public DeviceProfile codecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
    return this;
  }

  public DeviceProfile addCodecProfilesItem(CodecProfile codecProfilesItem) {
    if (this.codecProfiles == null) {
      this.codecProfiles = new ArrayList<>();
    }
    this.codecProfiles.add(codecProfilesItem);
    return this;
  }

  /**
   * Gets or sets the codec profiles.
   * @return codecProfiles
   */
  @javax.annotation.Nullable
  public List<CodecProfile> getCodecProfiles() {
    return codecProfiles;
  }

  public void setCodecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
  }


  public DeviceProfile responseProfiles(@javax.annotation.Nullable List<ResponseProfile> responseProfiles) {
    this.responseProfiles = responseProfiles;
    return this;
  }

  public DeviceProfile addResponseProfilesItem(ResponseProfile responseProfilesItem) {
    if (this.responseProfiles == null) {
      this.responseProfiles = new ArrayList<>();
    }
    this.responseProfiles.add(responseProfilesItem);
    return this;
  }

  /**
   * Gets or sets the ResponseProfiles.
   * @return responseProfiles
   */
  @javax.annotation.Nullable
  public List<ResponseProfile> getResponseProfiles() {
    return responseProfiles;
  }

  public void setResponseProfiles(@javax.annotation.Nullable List<ResponseProfile> responseProfiles) {
    this.responseProfiles = responseProfiles;
  }


  public DeviceProfile subtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
    return this;
  }

  public DeviceProfile addSubtitleProfilesItem(SubtitleProfile subtitleProfilesItem) {
    if (this.subtitleProfiles == null) {
      this.subtitleProfiles = new ArrayList<>();
    }
    this.subtitleProfiles.add(subtitleProfilesItem);
    return this;
  }

  /**
   * Gets or sets the subtitle profiles.
   * @return subtitleProfiles
   */
  @javax.annotation.Nullable
  public List<SubtitleProfile> getSubtitleProfiles() {
    return subtitleProfiles;
  }

  public void setSubtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceProfile deviceProfile = (DeviceProfile) o;
    return Objects.equals(this.name, deviceProfile.name) &&
        Objects.equals(this.id, deviceProfile.id) &&
        Objects.equals(this.identification, deviceProfile.identification) &&
        Objects.equals(this.friendlyName, deviceProfile.friendlyName) &&
        Objects.equals(this.manufacturer, deviceProfile.manufacturer) &&
        Objects.equals(this.manufacturerUrl, deviceProfile.manufacturerUrl) &&
        Objects.equals(this.modelName, deviceProfile.modelName) &&
        Objects.equals(this.modelDescription, deviceProfile.modelDescription) &&
        Objects.equals(this.modelNumber, deviceProfile.modelNumber) &&
        Objects.equals(this.modelUrl, deviceProfile.modelUrl) &&
        Objects.equals(this.serialNumber, deviceProfile.serialNumber) &&
        Objects.equals(this.enableAlbumArtInDidl, deviceProfile.enableAlbumArtInDidl) &&
        Objects.equals(this.enableSingleAlbumArtLimit, deviceProfile.enableSingleAlbumArtLimit) &&
        Objects.equals(this.enableSingleSubtitleLimit, deviceProfile.enableSingleSubtitleLimit) &&
        Objects.equals(this.supportedMediaTypes, deviceProfile.supportedMediaTypes) &&
        Objects.equals(this.userId, deviceProfile.userId) &&
        Objects.equals(this.albumArtPn, deviceProfile.albumArtPn) &&
        Objects.equals(this.maxAlbumArtWidth, deviceProfile.maxAlbumArtWidth) &&
        Objects.equals(this.maxAlbumArtHeight, deviceProfile.maxAlbumArtHeight) &&
        Objects.equals(this.maxIconWidth, deviceProfile.maxIconWidth) &&
        Objects.equals(this.maxIconHeight, deviceProfile.maxIconHeight) &&
        Objects.equals(this.maxStreamingBitrate, deviceProfile.maxStreamingBitrate) &&
        Objects.equals(this.maxStaticBitrate, deviceProfile.maxStaticBitrate) &&
        Objects.equals(this.musicStreamingTranscodingBitrate, deviceProfile.musicStreamingTranscodingBitrate) &&
        Objects.equals(this.maxStaticMusicBitrate, deviceProfile.maxStaticMusicBitrate) &&
        Objects.equals(this.sonyAggregationFlags, deviceProfile.sonyAggregationFlags) &&
        Objects.equals(this.protocolInfo, deviceProfile.protocolInfo) &&
        Objects.equals(this.timelineOffsetSeconds, deviceProfile.timelineOffsetSeconds) &&
        Objects.equals(this.requiresPlainVideoItems, deviceProfile.requiresPlainVideoItems) &&
        Objects.equals(this.requiresPlainFolders, deviceProfile.requiresPlainFolders) &&
        Objects.equals(this.enableMSMediaReceiverRegistrar, deviceProfile.enableMSMediaReceiverRegistrar) &&
        Objects.equals(this.ignoreTranscodeByteRangeRequests, deviceProfile.ignoreTranscodeByteRangeRequests) &&
        Objects.equals(this.xmlRootAttributes, deviceProfile.xmlRootAttributes) &&
        Objects.equals(this.directPlayProfiles, deviceProfile.directPlayProfiles) &&
        Objects.equals(this.transcodingProfiles, deviceProfile.transcodingProfiles) &&
        Objects.equals(this.containerProfiles, deviceProfile.containerProfiles) &&
        Objects.equals(this.codecProfiles, deviceProfile.codecProfiles) &&
        Objects.equals(this.responseProfiles, deviceProfile.responseProfiles) &&
        Objects.equals(this.subtitleProfiles, deviceProfile.subtitleProfiles);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, identification, friendlyName, manufacturer, manufacturerUrl, modelName, modelDescription, modelNumber, modelUrl, serialNumber, enableAlbumArtInDidl, enableSingleAlbumArtLimit, enableSingleSubtitleLimit, supportedMediaTypes, userId, albumArtPn, maxAlbumArtWidth, maxAlbumArtHeight, maxIconWidth, maxIconHeight, maxStreamingBitrate, maxStaticBitrate, musicStreamingTranscodingBitrate, maxStaticMusicBitrate, sonyAggregationFlags, protocolInfo, timelineOffsetSeconds, requiresPlainVideoItems, requiresPlainFolders, enableMSMediaReceiverRegistrar, ignoreTranscodeByteRangeRequests, xmlRootAttributes, directPlayProfiles, transcodingProfiles, containerProfiles, codecProfiles, responseProfiles, subtitleProfiles);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceProfile {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    manufacturerUrl: ").append(toIndentedString(manufacturerUrl)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelDescription: ").append(toIndentedString(modelDescription)).append("\n");
    sb.append("    modelNumber: ").append(toIndentedString(modelNumber)).append("\n");
    sb.append("    modelUrl: ").append(toIndentedString(modelUrl)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    enableAlbumArtInDidl: ").append(toIndentedString(enableAlbumArtInDidl)).append("\n");
    sb.append("    enableSingleAlbumArtLimit: ").append(toIndentedString(enableSingleAlbumArtLimit)).append("\n");
    sb.append("    enableSingleSubtitleLimit: ").append(toIndentedString(enableSingleSubtitleLimit)).append("\n");
    sb.append("    supportedMediaTypes: ").append(toIndentedString(supportedMediaTypes)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    albumArtPn: ").append(toIndentedString(albumArtPn)).append("\n");
    sb.append("    maxAlbumArtWidth: ").append(toIndentedString(maxAlbumArtWidth)).append("\n");
    sb.append("    maxAlbumArtHeight: ").append(toIndentedString(maxAlbumArtHeight)).append("\n");
    sb.append("    maxIconWidth: ").append(toIndentedString(maxIconWidth)).append("\n");
    sb.append("    maxIconHeight: ").append(toIndentedString(maxIconHeight)).append("\n");
    sb.append("    maxStreamingBitrate: ").append(toIndentedString(maxStreamingBitrate)).append("\n");
    sb.append("    maxStaticBitrate: ").append(toIndentedString(maxStaticBitrate)).append("\n");
    sb.append("    musicStreamingTranscodingBitrate: ").append(toIndentedString(musicStreamingTranscodingBitrate)).append("\n");
    sb.append("    maxStaticMusicBitrate: ").append(toIndentedString(maxStaticMusicBitrate)).append("\n");
    sb.append("    sonyAggregationFlags: ").append(toIndentedString(sonyAggregationFlags)).append("\n");
    sb.append("    protocolInfo: ").append(toIndentedString(protocolInfo)).append("\n");
    sb.append("    timelineOffsetSeconds: ").append(toIndentedString(timelineOffsetSeconds)).append("\n");
    sb.append("    requiresPlainVideoItems: ").append(toIndentedString(requiresPlainVideoItems)).append("\n");
    sb.append("    requiresPlainFolders: ").append(toIndentedString(requiresPlainFolders)).append("\n");
    sb.append("    enableMSMediaReceiverRegistrar: ").append(toIndentedString(enableMSMediaReceiverRegistrar)).append("\n");
    sb.append("    ignoreTranscodeByteRangeRequests: ").append(toIndentedString(ignoreTranscodeByteRangeRequests)).append("\n");
    sb.append("    xmlRootAttributes: ").append(toIndentedString(xmlRootAttributes)).append("\n");
    sb.append("    directPlayProfiles: ").append(toIndentedString(directPlayProfiles)).append("\n");
    sb.append("    transcodingProfiles: ").append(toIndentedString(transcodingProfiles)).append("\n");
    sb.append("    containerProfiles: ").append(toIndentedString(containerProfiles)).append("\n");
    sb.append("    codecProfiles: ").append(toIndentedString(codecProfiles)).append("\n");
    sb.append("    responseProfiles: ").append(toIndentedString(responseProfiles)).append("\n");
    sb.append("    subtitleProfiles: ").append(toIndentedString(subtitleProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Id");
    openapiFields.add("Identification");
    openapiFields.add("FriendlyName");
    openapiFields.add("Manufacturer");
    openapiFields.add("ManufacturerUrl");
    openapiFields.add("ModelName");
    openapiFields.add("ModelDescription");
    openapiFields.add("ModelNumber");
    openapiFields.add("ModelUrl");
    openapiFields.add("SerialNumber");
    openapiFields.add("EnableAlbumArtInDidl");
    openapiFields.add("EnableSingleAlbumArtLimit");
    openapiFields.add("EnableSingleSubtitleLimit");
    openapiFields.add("SupportedMediaTypes");
    openapiFields.add("UserId");
    openapiFields.add("AlbumArtPn");
    openapiFields.add("MaxAlbumArtWidth");
    openapiFields.add("MaxAlbumArtHeight");
    openapiFields.add("MaxIconWidth");
    openapiFields.add("MaxIconHeight");
    openapiFields.add("MaxStreamingBitrate");
    openapiFields.add("MaxStaticBitrate");
    openapiFields.add("MusicStreamingTranscodingBitrate");
    openapiFields.add("MaxStaticMusicBitrate");
    openapiFields.add("SonyAggregationFlags");
    openapiFields.add("ProtocolInfo");
    openapiFields.add("TimelineOffsetSeconds");
    openapiFields.add("RequiresPlainVideoItems");
    openapiFields.add("RequiresPlainFolders");
    openapiFields.add("EnableMSMediaReceiverRegistrar");
    openapiFields.add("IgnoreTranscodeByteRangeRequests");
    openapiFields.add("XmlRootAttributes");
    openapiFields.add("DirectPlayProfiles");
    openapiFields.add("TranscodingProfiles");
    openapiFields.add("ContainerProfiles");
    openapiFields.add("CodecProfiles");
    openapiFields.add("ResponseProfiles");
    openapiFields.add("SubtitleProfiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceProfile is not found in the empty JSON string", DeviceProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Identification`
      if (jsonObj.get("Identification") != null && !jsonObj.get("Identification").isJsonNull()) {
        DeviceIdentification.validateJsonElement(jsonObj.get("Identification"));
      }
      if ((jsonObj.get("FriendlyName") != null && !jsonObj.get("FriendlyName").isJsonNull()) && !jsonObj.get("FriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FriendlyName").toString()));
      }
      if ((jsonObj.get("Manufacturer") != null && !jsonObj.get("Manufacturer").isJsonNull()) && !jsonObj.get("Manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Manufacturer").toString()));
      }
      if ((jsonObj.get("ManufacturerUrl") != null && !jsonObj.get("ManufacturerUrl").isJsonNull()) && !jsonObj.get("ManufacturerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManufacturerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManufacturerUrl").toString()));
      }
      if ((jsonObj.get("ModelName") != null && !jsonObj.get("ModelName").isJsonNull()) && !jsonObj.get("ModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelName").toString()));
      }
      if ((jsonObj.get("ModelDescription") != null && !jsonObj.get("ModelDescription").isJsonNull()) && !jsonObj.get("ModelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelDescription").toString()));
      }
      if ((jsonObj.get("ModelNumber") != null && !jsonObj.get("ModelNumber").isJsonNull()) && !jsonObj.get("ModelNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelNumber").toString()));
      }
      if ((jsonObj.get("ModelUrl") != null && !jsonObj.get("ModelUrl").isJsonNull()) && !jsonObj.get("ModelUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelUrl").toString()));
      }
      if ((jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) && !jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
      if ((jsonObj.get("SupportedMediaTypes") != null && !jsonObj.get("SupportedMediaTypes").isJsonNull()) && !jsonObj.get("SupportedMediaTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedMediaTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SupportedMediaTypes").toString()));
      }
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
      if ((jsonObj.get("AlbumArtPn") != null && !jsonObj.get("AlbumArtPn").isJsonNull()) && !jsonObj.get("AlbumArtPn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlbumArtPn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlbumArtPn").toString()));
      }
      if ((jsonObj.get("SonyAggregationFlags") != null && !jsonObj.get("SonyAggregationFlags").isJsonNull()) && !jsonObj.get("SonyAggregationFlags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SonyAggregationFlags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SonyAggregationFlags").toString()));
      }
      if ((jsonObj.get("ProtocolInfo") != null && !jsonObj.get("ProtocolInfo").isJsonNull()) && !jsonObj.get("ProtocolInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProtocolInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProtocolInfo").toString()));
      }
      if (jsonObj.get("XmlRootAttributes") != null && !jsonObj.get("XmlRootAttributes").isJsonNull()) {
        JsonArray jsonArrayxmlRootAttributes = jsonObj.getAsJsonArray("XmlRootAttributes");
        if (jsonArrayxmlRootAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("XmlRootAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `XmlRootAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("XmlRootAttributes").toString()));
          }

          // validate the optional field `XmlRootAttributes` (array)
          for (int i = 0; i < jsonArrayxmlRootAttributes.size(); i++) {
            XmlAttribute.validateJsonElement(jsonArrayxmlRootAttributes.get(i));
          };
        }
      }
      if (jsonObj.get("DirectPlayProfiles") != null && !jsonObj.get("DirectPlayProfiles").isJsonNull()) {
        JsonArray jsonArraydirectPlayProfiles = jsonObj.getAsJsonArray("DirectPlayProfiles");
        if (jsonArraydirectPlayProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DirectPlayProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DirectPlayProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("DirectPlayProfiles").toString()));
          }

          // validate the optional field `DirectPlayProfiles` (array)
          for (int i = 0; i < jsonArraydirectPlayProfiles.size(); i++) {
            DirectPlayProfile.validateJsonElement(jsonArraydirectPlayProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("TranscodingProfiles") != null && !jsonObj.get("TranscodingProfiles").isJsonNull()) {
        JsonArray jsonArraytranscodingProfiles = jsonObj.getAsJsonArray("TranscodingProfiles");
        if (jsonArraytranscodingProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TranscodingProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TranscodingProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("TranscodingProfiles").toString()));
          }

          // validate the optional field `TranscodingProfiles` (array)
          for (int i = 0; i < jsonArraytranscodingProfiles.size(); i++) {
            TranscodingProfile.validateJsonElement(jsonArraytranscodingProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("ContainerProfiles") != null && !jsonObj.get("ContainerProfiles").isJsonNull()) {
        JsonArray jsonArraycontainerProfiles = jsonObj.getAsJsonArray("ContainerProfiles");
        if (jsonArraycontainerProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContainerProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContainerProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("ContainerProfiles").toString()));
          }

          // validate the optional field `ContainerProfiles` (array)
          for (int i = 0; i < jsonArraycontainerProfiles.size(); i++) {
            ContainerProfile.validateJsonElement(jsonArraycontainerProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("CodecProfiles") != null && !jsonObj.get("CodecProfiles").isJsonNull()) {
        JsonArray jsonArraycodecProfiles = jsonObj.getAsJsonArray("CodecProfiles");
        if (jsonArraycodecProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CodecProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CodecProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("CodecProfiles").toString()));
          }

          // validate the optional field `CodecProfiles` (array)
          for (int i = 0; i < jsonArraycodecProfiles.size(); i++) {
            CodecProfile.validateJsonElement(jsonArraycodecProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("ResponseProfiles") != null && !jsonObj.get("ResponseProfiles").isJsonNull()) {
        JsonArray jsonArrayresponseProfiles = jsonObj.getAsJsonArray("ResponseProfiles");
        if (jsonArrayresponseProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ResponseProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ResponseProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("ResponseProfiles").toString()));
          }

          // validate the optional field `ResponseProfiles` (array)
          for (int i = 0; i < jsonArrayresponseProfiles.size(); i++) {
            ResponseProfile.validateJsonElement(jsonArrayresponseProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("SubtitleProfiles") != null && !jsonObj.get("SubtitleProfiles").isJsonNull()) {
        JsonArray jsonArraysubtitleProfiles = jsonObj.getAsJsonArray("SubtitleProfiles");
        if (jsonArraysubtitleProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SubtitleProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SubtitleProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleProfiles").toString()));
          }

          // validate the optional field `SubtitleProfiles` (array)
          for (int i = 0; i < jsonArraysubtitleProfiles.size(); i++) {
            SubtitleProfile.validateJsonElement(jsonArraysubtitleProfiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceProfile>() {
           @Override
           public void write(JsonWriter out, DeviceProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceProfile
   * @throws IOException if the JSON string is invalid with respect to DeviceProfile
   */
  public static DeviceProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceProfile.class);
  }

  /**
   * Convert an instance of DeviceProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

