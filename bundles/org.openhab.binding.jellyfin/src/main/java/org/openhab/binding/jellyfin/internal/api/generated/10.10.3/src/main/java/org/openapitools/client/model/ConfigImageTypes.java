/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * ConfigImageTypes
 */
@JsonPropertyOrder({
  ConfigImageTypes.JSON_PROPERTY_BACKDROP_SIZES,
  ConfigImageTypes.JSON_PROPERTY_BASE_URL,
  ConfigImageTypes.JSON_PROPERTY_LOGO_SIZES,
  ConfigImageTypes.JSON_PROPERTY_POSTER_SIZES,
  ConfigImageTypes.JSON_PROPERTY_PROFILE_SIZES,
  ConfigImageTypes.JSON_PROPERTY_SECURE_BASE_URL,
  ConfigImageTypes.JSON_PROPERTY_STILL_SIZES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:48.410245241Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ConfigImageTypes {
  public static final String JSON_PROPERTY_BACKDROP_SIZES = "BackdropSizes";
  private JsonNullable<List<String>> backdropSizes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_BASE_URL = "BaseUrl";
  private JsonNullable<String> baseUrl = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_LOGO_SIZES = "LogoSizes";
  private JsonNullable<List<String>> logoSizes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_POSTER_SIZES = "PosterSizes";
  private JsonNullable<List<String>> posterSizes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_PROFILE_SIZES = "ProfileSizes";
  private JsonNullable<List<String>> profileSizes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_SECURE_BASE_URL = "SecureBaseUrl";
  private JsonNullable<String> secureBaseUrl = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STILL_SIZES = "StillSizes";
  private JsonNullable<List<String>> stillSizes = JsonNullable.<List<String>>undefined();

  public ConfigImageTypes() { 
  }

  public ConfigImageTypes backdropSizes(@javax.annotation.Nullable List<String> backdropSizes) {
    this.backdropSizes = JsonNullable.<List<String>>of(backdropSizes);
    return this;
  }

  public ConfigImageTypes addBackdropSizesItem(String backdropSizesItem) {
    if (this.backdropSizes == null || !this.backdropSizes.isPresent()) {
      this.backdropSizes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.backdropSizes.get().add(backdropSizesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get backdropSizes
   * @return backdropSizes
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getBackdropSizes() {
        return backdropSizes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BACKDROP_SIZES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getBackdropSizes_JsonNullable() {
    return backdropSizes;
  }
  
  @JsonProperty(JSON_PROPERTY_BACKDROP_SIZES)
  public void setBackdropSizes_JsonNullable(JsonNullable<List<String>> backdropSizes) {
    this.backdropSizes = backdropSizes;
  }

  public void setBackdropSizes(@javax.annotation.Nullable List<String> backdropSizes) {
    this.backdropSizes = JsonNullable.<List<String>>of(backdropSizes);
  }


  public ConfigImageTypes baseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = JsonNullable.<String>of(baseUrl);
    return this;
  }

  /**
   * Get baseUrl
   * @return baseUrl
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getBaseUrl() {
        return baseUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBaseUrl_JsonNullable() {
    return baseUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_BASE_URL)
  public void setBaseUrl_JsonNullable(JsonNullable<String> baseUrl) {
    this.baseUrl = baseUrl;
  }

  public void setBaseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = JsonNullable.<String>of(baseUrl);
  }


  public ConfigImageTypes logoSizes(@javax.annotation.Nullable List<String> logoSizes) {
    this.logoSizes = JsonNullable.<List<String>>of(logoSizes);
    return this;
  }

  public ConfigImageTypes addLogoSizesItem(String logoSizesItem) {
    if (this.logoSizes == null || !this.logoSizes.isPresent()) {
      this.logoSizes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.logoSizes.get().add(logoSizesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get logoSizes
   * @return logoSizes
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getLogoSizes() {
        return logoSizes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOGO_SIZES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getLogoSizes_JsonNullable() {
    return logoSizes;
  }
  
  @JsonProperty(JSON_PROPERTY_LOGO_SIZES)
  public void setLogoSizes_JsonNullable(JsonNullable<List<String>> logoSizes) {
    this.logoSizes = logoSizes;
  }

  public void setLogoSizes(@javax.annotation.Nullable List<String> logoSizes) {
    this.logoSizes = JsonNullable.<List<String>>of(logoSizes);
  }


  public ConfigImageTypes posterSizes(@javax.annotation.Nullable List<String> posterSizes) {
    this.posterSizes = JsonNullable.<List<String>>of(posterSizes);
    return this;
  }

  public ConfigImageTypes addPosterSizesItem(String posterSizesItem) {
    if (this.posterSizes == null || !this.posterSizes.isPresent()) {
      this.posterSizes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.posterSizes.get().add(posterSizesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get posterSizes
   * @return posterSizes
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getPosterSizes() {
        return posterSizes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_POSTER_SIZES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getPosterSizes_JsonNullable() {
    return posterSizes;
  }
  
  @JsonProperty(JSON_PROPERTY_POSTER_SIZES)
  public void setPosterSizes_JsonNullable(JsonNullable<List<String>> posterSizes) {
    this.posterSizes = posterSizes;
  }

  public void setPosterSizes(@javax.annotation.Nullable List<String> posterSizes) {
    this.posterSizes = JsonNullable.<List<String>>of(posterSizes);
  }


  public ConfigImageTypes profileSizes(@javax.annotation.Nullable List<String> profileSizes) {
    this.profileSizes = JsonNullable.<List<String>>of(profileSizes);
    return this;
  }

  public ConfigImageTypes addProfileSizesItem(String profileSizesItem) {
    if (this.profileSizes == null || !this.profileSizes.isPresent()) {
      this.profileSizes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.profileSizes.get().add(profileSizesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get profileSizes
   * @return profileSizes
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getProfileSizes() {
        return profileSizes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROFILE_SIZES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getProfileSizes_JsonNullable() {
    return profileSizes;
  }
  
  @JsonProperty(JSON_PROPERTY_PROFILE_SIZES)
  public void setProfileSizes_JsonNullable(JsonNullable<List<String>> profileSizes) {
    this.profileSizes = profileSizes;
  }

  public void setProfileSizes(@javax.annotation.Nullable List<String> profileSizes) {
    this.profileSizes = JsonNullable.<List<String>>of(profileSizes);
  }


  public ConfigImageTypes secureBaseUrl(@javax.annotation.Nullable String secureBaseUrl) {
    this.secureBaseUrl = JsonNullable.<String>of(secureBaseUrl);
    return this;
  }

  /**
   * Get secureBaseUrl
   * @return secureBaseUrl
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getSecureBaseUrl() {
        return secureBaseUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SECURE_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSecureBaseUrl_JsonNullable() {
    return secureBaseUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_SECURE_BASE_URL)
  public void setSecureBaseUrl_JsonNullable(JsonNullable<String> secureBaseUrl) {
    this.secureBaseUrl = secureBaseUrl;
  }

  public void setSecureBaseUrl(@javax.annotation.Nullable String secureBaseUrl) {
    this.secureBaseUrl = JsonNullable.<String>of(secureBaseUrl);
  }


  public ConfigImageTypes stillSizes(@javax.annotation.Nullable List<String> stillSizes) {
    this.stillSizes = JsonNullable.<List<String>>of(stillSizes);
    return this;
  }

  public ConfigImageTypes addStillSizesItem(String stillSizesItem) {
    if (this.stillSizes == null || !this.stillSizes.isPresent()) {
      this.stillSizes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.stillSizes.get().add(stillSizesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get stillSizes
   * @return stillSizes
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getStillSizes() {
        return stillSizes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STILL_SIZES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getStillSizes_JsonNullable() {
    return stillSizes;
  }
  
  @JsonProperty(JSON_PROPERTY_STILL_SIZES)
  public void setStillSizes_JsonNullable(JsonNullable<List<String>> stillSizes) {
    this.stillSizes = stillSizes;
  }

  public void setStillSizes(@javax.annotation.Nullable List<String> stillSizes) {
    this.stillSizes = JsonNullable.<List<String>>of(stillSizes);
  }


  /**
   * Return true if this ConfigImageTypes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigImageTypes configImageTypes = (ConfigImageTypes) o;
    return equalsNullable(this.backdropSizes, configImageTypes.backdropSizes) &&
        equalsNullable(this.baseUrl, configImageTypes.baseUrl) &&
        equalsNullable(this.logoSizes, configImageTypes.logoSizes) &&
        equalsNullable(this.posterSizes, configImageTypes.posterSizes) &&
        equalsNullable(this.profileSizes, configImageTypes.profileSizes) &&
        equalsNullable(this.secureBaseUrl, configImageTypes.secureBaseUrl) &&
        equalsNullable(this.stillSizes, configImageTypes.stillSizes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(backdropSizes), hashCodeNullable(baseUrl), hashCodeNullable(logoSizes), hashCodeNullable(posterSizes), hashCodeNullable(profileSizes), hashCodeNullable(secureBaseUrl), hashCodeNullable(stillSizes));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigImageTypes {\n");
    sb.append("    backdropSizes: ").append(toIndentedString(backdropSizes)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    logoSizes: ").append(toIndentedString(logoSizes)).append("\n");
    sb.append("    posterSizes: ").append(toIndentedString(posterSizes)).append("\n");
    sb.append("    profileSizes: ").append(toIndentedString(profileSizes)).append("\n");
    sb.append("    secureBaseUrl: ").append(toIndentedString(secureBaseUrl)).append("\n");
    sb.append("    stillSizes: ").append(toIndentedString(stillSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `BackdropSizes` to the URL query string
    if (getBackdropSizes() != null) {
      for (int i = 0; i < getBackdropSizes().size(); i++) {
        joiner.add(String.format("%sBackdropSizes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getBackdropSizes().get(i)))));
      }
    }

    // add `BaseUrl` to the URL query string
    if (getBaseUrl() != null) {
      joiner.add(String.format("%sBaseUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBaseUrl()))));
    }

    // add `LogoSizes` to the URL query string
    if (getLogoSizes() != null) {
      for (int i = 0; i < getLogoSizes().size(); i++) {
        joiner.add(String.format("%sLogoSizes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getLogoSizes().get(i)))));
      }
    }

    // add `PosterSizes` to the URL query string
    if (getPosterSizes() != null) {
      for (int i = 0; i < getPosterSizes().size(); i++) {
        joiner.add(String.format("%sPosterSizes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getPosterSizes().get(i)))));
      }
    }

    // add `ProfileSizes` to the URL query string
    if (getProfileSizes() != null) {
      for (int i = 0; i < getProfileSizes().size(); i++) {
        joiner.add(String.format("%sProfileSizes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getProfileSizes().get(i)))));
      }
    }

    // add `SecureBaseUrl` to the URL query string
    if (getSecureBaseUrl() != null) {
      joiner.add(String.format("%sSecureBaseUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSecureBaseUrl()))));
    }

    // add `StillSizes` to the URL query string
    if (getStillSizes() != null) {
      for (int i = 0; i < getStillSizes().size(); i++) {
        joiner.add(String.format("%sStillSizes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getStillSizes().get(i)))));
      }
    }

    return joiner.toString();
  }
}

