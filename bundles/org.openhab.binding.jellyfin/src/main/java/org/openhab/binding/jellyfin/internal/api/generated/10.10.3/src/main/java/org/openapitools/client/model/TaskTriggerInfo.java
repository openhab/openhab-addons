/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DayOfWeek;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class TaskTriggerInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class TaskTriggerInfo {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_TIME_OF_DAY_TICKS = "TimeOfDayTicks";
  @SerializedName(SERIALIZED_NAME_TIME_OF_DAY_TICKS)
  @javax.annotation.Nullable
  private Long timeOfDayTicks;

  public static final String SERIALIZED_NAME_INTERVAL_TICKS = "IntervalTicks";
  @SerializedName(SERIALIZED_NAME_INTERVAL_TICKS)
  @javax.annotation.Nullable
  private Long intervalTicks;

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "DayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  @javax.annotation.Nullable
  private DayOfWeek dayOfWeek;

  public static final String SERIALIZED_NAME_MAX_RUNTIME_TICKS = "MaxRuntimeTicks";
  @SerializedName(SERIALIZED_NAME_MAX_RUNTIME_TICKS)
  @javax.annotation.Nullable
  private Long maxRuntimeTicks;

  public TaskTriggerInfo() {
  }

  public TaskTriggerInfo type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public TaskTriggerInfo timeOfDayTicks(@javax.annotation.Nullable Long timeOfDayTicks) {
    this.timeOfDayTicks = timeOfDayTicks;
    return this;
  }

  /**
   * Gets or sets the time of day.
   * @return timeOfDayTicks
   */
  @javax.annotation.Nullable
  public Long getTimeOfDayTicks() {
    return timeOfDayTicks;
  }

  public void setTimeOfDayTicks(@javax.annotation.Nullable Long timeOfDayTicks) {
    this.timeOfDayTicks = timeOfDayTicks;
  }


  public TaskTriggerInfo intervalTicks(@javax.annotation.Nullable Long intervalTicks) {
    this.intervalTicks = intervalTicks;
    return this;
  }

  /**
   * Gets or sets the interval.
   * @return intervalTicks
   */
  @javax.annotation.Nullable
  public Long getIntervalTicks() {
    return intervalTicks;
  }

  public void setIntervalTicks(@javax.annotation.Nullable Long intervalTicks) {
    this.intervalTicks = intervalTicks;
  }


  public TaskTriggerInfo dayOfWeek(@javax.annotation.Nullable DayOfWeek dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * Gets or sets the day of week.
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public DayOfWeek getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(@javax.annotation.Nullable DayOfWeek dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public TaskTriggerInfo maxRuntimeTicks(@javax.annotation.Nullable Long maxRuntimeTicks) {
    this.maxRuntimeTicks = maxRuntimeTicks;
    return this;
  }

  /**
   * Gets or sets the maximum runtime ticks.
   * @return maxRuntimeTicks
   */
  @javax.annotation.Nullable
  public Long getMaxRuntimeTicks() {
    return maxRuntimeTicks;
  }

  public void setMaxRuntimeTicks(@javax.annotation.Nullable Long maxRuntimeTicks) {
    this.maxRuntimeTicks = maxRuntimeTicks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskTriggerInfo taskTriggerInfo = (TaskTriggerInfo) o;
    return Objects.equals(this.type, taskTriggerInfo.type) &&
        Objects.equals(this.timeOfDayTicks, taskTriggerInfo.timeOfDayTicks) &&
        Objects.equals(this.intervalTicks, taskTriggerInfo.intervalTicks) &&
        Objects.equals(this.dayOfWeek, taskTriggerInfo.dayOfWeek) &&
        Objects.equals(this.maxRuntimeTicks, taskTriggerInfo.maxRuntimeTicks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, timeOfDayTicks, intervalTicks, dayOfWeek, maxRuntimeTicks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskTriggerInfo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timeOfDayTicks: ").append(toIndentedString(timeOfDayTicks)).append("\n");
    sb.append("    intervalTicks: ").append(toIndentedString(intervalTicks)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    maxRuntimeTicks: ").append(toIndentedString(maxRuntimeTicks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("TimeOfDayTicks");
    openapiFields.add("IntervalTicks");
    openapiFields.add("DayOfWeek");
    openapiFields.add("MaxRuntimeTicks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskTriggerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskTriggerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskTriggerInfo is not found in the empty JSON string", TaskTriggerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskTriggerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskTriggerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `DayOfWeek`
      if (jsonObj.get("DayOfWeek") != null && !jsonObj.get("DayOfWeek").isJsonNull()) {
        DayOfWeek.validateJsonElement(jsonObj.get("DayOfWeek"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskTriggerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskTriggerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskTriggerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskTriggerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskTriggerInfo>() {
           @Override
           public void write(JsonWriter out, TaskTriggerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskTriggerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskTriggerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskTriggerInfo
   * @throws IOException if the JSON string is invalid with respect to TaskTriggerInfo
   */
  public static TaskTriggerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskTriggerInfo.class);
  }

  /**
   * Convert an instance of TaskTriggerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

