/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import java.time.OffsetDateTime;
import org.openapitools.client.model.PlayMethod;
import org.openapitools.client.model.PlaybackProgressInfo;
import org.openapitools.client.model.PlaybackStartInfo;
import org.openapitools.client.model.PlaybackStopInfo;
import org.openapitools.client.model.RepeatMode;
import java.util.UUID;
import org.openapitools.client.model.UserItemDataDto;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class PlaystateApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PlaystateApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PlaystateApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Marks an item as played for user.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param datePlayed Optional. The date the item was played. (optional)
   * @return UserItemDataDto
   * @throws ApiException if fails to make API call
   */
  public UserItemDataDto markPlayedItem(UUID userId, UUID itemId, OffsetDateTime datePlayed) throws ApiException {
    ApiResponse<UserItemDataDto> localVarResponse = markPlayedItemWithHttpInfo(userId, itemId, datePlayed);
    return localVarResponse.getData();
  }

  /**
   * Marks an item as played for user.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param datePlayed Optional. The date the item was played. (optional)
   * @return ApiResponse&lt;UserItemDataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserItemDataDto> markPlayedItemWithHttpInfo(UUID userId, UUID itemId, OffsetDateTime datePlayed) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = markPlayedItemRequestBuilder(userId, itemId, datePlayed);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("markPlayedItem", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserItemDataDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserItemDataDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserItemDataDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder markPlayedItemRequestBuilder(UUID userId, UUID itemId, OffsetDateTime datePlayed) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling markPlayedItem");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling markPlayedItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/PlayedItems/{itemId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "datePlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("datePlayed", datePlayed));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Marks an item as unplayed for user.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return UserItemDataDto
   * @throws ApiException if fails to make API call
   */
  public UserItemDataDto markUnplayedItem(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<UserItemDataDto> localVarResponse = markUnplayedItemWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Marks an item as unplayed for user.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;UserItemDataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserItemDataDto> markUnplayedItemWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = markUnplayedItemRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("markUnplayedItem", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserItemDataDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserItemDataDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserItemDataDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder markUnplayedItemRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling markUnplayedItem");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling markUnplayedItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/PlayedItems/{itemId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Reports a user&#39;s playback progress.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param mediaSourceId The id of the MediaSource. (optional)
   * @param positionTicks Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param volumeLevel Scale of 0-100. (optional)
   * @param playMethod The play method. (optional)
   * @param liveStreamId The live stream id. (optional)
   * @param playSessionId The play session id. (optional)
   * @param repeatMode The repeat mode. (optional)
   * @param isPaused Indicates if the player is paused. (optional, default to false)
   * @param isMuted Indicates if the player is muted. (optional, default to false)
   * @throws ApiException if fails to make API call
   */
  public void onPlaybackProgress(UUID userId, UUID itemId, String mediaSourceId, Long positionTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer volumeLevel, PlayMethod playMethod, String liveStreamId, String playSessionId, RepeatMode repeatMode, Boolean isPaused, Boolean isMuted) throws ApiException {
    onPlaybackProgressWithHttpInfo(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted);
  }

  /**
   * Reports a user&#39;s playback progress.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param mediaSourceId The id of the MediaSource. (optional)
   * @param positionTicks Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param volumeLevel Scale of 0-100. (optional)
   * @param playMethod The play method. (optional)
   * @param liveStreamId The live stream id. (optional)
   * @param playSessionId The play session id. (optional)
   * @param repeatMode The repeat mode. (optional)
   * @param isPaused Indicates if the player is paused. (optional, default to false)
   * @param isMuted Indicates if the player is muted. (optional, default to false)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> onPlaybackProgressWithHttpInfo(UUID userId, UUID itemId, String mediaSourceId, Long positionTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer volumeLevel, PlayMethod playMethod, String liveStreamId, String playSessionId, RepeatMode repeatMode, Boolean isPaused, Boolean isMuted) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = onPlaybackProgressRequestBuilder(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("onPlaybackProgress", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder onPlaybackProgressRequestBuilder(UUID userId, UUID itemId, String mediaSourceId, Long positionTicks, Integer audioStreamIndex, Integer subtitleStreamIndex, Integer volumeLevel, PlayMethod playMethod, String liveStreamId, String playSessionId, RepeatMode repeatMode, Boolean isPaused, Boolean isMuted) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling onPlaybackProgress");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling onPlaybackProgress");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/PlayingItems/{itemId}/Progress"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "mediaSourceId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mediaSourceId", mediaSourceId));
    localVarQueryParameterBaseName = "positionTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positionTicks", positionTicks));
    localVarQueryParameterBaseName = "audioStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("audioStreamIndex", audioStreamIndex));
    localVarQueryParameterBaseName = "subtitleStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subtitleStreamIndex", subtitleStreamIndex));
    localVarQueryParameterBaseName = "volumeLevel";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("volumeLevel", volumeLevel));
    localVarQueryParameterBaseName = "playMethod";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playMethod", playMethod));
    localVarQueryParameterBaseName = "liveStreamId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("liveStreamId", liveStreamId));
    localVarQueryParameterBaseName = "playSessionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playSessionId", playSessionId));
    localVarQueryParameterBaseName = "repeatMode";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("repeatMode", repeatMode));
    localVarQueryParameterBaseName = "isPaused";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isPaused", isPaused));
    localVarQueryParameterBaseName = "isMuted";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isMuted", isMuted));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Reports that a user has begun playing an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param mediaSourceId The id of the MediaSource. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param playMethod The play method. (optional)
   * @param liveStreamId The live stream id. (optional)
   * @param playSessionId The play session id. (optional)
   * @param canSeek Indicates if the client can seek. (optional, default to false)
   * @throws ApiException if fails to make API call
   */
  public void onPlaybackStart(UUID userId, UUID itemId, String mediaSourceId, Integer audioStreamIndex, Integer subtitleStreamIndex, PlayMethod playMethod, String liveStreamId, String playSessionId, Boolean canSeek) throws ApiException {
    onPlaybackStartWithHttpInfo(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek);
  }

  /**
   * Reports that a user has begun playing an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param mediaSourceId The id of the MediaSource. (optional)
   * @param audioStreamIndex The audio stream index. (optional)
   * @param subtitleStreamIndex The subtitle stream index. (optional)
   * @param playMethod The play method. (optional)
   * @param liveStreamId The live stream id. (optional)
   * @param playSessionId The play session id. (optional)
   * @param canSeek Indicates if the client can seek. (optional, default to false)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> onPlaybackStartWithHttpInfo(UUID userId, UUID itemId, String mediaSourceId, Integer audioStreamIndex, Integer subtitleStreamIndex, PlayMethod playMethod, String liveStreamId, String playSessionId, Boolean canSeek) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = onPlaybackStartRequestBuilder(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("onPlaybackStart", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder onPlaybackStartRequestBuilder(UUID userId, UUID itemId, String mediaSourceId, Integer audioStreamIndex, Integer subtitleStreamIndex, PlayMethod playMethod, String liveStreamId, String playSessionId, Boolean canSeek) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling onPlaybackStart");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling onPlaybackStart");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/PlayingItems/{itemId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "mediaSourceId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mediaSourceId", mediaSourceId));
    localVarQueryParameterBaseName = "audioStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("audioStreamIndex", audioStreamIndex));
    localVarQueryParameterBaseName = "subtitleStreamIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subtitleStreamIndex", subtitleStreamIndex));
    localVarQueryParameterBaseName = "playMethod";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playMethod", playMethod));
    localVarQueryParameterBaseName = "liveStreamId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("liveStreamId", liveStreamId));
    localVarQueryParameterBaseName = "playSessionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playSessionId", playSessionId));
    localVarQueryParameterBaseName = "canSeek";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("canSeek", canSeek));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Reports that a user has stopped playing an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param mediaSourceId The id of the MediaSource. (optional)
   * @param nextMediaType The next media type that will play. (optional)
   * @param positionTicks Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)
   * @param liveStreamId The live stream id. (optional)
   * @param playSessionId The play session id. (optional)
   * @throws ApiException if fails to make API call
   */
  public void onPlaybackStopped(UUID userId, UUID itemId, String mediaSourceId, String nextMediaType, Long positionTicks, String liveStreamId, String playSessionId) throws ApiException {
    onPlaybackStoppedWithHttpInfo(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId);
  }

  /**
   * Reports that a user has stopped playing an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param mediaSourceId The id of the MediaSource. (optional)
   * @param nextMediaType The next media type that will play. (optional)
   * @param positionTicks Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)
   * @param liveStreamId The live stream id. (optional)
   * @param playSessionId The play session id. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> onPlaybackStoppedWithHttpInfo(UUID userId, UUID itemId, String mediaSourceId, String nextMediaType, Long positionTicks, String liveStreamId, String playSessionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = onPlaybackStoppedRequestBuilder(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("onPlaybackStopped", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder onPlaybackStoppedRequestBuilder(UUID userId, UUID itemId, String mediaSourceId, String nextMediaType, Long positionTicks, String liveStreamId, String playSessionId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling onPlaybackStopped");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling onPlaybackStopped");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/PlayingItems/{itemId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "mediaSourceId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mediaSourceId", mediaSourceId));
    localVarQueryParameterBaseName = "nextMediaType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextMediaType", nextMediaType));
    localVarQueryParameterBaseName = "positionTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("positionTicks", positionTicks));
    localVarQueryParameterBaseName = "liveStreamId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("liveStreamId", liveStreamId));
    localVarQueryParameterBaseName = "playSessionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playSessionId", playSessionId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Pings a playback session.
   * 
   * @param playSessionId Playback session id. (required)
   * @throws ApiException if fails to make API call
   */
  public void pingPlaybackSession(String playSessionId) throws ApiException {
    pingPlaybackSessionWithHttpInfo(playSessionId);
  }

  /**
   * Pings a playback session.
   * 
   * @param playSessionId Playback session id. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> pingPlaybackSessionWithHttpInfo(String playSessionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = pingPlaybackSessionRequestBuilder(playSessionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("pingPlaybackSession", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder pingPlaybackSessionRequestBuilder(String playSessionId) throws ApiException {
    // verify the required parameter 'playSessionId' is set
    if (playSessionId == null) {
      throw new ApiException(400, "Missing the required parameter 'playSessionId' when calling pingPlaybackSession");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Sessions/Playing/Ping";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "playSessionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playSessionId", playSessionId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Reports playback progress within a session.
   * 
   * @param playbackProgressInfo The playback progress info. (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportPlaybackProgress(PlaybackProgressInfo playbackProgressInfo) throws ApiException {
    reportPlaybackProgressWithHttpInfo(playbackProgressInfo);
  }

  /**
   * Reports playback progress within a session.
   * 
   * @param playbackProgressInfo The playback progress info. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportPlaybackProgressWithHttpInfo(PlaybackProgressInfo playbackProgressInfo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportPlaybackProgressRequestBuilder(playbackProgressInfo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportPlaybackProgress", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportPlaybackProgressRequestBuilder(PlaybackProgressInfo playbackProgressInfo) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Sessions/Playing/Progress";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(playbackProgressInfo);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Reports playback has started within a session.
   * 
   * @param playbackStartInfo The playback start info. (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportPlaybackStart(PlaybackStartInfo playbackStartInfo) throws ApiException {
    reportPlaybackStartWithHttpInfo(playbackStartInfo);
  }

  /**
   * Reports playback has started within a session.
   * 
   * @param playbackStartInfo The playback start info. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportPlaybackStartWithHttpInfo(PlaybackStartInfo playbackStartInfo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportPlaybackStartRequestBuilder(playbackStartInfo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportPlaybackStart", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportPlaybackStartRequestBuilder(PlaybackStartInfo playbackStartInfo) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Sessions/Playing";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(playbackStartInfo);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Reports playback has stopped within a session.
   * 
   * @param playbackStopInfo The playback stop info. (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportPlaybackStopped(PlaybackStopInfo playbackStopInfo) throws ApiException {
    reportPlaybackStoppedWithHttpInfo(playbackStopInfo);
  }

  /**
   * Reports playback has stopped within a session.
   * 
   * @param playbackStopInfo The playback stop info. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportPlaybackStoppedWithHttpInfo(PlaybackStopInfo playbackStopInfo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportPlaybackStoppedRequestBuilder(playbackStopInfo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportPlaybackStopped", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportPlaybackStoppedRequestBuilder(PlaybackStopInfo playbackStopInfo) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Sessions/Playing/Stopped";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(playbackStopInfo);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
