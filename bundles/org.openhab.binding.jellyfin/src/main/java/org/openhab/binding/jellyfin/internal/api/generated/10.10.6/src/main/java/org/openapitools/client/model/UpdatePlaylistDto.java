/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PlaylistUserPermissions;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Update existing playlist dto. Fields set to &#x60;null&#x60; will not be updated and keep their current values.
 */
@JsonPropertyOrder({
  UpdatePlaylistDto.JSON_PROPERTY_NAME,
  UpdatePlaylistDto.JSON_PROPERTY_IDS,
  UpdatePlaylistDto.JSON_PROPERTY_USERS,
  UpdatePlaylistDto.JSON_PROPERTY_IS_PUBLIC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UpdatePlaylistDto {
  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IDS = "Ids";
  private JsonNullable<List<UUID>> ids = JsonNullable.<List<UUID>>undefined();

  public static final String JSON_PROPERTY_USERS = "Users";
  private JsonNullable<List<PlaylistUserPermissions>> users = JsonNullable.<List<PlaylistUserPermissions>>undefined();

  public static final String JSON_PROPERTY_IS_PUBLIC = "IsPublic";
  private JsonNullable<Boolean> isPublic = JsonNullable.<Boolean>undefined();

  public UpdatePlaylistDto() { 
  }

  public UpdatePlaylistDto name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Gets or sets the name of the new playlist.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public UpdatePlaylistDto ids(@javax.annotation.Nullable List<UUID> ids) {
    this.ids = JsonNullable.<List<UUID>>of(ids);
    return this;
  }

  public UpdatePlaylistDto addIdsItem(UUID idsItem) {
    if (this.ids == null || !this.ids.isPresent()) {
      this.ids = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.ids.get().add(idsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Gets or sets item ids of the playlist.
   * @return ids
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<UUID> getIds() {
        return ids.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getIds_JsonNullable() {
    return ids;
  }
  
  @JsonProperty(JSON_PROPERTY_IDS)
  public void setIds_JsonNullable(JsonNullable<List<UUID>> ids) {
    this.ids = ids;
  }

  public void setIds(@javax.annotation.Nullable List<UUID> ids) {
    this.ids = JsonNullable.<List<UUID>>of(ids);
  }


  public UpdatePlaylistDto users(@javax.annotation.Nullable List<PlaylistUserPermissions> users) {
    this.users = JsonNullable.<List<PlaylistUserPermissions>>of(users);
    return this;
  }

  public UpdatePlaylistDto addUsersItem(PlaylistUserPermissions usersItem) {
    if (this.users == null || !this.users.isPresent()) {
      this.users = JsonNullable.<List<PlaylistUserPermissions>>of(new ArrayList<>());
    }
    try {
      this.users.get().add(usersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Gets or sets the playlist users.
   * @return users
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<PlaylistUserPermissions> getUsers() {
        return users.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<PlaylistUserPermissions>> getUsers_JsonNullable() {
    return users;
  }
  
  @JsonProperty(JSON_PROPERTY_USERS)
  public void setUsers_JsonNullable(JsonNullable<List<PlaylistUserPermissions>> users) {
    this.users = users;
  }

  public void setUsers(@javax.annotation.Nullable List<PlaylistUserPermissions> users) {
    this.users = JsonNullable.<List<PlaylistUserPermissions>>of(users);
  }


  public UpdatePlaylistDto isPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = JsonNullable.<Boolean>of(isPublic);
    return this;
  }

  /**
   * Gets or sets a value indicating whether the playlist is public.
   * @return isPublic
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getIsPublic() {
        return isPublic.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_PUBLIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsPublic_JsonNullable() {
    return isPublic;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_PUBLIC)
  public void setIsPublic_JsonNullable(JsonNullable<Boolean> isPublic) {
    this.isPublic = isPublic;
  }

  public void setIsPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = JsonNullable.<Boolean>of(isPublic);
  }


  /**
   * Return true if this UpdatePlaylistDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePlaylistDto updatePlaylistDto = (UpdatePlaylistDto) o;
    return equalsNullable(this.name, updatePlaylistDto.name) &&
        equalsNullable(this.ids, updatePlaylistDto.ids) &&
        equalsNullable(this.users, updatePlaylistDto.users) &&
        equalsNullable(this.isPublic, updatePlaylistDto.isPublic);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(ids), hashCodeNullable(users), hashCodeNullable(isPublic));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePlaylistDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Ids` to the URL query string
    if (getIds() != null) {
      for (int i = 0; i < getIds().size(); i++) {
        if (getIds().get(i) != null) {
          joiner.add(String.format("%sIds%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getIds().get(i)))));
        }
      }
    }

    // add `Users` to the URL query string
    if (getUsers() != null) {
      for (int i = 0; i < getUsers().size(); i++) {
        if (getUsers().get(i) != null) {
          joiner.add(getUsers().get(i).toUrlQueryString(String.format("%sUsers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `IsPublic` to the URL query string
    if (getIsPublic() != null) {
      joiner.add(String.format("%sIsPublic%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsPublic()))));
    }

    return joiner.toString();
  }
}

