/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Used to control the data that gets attached to DtoBaseItems.
 */
@JsonAdapter(ItemFields.Adapter.class)
public enum ItemFields {
  
  AIR_TIME("AirTime"),
  
  CAN_DELETE("CanDelete"),
  
  CAN_DOWNLOAD("CanDownload"),
  
  CHANNEL_INFO("ChannelInfo"),
  
  CHAPTERS("Chapters"),
  
  TRICKPLAY("Trickplay"),
  
  CHILD_COUNT("ChildCount"),
  
  CUMULATIVE_RUN_TIME_TICKS("CumulativeRunTimeTicks"),
  
  CUSTOM_RATING("CustomRating"),
  
  DATE_CREATED("DateCreated"),
  
  DATE_LAST_MEDIA_ADDED("DateLastMediaAdded"),
  
  DISPLAY_PREFERENCES_ID("DisplayPreferencesId"),
  
  ETAG("Etag"),
  
  EXTERNAL_URLS("ExternalUrls"),
  
  GENRES("Genres"),
  
  HOME_PAGE_URL("HomePageUrl"),
  
  ITEM_COUNTS("ItemCounts"),
  
  MEDIA_SOURCE_COUNT("MediaSourceCount"),
  
  MEDIA_SOURCES("MediaSources"),
  
  ORIGINAL_TITLE("OriginalTitle"),
  
  OVERVIEW("Overview"),
  
  PARENT_ID("ParentId"),
  
  PATH("Path"),
  
  PEOPLE("People"),
  
  PLAY_ACCESS("PlayAccess"),
  
  PRODUCTION_LOCATIONS("ProductionLocations"),
  
  PROVIDER_IDS("ProviderIds"),
  
  PRIMARY_IMAGE_ASPECT_RATIO("PrimaryImageAspectRatio"),
  
  RECURSIVE_ITEM_COUNT("RecursiveItemCount"),
  
  SETTINGS("Settings"),
  
  SCREENSHOT_IMAGE_TAGS("ScreenshotImageTags"),
  
  SERIES_PRIMARY_IMAGE("SeriesPrimaryImage"),
  
  SERIES_STUDIO("SeriesStudio"),
  
  SORT_NAME("SortName"),
  
  SPECIAL_EPISODE_NUMBERS("SpecialEpisodeNumbers"),
  
  STUDIOS("Studios"),
  
  TAGLINES("Taglines"),
  
  TAGS("Tags"),
  
  REMOTE_TRAILERS("RemoteTrailers"),
  
  MEDIA_STREAMS("MediaStreams"),
  
  SEASON_USER_DATA("SeasonUserData"),
  
  SERVICE_NAME("ServiceName"),
  
  THEME_SONG_IDS("ThemeSongIds"),
  
  THEME_VIDEO_IDS("ThemeVideoIds"),
  
  EXTERNAL_ETAG("ExternalEtag"),
  
  PRESENTATION_UNIQUE_KEY("PresentationUniqueKey"),
  
  INHERITED_PARENTAL_RATING_VALUE("InheritedParentalRatingValue"),
  
  EXTERNAL_SERIES_ID("ExternalSeriesId"),
  
  SERIES_PRESENTATION_UNIQUE_KEY("SeriesPresentationUniqueKey"),
  
  DATE_LAST_REFRESHED("DateLastRefreshed"),
  
  DATE_LAST_SAVED("DateLastSaved"),
  
  REFRESH_STATE("RefreshState"),
  
  CHANNEL_IMAGE("ChannelImage"),
  
  ENABLE_MEDIA_SOURCE_DISPLAY("EnableMediaSourceDisplay"),
  
  WIDTH("Width"),
  
  HEIGHT("Height"),
  
  EXTRA_IDS("ExtraIds"),
  
  LOCAL_TRAILER_COUNT("LocalTrailerCount"),
  
  IS_HD("IsHD"),
  
  SPECIAL_FEATURE_COUNT("SpecialFeatureCount");

  private String value;

  ItemFields(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ItemFields fromValue(String value) {
    for (ItemFields b : ItemFields.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ItemFields> {
    @Override
    public void write(final JsonWriter jsonWriter, final ItemFields enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ItemFields read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ItemFields.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ItemFields.fromValue(value);
  }
}

