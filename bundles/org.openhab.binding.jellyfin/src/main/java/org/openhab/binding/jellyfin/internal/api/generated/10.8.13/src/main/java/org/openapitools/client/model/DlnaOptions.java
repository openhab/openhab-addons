/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * The DlnaOptions class contains the user definable parameters for the dlna subsystems.
 */
@JsonPropertyOrder({
  DlnaOptions.JSON_PROPERTY_ENABLE_PLAY_TO,
  DlnaOptions.JSON_PROPERTY_ENABLE_SERVER,
  DlnaOptions.JSON_PROPERTY_ENABLE_DEBUG_LOG,
  DlnaOptions.JSON_PROPERTY_ENABLE_PLAY_TO_TRACING,
  DlnaOptions.JSON_PROPERTY_CLIENT_DISCOVERY_INTERVAL_SECONDS,
  DlnaOptions.JSON_PROPERTY_ALIVE_MESSAGE_INTERVAL_SECONDS,
  DlnaOptions.JSON_PROPERTY_BLAST_ALIVE_MESSAGE_INTERVAL_SECONDS,
  DlnaOptions.JSON_PROPERTY_DEFAULT_USER_ID,
  DlnaOptions.JSON_PROPERTY_AUTO_CREATE_PLAY_TO_PROFILES,
  DlnaOptions.JSON_PROPERTY_BLAST_ALIVE_MESSAGES,
  DlnaOptions.JSON_PROPERTY_SEND_ONLY_MATCHED_HOST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class DlnaOptions {
  public static final String JSON_PROPERTY_ENABLE_PLAY_TO = "EnablePlayTo";
  @javax.annotation.Nullable
  private Boolean enablePlayTo;

  public static final String JSON_PROPERTY_ENABLE_SERVER = "EnableServer";
  @javax.annotation.Nullable
  private Boolean enableServer;

  public static final String JSON_PROPERTY_ENABLE_DEBUG_LOG = "EnableDebugLog";
  @javax.annotation.Nullable
  private Boolean enableDebugLog;

  public static final String JSON_PROPERTY_ENABLE_PLAY_TO_TRACING = "EnablePlayToTracing";
  @javax.annotation.Nullable
  private Boolean enablePlayToTracing;

  public static final String JSON_PROPERTY_CLIENT_DISCOVERY_INTERVAL_SECONDS = "ClientDiscoveryIntervalSeconds";
  @javax.annotation.Nullable
  private Integer clientDiscoveryIntervalSeconds;

  public static final String JSON_PROPERTY_ALIVE_MESSAGE_INTERVAL_SECONDS = "AliveMessageIntervalSeconds";
  @javax.annotation.Nullable
  private Integer aliveMessageIntervalSeconds;

  public static final String JSON_PROPERTY_BLAST_ALIVE_MESSAGE_INTERVAL_SECONDS = "BlastAliveMessageIntervalSeconds";
  @javax.annotation.Nullable
  private Integer blastAliveMessageIntervalSeconds;

  public static final String JSON_PROPERTY_DEFAULT_USER_ID = "DefaultUserId";
  private JsonNullable<String> defaultUserId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_AUTO_CREATE_PLAY_TO_PROFILES = "AutoCreatePlayToProfiles";
  @javax.annotation.Nullable
  private Boolean autoCreatePlayToProfiles;

  public static final String JSON_PROPERTY_BLAST_ALIVE_MESSAGES = "BlastAliveMessages";
  @javax.annotation.Nullable
  private Boolean blastAliveMessages;

  public static final String JSON_PROPERTY_SEND_ONLY_MATCHED_HOST = "SendOnlyMatchedHost";
  @javax.annotation.Nullable
  private Boolean sendOnlyMatchedHost;

  public DlnaOptions() { 
  }

  public DlnaOptions enablePlayTo(@javax.annotation.Nullable Boolean enablePlayTo) {
    this.enablePlayTo = enablePlayTo;
    return this;
  }

  /**
   * Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna playTo subsystem.
   * @return enablePlayTo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_PLAY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnablePlayTo() {
    return enablePlayTo;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_PLAY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnablePlayTo(@javax.annotation.Nullable Boolean enablePlayTo) {
    this.enablePlayTo = enablePlayTo;
  }


  public DlnaOptions enableServer(@javax.annotation.Nullable Boolean enableServer) {
    this.enableServer = enableServer;
    return this;
  }

  /**
   * Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna server subsystem.
   * @return enableServer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableServer() {
    return enableServer;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableServer(@javax.annotation.Nullable Boolean enableServer) {
    this.enableServer = enableServer;
  }


  public DlnaOptions enableDebugLog(@javax.annotation.Nullable Boolean enableDebugLog) {
    this.enableDebugLog = enableDebugLog;
    return this;
  }

  /**
   * Gets or sets a value indicating whether detailed dlna server logs are sent to the console/log.  If the setting \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.
   * @return enableDebugLog
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DEBUG_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableDebugLog() {
    return enableDebugLog;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DEBUG_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDebugLog(@javax.annotation.Nullable Boolean enableDebugLog) {
    this.enableDebugLog = enableDebugLog;
  }


  public DlnaOptions enablePlayToTracing(@javax.annotation.Nullable Boolean enablePlayToTracing) {
    this.enablePlayToTracing = enablePlayToTracing;
    return this;
  }

  /**
   * Gets or sets a value indicating whether whether detailed playTo debug logs are sent to the console/log.  If the setting \&quot;Emby.Dlna.PlayTo\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.
   * @return enablePlayToTracing
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_PLAY_TO_TRACING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnablePlayToTracing() {
    return enablePlayToTracing;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_PLAY_TO_TRACING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnablePlayToTracing(@javax.annotation.Nullable Boolean enablePlayToTracing) {
    this.enablePlayToTracing = enablePlayToTracing;
  }


  public DlnaOptions clientDiscoveryIntervalSeconds(@javax.annotation.Nullable Integer clientDiscoveryIntervalSeconds) {
    this.clientDiscoveryIntervalSeconds = clientDiscoveryIntervalSeconds;
    return this;
  }

  /**
   * Gets or sets the ssdp client discovery interval time (in seconds).  This is the time after which the server will send a ssdp search request.
   * @return clientDiscoveryIntervalSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_DISCOVERY_INTERVAL_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getClientDiscoveryIntervalSeconds() {
    return clientDiscoveryIntervalSeconds;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_DISCOVERY_INTERVAL_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientDiscoveryIntervalSeconds(@javax.annotation.Nullable Integer clientDiscoveryIntervalSeconds) {
    this.clientDiscoveryIntervalSeconds = clientDiscoveryIntervalSeconds;
  }


  public DlnaOptions aliveMessageIntervalSeconds(@javax.annotation.Nullable Integer aliveMessageIntervalSeconds) {
    this.aliveMessageIntervalSeconds = aliveMessageIntervalSeconds;
    return this;
  }

  /**
   * Gets or sets the frequency at which ssdp alive notifications are transmitted.
   * @return aliveMessageIntervalSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALIVE_MESSAGE_INTERVAL_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getAliveMessageIntervalSeconds() {
    return aliveMessageIntervalSeconds;
  }


  @JsonProperty(JSON_PROPERTY_ALIVE_MESSAGE_INTERVAL_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAliveMessageIntervalSeconds(@javax.annotation.Nullable Integer aliveMessageIntervalSeconds) {
    this.aliveMessageIntervalSeconds = aliveMessageIntervalSeconds;
  }


  public DlnaOptions blastAliveMessageIntervalSeconds(@javax.annotation.Nullable Integer blastAliveMessageIntervalSeconds) {
    this.blastAliveMessageIntervalSeconds = blastAliveMessageIntervalSeconds;
    return this;
  }

  /**
   * Gets or sets the frequency at which ssdp alive notifications are transmitted. MIGRATING - TO BE REMOVED ONCE WEB HAS BEEN ALTERED.
   * @return blastAliveMessageIntervalSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLAST_ALIVE_MESSAGE_INTERVAL_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getBlastAliveMessageIntervalSeconds() {
    return blastAliveMessageIntervalSeconds;
  }


  @JsonProperty(JSON_PROPERTY_BLAST_ALIVE_MESSAGE_INTERVAL_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlastAliveMessageIntervalSeconds(@javax.annotation.Nullable Integer blastAliveMessageIntervalSeconds) {
    this.blastAliveMessageIntervalSeconds = blastAliveMessageIntervalSeconds;
  }


  public DlnaOptions defaultUserId(@javax.annotation.Nullable String defaultUserId) {
    this.defaultUserId = JsonNullable.<String>of(defaultUserId);
    return this;
  }

  /**
   * Gets or sets the default user account that the dlna server uses.
   * @return defaultUserId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDefaultUserId() {
        return defaultUserId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEFAULT_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDefaultUserId_JsonNullable() {
    return defaultUserId;
  }
  
  @JsonProperty(JSON_PROPERTY_DEFAULT_USER_ID)
  public void setDefaultUserId_JsonNullable(JsonNullable<String> defaultUserId) {
    this.defaultUserId = defaultUserId;
  }

  public void setDefaultUserId(@javax.annotation.Nullable String defaultUserId) {
    this.defaultUserId = JsonNullable.<String>of(defaultUserId);
  }


  public DlnaOptions autoCreatePlayToProfiles(@javax.annotation.Nullable Boolean autoCreatePlayToProfiles) {
    this.autoCreatePlayToProfiles = autoCreatePlayToProfiles;
    return this;
  }

  /**
   * Gets or sets a value indicating whether playTo device profiles should be created.
   * @return autoCreatePlayToProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_CREATE_PLAY_TO_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAutoCreatePlayToProfiles() {
    return autoCreatePlayToProfiles;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_CREATE_PLAY_TO_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoCreatePlayToProfiles(@javax.annotation.Nullable Boolean autoCreatePlayToProfiles) {
    this.autoCreatePlayToProfiles = autoCreatePlayToProfiles;
  }


  public DlnaOptions blastAliveMessages(@javax.annotation.Nullable Boolean blastAliveMessages) {
    this.blastAliveMessages = blastAliveMessages;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to blast alive messages.
   * @return blastAliveMessages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLAST_ALIVE_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getBlastAliveMessages() {
    return blastAliveMessages;
  }


  @JsonProperty(JSON_PROPERTY_BLAST_ALIVE_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlastAliveMessages(@javax.annotation.Nullable Boolean blastAliveMessages) {
    this.blastAliveMessages = blastAliveMessages;
  }


  public DlnaOptions sendOnlyMatchedHost(@javax.annotation.Nullable Boolean sendOnlyMatchedHost) {
    this.sendOnlyMatchedHost = sendOnlyMatchedHost;
    return this;
  }

  /**
   * gets or sets a value indicating whether to send only matched host.
   * @return sendOnlyMatchedHost
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_ONLY_MATCHED_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSendOnlyMatchedHost() {
    return sendOnlyMatchedHost;
  }


  @JsonProperty(JSON_PROPERTY_SEND_ONLY_MATCHED_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendOnlyMatchedHost(@javax.annotation.Nullable Boolean sendOnlyMatchedHost) {
    this.sendOnlyMatchedHost = sendOnlyMatchedHost;
  }


  /**
   * Return true if this DlnaOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DlnaOptions dlnaOptions = (DlnaOptions) o;
    return Objects.equals(this.enablePlayTo, dlnaOptions.enablePlayTo) &&
        Objects.equals(this.enableServer, dlnaOptions.enableServer) &&
        Objects.equals(this.enableDebugLog, dlnaOptions.enableDebugLog) &&
        Objects.equals(this.enablePlayToTracing, dlnaOptions.enablePlayToTracing) &&
        Objects.equals(this.clientDiscoveryIntervalSeconds, dlnaOptions.clientDiscoveryIntervalSeconds) &&
        Objects.equals(this.aliveMessageIntervalSeconds, dlnaOptions.aliveMessageIntervalSeconds) &&
        Objects.equals(this.blastAliveMessageIntervalSeconds, dlnaOptions.blastAliveMessageIntervalSeconds) &&
        equalsNullable(this.defaultUserId, dlnaOptions.defaultUserId) &&
        Objects.equals(this.autoCreatePlayToProfiles, dlnaOptions.autoCreatePlayToProfiles) &&
        Objects.equals(this.blastAliveMessages, dlnaOptions.blastAliveMessages) &&
        Objects.equals(this.sendOnlyMatchedHost, dlnaOptions.sendOnlyMatchedHost);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enablePlayTo, enableServer, enableDebugLog, enablePlayToTracing, clientDiscoveryIntervalSeconds, aliveMessageIntervalSeconds, blastAliveMessageIntervalSeconds, hashCodeNullable(defaultUserId), autoCreatePlayToProfiles, blastAliveMessages, sendOnlyMatchedHost);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DlnaOptions {\n");
    sb.append("    enablePlayTo: ").append(toIndentedString(enablePlayTo)).append("\n");
    sb.append("    enableServer: ").append(toIndentedString(enableServer)).append("\n");
    sb.append("    enableDebugLog: ").append(toIndentedString(enableDebugLog)).append("\n");
    sb.append("    enablePlayToTracing: ").append(toIndentedString(enablePlayToTracing)).append("\n");
    sb.append("    clientDiscoveryIntervalSeconds: ").append(toIndentedString(clientDiscoveryIntervalSeconds)).append("\n");
    sb.append("    aliveMessageIntervalSeconds: ").append(toIndentedString(aliveMessageIntervalSeconds)).append("\n");
    sb.append("    blastAliveMessageIntervalSeconds: ").append(toIndentedString(blastAliveMessageIntervalSeconds)).append("\n");
    sb.append("    defaultUserId: ").append(toIndentedString(defaultUserId)).append("\n");
    sb.append("    autoCreatePlayToProfiles: ").append(toIndentedString(autoCreatePlayToProfiles)).append("\n");
    sb.append("    blastAliveMessages: ").append(toIndentedString(blastAliveMessages)).append("\n");
    sb.append("    sendOnlyMatchedHost: ").append(toIndentedString(sendOnlyMatchedHost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `EnablePlayTo` to the URL query string
    if (getEnablePlayTo() != null) {
      joiner.add(String.format("%sEnablePlayTo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnablePlayTo()))));
    }

    // add `EnableServer` to the URL query string
    if (getEnableServer() != null) {
      joiner.add(String.format("%sEnableServer%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableServer()))));
    }

    // add `EnableDebugLog` to the URL query string
    if (getEnableDebugLog() != null) {
      joiner.add(String.format("%sEnableDebugLog%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDebugLog()))));
    }

    // add `EnablePlayToTracing` to the URL query string
    if (getEnablePlayToTracing() != null) {
      joiner.add(String.format("%sEnablePlayToTracing%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnablePlayToTracing()))));
    }

    // add `ClientDiscoveryIntervalSeconds` to the URL query string
    if (getClientDiscoveryIntervalSeconds() != null) {
      joiner.add(String.format("%sClientDiscoveryIntervalSeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getClientDiscoveryIntervalSeconds()))));
    }

    // add `AliveMessageIntervalSeconds` to the URL query string
    if (getAliveMessageIntervalSeconds() != null) {
      joiner.add(String.format("%sAliveMessageIntervalSeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAliveMessageIntervalSeconds()))));
    }

    // add `BlastAliveMessageIntervalSeconds` to the URL query string
    if (getBlastAliveMessageIntervalSeconds() != null) {
      joiner.add(String.format("%sBlastAliveMessageIntervalSeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBlastAliveMessageIntervalSeconds()))));
    }

    // add `DefaultUserId` to the URL query string
    if (getDefaultUserId() != null) {
      joiner.add(String.format("%sDefaultUserId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDefaultUserId()))));
    }

    // add `AutoCreatePlayToProfiles` to the URL query string
    if (getAutoCreatePlayToProfiles() != null) {
      joiner.add(String.format("%sAutoCreatePlayToProfiles%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAutoCreatePlayToProfiles()))));
    }

    // add `BlastAliveMessages` to the URL query string
    if (getBlastAliveMessages() != null) {
      joiner.add(String.format("%sBlastAliveMessages%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBlastAliveMessages()))));
    }

    // add `SendOnlyMatchedHost` to the URL query string
    if (getSendOnlyMatchedHost() != null) {
      joiner.add(String.format("%sSendOnlyMatchedHost%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSendOnlyMatchedHost()))));
    }

    return joiner.toString();
  }
}

