/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The DlnaOptions class contains the user definable parameters for the dlna subsystems.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class DlnaOptions {
  public static final String SERIALIZED_NAME_ENABLE_PLAY_TO = "EnablePlayTo";
  @SerializedName(SERIALIZED_NAME_ENABLE_PLAY_TO)
  @javax.annotation.Nullable
  private Boolean enablePlayTo;

  public static final String SERIALIZED_NAME_ENABLE_SERVER = "EnableServer";
  @SerializedName(SERIALIZED_NAME_ENABLE_SERVER)
  @javax.annotation.Nullable
  private Boolean enableServer;

  public static final String SERIALIZED_NAME_ENABLE_DEBUG_LOG = "EnableDebugLog";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEBUG_LOG)
  @javax.annotation.Nullable
  private Boolean enableDebugLog;

  public static final String SERIALIZED_NAME_ENABLE_PLAY_TO_TRACING = "EnablePlayToTracing";
  @SerializedName(SERIALIZED_NAME_ENABLE_PLAY_TO_TRACING)
  @javax.annotation.Nullable
  private Boolean enablePlayToTracing;

  public static final String SERIALIZED_NAME_CLIENT_DISCOVERY_INTERVAL_SECONDS = "ClientDiscoveryIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_CLIENT_DISCOVERY_INTERVAL_SECONDS)
  @javax.annotation.Nullable
  private Integer clientDiscoveryIntervalSeconds;

  public static final String SERIALIZED_NAME_ALIVE_MESSAGE_INTERVAL_SECONDS = "AliveMessageIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_ALIVE_MESSAGE_INTERVAL_SECONDS)
  @javax.annotation.Nullable
  private Integer aliveMessageIntervalSeconds;

  public static final String SERIALIZED_NAME_BLAST_ALIVE_MESSAGE_INTERVAL_SECONDS = "BlastAliveMessageIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_BLAST_ALIVE_MESSAGE_INTERVAL_SECONDS)
  @javax.annotation.Nullable
  private Integer blastAliveMessageIntervalSeconds;

  public static final String SERIALIZED_NAME_DEFAULT_USER_ID = "DefaultUserId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_USER_ID)
  @javax.annotation.Nullable
  private String defaultUserId;

  public static final String SERIALIZED_NAME_AUTO_CREATE_PLAY_TO_PROFILES = "AutoCreatePlayToProfiles";
  @SerializedName(SERIALIZED_NAME_AUTO_CREATE_PLAY_TO_PROFILES)
  @javax.annotation.Nullable
  private Boolean autoCreatePlayToProfiles;

  public static final String SERIALIZED_NAME_BLAST_ALIVE_MESSAGES = "BlastAliveMessages";
  @SerializedName(SERIALIZED_NAME_BLAST_ALIVE_MESSAGES)
  @javax.annotation.Nullable
  private Boolean blastAliveMessages;

  public static final String SERIALIZED_NAME_SEND_ONLY_MATCHED_HOST = "SendOnlyMatchedHost";
  @SerializedName(SERIALIZED_NAME_SEND_ONLY_MATCHED_HOST)
  @javax.annotation.Nullable
  private Boolean sendOnlyMatchedHost;

  public DlnaOptions() {
  }

  public DlnaOptions enablePlayTo(@javax.annotation.Nullable Boolean enablePlayTo) {
    this.enablePlayTo = enablePlayTo;
    return this;
  }

  /**
   * Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna playTo subsystem.
   * @return enablePlayTo
   */
  @javax.annotation.Nullable
  public Boolean getEnablePlayTo() {
    return enablePlayTo;
  }

  public void setEnablePlayTo(@javax.annotation.Nullable Boolean enablePlayTo) {
    this.enablePlayTo = enablePlayTo;
  }


  public DlnaOptions enableServer(@javax.annotation.Nullable Boolean enableServer) {
    this.enableServer = enableServer;
    return this;
  }

  /**
   * Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna server subsystem.
   * @return enableServer
   */
  @javax.annotation.Nullable
  public Boolean getEnableServer() {
    return enableServer;
  }

  public void setEnableServer(@javax.annotation.Nullable Boolean enableServer) {
    this.enableServer = enableServer;
  }


  public DlnaOptions enableDebugLog(@javax.annotation.Nullable Boolean enableDebugLog) {
    this.enableDebugLog = enableDebugLog;
    return this;
  }

  /**
   * Gets or sets a value indicating whether detailed dlna server logs are sent to the console/log.  If the setting \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.
   * @return enableDebugLog
   */
  @javax.annotation.Nullable
  public Boolean getEnableDebugLog() {
    return enableDebugLog;
  }

  public void setEnableDebugLog(@javax.annotation.Nullable Boolean enableDebugLog) {
    this.enableDebugLog = enableDebugLog;
  }


  public DlnaOptions enablePlayToTracing(@javax.annotation.Nullable Boolean enablePlayToTracing) {
    this.enablePlayToTracing = enablePlayToTracing;
    return this;
  }

  /**
   * Gets or sets a value indicating whether whether detailed playTo debug logs are sent to the console/log.  If the setting \&quot;Emby.Dlna.PlayTo\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.
   * @return enablePlayToTracing
   */
  @javax.annotation.Nullable
  public Boolean getEnablePlayToTracing() {
    return enablePlayToTracing;
  }

  public void setEnablePlayToTracing(@javax.annotation.Nullable Boolean enablePlayToTracing) {
    this.enablePlayToTracing = enablePlayToTracing;
  }


  public DlnaOptions clientDiscoveryIntervalSeconds(@javax.annotation.Nullable Integer clientDiscoveryIntervalSeconds) {
    this.clientDiscoveryIntervalSeconds = clientDiscoveryIntervalSeconds;
    return this;
  }

  /**
   * Gets or sets the ssdp client discovery interval time (in seconds).  This is the time after which the server will send a ssdp search request.
   * @return clientDiscoveryIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getClientDiscoveryIntervalSeconds() {
    return clientDiscoveryIntervalSeconds;
  }

  public void setClientDiscoveryIntervalSeconds(@javax.annotation.Nullable Integer clientDiscoveryIntervalSeconds) {
    this.clientDiscoveryIntervalSeconds = clientDiscoveryIntervalSeconds;
  }


  public DlnaOptions aliveMessageIntervalSeconds(@javax.annotation.Nullable Integer aliveMessageIntervalSeconds) {
    this.aliveMessageIntervalSeconds = aliveMessageIntervalSeconds;
    return this;
  }

  /**
   * Gets or sets the frequency at which ssdp alive notifications are transmitted.
   * @return aliveMessageIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getAliveMessageIntervalSeconds() {
    return aliveMessageIntervalSeconds;
  }

  public void setAliveMessageIntervalSeconds(@javax.annotation.Nullable Integer aliveMessageIntervalSeconds) {
    this.aliveMessageIntervalSeconds = aliveMessageIntervalSeconds;
  }


  public DlnaOptions blastAliveMessageIntervalSeconds(@javax.annotation.Nullable Integer blastAliveMessageIntervalSeconds) {
    this.blastAliveMessageIntervalSeconds = blastAliveMessageIntervalSeconds;
    return this;
  }

  /**
   * Gets or sets the frequency at which ssdp alive notifications are transmitted. MIGRATING - TO BE REMOVED ONCE WEB HAS BEEN ALTERED.
   * @return blastAliveMessageIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getBlastAliveMessageIntervalSeconds() {
    return blastAliveMessageIntervalSeconds;
  }

  public void setBlastAliveMessageIntervalSeconds(@javax.annotation.Nullable Integer blastAliveMessageIntervalSeconds) {
    this.blastAliveMessageIntervalSeconds = blastAliveMessageIntervalSeconds;
  }


  public DlnaOptions defaultUserId(@javax.annotation.Nullable String defaultUserId) {
    this.defaultUserId = defaultUserId;
    return this;
  }

  /**
   * Gets or sets the default user account that the dlna server uses.
   * @return defaultUserId
   */
  @javax.annotation.Nullable
  public String getDefaultUserId() {
    return defaultUserId;
  }

  public void setDefaultUserId(@javax.annotation.Nullable String defaultUserId) {
    this.defaultUserId = defaultUserId;
  }


  public DlnaOptions autoCreatePlayToProfiles(@javax.annotation.Nullable Boolean autoCreatePlayToProfiles) {
    this.autoCreatePlayToProfiles = autoCreatePlayToProfiles;
    return this;
  }

  /**
   * Gets or sets a value indicating whether playTo device profiles should be created.
   * @return autoCreatePlayToProfiles
   */
  @javax.annotation.Nullable
  public Boolean getAutoCreatePlayToProfiles() {
    return autoCreatePlayToProfiles;
  }

  public void setAutoCreatePlayToProfiles(@javax.annotation.Nullable Boolean autoCreatePlayToProfiles) {
    this.autoCreatePlayToProfiles = autoCreatePlayToProfiles;
  }


  public DlnaOptions blastAliveMessages(@javax.annotation.Nullable Boolean blastAliveMessages) {
    this.blastAliveMessages = blastAliveMessages;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to blast alive messages.
   * @return blastAliveMessages
   */
  @javax.annotation.Nullable
  public Boolean getBlastAliveMessages() {
    return blastAliveMessages;
  }

  public void setBlastAliveMessages(@javax.annotation.Nullable Boolean blastAliveMessages) {
    this.blastAliveMessages = blastAliveMessages;
  }


  public DlnaOptions sendOnlyMatchedHost(@javax.annotation.Nullable Boolean sendOnlyMatchedHost) {
    this.sendOnlyMatchedHost = sendOnlyMatchedHost;
    return this;
  }

  /**
   * gets or sets a value indicating whether to send only matched host.
   * @return sendOnlyMatchedHost
   */
  @javax.annotation.Nullable
  public Boolean getSendOnlyMatchedHost() {
    return sendOnlyMatchedHost;
  }

  public void setSendOnlyMatchedHost(@javax.annotation.Nullable Boolean sendOnlyMatchedHost) {
    this.sendOnlyMatchedHost = sendOnlyMatchedHost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DlnaOptions dlnaOptions = (DlnaOptions) o;
    return Objects.equals(this.enablePlayTo, dlnaOptions.enablePlayTo) &&
        Objects.equals(this.enableServer, dlnaOptions.enableServer) &&
        Objects.equals(this.enableDebugLog, dlnaOptions.enableDebugLog) &&
        Objects.equals(this.enablePlayToTracing, dlnaOptions.enablePlayToTracing) &&
        Objects.equals(this.clientDiscoveryIntervalSeconds, dlnaOptions.clientDiscoveryIntervalSeconds) &&
        Objects.equals(this.aliveMessageIntervalSeconds, dlnaOptions.aliveMessageIntervalSeconds) &&
        Objects.equals(this.blastAliveMessageIntervalSeconds, dlnaOptions.blastAliveMessageIntervalSeconds) &&
        Objects.equals(this.defaultUserId, dlnaOptions.defaultUserId) &&
        Objects.equals(this.autoCreatePlayToProfiles, dlnaOptions.autoCreatePlayToProfiles) &&
        Objects.equals(this.blastAliveMessages, dlnaOptions.blastAliveMessages) &&
        Objects.equals(this.sendOnlyMatchedHost, dlnaOptions.sendOnlyMatchedHost);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enablePlayTo, enableServer, enableDebugLog, enablePlayToTracing, clientDiscoveryIntervalSeconds, aliveMessageIntervalSeconds, blastAliveMessageIntervalSeconds, defaultUserId, autoCreatePlayToProfiles, blastAliveMessages, sendOnlyMatchedHost);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DlnaOptions {\n");
    sb.append("    enablePlayTo: ").append(toIndentedString(enablePlayTo)).append("\n");
    sb.append("    enableServer: ").append(toIndentedString(enableServer)).append("\n");
    sb.append("    enableDebugLog: ").append(toIndentedString(enableDebugLog)).append("\n");
    sb.append("    enablePlayToTracing: ").append(toIndentedString(enablePlayToTracing)).append("\n");
    sb.append("    clientDiscoveryIntervalSeconds: ").append(toIndentedString(clientDiscoveryIntervalSeconds)).append("\n");
    sb.append("    aliveMessageIntervalSeconds: ").append(toIndentedString(aliveMessageIntervalSeconds)).append("\n");
    sb.append("    blastAliveMessageIntervalSeconds: ").append(toIndentedString(blastAliveMessageIntervalSeconds)).append("\n");
    sb.append("    defaultUserId: ").append(toIndentedString(defaultUserId)).append("\n");
    sb.append("    autoCreatePlayToProfiles: ").append(toIndentedString(autoCreatePlayToProfiles)).append("\n");
    sb.append("    blastAliveMessages: ").append(toIndentedString(blastAliveMessages)).append("\n");
    sb.append("    sendOnlyMatchedHost: ").append(toIndentedString(sendOnlyMatchedHost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EnablePlayTo");
    openapiFields.add("EnableServer");
    openapiFields.add("EnableDebugLog");
    openapiFields.add("EnablePlayToTracing");
    openapiFields.add("ClientDiscoveryIntervalSeconds");
    openapiFields.add("AliveMessageIntervalSeconds");
    openapiFields.add("BlastAliveMessageIntervalSeconds");
    openapiFields.add("DefaultUserId");
    openapiFields.add("AutoCreatePlayToProfiles");
    openapiFields.add("BlastAliveMessages");
    openapiFields.add("SendOnlyMatchedHost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DlnaOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DlnaOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DlnaOptions is not found in the empty JSON string", DlnaOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DlnaOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DlnaOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DefaultUserId") != null && !jsonObj.get("DefaultUserId").isJsonNull()) && !jsonObj.get("DefaultUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultUserId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DlnaOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DlnaOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DlnaOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DlnaOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<DlnaOptions>() {
           @Override
           public void write(JsonWriter out, DlnaOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DlnaOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DlnaOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DlnaOptions
   * @throws IOException if the JSON string is invalid with respect to DlnaOptions
   */
  public static DlnaOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DlnaOptions.class);
  }

  /**
   * Convert an instance of DlnaOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

