/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CastReceiverApplication;
import org.openapitools.client.model.InstallationInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class SystemInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class SystemInfo {
  public static final String SERIALIZED_NAME_LOCAL_ADDRESS = "LocalAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_ADDRESS)
  @javax.annotation.Nullable
  private String localAddress;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  @javax.annotation.Nullable
  private String serverName;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "ProductName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  @javax.annotation.Nullable
  private String productName;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "OperatingSystem";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  @javax.annotation.Nullable
  private String operatingSystem;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_STARTUP_WIZARD_COMPLETED = "StartupWizardCompleted";
  @SerializedName(SERIALIZED_NAME_STARTUP_WIZARD_COMPLETED)
  @javax.annotation.Nullable
  private Boolean startupWizardCompleted;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_DISPLAY_NAME = "OperatingSystemDisplayName";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String operatingSystemDisplayName;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "PackageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  @javax.annotation.Nullable
  private String packageName;

  public static final String SERIALIZED_NAME_HAS_PENDING_RESTART = "HasPendingRestart";
  @SerializedName(SERIALIZED_NAME_HAS_PENDING_RESTART)
  @javax.annotation.Nullable
  private Boolean hasPendingRestart;

  public static final String SERIALIZED_NAME_IS_SHUTTING_DOWN = "IsShuttingDown";
  @SerializedName(SERIALIZED_NAME_IS_SHUTTING_DOWN)
  @javax.annotation.Nullable
  private Boolean isShuttingDown;

  public static final String SERIALIZED_NAME_SUPPORTS_LIBRARY_MONITOR = "SupportsLibraryMonitor";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_LIBRARY_MONITOR)
  @javax.annotation.Nullable
  private Boolean supportsLibraryMonitor;

  public static final String SERIALIZED_NAME_WEB_SOCKET_PORT_NUMBER = "WebSocketPortNumber";
  @SerializedName(SERIALIZED_NAME_WEB_SOCKET_PORT_NUMBER)
  @javax.annotation.Nullable
  private Integer webSocketPortNumber;

  public static final String SERIALIZED_NAME_COMPLETED_INSTALLATIONS = "CompletedInstallations";
  @SerializedName(SERIALIZED_NAME_COMPLETED_INSTALLATIONS)
  @javax.annotation.Nullable
  private List<InstallationInfo> completedInstallations;

  public static final String SERIALIZED_NAME_CAN_SELF_RESTART = "CanSelfRestart";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_SELF_RESTART)
  @javax.annotation.Nullable
  private Boolean canSelfRestart = true;

  public static final String SERIALIZED_NAME_CAN_LAUNCH_WEB_BROWSER = "CanLaunchWebBrowser";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_LAUNCH_WEB_BROWSER)
  @javax.annotation.Nullable
  private Boolean canLaunchWebBrowser = false;

  public static final String SERIALIZED_NAME_PROGRAM_DATA_PATH = "ProgramDataPath";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DATA_PATH)
  @javax.annotation.Nullable
  private String programDataPath;

  public static final String SERIALIZED_NAME_WEB_PATH = "WebPath";
  @SerializedName(SERIALIZED_NAME_WEB_PATH)
  @javax.annotation.Nullable
  private String webPath;

  public static final String SERIALIZED_NAME_ITEMS_BY_NAME_PATH = "ItemsByNamePath";
  @SerializedName(SERIALIZED_NAME_ITEMS_BY_NAME_PATH)
  @javax.annotation.Nullable
  private String itemsByNamePath;

  public static final String SERIALIZED_NAME_CACHE_PATH = "CachePath";
  @SerializedName(SERIALIZED_NAME_CACHE_PATH)
  @javax.annotation.Nullable
  private String cachePath;

  public static final String SERIALIZED_NAME_LOG_PATH = "LogPath";
  @SerializedName(SERIALIZED_NAME_LOG_PATH)
  @javax.annotation.Nullable
  private String logPath;

  public static final String SERIALIZED_NAME_INTERNAL_METADATA_PATH = "InternalMetadataPath";
  @SerializedName(SERIALIZED_NAME_INTERNAL_METADATA_PATH)
  @javax.annotation.Nullable
  private String internalMetadataPath;

  public static final String SERIALIZED_NAME_TRANSCODING_TEMP_PATH = "TranscodingTempPath";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_TEMP_PATH)
  @javax.annotation.Nullable
  private String transcodingTempPath;

  public static final String SERIALIZED_NAME_CAST_RECEIVER_APPLICATIONS = "CastReceiverApplications";
  @SerializedName(SERIALIZED_NAME_CAST_RECEIVER_APPLICATIONS)
  @javax.annotation.Nullable
  private List<CastReceiverApplication> castReceiverApplications;

  public static final String SERIALIZED_NAME_HAS_UPDATE_AVAILABLE = "HasUpdateAvailable";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HAS_UPDATE_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean hasUpdateAvailable = false;

  public static final String SERIALIZED_NAME_ENCODER_LOCATION = "EncoderLocation";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ENCODER_LOCATION)
  @javax.annotation.Nullable
  private String encoderLocation = "System";

  public static final String SERIALIZED_NAME_SYSTEM_ARCHITECTURE = "SystemArchitecture";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SYSTEM_ARCHITECTURE)
  @javax.annotation.Nullable
  private String systemArchitecture = "X64";

  public SystemInfo() {
  }

  public SystemInfo localAddress(@javax.annotation.Nullable String localAddress) {
    this.localAddress = localAddress;
    return this;
  }

  /**
   * Gets or sets the local address.
   * @return localAddress
   */
  @javax.annotation.Nullable
  public String getLocalAddress() {
    return localAddress;
  }

  public void setLocalAddress(@javax.annotation.Nullable String localAddress) {
    this.localAddress = localAddress;
  }


  public SystemInfo serverName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Gets or sets the name of the server.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
  }


  public SystemInfo version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Gets or sets the server version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public SystemInfo productName(@javax.annotation.Nullable String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Gets or sets the product name. This is the AssemblyProduct name.
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(@javax.annotation.Nullable String productName) {
    this.productName = productName;
  }


  @Deprecated
  public SystemInfo operatingSystem(@javax.annotation.Nullable String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Gets or sets the operating system.
   * @return operatingSystem
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }

  @Deprecated
  public void setOperatingSystem(@javax.annotation.Nullable String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public SystemInfo id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public SystemInfo startupWizardCompleted(@javax.annotation.Nullable Boolean startupWizardCompleted) {
    this.startupWizardCompleted = startupWizardCompleted;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the startup wizard is completed.
   * @return startupWizardCompleted
   */
  @javax.annotation.Nullable
  public Boolean getStartupWizardCompleted() {
    return startupWizardCompleted;
  }

  public void setStartupWizardCompleted(@javax.annotation.Nullable Boolean startupWizardCompleted) {
    this.startupWizardCompleted = startupWizardCompleted;
  }


  @Deprecated
  public SystemInfo operatingSystemDisplayName(@javax.annotation.Nullable String operatingSystemDisplayName) {
    this.operatingSystemDisplayName = operatingSystemDisplayName;
    return this;
  }

  /**
   * Gets or sets the display name of the operating system.
   * @return operatingSystemDisplayName
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getOperatingSystemDisplayName() {
    return operatingSystemDisplayName;
  }

  @Deprecated
  public void setOperatingSystemDisplayName(@javax.annotation.Nullable String operatingSystemDisplayName) {
    this.operatingSystemDisplayName = operatingSystemDisplayName;
  }


  public SystemInfo packageName(@javax.annotation.Nullable String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Gets or sets the package name.
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(@javax.annotation.Nullable String packageName) {
    this.packageName = packageName;
  }


  public SystemInfo hasPendingRestart(@javax.annotation.Nullable Boolean hasPendingRestart) {
    this.hasPendingRestart = hasPendingRestart;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance has pending restart.
   * @return hasPendingRestart
   */
  @javax.annotation.Nullable
  public Boolean getHasPendingRestart() {
    return hasPendingRestart;
  }

  public void setHasPendingRestart(@javax.annotation.Nullable Boolean hasPendingRestart) {
    this.hasPendingRestart = hasPendingRestart;
  }


  public SystemInfo isShuttingDown(@javax.annotation.Nullable Boolean isShuttingDown) {
    this.isShuttingDown = isShuttingDown;
    return this;
  }

  /**
   * Get isShuttingDown
   * @return isShuttingDown
   */
  @javax.annotation.Nullable
  public Boolean getIsShuttingDown() {
    return isShuttingDown;
  }

  public void setIsShuttingDown(@javax.annotation.Nullable Boolean isShuttingDown) {
    this.isShuttingDown = isShuttingDown;
  }


  public SystemInfo supportsLibraryMonitor(@javax.annotation.Nullable Boolean supportsLibraryMonitor) {
    this.supportsLibraryMonitor = supportsLibraryMonitor;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [supports library monitor].
   * @return supportsLibraryMonitor
   */
  @javax.annotation.Nullable
  public Boolean getSupportsLibraryMonitor() {
    return supportsLibraryMonitor;
  }

  public void setSupportsLibraryMonitor(@javax.annotation.Nullable Boolean supportsLibraryMonitor) {
    this.supportsLibraryMonitor = supportsLibraryMonitor;
  }


  public SystemInfo webSocketPortNumber(@javax.annotation.Nullable Integer webSocketPortNumber) {
    this.webSocketPortNumber = webSocketPortNumber;
    return this;
  }

  /**
   * Gets or sets the web socket port number.
   * @return webSocketPortNumber
   */
  @javax.annotation.Nullable
  public Integer getWebSocketPortNumber() {
    return webSocketPortNumber;
  }

  public void setWebSocketPortNumber(@javax.annotation.Nullable Integer webSocketPortNumber) {
    this.webSocketPortNumber = webSocketPortNumber;
  }


  public SystemInfo completedInstallations(@javax.annotation.Nullable List<InstallationInfo> completedInstallations) {
    this.completedInstallations = completedInstallations;
    return this;
  }

  public SystemInfo addCompletedInstallationsItem(InstallationInfo completedInstallationsItem) {
    if (this.completedInstallations == null) {
      this.completedInstallations = new ArrayList<>();
    }
    this.completedInstallations.add(completedInstallationsItem);
    return this;
  }

  /**
   * Gets or sets the completed installations.
   * @return completedInstallations
   */
  @javax.annotation.Nullable
  public List<InstallationInfo> getCompletedInstallations() {
    return completedInstallations;
  }

  public void setCompletedInstallations(@javax.annotation.Nullable List<InstallationInfo> completedInstallations) {
    this.completedInstallations = completedInstallations;
  }


  @Deprecated
  public SystemInfo canSelfRestart(@javax.annotation.Nullable Boolean canSelfRestart) {
    this.canSelfRestart = canSelfRestart;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance can self restart.
   * @return canSelfRestart
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanSelfRestart() {
    return canSelfRestart;
  }

  @Deprecated
  public void setCanSelfRestart(@javax.annotation.Nullable Boolean canSelfRestart) {
    this.canSelfRestart = canSelfRestart;
  }


  @Deprecated
  public SystemInfo canLaunchWebBrowser(@javax.annotation.Nullable Boolean canLaunchWebBrowser) {
    this.canLaunchWebBrowser = canLaunchWebBrowser;
    return this;
  }

  /**
   * Get canLaunchWebBrowser
   * @return canLaunchWebBrowser
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanLaunchWebBrowser() {
    return canLaunchWebBrowser;
  }

  @Deprecated
  public void setCanLaunchWebBrowser(@javax.annotation.Nullable Boolean canLaunchWebBrowser) {
    this.canLaunchWebBrowser = canLaunchWebBrowser;
  }


  public SystemInfo programDataPath(@javax.annotation.Nullable String programDataPath) {
    this.programDataPath = programDataPath;
    return this;
  }

  /**
   * Gets or sets the program data path.
   * @return programDataPath
   */
  @javax.annotation.Nullable
  public String getProgramDataPath() {
    return programDataPath;
  }

  public void setProgramDataPath(@javax.annotation.Nullable String programDataPath) {
    this.programDataPath = programDataPath;
  }


  public SystemInfo webPath(@javax.annotation.Nullable String webPath) {
    this.webPath = webPath;
    return this;
  }

  /**
   * Gets or sets the web UI resources path.
   * @return webPath
   */
  @javax.annotation.Nullable
  public String getWebPath() {
    return webPath;
  }

  public void setWebPath(@javax.annotation.Nullable String webPath) {
    this.webPath = webPath;
  }


  public SystemInfo itemsByNamePath(@javax.annotation.Nullable String itemsByNamePath) {
    this.itemsByNamePath = itemsByNamePath;
    return this;
  }

  /**
   * Gets or sets the items by name path.
   * @return itemsByNamePath
   */
  @javax.annotation.Nullable
  public String getItemsByNamePath() {
    return itemsByNamePath;
  }

  public void setItemsByNamePath(@javax.annotation.Nullable String itemsByNamePath) {
    this.itemsByNamePath = itemsByNamePath;
  }


  public SystemInfo cachePath(@javax.annotation.Nullable String cachePath) {
    this.cachePath = cachePath;
    return this;
  }

  /**
   * Gets or sets the cache path.
   * @return cachePath
   */
  @javax.annotation.Nullable
  public String getCachePath() {
    return cachePath;
  }

  public void setCachePath(@javax.annotation.Nullable String cachePath) {
    this.cachePath = cachePath;
  }


  public SystemInfo logPath(@javax.annotation.Nullable String logPath) {
    this.logPath = logPath;
    return this;
  }

  /**
   * Gets or sets the log path.
   * @return logPath
   */
  @javax.annotation.Nullable
  public String getLogPath() {
    return logPath;
  }

  public void setLogPath(@javax.annotation.Nullable String logPath) {
    this.logPath = logPath;
  }


  public SystemInfo internalMetadataPath(@javax.annotation.Nullable String internalMetadataPath) {
    this.internalMetadataPath = internalMetadataPath;
    return this;
  }

  /**
   * Gets or sets the internal metadata path.
   * @return internalMetadataPath
   */
  @javax.annotation.Nullable
  public String getInternalMetadataPath() {
    return internalMetadataPath;
  }

  public void setInternalMetadataPath(@javax.annotation.Nullable String internalMetadataPath) {
    this.internalMetadataPath = internalMetadataPath;
  }


  public SystemInfo transcodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = transcodingTempPath;
    return this;
  }

  /**
   * Gets or sets the transcode path.
   * @return transcodingTempPath
   */
  @javax.annotation.Nullable
  public String getTranscodingTempPath() {
    return transcodingTempPath;
  }

  public void setTranscodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = transcodingTempPath;
  }


  public SystemInfo castReceiverApplications(@javax.annotation.Nullable List<CastReceiverApplication> castReceiverApplications) {
    this.castReceiverApplications = castReceiverApplications;
    return this;
  }

  public SystemInfo addCastReceiverApplicationsItem(CastReceiverApplication castReceiverApplicationsItem) {
    if (this.castReceiverApplications == null) {
      this.castReceiverApplications = new ArrayList<>();
    }
    this.castReceiverApplications.add(castReceiverApplicationsItem);
    return this;
  }

  /**
   * Gets or sets the list of cast receiver applications.
   * @return castReceiverApplications
   */
  @javax.annotation.Nullable
  public List<CastReceiverApplication> getCastReceiverApplications() {
    return castReceiverApplications;
  }

  public void setCastReceiverApplications(@javax.annotation.Nullable List<CastReceiverApplication> castReceiverApplications) {
    this.castReceiverApplications = castReceiverApplications;
  }


  @Deprecated
  public SystemInfo hasUpdateAvailable(@javax.annotation.Nullable Boolean hasUpdateAvailable) {
    this.hasUpdateAvailable = hasUpdateAvailable;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance has update available.
   * @return hasUpdateAvailable
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getHasUpdateAvailable() {
    return hasUpdateAvailable;
  }

  @Deprecated
  public void setHasUpdateAvailable(@javax.annotation.Nullable Boolean hasUpdateAvailable) {
    this.hasUpdateAvailable = hasUpdateAvailable;
  }


  @Deprecated
  public SystemInfo encoderLocation(@javax.annotation.Nullable String encoderLocation) {
    this.encoderLocation = encoderLocation;
    return this;
  }

  /**
   * Get encoderLocation
   * @return encoderLocation
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getEncoderLocation() {
    return encoderLocation;
  }

  @Deprecated
  public void setEncoderLocation(@javax.annotation.Nullable String encoderLocation) {
    this.encoderLocation = encoderLocation;
  }


  @Deprecated
  public SystemInfo systemArchitecture(@javax.annotation.Nullable String systemArchitecture) {
    this.systemArchitecture = systemArchitecture;
    return this;
  }

  /**
   * Get systemArchitecture
   * @return systemArchitecture
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getSystemArchitecture() {
    return systemArchitecture;
  }

  @Deprecated
  public void setSystemArchitecture(@javax.annotation.Nullable String systemArchitecture) {
    this.systemArchitecture = systemArchitecture;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfo systemInfo = (SystemInfo) o;
    return Objects.equals(this.localAddress, systemInfo.localAddress) &&
        Objects.equals(this.serverName, systemInfo.serverName) &&
        Objects.equals(this.version, systemInfo.version) &&
        Objects.equals(this.productName, systemInfo.productName) &&
        Objects.equals(this.operatingSystem, systemInfo.operatingSystem) &&
        Objects.equals(this.id, systemInfo.id) &&
        Objects.equals(this.startupWizardCompleted, systemInfo.startupWizardCompleted) &&
        Objects.equals(this.operatingSystemDisplayName, systemInfo.operatingSystemDisplayName) &&
        Objects.equals(this.packageName, systemInfo.packageName) &&
        Objects.equals(this.hasPendingRestart, systemInfo.hasPendingRestart) &&
        Objects.equals(this.isShuttingDown, systemInfo.isShuttingDown) &&
        Objects.equals(this.supportsLibraryMonitor, systemInfo.supportsLibraryMonitor) &&
        Objects.equals(this.webSocketPortNumber, systemInfo.webSocketPortNumber) &&
        Objects.equals(this.completedInstallations, systemInfo.completedInstallations) &&
        Objects.equals(this.canSelfRestart, systemInfo.canSelfRestart) &&
        Objects.equals(this.canLaunchWebBrowser, systemInfo.canLaunchWebBrowser) &&
        Objects.equals(this.programDataPath, systemInfo.programDataPath) &&
        Objects.equals(this.webPath, systemInfo.webPath) &&
        Objects.equals(this.itemsByNamePath, systemInfo.itemsByNamePath) &&
        Objects.equals(this.cachePath, systemInfo.cachePath) &&
        Objects.equals(this.logPath, systemInfo.logPath) &&
        Objects.equals(this.internalMetadataPath, systemInfo.internalMetadataPath) &&
        Objects.equals(this.transcodingTempPath, systemInfo.transcodingTempPath) &&
        Objects.equals(this.castReceiverApplications, systemInfo.castReceiverApplications) &&
        Objects.equals(this.hasUpdateAvailable, systemInfo.hasUpdateAvailable) &&
        Objects.equals(this.encoderLocation, systemInfo.encoderLocation) &&
        Objects.equals(this.systemArchitecture, systemInfo.systemArchitecture);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(localAddress, serverName, version, productName, operatingSystem, id, startupWizardCompleted, operatingSystemDisplayName, packageName, hasPendingRestart, isShuttingDown, supportsLibraryMonitor, webSocketPortNumber, completedInstallations, canSelfRestart, canLaunchWebBrowser, programDataPath, webPath, itemsByNamePath, cachePath, logPath, internalMetadataPath, transcodingTempPath, castReceiverApplications, hasUpdateAvailable, encoderLocation, systemArchitecture);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfo {\n");
    sb.append("    localAddress: ").append(toIndentedString(localAddress)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startupWizardCompleted: ").append(toIndentedString(startupWizardCompleted)).append("\n");
    sb.append("    operatingSystemDisplayName: ").append(toIndentedString(operatingSystemDisplayName)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    hasPendingRestart: ").append(toIndentedString(hasPendingRestart)).append("\n");
    sb.append("    isShuttingDown: ").append(toIndentedString(isShuttingDown)).append("\n");
    sb.append("    supportsLibraryMonitor: ").append(toIndentedString(supportsLibraryMonitor)).append("\n");
    sb.append("    webSocketPortNumber: ").append(toIndentedString(webSocketPortNumber)).append("\n");
    sb.append("    completedInstallations: ").append(toIndentedString(completedInstallations)).append("\n");
    sb.append("    canSelfRestart: ").append(toIndentedString(canSelfRestart)).append("\n");
    sb.append("    canLaunchWebBrowser: ").append(toIndentedString(canLaunchWebBrowser)).append("\n");
    sb.append("    programDataPath: ").append(toIndentedString(programDataPath)).append("\n");
    sb.append("    webPath: ").append(toIndentedString(webPath)).append("\n");
    sb.append("    itemsByNamePath: ").append(toIndentedString(itemsByNamePath)).append("\n");
    sb.append("    cachePath: ").append(toIndentedString(cachePath)).append("\n");
    sb.append("    logPath: ").append(toIndentedString(logPath)).append("\n");
    sb.append("    internalMetadataPath: ").append(toIndentedString(internalMetadataPath)).append("\n");
    sb.append("    transcodingTempPath: ").append(toIndentedString(transcodingTempPath)).append("\n");
    sb.append("    castReceiverApplications: ").append(toIndentedString(castReceiverApplications)).append("\n");
    sb.append("    hasUpdateAvailable: ").append(toIndentedString(hasUpdateAvailable)).append("\n");
    sb.append("    encoderLocation: ").append(toIndentedString(encoderLocation)).append("\n");
    sb.append("    systemArchitecture: ").append(toIndentedString(systemArchitecture)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocalAddress");
    openapiFields.add("ServerName");
    openapiFields.add("Version");
    openapiFields.add("ProductName");
    openapiFields.add("OperatingSystem");
    openapiFields.add("Id");
    openapiFields.add("StartupWizardCompleted");
    openapiFields.add("OperatingSystemDisplayName");
    openapiFields.add("PackageName");
    openapiFields.add("HasPendingRestart");
    openapiFields.add("IsShuttingDown");
    openapiFields.add("SupportsLibraryMonitor");
    openapiFields.add("WebSocketPortNumber");
    openapiFields.add("CompletedInstallations");
    openapiFields.add("CanSelfRestart");
    openapiFields.add("CanLaunchWebBrowser");
    openapiFields.add("ProgramDataPath");
    openapiFields.add("WebPath");
    openapiFields.add("ItemsByNamePath");
    openapiFields.add("CachePath");
    openapiFields.add("LogPath");
    openapiFields.add("InternalMetadataPath");
    openapiFields.add("TranscodingTempPath");
    openapiFields.add("CastReceiverApplications");
    openapiFields.add("HasUpdateAvailable");
    openapiFields.add("EncoderLocation");
    openapiFields.add("SystemArchitecture");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemInfo is not found in the empty JSON string", SystemInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LocalAddress") != null && !jsonObj.get("LocalAddress").isJsonNull()) && !jsonObj.get("LocalAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalAddress").toString()));
      }
      if ((jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) && !jsonObj.get("ServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerName").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("ProductName") != null && !jsonObj.get("ProductName").isJsonNull()) && !jsonObj.get("ProductName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductName").toString()));
      }
      if ((jsonObj.get("OperatingSystem") != null && !jsonObj.get("OperatingSystem").isJsonNull()) && !jsonObj.get("OperatingSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatingSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatingSystem").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("OperatingSystemDisplayName") != null && !jsonObj.get("OperatingSystemDisplayName").isJsonNull()) && !jsonObj.get("OperatingSystemDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatingSystemDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatingSystemDisplayName").toString()));
      }
      if ((jsonObj.get("PackageName") != null && !jsonObj.get("PackageName").isJsonNull()) && !jsonObj.get("PackageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageName").toString()));
      }
      if (jsonObj.get("CompletedInstallations") != null && !jsonObj.get("CompletedInstallations").isJsonNull()) {
        JsonArray jsonArraycompletedInstallations = jsonObj.getAsJsonArray("CompletedInstallations");
        if (jsonArraycompletedInstallations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CompletedInstallations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CompletedInstallations` to be an array in the JSON string but got `%s`", jsonObj.get("CompletedInstallations").toString()));
          }

          // validate the optional field `CompletedInstallations` (array)
          for (int i = 0; i < jsonArraycompletedInstallations.size(); i++) {
            InstallationInfo.validateJsonElement(jsonArraycompletedInstallations.get(i));
          };
        }
      }
      if ((jsonObj.get("ProgramDataPath") != null && !jsonObj.get("ProgramDataPath").isJsonNull()) && !jsonObj.get("ProgramDataPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProgramDataPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProgramDataPath").toString()));
      }
      if ((jsonObj.get("WebPath") != null && !jsonObj.get("WebPath").isJsonNull()) && !jsonObj.get("WebPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebPath").toString()));
      }
      if ((jsonObj.get("ItemsByNamePath") != null && !jsonObj.get("ItemsByNamePath").isJsonNull()) && !jsonObj.get("ItemsByNamePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemsByNamePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemsByNamePath").toString()));
      }
      if ((jsonObj.get("CachePath") != null && !jsonObj.get("CachePath").isJsonNull()) && !jsonObj.get("CachePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CachePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CachePath").toString()));
      }
      if ((jsonObj.get("LogPath") != null && !jsonObj.get("LogPath").isJsonNull()) && !jsonObj.get("LogPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogPath").toString()));
      }
      if ((jsonObj.get("InternalMetadataPath") != null && !jsonObj.get("InternalMetadataPath").isJsonNull()) && !jsonObj.get("InternalMetadataPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InternalMetadataPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InternalMetadataPath").toString()));
      }
      if ((jsonObj.get("TranscodingTempPath") != null && !jsonObj.get("TranscodingTempPath").isJsonNull()) && !jsonObj.get("TranscodingTempPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TranscodingTempPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TranscodingTempPath").toString()));
      }
      if (jsonObj.get("CastReceiverApplications") != null && !jsonObj.get("CastReceiverApplications").isJsonNull()) {
        JsonArray jsonArraycastReceiverApplications = jsonObj.getAsJsonArray("CastReceiverApplications");
        if (jsonArraycastReceiverApplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CastReceiverApplications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CastReceiverApplications` to be an array in the JSON string but got `%s`", jsonObj.get("CastReceiverApplications").toString()));
          }

          // validate the optional field `CastReceiverApplications` (array)
          for (int i = 0; i < jsonArraycastReceiverApplications.size(); i++) {
            CastReceiverApplication.validateJsonElement(jsonArraycastReceiverApplications.get(i));
          };
        }
      }
      if ((jsonObj.get("EncoderLocation") != null && !jsonObj.get("EncoderLocation").isJsonNull()) && !jsonObj.get("EncoderLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EncoderLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EncoderLocation").toString()));
      }
      if ((jsonObj.get("SystemArchitecture") != null && !jsonObj.get("SystemArchitecture").isJsonNull()) && !jsonObj.get("SystemArchitecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SystemArchitecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SystemArchitecture").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemInfo>() {
           @Override
           public void write(JsonWriter out, SystemInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemInfo
   * @throws IOException if the JSON string is invalid with respect to SystemInfo
   */
  public static SystemInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemInfo.class);
  }

  /**
   * Convert an instance of SystemInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

