/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SendToUserType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class NotificationOption {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_DISABLED_MONITOR_USERS = "DisabledMonitorUsers";
  @SerializedName(SERIALIZED_NAME_DISABLED_MONITOR_USERS)
  @javax.annotation.Nullable
  private List<String> disabledMonitorUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEND_TO_USERS = "SendToUsers";
  @SerializedName(SERIALIZED_NAME_SEND_TO_USERS)
  @javax.annotation.Nullable
  private List<String> sendToUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_DISABLED_SERVICES = "DisabledServices";
  @SerializedName(SERIALIZED_NAME_DISABLED_SERVICES)
  @javax.annotation.Nullable
  private List<String> disabledServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEND_TO_USER_MODE = "SendToUserMode";
  @SerializedName(SERIALIZED_NAME_SEND_TO_USER_MODE)
  @javax.annotation.Nullable
  private SendToUserType sendToUserMode;

  public NotificationOption() {
  }

  public NotificationOption type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public NotificationOption disabledMonitorUsers(@javax.annotation.Nullable List<String> disabledMonitorUsers) {
    this.disabledMonitorUsers = disabledMonitorUsers;
    return this;
  }

  public NotificationOption addDisabledMonitorUsersItem(String disabledMonitorUsersItem) {
    if (this.disabledMonitorUsers == null) {
      this.disabledMonitorUsers = new ArrayList<>();
    }
    this.disabledMonitorUsers.add(disabledMonitorUsersItem);
    return this;
  }

  /**
   * Gets or sets user Ids to not monitor (it&#39;s opt out).
   * @return disabledMonitorUsers
   */
  @javax.annotation.Nullable
  public List<String> getDisabledMonitorUsers() {
    return disabledMonitorUsers;
  }

  public void setDisabledMonitorUsers(@javax.annotation.Nullable List<String> disabledMonitorUsers) {
    this.disabledMonitorUsers = disabledMonitorUsers;
  }


  public NotificationOption sendToUsers(@javax.annotation.Nullable List<String> sendToUsers) {
    this.sendToUsers = sendToUsers;
    return this;
  }

  public NotificationOption addSendToUsersItem(String sendToUsersItem) {
    if (this.sendToUsers == null) {
      this.sendToUsers = new ArrayList<>();
    }
    this.sendToUsers.add(sendToUsersItem);
    return this;
  }

  /**
   * Gets or sets user Ids to send to (if SendToUserMode &#x3D;&#x3D; Custom).
   * @return sendToUsers
   */
  @javax.annotation.Nullable
  public List<String> getSendToUsers() {
    return sendToUsers;
  }

  public void setSendToUsers(@javax.annotation.Nullable List<String> sendToUsers) {
    this.sendToUsers = sendToUsers;
  }


  public NotificationOption enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this MediaBrowser.Model.Notifications.NotificationOption is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public NotificationOption disabledServices(@javax.annotation.Nullable List<String> disabledServices) {
    this.disabledServices = disabledServices;
    return this;
  }

  public NotificationOption addDisabledServicesItem(String disabledServicesItem) {
    if (this.disabledServices == null) {
      this.disabledServices = new ArrayList<>();
    }
    this.disabledServices.add(disabledServicesItem);
    return this;
  }

  /**
   * Gets or sets the disabled services.
   * @return disabledServices
   */
  @javax.annotation.Nullable
  public List<String> getDisabledServices() {
    return disabledServices;
  }

  public void setDisabledServices(@javax.annotation.Nullable List<String> disabledServices) {
    this.disabledServices = disabledServices;
  }


  public NotificationOption sendToUserMode(@javax.annotation.Nullable SendToUserType sendToUserMode) {
    this.sendToUserMode = sendToUserMode;
    return this;
  }

  /**
   * Gets or sets the send to user mode.
   * @return sendToUserMode
   */
  @javax.annotation.Nullable
  public SendToUserType getSendToUserMode() {
    return sendToUserMode;
  }

  public void setSendToUserMode(@javax.annotation.Nullable SendToUserType sendToUserMode) {
    this.sendToUserMode = sendToUserMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationOption notificationOption = (NotificationOption) o;
    return Objects.equals(this.type, notificationOption.type) &&
        Objects.equals(this.disabledMonitorUsers, notificationOption.disabledMonitorUsers) &&
        Objects.equals(this.sendToUsers, notificationOption.sendToUsers) &&
        Objects.equals(this.enabled, notificationOption.enabled) &&
        Objects.equals(this.disabledServices, notificationOption.disabledServices) &&
        Objects.equals(this.sendToUserMode, notificationOption.sendToUserMode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, disabledMonitorUsers, sendToUsers, enabled, disabledServices, sendToUserMode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationOption {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    disabledMonitorUsers: ").append(toIndentedString(disabledMonitorUsers)).append("\n");
    sb.append("    sendToUsers: ").append(toIndentedString(sendToUsers)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    disabledServices: ").append(toIndentedString(disabledServices)).append("\n");
    sb.append("    sendToUserMode: ").append(toIndentedString(sendToUserMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("DisabledMonitorUsers");
    openapiFields.add("SendToUsers");
    openapiFields.add("Enabled");
    openapiFields.add("DisabledServices");
    openapiFields.add("SendToUserMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationOption is not found in the empty JSON string", NotificationOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledMonitorUsers") != null && !jsonObj.get("DisabledMonitorUsers").isJsonNull() && !jsonObj.get("DisabledMonitorUsers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledMonitorUsers` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledMonitorUsers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SendToUsers") != null && !jsonObj.get("SendToUsers").isJsonNull() && !jsonObj.get("SendToUsers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SendToUsers` to be an array in the JSON string but got `%s`", jsonObj.get("SendToUsers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledServices") != null && !jsonObj.get("DisabledServices").isJsonNull() && !jsonObj.get("DisabledServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledServices` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledServices").toString()));
      }
      // validate the optional field `SendToUserMode`
      if (jsonObj.get("SendToUserMode") != null && !jsonObj.get("SendToUserMode").isJsonNull()) {
        SendToUserType.validateJsonElement(jsonObj.get("SendToUserMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationOption.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationOption>() {
           @Override
           public void write(JsonWriter out, NotificationOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationOption
   * @throws IOException if the JSON string is invalid with respect to NotificationOption
   */
  public static NotificationOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationOption.class);
  }

  /**
   * Convert an instance of NotificationOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

