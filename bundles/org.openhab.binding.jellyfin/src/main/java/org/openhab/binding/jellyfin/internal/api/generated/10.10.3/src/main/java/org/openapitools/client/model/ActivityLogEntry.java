/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.LogLevel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An activity log entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class ActivityLogEntry {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_OVERVIEW = "Overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  @javax.annotation.Nullable
  private String overview;

  public static final String SERIALIZED_NAME_SHORT_OVERVIEW = "ShortOverview";
  @SerializedName(SERIALIZED_NAME_SHORT_OVERVIEW)
  @javax.annotation.Nullable
  private String shortOverview;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_ITEM_ID = "ItemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  @javax.annotation.Nullable
  private String itemId;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private UUID userId;

  public static final String SERIALIZED_NAME_USER_PRIMARY_IMAGE_TAG = "UserPrimaryImageTag";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USER_PRIMARY_IMAGE_TAG)
  @javax.annotation.Nullable
  private String userPrimaryImageTag;

  public static final String SERIALIZED_NAME_SEVERITY = "Severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  @javax.annotation.Nullable
  private LogLevel severity;

  public ActivityLogEntry() {
  }

  public ActivityLogEntry id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public ActivityLogEntry name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ActivityLogEntry overview(@javax.annotation.Nullable String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Gets or sets the overview.
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(@javax.annotation.Nullable String overview) {
    this.overview = overview;
  }


  public ActivityLogEntry shortOverview(@javax.annotation.Nullable String shortOverview) {
    this.shortOverview = shortOverview;
    return this;
  }

  /**
   * Gets or sets the short overview.
   * @return shortOverview
   */
  @javax.annotation.Nullable
  public String getShortOverview() {
    return shortOverview;
  }

  public void setShortOverview(@javax.annotation.Nullable String shortOverview) {
    this.shortOverview = shortOverview;
  }


  public ActivityLogEntry type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ActivityLogEntry itemId(@javax.annotation.Nullable String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Gets or sets the item identifier.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(@javax.annotation.Nullable String itemId) {
    this.itemId = itemId;
  }


  public ActivityLogEntry date(@javax.annotation.Nullable OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Gets or sets the date.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable OffsetDateTime date) {
    this.date = date;
  }


  public ActivityLogEntry userId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Gets or sets the user identifier.
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
  }


  @Deprecated
  public ActivityLogEntry userPrimaryImageTag(@javax.annotation.Nullable String userPrimaryImageTag) {
    this.userPrimaryImageTag = userPrimaryImageTag;
    return this;
  }

  /**
   * Gets or sets the user primary image tag.
   * @return userPrimaryImageTag
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getUserPrimaryImageTag() {
    return userPrimaryImageTag;
  }

  @Deprecated
  public void setUserPrimaryImageTag(@javax.annotation.Nullable String userPrimaryImageTag) {
    this.userPrimaryImageTag = userPrimaryImageTag;
  }


  public ActivityLogEntry severity(@javax.annotation.Nullable LogLevel severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Gets or sets the log severity.
   * @return severity
   */
  @javax.annotation.Nullable
  public LogLevel getSeverity() {
    return severity;
  }

  public void setSeverity(@javax.annotation.Nullable LogLevel severity) {
    this.severity = severity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityLogEntry activityLogEntry = (ActivityLogEntry) o;
    return Objects.equals(this.id, activityLogEntry.id) &&
        Objects.equals(this.name, activityLogEntry.name) &&
        Objects.equals(this.overview, activityLogEntry.overview) &&
        Objects.equals(this.shortOverview, activityLogEntry.shortOverview) &&
        Objects.equals(this.type, activityLogEntry.type) &&
        Objects.equals(this.itemId, activityLogEntry.itemId) &&
        Objects.equals(this.date, activityLogEntry.date) &&
        Objects.equals(this.userId, activityLogEntry.userId) &&
        Objects.equals(this.userPrimaryImageTag, activityLogEntry.userPrimaryImageTag) &&
        Objects.equals(this.severity, activityLogEntry.severity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, overview, shortOverview, type, itemId, date, userId, userPrimaryImageTag, severity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityLogEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    shortOverview: ").append(toIndentedString(shortOverview)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userPrimaryImageTag: ").append(toIndentedString(userPrimaryImageTag)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Overview");
    openapiFields.add("ShortOverview");
    openapiFields.add("Type");
    openapiFields.add("ItemId");
    openapiFields.add("Date");
    openapiFields.add("UserId");
    openapiFields.add("UserPrimaryImageTag");
    openapiFields.add("Severity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityLogEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityLogEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityLogEntry is not found in the empty JSON string", ActivityLogEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityLogEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityLogEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Overview") != null && !jsonObj.get("Overview").isJsonNull()) && !jsonObj.get("Overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Overview").toString()));
      }
      if ((jsonObj.get("ShortOverview") != null && !jsonObj.get("ShortOverview").isJsonNull()) && !jsonObj.get("ShortOverview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortOverview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortOverview").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("ItemId") != null && !jsonObj.get("ItemId").isJsonNull()) && !jsonObj.get("ItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemId").toString()));
      }
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
      if ((jsonObj.get("UserPrimaryImageTag") != null && !jsonObj.get("UserPrimaryImageTag").isJsonNull()) && !jsonObj.get("UserPrimaryImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserPrimaryImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserPrimaryImageTag").toString()));
      }
      // validate the optional field `Severity`
      if (jsonObj.get("Severity") != null && !jsonObj.get("Severity").isJsonNull()) {
        LogLevel.validateJsonElement(jsonObj.get("Severity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityLogEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityLogEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityLogEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityLogEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityLogEntry>() {
           @Override
           public void write(JsonWriter out, ActivityLogEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityLogEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityLogEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityLogEntry
   * @throws IOException if the JSON string is invalid with respect to ActivityLogEntry
   */
  public static ActivityLogEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityLogEntry.class);
  }

  /**
   * Convert an instance of ActivityLogEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

