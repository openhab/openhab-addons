/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import java.io.File;
import org.openapitools.client.model.FontFile;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RemoteSubtitleInfo;
import java.util.UUID;
import org.openapitools.client.model.UploadSubtitleDto;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:48.410245241Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class SubtitleApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SubtitleApi() {
    this(Configuration.getDefaultApiClient());
  }

  public SubtitleApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Deletes an external subtitle file.
   * 
   * @param itemId The item id. (required)
   * @param index The index of the subtitle file. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteSubtitle(UUID itemId, Integer index) throws ApiException {
    deleteSubtitleWithHttpInfo(itemId, index);
  }

  /**
   * Deletes an external subtitle file.
   * 
   * @param itemId The item id. (required)
   * @param index The index of the subtitle file. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteSubtitleWithHttpInfo(UUID itemId, Integer index) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSubtitleRequestBuilder(itemId, index);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSubtitle", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSubtitleRequestBuilder(UUID itemId, Integer index) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling deleteSubtitle");
    }
    // verify the required parameter 'index' is set
    if (index == null) {
      throw new ApiException(400, "Missing the required parameter 'index' when calling deleteSubtitle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Videos/{itemId}/Subtitles/{index}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{index}", ApiClient.urlEncode(index.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Downloads a remote subtitle.
   * 
   * @param itemId The item id. (required)
   * @param subtitleId The subtitle id. (required)
   * @throws ApiException if fails to make API call
   */
  public void downloadRemoteSubtitles(UUID itemId, String subtitleId) throws ApiException {
    downloadRemoteSubtitlesWithHttpInfo(itemId, subtitleId);
  }

  /**
   * Downloads a remote subtitle.
   * 
   * @param itemId The item id. (required)
   * @param subtitleId The subtitle id. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> downloadRemoteSubtitlesWithHttpInfo(UUID itemId, String subtitleId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadRemoteSubtitlesRequestBuilder(itemId, subtitleId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("downloadRemoteSubtitles", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadRemoteSubtitlesRequestBuilder(UUID itemId, String subtitleId) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling downloadRemoteSubtitles");
    }
    // verify the required parameter 'subtitleId' is set
    if (subtitleId == null) {
      throw new ApiException(400, "Missing the required parameter 'subtitleId' when calling downloadRemoteSubtitles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{subtitleId}", ApiClient.urlEncode(subtitleId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a fallback font file.
   * 
   * @param name The name of the fallback font file to get. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getFallbackFont(String name) throws ApiException {
    ApiResponse<File> localVarResponse = getFallbackFontWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * Gets a fallback font file.
   * 
   * @param name The name of the fallback font file to get. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getFallbackFontWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getFallbackFontRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getFallbackFont", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getFallbackFontRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getFallbackFont");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/FallbackFont/Fonts/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "font/*");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a list of available fallback font files.
   * 
   * @return List&lt;FontFile&gt;
   * @throws ApiException if fails to make API call
   */
  public List<FontFile> getFallbackFontList() throws ApiException {
    ApiResponse<List<FontFile>> localVarResponse = getFallbackFontListWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets a list of available fallback font files.
   * 
   * @return ApiResponse&lt;List&lt;FontFile&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<FontFile>> getFallbackFontListWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getFallbackFontListRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getFallbackFontList", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<FontFile>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<FontFile>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<FontFile>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getFallbackFontListRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/FallbackFont/Fonts";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the remote subtitles.
   * 
   * @param subtitleId The item id. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getRemoteSubtitles(String subtitleId) throws ApiException {
    ApiResponse<File> localVarResponse = getRemoteSubtitlesWithHttpInfo(subtitleId);
    return localVarResponse.getData();
  }

  /**
   * Gets the remote subtitles.
   * 
   * @param subtitleId The item id. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getRemoteSubtitlesWithHttpInfo(String subtitleId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRemoteSubtitlesRequestBuilder(subtitleId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRemoteSubtitles", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRemoteSubtitlesRequestBuilder(String subtitleId) throws ApiException {
    // verify the required parameter 'subtitleId' is set
    if (subtitleId == null) {
      throw new ApiException(400, "Missing the required parameter 'subtitleId' when calling getRemoteSubtitles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Providers/Subtitles/Subtitles/{subtitleId}"
        .replace("{subtitleId}", ApiClient.urlEncode(subtitleId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "text/*");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets subtitles in a specified format.
   * 
   * @param routeItemId The (route) item id. (required)
   * @param routeMediaSourceId The (route) media source id. (required)
   * @param routeIndex The (route) subtitle stream index. (required)
   * @param routeFormat The (route) format of the returned subtitle. (required)
   * @param itemId The item id. (optional)
   * @param mediaSourceId The media source id. (optional)
   * @param index The subtitle stream index. (optional)
   * @param format The format of the returned subtitle. (optional)
   * @param endPositionTicks Optional. The end position of the subtitle in ticks. (optional)
   * @param copyTimestamps Optional. Whether to copy the timestamps. (optional, default to false)
   * @param addVttTimeMap Optional. Whether to add a VTT time map. (optional, default to false)
   * @param startPositionTicks The start position of the subtitle in ticks. (optional, default to 0)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getSubtitle(UUID routeItemId, String routeMediaSourceId, Integer routeIndex, String routeFormat, UUID itemId, String mediaSourceId, Integer index, String format, Long endPositionTicks, Boolean copyTimestamps, Boolean addVttTimeMap, Long startPositionTicks) throws ApiException {
    ApiResponse<File> localVarResponse = getSubtitleWithHttpInfo(routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks);
    return localVarResponse.getData();
  }

  /**
   * Gets subtitles in a specified format.
   * 
   * @param routeItemId The (route) item id. (required)
   * @param routeMediaSourceId The (route) media source id. (required)
   * @param routeIndex The (route) subtitle stream index. (required)
   * @param routeFormat The (route) format of the returned subtitle. (required)
   * @param itemId The item id. (optional)
   * @param mediaSourceId The media source id. (optional)
   * @param index The subtitle stream index. (optional)
   * @param format The format of the returned subtitle. (optional)
   * @param endPositionTicks Optional. The end position of the subtitle in ticks. (optional)
   * @param copyTimestamps Optional. Whether to copy the timestamps. (optional, default to false)
   * @param addVttTimeMap Optional. Whether to add a VTT time map. (optional, default to false)
   * @param startPositionTicks The start position of the subtitle in ticks. (optional, default to 0)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getSubtitleWithHttpInfo(UUID routeItemId, String routeMediaSourceId, Integer routeIndex, String routeFormat, UUID itemId, String mediaSourceId, Integer index, String format, Long endPositionTicks, Boolean copyTimestamps, Boolean addVttTimeMap, Long startPositionTicks) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSubtitleRequestBuilder(routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSubtitle", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSubtitleRequestBuilder(UUID routeItemId, String routeMediaSourceId, Integer routeIndex, String routeFormat, UUID itemId, String mediaSourceId, Integer index, String format, Long endPositionTicks, Boolean copyTimestamps, Boolean addVttTimeMap, Long startPositionTicks) throws ApiException {
    // verify the required parameter 'routeItemId' is set
    if (routeItemId == null) {
      throw new ApiException(400, "Missing the required parameter 'routeItemId' when calling getSubtitle");
    }
    // verify the required parameter 'routeMediaSourceId' is set
    if (routeMediaSourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'routeMediaSourceId' when calling getSubtitle");
    }
    // verify the required parameter 'routeIndex' is set
    if (routeIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'routeIndex' when calling getSubtitle");
    }
    // verify the required parameter 'routeFormat' is set
    if (routeFormat == null) {
      throw new ApiException(400, "Missing the required parameter 'routeFormat' when calling getSubtitle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}"
        .replace("{routeItemId}", ApiClient.urlEncode(routeItemId.toString()))
        .replace("{routeMediaSourceId}", ApiClient.urlEncode(routeMediaSourceId.toString()))
        .replace("{routeIndex}", ApiClient.urlEncode(routeIndex.toString()))
        .replace("{routeFormat}", ApiClient.urlEncode(routeFormat.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "itemId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("itemId", itemId));
    localVarQueryParameterBaseName = "mediaSourceId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mediaSourceId", mediaSourceId));
    localVarQueryParameterBaseName = "index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("index", index));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "endPositionTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endPositionTicks", endPositionTicks));
    localVarQueryParameterBaseName = "copyTimestamps";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("copyTimestamps", copyTimestamps));
    localVarQueryParameterBaseName = "addVttTimeMap";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("addVttTimeMap", addVttTimeMap));
    localVarQueryParameterBaseName = "startPositionTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startPositionTicks", startPositionTicks));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "text/*");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets an HLS subtitle playlist.
   * 
   * @param itemId The item id. (required)
   * @param index The subtitle stream index. (required)
   * @param mediaSourceId The media source id. (required)
   * @param segmentLength The subtitle segment length. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getSubtitlePlaylist(UUID itemId, Integer index, String mediaSourceId, Integer segmentLength) throws ApiException {
    ApiResponse<File> localVarResponse = getSubtitlePlaylistWithHttpInfo(itemId, index, mediaSourceId, segmentLength);
    return localVarResponse.getData();
  }

  /**
   * Gets an HLS subtitle playlist.
   * 
   * @param itemId The item id. (required)
   * @param index The subtitle stream index. (required)
   * @param mediaSourceId The media source id. (required)
   * @param segmentLength The subtitle segment length. (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getSubtitlePlaylistWithHttpInfo(UUID itemId, Integer index, String mediaSourceId, Integer segmentLength) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSubtitlePlaylistRequestBuilder(itemId, index, mediaSourceId, segmentLength);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSubtitlePlaylist", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSubtitlePlaylistRequestBuilder(UUID itemId, Integer index, String mediaSourceId, Integer segmentLength) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getSubtitlePlaylist");
    }
    // verify the required parameter 'index' is set
    if (index == null) {
      throw new ApiException(400, "Missing the required parameter 'index' when calling getSubtitlePlaylist");
    }
    // verify the required parameter 'mediaSourceId' is set
    if (mediaSourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'mediaSourceId' when calling getSubtitlePlaylist");
    }
    // verify the required parameter 'segmentLength' is set
    if (segmentLength == null) {
      throw new ApiException(400, "Missing the required parameter 'segmentLength' when calling getSubtitlePlaylist");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{index}", ApiClient.urlEncode(index.toString()))
        .replace("{mediaSourceId}", ApiClient.urlEncode(mediaSourceId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "segmentLength";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("segmentLength", segmentLength));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/x-mpegURL, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets subtitles in a specified format.
   * 
   * @param routeItemId The (route) item id. (required)
   * @param routeMediaSourceId The (route) media source id. (required)
   * @param routeIndex The (route) subtitle stream index. (required)
   * @param routeStartPositionTicks The (route) start position of the subtitle in ticks. (required)
   * @param routeFormat The (route) format of the returned subtitle. (required)
   * @param itemId The item id. (optional)
   * @param mediaSourceId The media source id. (optional)
   * @param index The subtitle stream index. (optional)
   * @param startPositionTicks The start position of the subtitle in ticks. (optional)
   * @param format The format of the returned subtitle. (optional)
   * @param endPositionTicks Optional. The end position of the subtitle in ticks. (optional)
   * @param copyTimestamps Optional. Whether to copy the timestamps. (optional, default to false)
   * @param addVttTimeMap Optional. Whether to add a VTT time map. (optional, default to false)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getSubtitleWithTicks(UUID routeItemId, String routeMediaSourceId, Integer routeIndex, Long routeStartPositionTicks, String routeFormat, UUID itemId, String mediaSourceId, Integer index, Long startPositionTicks, String format, Long endPositionTicks, Boolean copyTimestamps, Boolean addVttTimeMap) throws ApiException {
    ApiResponse<File> localVarResponse = getSubtitleWithTicksWithHttpInfo(routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap);
    return localVarResponse.getData();
  }

  /**
   * Gets subtitles in a specified format.
   * 
   * @param routeItemId The (route) item id. (required)
   * @param routeMediaSourceId The (route) media source id. (required)
   * @param routeIndex The (route) subtitle stream index. (required)
   * @param routeStartPositionTicks The (route) start position of the subtitle in ticks. (required)
   * @param routeFormat The (route) format of the returned subtitle. (required)
   * @param itemId The item id. (optional)
   * @param mediaSourceId The media source id. (optional)
   * @param index The subtitle stream index. (optional)
   * @param startPositionTicks The start position of the subtitle in ticks. (optional)
   * @param format The format of the returned subtitle. (optional)
   * @param endPositionTicks Optional. The end position of the subtitle in ticks. (optional)
   * @param copyTimestamps Optional. Whether to copy the timestamps. (optional, default to false)
   * @param addVttTimeMap Optional. Whether to add a VTT time map. (optional, default to false)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getSubtitleWithTicksWithHttpInfo(UUID routeItemId, String routeMediaSourceId, Integer routeIndex, Long routeStartPositionTicks, String routeFormat, UUID itemId, String mediaSourceId, Integer index, Long startPositionTicks, String format, Long endPositionTicks, Boolean copyTimestamps, Boolean addVttTimeMap) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSubtitleWithTicksRequestBuilder(routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSubtitleWithTicks", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSubtitleWithTicksRequestBuilder(UUID routeItemId, String routeMediaSourceId, Integer routeIndex, Long routeStartPositionTicks, String routeFormat, UUID itemId, String mediaSourceId, Integer index, Long startPositionTicks, String format, Long endPositionTicks, Boolean copyTimestamps, Boolean addVttTimeMap) throws ApiException {
    // verify the required parameter 'routeItemId' is set
    if (routeItemId == null) {
      throw new ApiException(400, "Missing the required parameter 'routeItemId' when calling getSubtitleWithTicks");
    }
    // verify the required parameter 'routeMediaSourceId' is set
    if (routeMediaSourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'routeMediaSourceId' when calling getSubtitleWithTicks");
    }
    // verify the required parameter 'routeIndex' is set
    if (routeIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'routeIndex' when calling getSubtitleWithTicks");
    }
    // verify the required parameter 'routeStartPositionTicks' is set
    if (routeStartPositionTicks == null) {
      throw new ApiException(400, "Missing the required parameter 'routeStartPositionTicks' when calling getSubtitleWithTicks");
    }
    // verify the required parameter 'routeFormat' is set
    if (routeFormat == null) {
      throw new ApiException(400, "Missing the required parameter 'routeFormat' when calling getSubtitleWithTicks");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}"
        .replace("{routeItemId}", ApiClient.urlEncode(routeItemId.toString()))
        .replace("{routeMediaSourceId}", ApiClient.urlEncode(routeMediaSourceId.toString()))
        .replace("{routeIndex}", ApiClient.urlEncode(routeIndex.toString()))
        .replace("{routeStartPositionTicks}", ApiClient.urlEncode(routeStartPositionTicks.toString()))
        .replace("{routeFormat}", ApiClient.urlEncode(routeFormat.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "itemId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("itemId", itemId));
    localVarQueryParameterBaseName = "mediaSourceId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mediaSourceId", mediaSourceId));
    localVarQueryParameterBaseName = "index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("index", index));
    localVarQueryParameterBaseName = "startPositionTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startPositionTicks", startPositionTicks));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "endPositionTicks";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endPositionTicks", endPositionTicks));
    localVarQueryParameterBaseName = "copyTimestamps";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("copyTimestamps", copyTimestamps));
    localVarQueryParameterBaseName = "addVttTimeMap";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("addVttTimeMap", addVttTimeMap));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "text/*");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Search remote subtitles.
   * 
   * @param itemId The item id. (required)
   * @param language The language of the subtitles. (required)
   * @param isPerfectMatch Optional. Only show subtitles which are a perfect match. (optional)
   * @return List&lt;RemoteSubtitleInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RemoteSubtitleInfo> searchRemoteSubtitles(UUID itemId, String language, Boolean isPerfectMatch) throws ApiException {
    ApiResponse<List<RemoteSubtitleInfo>> localVarResponse = searchRemoteSubtitlesWithHttpInfo(itemId, language, isPerfectMatch);
    return localVarResponse.getData();
  }

  /**
   * Search remote subtitles.
   * 
   * @param itemId The item id. (required)
   * @param language The language of the subtitles. (required)
   * @param isPerfectMatch Optional. Only show subtitles which are a perfect match. (optional)
   * @return ApiResponse&lt;List&lt;RemoteSubtitleInfo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RemoteSubtitleInfo>> searchRemoteSubtitlesWithHttpInfo(UUID itemId, String language, Boolean isPerfectMatch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchRemoteSubtitlesRequestBuilder(itemId, language, isPerfectMatch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchRemoteSubtitles", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<RemoteSubtitleInfo>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<RemoteSubtitleInfo>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<RemoteSubtitleInfo>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchRemoteSubtitlesRequestBuilder(UUID itemId, String language, Boolean isPerfectMatch) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling searchRemoteSubtitles");
    }
    // verify the required parameter 'language' is set
    if (language == null) {
      throw new ApiException(400, "Missing the required parameter 'language' when calling searchRemoteSubtitles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{language}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{language}", ApiClient.urlEncode(language.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "isPerfectMatch";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isPerfectMatch", isPerfectMatch));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Upload an external subtitle file.
   * 
   * @param itemId The item the subtitle belongs to. (required)
   * @param uploadSubtitleDto The request body. (required)
   * @throws ApiException if fails to make API call
   */
  public void uploadSubtitle(UUID itemId, UploadSubtitleDto uploadSubtitleDto) throws ApiException {
    uploadSubtitleWithHttpInfo(itemId, uploadSubtitleDto);
  }

  /**
   * Upload an external subtitle file.
   * 
   * @param itemId The item the subtitle belongs to. (required)
   * @param uploadSubtitleDto The request body. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> uploadSubtitleWithHttpInfo(UUID itemId, UploadSubtitleDto uploadSubtitleDto) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = uploadSubtitleRequestBuilder(itemId, uploadSubtitleDto);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("uploadSubtitle", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder uploadSubtitleRequestBuilder(UUID itemId, UploadSubtitleDto uploadSubtitleDto) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling uploadSubtitle");
    }
    // verify the required parameter 'uploadSubtitleDto' is set
    if (uploadSubtitleDto == null) {
      throw new ApiException(400, "Missing the required parameter 'uploadSubtitleDto' when calling uploadSubtitle");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Videos/{itemId}/Subtitles"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(uploadSubtitleDto);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
