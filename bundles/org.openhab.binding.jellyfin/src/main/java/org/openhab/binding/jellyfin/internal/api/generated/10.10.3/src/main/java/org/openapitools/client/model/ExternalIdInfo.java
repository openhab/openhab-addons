/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.ExternalIdMediaType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Represents the external id information for serialization to the client.
 */
@JsonPropertyOrder({
  ExternalIdInfo.JSON_PROPERTY_NAME,
  ExternalIdInfo.JSON_PROPERTY_KEY,
  ExternalIdInfo.JSON_PROPERTY_TYPE,
  ExternalIdInfo.JSON_PROPERTY_URL_FORMAT_STRING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:48.410245241Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ExternalIdInfo {
  public static final String JSON_PROPERTY_NAME = "Name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_KEY = "Key";
  @javax.annotation.Nullable
  private String key;

  public static final String JSON_PROPERTY_TYPE = "Type";
  private JsonNullable<ExternalIdMediaType> type = JsonNullable.<ExternalIdMediaType>undefined();

  public static final String JSON_PROPERTY_URL_FORMAT_STRING = "UrlFormatString";
  private JsonNullable<String> urlFormatString = JsonNullable.<String>undefined();

  public ExternalIdInfo() { 
  }

  public ExternalIdInfo name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the display name of the external id provider (IE: IMDB, MusicBrainz, etc).
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ExternalIdInfo key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * Gets or sets the unique key for this id. This key should be unique across all providers.
   * @return key
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public ExternalIdInfo type(@javax.annotation.Nullable ExternalIdMediaType type) {
    this.type = JsonNullable.<ExternalIdMediaType>of(type);
    return this;
  }

  /**
   * Gets or sets the specific media type for this id. This is used to distinguish between the different  external id types for providers with multiple ids.  A null value indicates there is no specific media type associated with the external id, or this is the  default id for the external provider so there is no need to specify a type.
   * @return type
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public ExternalIdMediaType getType() {
        return type.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ExternalIdMediaType> getType_JsonNullable() {
    return type;
  }
  
  @JsonProperty(JSON_PROPERTY_TYPE)
  public void setType_JsonNullable(JsonNullable<ExternalIdMediaType> type) {
    this.type = type;
  }

  public void setType(@javax.annotation.Nullable ExternalIdMediaType type) {
    this.type = JsonNullable.<ExternalIdMediaType>of(type);
  }


  public ExternalIdInfo urlFormatString(@javax.annotation.Nullable String urlFormatString) {
    this.urlFormatString = JsonNullable.<String>of(urlFormatString);
    return this;
  }

  /**
   * Gets or sets the URL format string.
   * @return urlFormatString
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonIgnore
  public String getUrlFormatString() {
        return urlFormatString.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_URL_FORMAT_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUrlFormatString_JsonNullable() {
    return urlFormatString;
  }
  
  @JsonProperty(JSON_PROPERTY_URL_FORMAT_STRING)
  public void setUrlFormatString_JsonNullable(JsonNullable<String> urlFormatString) {
    this.urlFormatString = urlFormatString;
  }

  public void setUrlFormatString(@javax.annotation.Nullable String urlFormatString) {
    this.urlFormatString = JsonNullable.<String>of(urlFormatString);
  }


  /**
   * Return true if this ExternalIdInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalIdInfo externalIdInfo = (ExternalIdInfo) o;
    return Objects.equals(this.name, externalIdInfo.name) &&
        Objects.equals(this.key, externalIdInfo.key) &&
        equalsNullable(this.type, externalIdInfo.type) &&
        equalsNullable(this.urlFormatString, externalIdInfo.urlFormatString);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, key, hashCodeNullable(type), hashCodeNullable(urlFormatString));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalIdInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    urlFormatString: ").append(toIndentedString(urlFormatString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Key` to the URL query string
    if (getKey() != null) {
      joiner.add(String.format("%sKey%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getKey()))));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `UrlFormatString` to the URL query string
    if (getUrlFormatString() != null) {
      joiner.add(String.format("%sUrlFormatString%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUrlFormatString()))));
    }

    return joiner.toString();
  }
}

