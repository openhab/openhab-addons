/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.ItemSortBy;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProblemDetails;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TvShowsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TvShowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TvShowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEpisodes
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param season Optional filter by season number. (optional)
     * @param seasonId Optional. Filter by season id. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param startItemId Optional. Skip through the list until a given item is found. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param enableImages Optional, include image information in output. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesCall(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Shows/{seriesId}/Episodes"
            .replace("{" + "seriesId" + "}", localVarApiClient.escapeString(seriesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (season != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("season", season));
        }

        if (seasonId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonId", seasonId));
        }

        if (isMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMissing", isMissing));
        }

        if (adjacentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adjacentTo", adjacentTo));
        }

        if (startItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startItemId", startItemId));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (enableImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImages", enableImages));
        }

        if (imageTypeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypeLimit", imageTypeLimit));
        }

        if (enableImageTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
        }

        if (enableUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUserData", enableUserData));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEpisodesValidateBeforeCall(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seriesId' is set
        if (seriesId == null) {
            throw new ApiException("Missing the required parameter 'seriesId' when calling getEpisodes(Async)");
        }

        return getEpisodesCall(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, _callback);

    }

    /**
     * Gets episodes for a tv season.
     * 
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param season Optional filter by season number. (optional)
     * @param seasonId Optional. Filter by season id. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param startItemId Optional. Skip through the list until a given item is found. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param enableImages Optional, include image information in output. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @return BaseItemDtoQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BaseItemDtoQueryResult getEpisodes(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy) throws ApiException {
        ApiResponse<BaseItemDtoQueryResult> localVarResp = getEpisodesWithHttpInfo(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy);
        return localVarResp.getData();
    }

    /**
     * Gets episodes for a tv season.
     * 
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param season Optional filter by season number. (optional)
     * @param seasonId Optional. Filter by season id. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param startItemId Optional. Skip through the list until a given item is found. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param enableImages Optional, include image information in output. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseItemDtoQueryResult> getEpisodesWithHttpInfo(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy) throws ApiException {
        okhttp3.Call localVarCall = getEpisodesValidateBeforeCall(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, null);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets episodes for a tv season. (asynchronously)
     * 
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param season Optional filter by season number. (optional)
     * @param seasonId Optional. Filter by season id. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param startItemId Optional. Skip through the list until a given item is found. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param enableImages Optional, include image information in output. (optional)
     * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEpisodesAsync(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy, final ApiCallback<BaseItemDtoQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEpisodesValidateBeforeCall(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, _callback);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNextUp
     * @param userId The user id of the user to get the next up episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param seriesId Optional. Filter by series id. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param nextUpDateCutoff Optional. Starting date of shows to show in Next Up section. (optional)
     * @param enableTotalRecordCount Whether to enable the total records count. Defaults to true. (optional, default to true)
     * @param disableFirstEpisode Whether to disable sending the first episode in a series as next up. (optional, default to false)
     * @param enableResumable Whether to include resumable episodes in next up results. (optional, default to true)
     * @param enableRewatching Whether to include watched episodes in next up results. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextUpCall(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Shows/NextUp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (seriesId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriesId", seriesId));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (enableImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImages", enableImages));
        }

        if (imageTypeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypeLimit", imageTypeLimit));
        }

        if (enableImageTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
        }

        if (enableUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUserData", enableUserData));
        }

        if (nextUpDateCutoff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextUpDateCutoff", nextUpDateCutoff));
        }

        if (enableTotalRecordCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableTotalRecordCount", enableTotalRecordCount));
        }

        if (disableFirstEpisode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disableFirstEpisode", disableFirstEpisode));
        }

        if (enableResumable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableResumable", enableResumable));
        }

        if (enableRewatching != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableRewatching", enableRewatching));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNextUpValidateBeforeCall(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching, final ApiCallback _callback) throws ApiException {
        return getNextUpCall(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, nextUpDateCutoff, enableTotalRecordCount, disableFirstEpisode, enableResumable, enableRewatching, _callback);

    }

    /**
     * Gets a list of next up episodes.
     * 
     * @param userId The user id of the user to get the next up episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param seriesId Optional. Filter by series id. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param nextUpDateCutoff Optional. Starting date of shows to show in Next Up section. (optional)
     * @param enableTotalRecordCount Whether to enable the total records count. Defaults to true. (optional, default to true)
     * @param disableFirstEpisode Whether to disable sending the first episode in a series as next up. (optional, default to false)
     * @param enableResumable Whether to include resumable episodes in next up results. (optional, default to true)
     * @param enableRewatching Whether to include watched episodes in next up results. (optional, default to false)
     * @return BaseItemDtoQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BaseItemDtoQueryResult getNextUp(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching) throws ApiException {
        ApiResponse<BaseItemDtoQueryResult> localVarResp = getNextUpWithHttpInfo(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, nextUpDateCutoff, enableTotalRecordCount, disableFirstEpisode, enableResumable, enableRewatching);
        return localVarResp.getData();
    }

    /**
     * Gets a list of next up episodes.
     * 
     * @param userId The user id of the user to get the next up episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param seriesId Optional. Filter by series id. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param nextUpDateCutoff Optional. Starting date of shows to show in Next Up section. (optional)
     * @param enableTotalRecordCount Whether to enable the total records count. Defaults to true. (optional, default to true)
     * @param disableFirstEpisode Whether to disable sending the first episode in a series as next up. (optional, default to false)
     * @param enableResumable Whether to include resumable episodes in next up results. (optional, default to true)
     * @param enableRewatching Whether to include watched episodes in next up results. (optional, default to false)
     * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseItemDtoQueryResult> getNextUpWithHttpInfo(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching) throws ApiException {
        okhttp3.Call localVarCall = getNextUpValidateBeforeCall(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, nextUpDateCutoff, enableTotalRecordCount, disableFirstEpisode, enableResumable, enableRewatching, null);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of next up episodes. (asynchronously)
     * 
     * @param userId The user id of the user to get the next up episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param seriesId Optional. Filter by series id. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param nextUpDateCutoff Optional. Starting date of shows to show in Next Up section. (optional)
     * @param enableTotalRecordCount Whether to enable the total records count. Defaults to true. (optional, default to true)
     * @param disableFirstEpisode Whether to disable sending the first episode in a series as next up. (optional, default to false)
     * @param enableResumable Whether to include resumable episodes in next up results. (optional, default to true)
     * @param enableRewatching Whether to include watched episodes in next up results. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextUpAsync(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching, final ApiCallback<BaseItemDtoQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNextUpValidateBeforeCall(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, nextUpDateCutoff, enableTotalRecordCount, disableFirstEpisode, enableResumable, enableRewatching, _callback);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSeasons
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param isSpecialSeason Optional. Filter by special season. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeasonsCall(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Shows/{seriesId}/Seasons"
            .replace("{" + "seriesId" + "}", localVarApiClient.escapeString(seriesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (isSpecialSeason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSpecialSeason", isSpecialSeason));
        }

        if (isMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMissing", isMissing));
        }

        if (adjacentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adjacentTo", adjacentTo));
        }

        if (enableImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImages", enableImages));
        }

        if (imageTypeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypeLimit", imageTypeLimit));
        }

        if (enableImageTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
        }

        if (enableUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUserData", enableUserData));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeasonsValidateBeforeCall(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seriesId' is set
        if (seriesId == null) {
            throw new ApiException("Missing the required parameter 'seriesId' when calling getSeasons(Async)");
        }

        return getSeasonsCall(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, _callback);

    }

    /**
     * Gets seasons for a tv series.
     * 
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param isSpecialSeason Optional. Filter by special season. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @return BaseItemDtoQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BaseItemDtoQueryResult getSeasons(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
        ApiResponse<BaseItemDtoQueryResult> localVarResp = getSeasonsWithHttpInfo(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
        return localVarResp.getData();
    }

    /**
     * Gets seasons for a tv series.
     * 
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param isSpecialSeason Optional. Filter by special season. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseItemDtoQueryResult> getSeasonsWithHttpInfo(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
        okhttp3.Call localVarCall = getSeasonsValidateBeforeCall(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets seasons for a tv series. (asynchronously)
     * 
     * @param seriesId The series id. (required)
     * @param userId The user id. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
     * @param isSpecialSeason Optional. Filter by special season. (optional)
     * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
     * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeasonsAsync(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, final ApiCallback<BaseItemDtoQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSeasonsValidateBeforeCall(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, _callback);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUpcomingEpisodes
     * @param userId The user id of the user to get the upcoming episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpcomingEpisodesCall(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Shows/Upcoming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (enableImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImages", enableImages));
        }

        if (imageTypeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypeLimit", imageTypeLimit));
        }

        if (enableImageTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
        }

        if (enableUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUserData", enableUserData));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpcomingEpisodesValidateBeforeCall(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, final ApiCallback _callback) throws ApiException {
        return getUpcomingEpisodesCall(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, _callback);

    }

    /**
     * Gets a list of upcoming episodes.
     * 
     * @param userId The user id of the user to get the upcoming episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @return BaseItemDtoQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BaseItemDtoQueryResult getUpcomingEpisodes(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
        ApiResponse<BaseItemDtoQueryResult> localVarResp = getUpcomingEpisodesWithHttpInfo(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
        return localVarResp.getData();
    }

    /**
     * Gets a list of upcoming episodes.
     * 
     * @param userId The user id of the user to get the upcoming episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseItemDtoQueryResult> getUpcomingEpisodesWithHttpInfo(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
        okhttp3.Call localVarCall = getUpcomingEpisodesValidateBeforeCall(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of upcoming episodes. (asynchronously)
     * 
     * @param userId The user id of the user to get the upcoming episodes for. (optional)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param enableImages Optional. Include image information in output. (optional)
     * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
     * @param enableImageTypes Optional. The image types to include in the output. (optional)
     * @param enableUserData Optional. Include user data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpcomingEpisodesAsync(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, final ApiCallback<BaseItemDtoQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpcomingEpisodesValidateBeforeCall(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, _callback);
        Type localVarReturnType = new TypeToken<BaseItemDtoQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
