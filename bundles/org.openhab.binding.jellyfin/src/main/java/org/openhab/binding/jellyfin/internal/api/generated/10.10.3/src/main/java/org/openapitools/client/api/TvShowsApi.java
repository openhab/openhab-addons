/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.ItemSortBy;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProblemDetails;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class TvShowsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TvShowsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public TvShowsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets episodes for a tv season.
   * 
   * @param seriesId The series id. (required)
   * @param userId The user id. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
   * @param season Optional filter by season number. (optional)
   * @param seasonId Optional. Filter by season id. (optional)
   * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
   * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
   * @param startItemId Optional. Skip through the list until a given item is found. (optional)
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param enableImages Optional, include image information in output. (optional)
   * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getEpisodes(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getEpisodesWithHttpInfo(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy);
    return localVarResponse.getData();
  }

  /**
   * Gets episodes for a tv season.
   * 
   * @param seriesId The series id. (required)
   * @param userId The user id. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
   * @param season Optional filter by season number. (optional)
   * @param seasonId Optional. Filter by season id. (optional)
   * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
   * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
   * @param startItemId Optional. Skip through the list until a given item is found. (optional)
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param enableImages Optional, include image information in output. (optional)
   * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getEpisodesWithHttpInfo(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEpisodesRequestBuilder(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEpisodes", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEpisodesRequestBuilder(UUID seriesId, UUID userId, List<ItemFields> fields, Integer season, UUID seasonId, Boolean isMissing, UUID adjacentTo, UUID startItemId, Integer startIndex, Integer limit, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, ItemSortBy sortBy) throws ApiException {
    // verify the required parameter 'seriesId' is set
    if (seriesId == null) {
      throw new ApiException(400, "Missing the required parameter 'seriesId' when calling getEpisodes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Shows/{seriesId}/Episodes"
        .replace("{seriesId}", ApiClient.urlEncode(seriesId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "season";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("season", season));
    localVarQueryParameterBaseName = "seasonId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("seasonId", seasonId));
    localVarQueryParameterBaseName = "isMissing";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isMissing", isMissing));
    localVarQueryParameterBaseName = "adjacentTo";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("adjacentTo", adjacentTo));
    localVarQueryParameterBaseName = "startItemId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startItemId", startItemId));
    localVarQueryParameterBaseName = "startIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startIndex", startIndex));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "sortBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sortBy", sortBy));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a list of next up episodes.
   * 
   * @param userId The user id of the user to get the next up episodes for. (optional)
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param seriesId Optional. Filter by series id. (optional)
   * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param nextUpDateCutoff Optional. Starting date of shows to show in Next Up section. (optional)
   * @param enableTotalRecordCount Whether to enable the total records count. Defaults to true. (optional, default to true)
   * @param disableFirstEpisode Whether to disable sending the first episode in a series as next up. (optional, default to false)
   * @param enableResumable Whether to include resumable episodes in next up results. (optional, default to true)
   * @param enableRewatching Whether to include watched episodes in next up results. (optional, default to false)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getNextUp(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getNextUpWithHttpInfo(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, nextUpDateCutoff, enableTotalRecordCount, disableFirstEpisode, enableResumable, enableRewatching);
    return localVarResponse.getData();
  }

  /**
   * Gets a list of next up episodes.
   * 
   * @param userId The user id of the user to get the next up episodes for. (optional)
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param seriesId Optional. Filter by series id. (optional)
   * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param nextUpDateCutoff Optional. Starting date of shows to show in Next Up section. (optional)
   * @param enableTotalRecordCount Whether to enable the total records count. Defaults to true. (optional, default to true)
   * @param disableFirstEpisode Whether to disable sending the first episode in a series as next up. (optional, default to false)
   * @param enableResumable Whether to include resumable episodes in next up results. (optional, default to true)
   * @param enableRewatching Whether to include watched episodes in next up results. (optional, default to false)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getNextUpWithHttpInfo(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNextUpRequestBuilder(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, nextUpDateCutoff, enableTotalRecordCount, disableFirstEpisode, enableResumable, enableRewatching);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getNextUp", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNextUpRequestBuilder(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID seriesId, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, OffsetDateTime nextUpDateCutoff, Boolean enableTotalRecordCount, Boolean disableFirstEpisode, Boolean enableResumable, Boolean enableRewatching) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Shows/NextUp";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "startIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startIndex", startIndex));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "seriesId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("seriesId", seriesId));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "nextUpDateCutoff";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextUpDateCutoff", nextUpDateCutoff));
    localVarQueryParameterBaseName = "enableTotalRecordCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableTotalRecordCount", enableTotalRecordCount));
    localVarQueryParameterBaseName = "disableFirstEpisode";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("disableFirstEpisode", disableFirstEpisode));
    localVarQueryParameterBaseName = "enableResumable";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableResumable", enableResumable));
    localVarQueryParameterBaseName = "enableRewatching";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableRewatching", enableRewatching));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets seasons for a tv series.
   * 
   * @param seriesId The series id. (required)
   * @param userId The user id. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
   * @param isSpecialSeason Optional. Filter by special season. (optional)
   * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
   * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getSeasons(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getSeasonsWithHttpInfo(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
    return localVarResponse.getData();
  }

  /**
   * Gets seasons for a tv series.
   * 
   * @param seriesId The series id. (required)
   * @param userId The user id. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)
   * @param isSpecialSeason Optional. Filter by special season. (optional)
   * @param isMissing Optional. Filter by items that are missing episodes or not. (optional)
   * @param adjacentTo Optional. Return items that are siblings of a supplied item. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getSeasonsWithHttpInfo(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSeasonsRequestBuilder(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSeasons", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSeasonsRequestBuilder(UUID seriesId, UUID userId, List<ItemFields> fields, Boolean isSpecialSeason, Boolean isMissing, UUID adjacentTo, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
    // verify the required parameter 'seriesId' is set
    if (seriesId == null) {
      throw new ApiException(400, "Missing the required parameter 'seriesId' when calling getSeasons");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Shows/{seriesId}/Seasons"
        .replace("{seriesId}", ApiClient.urlEncode(seriesId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "isSpecialSeason";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isSpecialSeason", isSpecialSeason));
    localVarQueryParameterBaseName = "isMissing";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isMissing", isMissing));
    localVarQueryParameterBaseName = "adjacentTo";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("adjacentTo", adjacentTo));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a list of upcoming episodes.
   * 
   * @param userId The user id of the user to get the upcoming episodes for. (optional)
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getUpcomingEpisodes(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getUpcomingEpisodesWithHttpInfo(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
    return localVarResponse.getData();
  }

  /**
   * Gets a list of upcoming episodes.
   * 
   * @param userId The user id of the user to get the upcoming episodes for. (optional)
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param parentId Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getUpcomingEpisodesWithHttpInfo(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUpcomingEpisodesRequestBuilder(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUpcomingEpisodes", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUpcomingEpisodesRequestBuilder(UUID userId, Integer startIndex, Integer limit, List<ItemFields> fields, UUID parentId, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Shows/Upcoming";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "startIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startIndex", startIndex));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
