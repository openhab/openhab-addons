/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageOption;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.LibraryOptionInfoDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Library type options dto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class LibraryTypeOptionsDto {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_METADATA_FETCHERS = "MetadataFetchers";
  @SerializedName(SERIALIZED_NAME_METADATA_FETCHERS)
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> metadataFetchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_FETCHERS = "ImageFetchers";
  @SerializedName(SERIALIZED_NAME_IMAGE_FETCHERS)
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> imageFetchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_IMAGE_TYPES = "SupportedImageTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_IMAGE_TYPES)
  @javax.annotation.Nullable
  private List<ImageType> supportedImageTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_IMAGE_OPTIONS = "DefaultImageOptions";
  @SerializedName(SERIALIZED_NAME_DEFAULT_IMAGE_OPTIONS)
  @javax.annotation.Nullable
  private List<ImageOption> defaultImageOptions = new ArrayList<>();

  public LibraryTypeOptionsDto() {
  }

  public LibraryTypeOptionsDto type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public LibraryTypeOptionsDto metadataFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataFetchers) {
    this.metadataFetchers = metadataFetchers;
    return this;
  }

  public LibraryTypeOptionsDto addMetadataFetchersItem(LibraryOptionInfoDto metadataFetchersItem) {
    if (this.metadataFetchers == null) {
      this.metadataFetchers = new ArrayList<>();
    }
    this.metadataFetchers.add(metadataFetchersItem);
    return this;
  }

  /**
   * Gets or sets the metadata fetchers.
   * @return metadataFetchers
   */
  @javax.annotation.Nullable
  public List<LibraryOptionInfoDto> getMetadataFetchers() {
    return metadataFetchers;
  }

  public void setMetadataFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataFetchers) {
    this.metadataFetchers = metadataFetchers;
  }


  public LibraryTypeOptionsDto imageFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> imageFetchers) {
    this.imageFetchers = imageFetchers;
    return this;
  }

  public LibraryTypeOptionsDto addImageFetchersItem(LibraryOptionInfoDto imageFetchersItem) {
    if (this.imageFetchers == null) {
      this.imageFetchers = new ArrayList<>();
    }
    this.imageFetchers.add(imageFetchersItem);
    return this;
  }

  /**
   * Gets or sets the image fetchers.
   * @return imageFetchers
   */
  @javax.annotation.Nullable
  public List<LibraryOptionInfoDto> getImageFetchers() {
    return imageFetchers;
  }

  public void setImageFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> imageFetchers) {
    this.imageFetchers = imageFetchers;
  }


  public LibraryTypeOptionsDto supportedImageTypes(@javax.annotation.Nullable List<ImageType> supportedImageTypes) {
    this.supportedImageTypes = supportedImageTypes;
    return this;
  }

  public LibraryTypeOptionsDto addSupportedImageTypesItem(ImageType supportedImageTypesItem) {
    if (this.supportedImageTypes == null) {
      this.supportedImageTypes = new ArrayList<>();
    }
    this.supportedImageTypes.add(supportedImageTypesItem);
    return this;
  }

  /**
   * Gets or sets the supported image types.
   * @return supportedImageTypes
   */
  @javax.annotation.Nullable
  public List<ImageType> getSupportedImageTypes() {
    return supportedImageTypes;
  }

  public void setSupportedImageTypes(@javax.annotation.Nullable List<ImageType> supportedImageTypes) {
    this.supportedImageTypes = supportedImageTypes;
  }


  public LibraryTypeOptionsDto defaultImageOptions(@javax.annotation.Nullable List<ImageOption> defaultImageOptions) {
    this.defaultImageOptions = defaultImageOptions;
    return this;
  }

  public LibraryTypeOptionsDto addDefaultImageOptionsItem(ImageOption defaultImageOptionsItem) {
    if (this.defaultImageOptions == null) {
      this.defaultImageOptions = new ArrayList<>();
    }
    this.defaultImageOptions.add(defaultImageOptionsItem);
    return this;
  }

  /**
   * Gets or sets the default image options.
   * @return defaultImageOptions
   */
  @javax.annotation.Nullable
  public List<ImageOption> getDefaultImageOptions() {
    return defaultImageOptions;
  }

  public void setDefaultImageOptions(@javax.annotation.Nullable List<ImageOption> defaultImageOptions) {
    this.defaultImageOptions = defaultImageOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryTypeOptionsDto libraryTypeOptionsDto = (LibraryTypeOptionsDto) o;
    return Objects.equals(this.type, libraryTypeOptionsDto.type) &&
        Objects.equals(this.metadataFetchers, libraryTypeOptionsDto.metadataFetchers) &&
        Objects.equals(this.imageFetchers, libraryTypeOptionsDto.imageFetchers) &&
        Objects.equals(this.supportedImageTypes, libraryTypeOptionsDto.supportedImageTypes) &&
        Objects.equals(this.defaultImageOptions, libraryTypeOptionsDto.defaultImageOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, metadataFetchers, imageFetchers, supportedImageTypes, defaultImageOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryTypeOptionsDto {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    metadataFetchers: ").append(toIndentedString(metadataFetchers)).append("\n");
    sb.append("    imageFetchers: ").append(toIndentedString(imageFetchers)).append("\n");
    sb.append("    supportedImageTypes: ").append(toIndentedString(supportedImageTypes)).append("\n");
    sb.append("    defaultImageOptions: ").append(toIndentedString(defaultImageOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("MetadataFetchers");
    openapiFields.add("ImageFetchers");
    openapiFields.add("SupportedImageTypes");
    openapiFields.add("DefaultImageOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LibraryTypeOptionsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LibraryTypeOptionsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryTypeOptionsDto is not found in the empty JSON string", LibraryTypeOptionsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LibraryTypeOptionsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryTypeOptionsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if (jsonObj.get("MetadataFetchers") != null && !jsonObj.get("MetadataFetchers").isJsonNull()) {
        JsonArray jsonArraymetadataFetchers = jsonObj.getAsJsonArray("MetadataFetchers");
        if (jsonArraymetadataFetchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MetadataFetchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MetadataFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataFetchers").toString()));
          }

          // validate the optional field `MetadataFetchers` (array)
          for (int i = 0; i < jsonArraymetadataFetchers.size(); i++) {
            LibraryOptionInfoDto.validateJsonElement(jsonArraymetadataFetchers.get(i));
          };
        }
      }
      if (jsonObj.get("ImageFetchers") != null && !jsonObj.get("ImageFetchers").isJsonNull()) {
        JsonArray jsonArrayimageFetchers = jsonObj.getAsJsonArray("ImageFetchers");
        if (jsonArrayimageFetchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ImageFetchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ImageFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("ImageFetchers").toString()));
          }

          // validate the optional field `ImageFetchers` (array)
          for (int i = 0; i < jsonArrayimageFetchers.size(); i++) {
            LibraryOptionInfoDto.validateJsonElement(jsonArrayimageFetchers.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SupportedImageTypes") != null && !jsonObj.get("SupportedImageTypes").isJsonNull() && !jsonObj.get("SupportedImageTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedImageTypes` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedImageTypes").toString()));
      }
      if (jsonObj.get("DefaultImageOptions") != null && !jsonObj.get("DefaultImageOptions").isJsonNull()) {
        JsonArray jsonArraydefaultImageOptions = jsonObj.getAsJsonArray("DefaultImageOptions");
        if (jsonArraydefaultImageOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DefaultImageOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DefaultImageOptions` to be an array in the JSON string but got `%s`", jsonObj.get("DefaultImageOptions").toString()));
          }

          // validate the optional field `DefaultImageOptions` (array)
          for (int i = 0; i < jsonArraydefaultImageOptions.size(); i++) {
            ImageOption.validateJsonElement(jsonArraydefaultImageOptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryTypeOptionsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryTypeOptionsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryTypeOptionsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryTypeOptionsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryTypeOptionsDto>() {
           @Override
           public void write(JsonWriter out, LibraryTypeOptionsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryTypeOptionsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LibraryTypeOptionsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LibraryTypeOptionsDto
   * @throws IOException if the JSON string is invalid with respect to LibraryTypeOptionsDto
   */
  public static LibraryTypeOptionsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryTypeOptionsDto.class);
  }

  /**
   * Convert an instance of LibraryTypeOptionsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

