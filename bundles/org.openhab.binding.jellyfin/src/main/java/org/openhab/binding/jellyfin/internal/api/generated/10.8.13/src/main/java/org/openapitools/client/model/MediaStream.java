/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaStreamType;
import org.openapitools.client.model.SubtitleDeliveryMethod;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class MediaStream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class MediaStream {
  public static final String SERIALIZED_NAME_CODEC = "Codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  @javax.annotation.Nullable
  private String codec;

  public static final String SERIALIZED_NAME_CODEC_TAG = "CodecTag";
  @SerializedName(SERIALIZED_NAME_CODEC_TAG)
  @javax.annotation.Nullable
  private String codecTag;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_COLOR_RANGE = "ColorRange";
  @SerializedName(SERIALIZED_NAME_COLOR_RANGE)
  @javax.annotation.Nullable
  private String colorRange;

  public static final String SERIALIZED_NAME_COLOR_SPACE = "ColorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  @javax.annotation.Nullable
  private String colorSpace;

  public static final String SERIALIZED_NAME_COLOR_TRANSFER = "ColorTransfer";
  @SerializedName(SERIALIZED_NAME_COLOR_TRANSFER)
  @javax.annotation.Nullable
  private String colorTransfer;

  public static final String SERIALIZED_NAME_COLOR_PRIMARIES = "ColorPrimaries";
  @SerializedName(SERIALIZED_NAME_COLOR_PRIMARIES)
  @javax.annotation.Nullable
  private String colorPrimaries;

  public static final String SERIALIZED_NAME_DV_VERSION_MAJOR = "DvVersionMajor";
  @SerializedName(SERIALIZED_NAME_DV_VERSION_MAJOR)
  @javax.annotation.Nullable
  private Integer dvVersionMajor;

  public static final String SERIALIZED_NAME_DV_VERSION_MINOR = "DvVersionMinor";
  @SerializedName(SERIALIZED_NAME_DV_VERSION_MINOR)
  @javax.annotation.Nullable
  private Integer dvVersionMinor;

  public static final String SERIALIZED_NAME_DV_PROFILE = "DvProfile";
  @SerializedName(SERIALIZED_NAME_DV_PROFILE)
  @javax.annotation.Nullable
  private Integer dvProfile;

  public static final String SERIALIZED_NAME_DV_LEVEL = "DvLevel";
  @SerializedName(SERIALIZED_NAME_DV_LEVEL)
  @javax.annotation.Nullable
  private Integer dvLevel;

  public static final String SERIALIZED_NAME_RPU_PRESENT_FLAG = "RpuPresentFlag";
  @SerializedName(SERIALIZED_NAME_RPU_PRESENT_FLAG)
  @javax.annotation.Nullable
  private Integer rpuPresentFlag;

  public static final String SERIALIZED_NAME_EL_PRESENT_FLAG = "ElPresentFlag";
  @SerializedName(SERIALIZED_NAME_EL_PRESENT_FLAG)
  @javax.annotation.Nullable
  private Integer elPresentFlag;

  public static final String SERIALIZED_NAME_BL_PRESENT_FLAG = "BlPresentFlag";
  @SerializedName(SERIALIZED_NAME_BL_PRESENT_FLAG)
  @javax.annotation.Nullable
  private Integer blPresentFlag;

  public static final String SERIALIZED_NAME_DV_BL_SIGNAL_COMPATIBILITY_ID = "DvBlSignalCompatibilityId";
  @SerializedName(SERIALIZED_NAME_DV_BL_SIGNAL_COMPATIBILITY_ID)
  @javax.annotation.Nullable
  private Integer dvBlSignalCompatibilityId;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_TIME_BASE = "TimeBase";
  @SerializedName(SERIALIZED_NAME_TIME_BASE)
  @javax.annotation.Nullable
  private String timeBase;

  public static final String SERIALIZED_NAME_CODEC_TIME_BASE = "CodecTimeBase";
  @SerializedName(SERIALIZED_NAME_CODEC_TIME_BASE)
  @javax.annotation.Nullable
  private String codecTimeBase;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_VIDEO_RANGE = "VideoRange";
  @SerializedName(SERIALIZED_NAME_VIDEO_RANGE)
  @javax.annotation.Nullable
  private String videoRange;

  public static final String SERIALIZED_NAME_VIDEO_RANGE_TYPE = "VideoRangeType";
  @SerializedName(SERIALIZED_NAME_VIDEO_RANGE_TYPE)
  @javax.annotation.Nullable
  private String videoRangeType;

  public static final String SERIALIZED_NAME_VIDEO_DO_VI_TITLE = "VideoDoViTitle";
  @SerializedName(SERIALIZED_NAME_VIDEO_DO_VI_TITLE)
  @javax.annotation.Nullable
  private String videoDoViTitle;

  public static final String SERIALIZED_NAME_LOCALIZED_UNDEFINED = "LocalizedUndefined";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_UNDEFINED)
  @javax.annotation.Nullable
  private String localizedUndefined;

  public static final String SERIALIZED_NAME_LOCALIZED_DEFAULT = "LocalizedDefault";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_DEFAULT)
  @javax.annotation.Nullable
  private String localizedDefault;

  public static final String SERIALIZED_NAME_LOCALIZED_FORCED = "LocalizedForced";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_FORCED)
  @javax.annotation.Nullable
  private String localizedForced;

  public static final String SERIALIZED_NAME_LOCALIZED_EXTERNAL = "LocalizedExternal";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_EXTERNAL)
  @javax.annotation.Nullable
  private String localizedExternal;

  public static final String SERIALIZED_NAME_DISPLAY_TITLE = "DisplayTitle";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TITLE)
  @javax.annotation.Nullable
  private String displayTitle;

  public static final String SERIALIZED_NAME_NAL_LENGTH_SIZE = "NalLengthSize";
  @SerializedName(SERIALIZED_NAME_NAL_LENGTH_SIZE)
  @javax.annotation.Nullable
  private String nalLengthSize;

  public static final String SERIALIZED_NAME_IS_INTERLACED = "IsInterlaced";
  @SerializedName(SERIALIZED_NAME_IS_INTERLACED)
  @javax.annotation.Nullable
  private Boolean isInterlaced;

  public static final String SERIALIZED_NAME_IS_A_V_C = "IsAVC";
  @SerializedName(SERIALIZED_NAME_IS_A_V_C)
  @javax.annotation.Nullable
  private Boolean isAVC;

  public static final String SERIALIZED_NAME_CHANNEL_LAYOUT = "ChannelLayout";
  @SerializedName(SERIALIZED_NAME_CHANNEL_LAYOUT)
  @javax.annotation.Nullable
  private String channelLayout;

  public static final String SERIALIZED_NAME_BIT_RATE = "BitRate";
  @SerializedName(SERIALIZED_NAME_BIT_RATE)
  @javax.annotation.Nullable
  private Integer bitRate;

  public static final String SERIALIZED_NAME_BIT_DEPTH = "BitDepth";
  @SerializedName(SERIALIZED_NAME_BIT_DEPTH)
  @javax.annotation.Nullable
  private Integer bitDepth;

  public static final String SERIALIZED_NAME_REF_FRAMES = "RefFrames";
  @SerializedName(SERIALIZED_NAME_REF_FRAMES)
  @javax.annotation.Nullable
  private Integer refFrames;

  public static final String SERIALIZED_NAME_PACKET_LENGTH = "PacketLength";
  @SerializedName(SERIALIZED_NAME_PACKET_LENGTH)
  @javax.annotation.Nullable
  private Integer packetLength;

  public static final String SERIALIZED_NAME_CHANNELS = "Channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  @javax.annotation.Nullable
  private Integer channels;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "SampleRate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  @javax.annotation.Nullable
  private Integer sampleRate;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "IsDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  @javax.annotation.Nullable
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_IS_FORCED = "IsForced";
  @SerializedName(SERIALIZED_NAME_IS_FORCED)
  @javax.annotation.Nullable
  private Boolean isForced;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  @javax.annotation.Nullable
  private Integer height;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  @javax.annotation.Nullable
  private Integer width;

  public static final String SERIALIZED_NAME_AVERAGE_FRAME_RATE = "AverageFrameRate";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FRAME_RATE)
  @javax.annotation.Nullable
  private Float averageFrameRate;

  public static final String SERIALIZED_NAME_REAL_FRAME_RATE = "RealFrameRate";
  @SerializedName(SERIALIZED_NAME_REAL_FRAME_RATE)
  @javax.annotation.Nullable
  private Float realFrameRate;

  public static final String SERIALIZED_NAME_PROFILE = "Profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  @javax.annotation.Nullable
  private String profile;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private MediaStreamType type;

  public static final String SERIALIZED_NAME_ASPECT_RATIO = "AspectRatio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  @javax.annotation.Nullable
  private String aspectRatio;

  public static final String SERIALIZED_NAME_INDEX = "Index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nullable
  private Integer index;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  @javax.annotation.Nullable
  private Integer score;

  public static final String SERIALIZED_NAME_IS_EXTERNAL = "IsExternal";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL)
  @javax.annotation.Nullable
  private Boolean isExternal;

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "DeliveryMethod";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  @javax.annotation.Nullable
  private SubtitleDeliveryMethod deliveryMethod;

  public static final String SERIALIZED_NAME_DELIVERY_URL = "DeliveryUrl";
  @SerializedName(SERIALIZED_NAME_DELIVERY_URL)
  @javax.annotation.Nullable
  private String deliveryUrl;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_URL = "IsExternalUrl";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_URL)
  @javax.annotation.Nullable
  private Boolean isExternalUrl;

  public static final String SERIALIZED_NAME_IS_TEXT_SUBTITLE_STREAM = "IsTextSubtitleStream";
  @SerializedName(SERIALIZED_NAME_IS_TEXT_SUBTITLE_STREAM)
  @javax.annotation.Nullable
  private Boolean isTextSubtitleStream;

  public static final String SERIALIZED_NAME_SUPPORTS_EXTERNAL_STREAM = "SupportsExternalStream";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_EXTERNAL_STREAM)
  @javax.annotation.Nullable
  private Boolean supportsExternalStream;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_PIXEL_FORMAT = "PixelFormat";
  @SerializedName(SERIALIZED_NAME_PIXEL_FORMAT)
  @javax.annotation.Nullable
  private String pixelFormat;

  public static final String SERIALIZED_NAME_LEVEL = "Level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  @javax.annotation.Nullable
  private Double level;

  public static final String SERIALIZED_NAME_IS_ANAMORPHIC = "IsAnamorphic";
  @SerializedName(SERIALIZED_NAME_IS_ANAMORPHIC)
  @javax.annotation.Nullable
  private Boolean isAnamorphic;

  public MediaStream() {
  }

  public MediaStream(
     String videoRange, 
     String videoRangeType, 
     String videoDoViTitle, 
     String displayTitle, 
     Boolean isTextSubtitleStream
  ) {
    this();
    this.videoRange = videoRange;
    this.videoRangeType = videoRangeType;
    this.videoDoViTitle = videoDoViTitle;
    this.displayTitle = displayTitle;
    this.isTextSubtitleStream = isTextSubtitleStream;
  }

  public MediaStream codec(@javax.annotation.Nullable String codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Gets or sets the codec.
   * @return codec
   */
  @javax.annotation.Nullable
  public String getCodec() {
    return codec;
  }

  public void setCodec(@javax.annotation.Nullable String codec) {
    this.codec = codec;
  }


  public MediaStream codecTag(@javax.annotation.Nullable String codecTag) {
    this.codecTag = codecTag;
    return this;
  }

  /**
   * Gets or sets the codec tag.
   * @return codecTag
   */
  @javax.annotation.Nullable
  public String getCodecTag() {
    return codecTag;
  }

  public void setCodecTag(@javax.annotation.Nullable String codecTag) {
    this.codecTag = codecTag;
  }


  public MediaStream language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Gets or sets the language.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public MediaStream colorRange(@javax.annotation.Nullable String colorRange) {
    this.colorRange = colorRange;
    return this;
  }

  /**
   * Gets or sets the color range.
   * @return colorRange
   */
  @javax.annotation.Nullable
  public String getColorRange() {
    return colorRange;
  }

  public void setColorRange(@javax.annotation.Nullable String colorRange) {
    this.colorRange = colorRange;
  }


  public MediaStream colorSpace(@javax.annotation.Nullable String colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * Gets or sets the color space.
   * @return colorSpace
   */
  @javax.annotation.Nullable
  public String getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(@javax.annotation.Nullable String colorSpace) {
    this.colorSpace = colorSpace;
  }


  public MediaStream colorTransfer(@javax.annotation.Nullable String colorTransfer) {
    this.colorTransfer = colorTransfer;
    return this;
  }

  /**
   * Gets or sets the color transfer.
   * @return colorTransfer
   */
  @javax.annotation.Nullable
  public String getColorTransfer() {
    return colorTransfer;
  }

  public void setColorTransfer(@javax.annotation.Nullable String colorTransfer) {
    this.colorTransfer = colorTransfer;
  }


  public MediaStream colorPrimaries(@javax.annotation.Nullable String colorPrimaries) {
    this.colorPrimaries = colorPrimaries;
    return this;
  }

  /**
   * Gets or sets the color primaries.
   * @return colorPrimaries
   */
  @javax.annotation.Nullable
  public String getColorPrimaries() {
    return colorPrimaries;
  }

  public void setColorPrimaries(@javax.annotation.Nullable String colorPrimaries) {
    this.colorPrimaries = colorPrimaries;
  }


  public MediaStream dvVersionMajor(@javax.annotation.Nullable Integer dvVersionMajor) {
    this.dvVersionMajor = dvVersionMajor;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision version major.
   * @return dvVersionMajor
   */
  @javax.annotation.Nullable
  public Integer getDvVersionMajor() {
    return dvVersionMajor;
  }

  public void setDvVersionMajor(@javax.annotation.Nullable Integer dvVersionMajor) {
    this.dvVersionMajor = dvVersionMajor;
  }


  public MediaStream dvVersionMinor(@javax.annotation.Nullable Integer dvVersionMinor) {
    this.dvVersionMinor = dvVersionMinor;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision version minor.
   * @return dvVersionMinor
   */
  @javax.annotation.Nullable
  public Integer getDvVersionMinor() {
    return dvVersionMinor;
  }

  public void setDvVersionMinor(@javax.annotation.Nullable Integer dvVersionMinor) {
    this.dvVersionMinor = dvVersionMinor;
  }


  public MediaStream dvProfile(@javax.annotation.Nullable Integer dvProfile) {
    this.dvProfile = dvProfile;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision profile.
   * @return dvProfile
   */
  @javax.annotation.Nullable
  public Integer getDvProfile() {
    return dvProfile;
  }

  public void setDvProfile(@javax.annotation.Nullable Integer dvProfile) {
    this.dvProfile = dvProfile;
  }


  public MediaStream dvLevel(@javax.annotation.Nullable Integer dvLevel) {
    this.dvLevel = dvLevel;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision level.
   * @return dvLevel
   */
  @javax.annotation.Nullable
  public Integer getDvLevel() {
    return dvLevel;
  }

  public void setDvLevel(@javax.annotation.Nullable Integer dvLevel) {
    this.dvLevel = dvLevel;
  }


  public MediaStream rpuPresentFlag(@javax.annotation.Nullable Integer rpuPresentFlag) {
    this.rpuPresentFlag = rpuPresentFlag;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision rpu present flag.
   * @return rpuPresentFlag
   */
  @javax.annotation.Nullable
  public Integer getRpuPresentFlag() {
    return rpuPresentFlag;
  }

  public void setRpuPresentFlag(@javax.annotation.Nullable Integer rpuPresentFlag) {
    this.rpuPresentFlag = rpuPresentFlag;
  }


  public MediaStream elPresentFlag(@javax.annotation.Nullable Integer elPresentFlag) {
    this.elPresentFlag = elPresentFlag;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision el present flag.
   * @return elPresentFlag
   */
  @javax.annotation.Nullable
  public Integer getElPresentFlag() {
    return elPresentFlag;
  }

  public void setElPresentFlag(@javax.annotation.Nullable Integer elPresentFlag) {
    this.elPresentFlag = elPresentFlag;
  }


  public MediaStream blPresentFlag(@javax.annotation.Nullable Integer blPresentFlag) {
    this.blPresentFlag = blPresentFlag;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision bl present flag.
   * @return blPresentFlag
   */
  @javax.annotation.Nullable
  public Integer getBlPresentFlag() {
    return blPresentFlag;
  }

  public void setBlPresentFlag(@javax.annotation.Nullable Integer blPresentFlag) {
    this.blPresentFlag = blPresentFlag;
  }


  public MediaStream dvBlSignalCompatibilityId(@javax.annotation.Nullable Integer dvBlSignalCompatibilityId) {
    this.dvBlSignalCompatibilityId = dvBlSignalCompatibilityId;
    return this;
  }

  /**
   * Gets or sets the Dolby Vision bl signal compatibility id.
   * @return dvBlSignalCompatibilityId
   */
  @javax.annotation.Nullable
  public Integer getDvBlSignalCompatibilityId() {
    return dvBlSignalCompatibilityId;
  }

  public void setDvBlSignalCompatibilityId(@javax.annotation.Nullable Integer dvBlSignalCompatibilityId) {
    this.dvBlSignalCompatibilityId = dvBlSignalCompatibilityId;
  }


  public MediaStream comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Gets or sets the comment.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public MediaStream timeBase(@javax.annotation.Nullable String timeBase) {
    this.timeBase = timeBase;
    return this;
  }

  /**
   * Gets or sets the time base.
   * @return timeBase
   */
  @javax.annotation.Nullable
  public String getTimeBase() {
    return timeBase;
  }

  public void setTimeBase(@javax.annotation.Nullable String timeBase) {
    this.timeBase = timeBase;
  }


  public MediaStream codecTimeBase(@javax.annotation.Nullable String codecTimeBase) {
    this.codecTimeBase = codecTimeBase;
    return this;
  }

  /**
   * Gets or sets the codec time base.
   * @return codecTimeBase
   */
  @javax.annotation.Nullable
  public String getCodecTimeBase() {
    return codecTimeBase;
  }

  public void setCodecTimeBase(@javax.annotation.Nullable String codecTimeBase) {
    this.codecTimeBase = codecTimeBase;
  }


  public MediaStream title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * Gets or sets the title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  /**
   * Gets the video range.
   * @return videoRange
   */
  @javax.annotation.Nullable
  public String getVideoRange() {
    return videoRange;
  }



  /**
   * Gets the video range type.
   * @return videoRangeType
   */
  @javax.annotation.Nullable
  public String getVideoRangeType() {
    return videoRangeType;
  }



  /**
   * Gets the video dovi title.
   * @return videoDoViTitle
   */
  @javax.annotation.Nullable
  public String getVideoDoViTitle() {
    return videoDoViTitle;
  }



  public MediaStream localizedUndefined(@javax.annotation.Nullable String localizedUndefined) {
    this.localizedUndefined = localizedUndefined;
    return this;
  }

  /**
   * Get localizedUndefined
   * @return localizedUndefined
   */
  @javax.annotation.Nullable
  public String getLocalizedUndefined() {
    return localizedUndefined;
  }

  public void setLocalizedUndefined(@javax.annotation.Nullable String localizedUndefined) {
    this.localizedUndefined = localizedUndefined;
  }


  public MediaStream localizedDefault(@javax.annotation.Nullable String localizedDefault) {
    this.localizedDefault = localizedDefault;
    return this;
  }

  /**
   * Get localizedDefault
   * @return localizedDefault
   */
  @javax.annotation.Nullable
  public String getLocalizedDefault() {
    return localizedDefault;
  }

  public void setLocalizedDefault(@javax.annotation.Nullable String localizedDefault) {
    this.localizedDefault = localizedDefault;
  }


  public MediaStream localizedForced(@javax.annotation.Nullable String localizedForced) {
    this.localizedForced = localizedForced;
    return this;
  }

  /**
   * Get localizedForced
   * @return localizedForced
   */
  @javax.annotation.Nullable
  public String getLocalizedForced() {
    return localizedForced;
  }

  public void setLocalizedForced(@javax.annotation.Nullable String localizedForced) {
    this.localizedForced = localizedForced;
  }


  public MediaStream localizedExternal(@javax.annotation.Nullable String localizedExternal) {
    this.localizedExternal = localizedExternal;
    return this;
  }

  /**
   * Get localizedExternal
   * @return localizedExternal
   */
  @javax.annotation.Nullable
  public String getLocalizedExternal() {
    return localizedExternal;
  }

  public void setLocalizedExternal(@javax.annotation.Nullable String localizedExternal) {
    this.localizedExternal = localizedExternal;
  }


  /**
   * Get displayTitle
   * @return displayTitle
   */
  @javax.annotation.Nullable
  public String getDisplayTitle() {
    return displayTitle;
  }



  public MediaStream nalLengthSize(@javax.annotation.Nullable String nalLengthSize) {
    this.nalLengthSize = nalLengthSize;
    return this;
  }

  /**
   * Get nalLengthSize
   * @return nalLengthSize
   */
  @javax.annotation.Nullable
  public String getNalLengthSize() {
    return nalLengthSize;
  }

  public void setNalLengthSize(@javax.annotation.Nullable String nalLengthSize) {
    this.nalLengthSize = nalLengthSize;
  }


  public MediaStream isInterlaced(@javax.annotation.Nullable Boolean isInterlaced) {
    this.isInterlaced = isInterlaced;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is interlaced.
   * @return isInterlaced
   */
  @javax.annotation.Nullable
  public Boolean getIsInterlaced() {
    return isInterlaced;
  }

  public void setIsInterlaced(@javax.annotation.Nullable Boolean isInterlaced) {
    this.isInterlaced = isInterlaced;
  }


  public MediaStream isAVC(@javax.annotation.Nullable Boolean isAVC) {
    this.isAVC = isAVC;
    return this;
  }

  /**
   * Get isAVC
   * @return isAVC
   */
  @javax.annotation.Nullable
  public Boolean getIsAVC() {
    return isAVC;
  }

  public void setIsAVC(@javax.annotation.Nullable Boolean isAVC) {
    this.isAVC = isAVC;
  }


  public MediaStream channelLayout(@javax.annotation.Nullable String channelLayout) {
    this.channelLayout = channelLayout;
    return this;
  }

  /**
   * Gets or sets the channel layout.
   * @return channelLayout
   */
  @javax.annotation.Nullable
  public String getChannelLayout() {
    return channelLayout;
  }

  public void setChannelLayout(@javax.annotation.Nullable String channelLayout) {
    this.channelLayout = channelLayout;
  }


  public MediaStream bitRate(@javax.annotation.Nullable Integer bitRate) {
    this.bitRate = bitRate;
    return this;
  }

  /**
   * Gets or sets the bit rate.
   * @return bitRate
   */
  @javax.annotation.Nullable
  public Integer getBitRate() {
    return bitRate;
  }

  public void setBitRate(@javax.annotation.Nullable Integer bitRate) {
    this.bitRate = bitRate;
  }


  public MediaStream bitDepth(@javax.annotation.Nullable Integer bitDepth) {
    this.bitDepth = bitDepth;
    return this;
  }

  /**
   * Gets or sets the bit depth.
   * @return bitDepth
   */
  @javax.annotation.Nullable
  public Integer getBitDepth() {
    return bitDepth;
  }

  public void setBitDepth(@javax.annotation.Nullable Integer bitDepth) {
    this.bitDepth = bitDepth;
  }


  public MediaStream refFrames(@javax.annotation.Nullable Integer refFrames) {
    this.refFrames = refFrames;
    return this;
  }

  /**
   * Gets or sets the reference frames.
   * @return refFrames
   */
  @javax.annotation.Nullable
  public Integer getRefFrames() {
    return refFrames;
  }

  public void setRefFrames(@javax.annotation.Nullable Integer refFrames) {
    this.refFrames = refFrames;
  }


  public MediaStream packetLength(@javax.annotation.Nullable Integer packetLength) {
    this.packetLength = packetLength;
    return this;
  }

  /**
   * Gets or sets the length of the packet.
   * @return packetLength
   */
  @javax.annotation.Nullable
  public Integer getPacketLength() {
    return packetLength;
  }

  public void setPacketLength(@javax.annotation.Nullable Integer packetLength) {
    this.packetLength = packetLength;
  }


  public MediaStream channels(@javax.annotation.Nullable Integer channels) {
    this.channels = channels;
    return this;
  }

  /**
   * Gets or sets the channels.
   * @return channels
   */
  @javax.annotation.Nullable
  public Integer getChannels() {
    return channels;
  }

  public void setChannels(@javax.annotation.Nullable Integer channels) {
    this.channels = channels;
  }


  public MediaStream sampleRate(@javax.annotation.Nullable Integer sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Gets or sets the sample rate.
   * @return sampleRate
   */
  @javax.annotation.Nullable
  public Integer getSampleRate() {
    return sampleRate;
  }

  public void setSampleRate(@javax.annotation.Nullable Integer sampleRate) {
    this.sampleRate = sampleRate;
  }


  public MediaStream isDefault(@javax.annotation.Nullable Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is default.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(@javax.annotation.Nullable Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public MediaStream isForced(@javax.annotation.Nullable Boolean isForced) {
    this.isForced = isForced;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is forced.
   * @return isForced
   */
  @javax.annotation.Nullable
  public Boolean getIsForced() {
    return isForced;
  }

  public void setIsForced(@javax.annotation.Nullable Boolean isForced) {
    this.isForced = isForced;
  }


  public MediaStream height(@javax.annotation.Nullable Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Gets or sets the height.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(@javax.annotation.Nullable Integer height) {
    this.height = height;
  }


  public MediaStream width(@javax.annotation.Nullable Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Gets or sets the width.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(@javax.annotation.Nullable Integer width) {
    this.width = width;
  }


  public MediaStream averageFrameRate(@javax.annotation.Nullable Float averageFrameRate) {
    this.averageFrameRate = averageFrameRate;
    return this;
  }

  /**
   * Gets or sets the average frame rate.
   * @return averageFrameRate
   */
  @javax.annotation.Nullable
  public Float getAverageFrameRate() {
    return averageFrameRate;
  }

  public void setAverageFrameRate(@javax.annotation.Nullable Float averageFrameRate) {
    this.averageFrameRate = averageFrameRate;
  }


  public MediaStream realFrameRate(@javax.annotation.Nullable Float realFrameRate) {
    this.realFrameRate = realFrameRate;
    return this;
  }

  /**
   * Gets or sets the real frame rate.
   * @return realFrameRate
   */
  @javax.annotation.Nullable
  public Float getRealFrameRate() {
    return realFrameRate;
  }

  public void setRealFrameRate(@javax.annotation.Nullable Float realFrameRate) {
    this.realFrameRate = realFrameRate;
  }


  public MediaStream profile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Gets or sets the profile.
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(@javax.annotation.Nullable String profile) {
    this.profile = profile;
  }


  public MediaStream type(@javax.annotation.Nullable MediaStreamType type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the type.
   * @return type
   */
  @javax.annotation.Nullable
  public MediaStreamType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable MediaStreamType type) {
    this.type = type;
  }


  public MediaStream aspectRatio(@javax.annotation.Nullable String aspectRatio) {
    this.aspectRatio = aspectRatio;
    return this;
  }

  /**
   * Gets or sets the aspect ratio.
   * @return aspectRatio
   */
  @javax.annotation.Nullable
  public String getAspectRatio() {
    return aspectRatio;
  }

  public void setAspectRatio(@javax.annotation.Nullable String aspectRatio) {
    this.aspectRatio = aspectRatio;
  }


  public MediaStream index(@javax.annotation.Nullable Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Gets or sets the index.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nullable Integer index) {
    this.index = index;
  }


  public MediaStream score(@javax.annotation.Nullable Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Gets or sets the score.
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(@javax.annotation.Nullable Integer score) {
    this.score = score;
  }


  public MediaStream isExternal(@javax.annotation.Nullable Boolean isExternal) {
    this.isExternal = isExternal;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is external.
   * @return isExternal
   */
  @javax.annotation.Nullable
  public Boolean getIsExternal() {
    return isExternal;
  }

  public void setIsExternal(@javax.annotation.Nullable Boolean isExternal) {
    this.isExternal = isExternal;
  }


  public MediaStream deliveryMethod(@javax.annotation.Nullable SubtitleDeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * Gets or sets the method.
   * @return deliveryMethod
   */
  @javax.annotation.Nullable
  public SubtitleDeliveryMethod getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(@javax.annotation.Nullable SubtitleDeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public MediaStream deliveryUrl(@javax.annotation.Nullable String deliveryUrl) {
    this.deliveryUrl = deliveryUrl;
    return this;
  }

  /**
   * Gets or sets the delivery URL.
   * @return deliveryUrl
   */
  @javax.annotation.Nullable
  public String getDeliveryUrl() {
    return deliveryUrl;
  }

  public void setDeliveryUrl(@javax.annotation.Nullable String deliveryUrl) {
    this.deliveryUrl = deliveryUrl;
  }


  public MediaStream isExternalUrl(@javax.annotation.Nullable Boolean isExternalUrl) {
    this.isExternalUrl = isExternalUrl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is external URL.
   * @return isExternalUrl
   */
  @javax.annotation.Nullable
  public Boolean getIsExternalUrl() {
    return isExternalUrl;
  }

  public void setIsExternalUrl(@javax.annotation.Nullable Boolean isExternalUrl) {
    this.isExternalUrl = isExternalUrl;
  }


  /**
   * Get isTextSubtitleStream
   * @return isTextSubtitleStream
   */
  @javax.annotation.Nullable
  public Boolean getIsTextSubtitleStream() {
    return isTextSubtitleStream;
  }



  public MediaStream supportsExternalStream(@javax.annotation.Nullable Boolean supportsExternalStream) {
    this.supportsExternalStream = supportsExternalStream;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [supports external stream].
   * @return supportsExternalStream
   */
  @javax.annotation.Nullable
  public Boolean getSupportsExternalStream() {
    return supportsExternalStream;
  }

  public void setSupportsExternalStream(@javax.annotation.Nullable Boolean supportsExternalStream) {
    this.supportsExternalStream = supportsExternalStream;
  }


  public MediaStream path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * Gets or sets the filename.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public MediaStream pixelFormat(@javax.annotation.Nullable String pixelFormat) {
    this.pixelFormat = pixelFormat;
    return this;
  }

  /**
   * Gets or sets the pixel format.
   * @return pixelFormat
   */
  @javax.annotation.Nullable
  public String getPixelFormat() {
    return pixelFormat;
  }

  public void setPixelFormat(@javax.annotation.Nullable String pixelFormat) {
    this.pixelFormat = pixelFormat;
  }


  public MediaStream level(@javax.annotation.Nullable Double level) {
    this.level = level;
    return this;
  }

  /**
   * Gets or sets the level.
   * @return level
   */
  @javax.annotation.Nullable
  public Double getLevel() {
    return level;
  }

  public void setLevel(@javax.annotation.Nullable Double level) {
    this.level = level;
  }


  public MediaStream isAnamorphic(@javax.annotation.Nullable Boolean isAnamorphic) {
    this.isAnamorphic = isAnamorphic;
    return this;
  }

  /**
   * Gets or sets whether this instance is anamorphic.
   * @return isAnamorphic
   */
  @javax.annotation.Nullable
  public Boolean getIsAnamorphic() {
    return isAnamorphic;
  }

  public void setIsAnamorphic(@javax.annotation.Nullable Boolean isAnamorphic) {
    this.isAnamorphic = isAnamorphic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaStream mediaStream = (MediaStream) o;
    return Objects.equals(this.codec, mediaStream.codec) &&
        Objects.equals(this.codecTag, mediaStream.codecTag) &&
        Objects.equals(this.language, mediaStream.language) &&
        Objects.equals(this.colorRange, mediaStream.colorRange) &&
        Objects.equals(this.colorSpace, mediaStream.colorSpace) &&
        Objects.equals(this.colorTransfer, mediaStream.colorTransfer) &&
        Objects.equals(this.colorPrimaries, mediaStream.colorPrimaries) &&
        Objects.equals(this.dvVersionMajor, mediaStream.dvVersionMajor) &&
        Objects.equals(this.dvVersionMinor, mediaStream.dvVersionMinor) &&
        Objects.equals(this.dvProfile, mediaStream.dvProfile) &&
        Objects.equals(this.dvLevel, mediaStream.dvLevel) &&
        Objects.equals(this.rpuPresentFlag, mediaStream.rpuPresentFlag) &&
        Objects.equals(this.elPresentFlag, mediaStream.elPresentFlag) &&
        Objects.equals(this.blPresentFlag, mediaStream.blPresentFlag) &&
        Objects.equals(this.dvBlSignalCompatibilityId, mediaStream.dvBlSignalCompatibilityId) &&
        Objects.equals(this.comment, mediaStream.comment) &&
        Objects.equals(this.timeBase, mediaStream.timeBase) &&
        Objects.equals(this.codecTimeBase, mediaStream.codecTimeBase) &&
        Objects.equals(this.title, mediaStream.title) &&
        Objects.equals(this.videoRange, mediaStream.videoRange) &&
        Objects.equals(this.videoRangeType, mediaStream.videoRangeType) &&
        Objects.equals(this.videoDoViTitle, mediaStream.videoDoViTitle) &&
        Objects.equals(this.localizedUndefined, mediaStream.localizedUndefined) &&
        Objects.equals(this.localizedDefault, mediaStream.localizedDefault) &&
        Objects.equals(this.localizedForced, mediaStream.localizedForced) &&
        Objects.equals(this.localizedExternal, mediaStream.localizedExternal) &&
        Objects.equals(this.displayTitle, mediaStream.displayTitle) &&
        Objects.equals(this.nalLengthSize, mediaStream.nalLengthSize) &&
        Objects.equals(this.isInterlaced, mediaStream.isInterlaced) &&
        Objects.equals(this.isAVC, mediaStream.isAVC) &&
        Objects.equals(this.channelLayout, mediaStream.channelLayout) &&
        Objects.equals(this.bitRate, mediaStream.bitRate) &&
        Objects.equals(this.bitDepth, mediaStream.bitDepth) &&
        Objects.equals(this.refFrames, mediaStream.refFrames) &&
        Objects.equals(this.packetLength, mediaStream.packetLength) &&
        Objects.equals(this.channels, mediaStream.channels) &&
        Objects.equals(this.sampleRate, mediaStream.sampleRate) &&
        Objects.equals(this.isDefault, mediaStream.isDefault) &&
        Objects.equals(this.isForced, mediaStream.isForced) &&
        Objects.equals(this.height, mediaStream.height) &&
        Objects.equals(this.width, mediaStream.width) &&
        Objects.equals(this.averageFrameRate, mediaStream.averageFrameRate) &&
        Objects.equals(this.realFrameRate, mediaStream.realFrameRate) &&
        Objects.equals(this.profile, mediaStream.profile) &&
        Objects.equals(this.type, mediaStream.type) &&
        Objects.equals(this.aspectRatio, mediaStream.aspectRatio) &&
        Objects.equals(this.index, mediaStream.index) &&
        Objects.equals(this.score, mediaStream.score) &&
        Objects.equals(this.isExternal, mediaStream.isExternal) &&
        Objects.equals(this.deliveryMethod, mediaStream.deliveryMethod) &&
        Objects.equals(this.deliveryUrl, mediaStream.deliveryUrl) &&
        Objects.equals(this.isExternalUrl, mediaStream.isExternalUrl) &&
        Objects.equals(this.isTextSubtitleStream, mediaStream.isTextSubtitleStream) &&
        Objects.equals(this.supportsExternalStream, mediaStream.supportsExternalStream) &&
        Objects.equals(this.path, mediaStream.path) &&
        Objects.equals(this.pixelFormat, mediaStream.pixelFormat) &&
        Objects.equals(this.level, mediaStream.level) &&
        Objects.equals(this.isAnamorphic, mediaStream.isAnamorphic);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(codec, codecTag, language, colorRange, colorSpace, colorTransfer, colorPrimaries, dvVersionMajor, dvVersionMinor, dvProfile, dvLevel, rpuPresentFlag, elPresentFlag, blPresentFlag, dvBlSignalCompatibilityId, comment, timeBase, codecTimeBase, title, videoRange, videoRangeType, videoDoViTitle, localizedUndefined, localizedDefault, localizedForced, localizedExternal, displayTitle, nalLengthSize, isInterlaced, isAVC, channelLayout, bitRate, bitDepth, refFrames, packetLength, channels, sampleRate, isDefault, isForced, height, width, averageFrameRate, realFrameRate, profile, type, aspectRatio, index, score, isExternal, deliveryMethod, deliveryUrl, isExternalUrl, isTextSubtitleStream, supportsExternalStream, path, pixelFormat, level, isAnamorphic);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaStream {\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    codecTag: ").append(toIndentedString(codecTag)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    colorRange: ").append(toIndentedString(colorRange)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    colorTransfer: ").append(toIndentedString(colorTransfer)).append("\n");
    sb.append("    colorPrimaries: ").append(toIndentedString(colorPrimaries)).append("\n");
    sb.append("    dvVersionMajor: ").append(toIndentedString(dvVersionMajor)).append("\n");
    sb.append("    dvVersionMinor: ").append(toIndentedString(dvVersionMinor)).append("\n");
    sb.append("    dvProfile: ").append(toIndentedString(dvProfile)).append("\n");
    sb.append("    dvLevel: ").append(toIndentedString(dvLevel)).append("\n");
    sb.append("    rpuPresentFlag: ").append(toIndentedString(rpuPresentFlag)).append("\n");
    sb.append("    elPresentFlag: ").append(toIndentedString(elPresentFlag)).append("\n");
    sb.append("    blPresentFlag: ").append(toIndentedString(blPresentFlag)).append("\n");
    sb.append("    dvBlSignalCompatibilityId: ").append(toIndentedString(dvBlSignalCompatibilityId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    timeBase: ").append(toIndentedString(timeBase)).append("\n");
    sb.append("    codecTimeBase: ").append(toIndentedString(codecTimeBase)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    videoRange: ").append(toIndentedString(videoRange)).append("\n");
    sb.append("    videoRangeType: ").append(toIndentedString(videoRangeType)).append("\n");
    sb.append("    videoDoViTitle: ").append(toIndentedString(videoDoViTitle)).append("\n");
    sb.append("    localizedUndefined: ").append(toIndentedString(localizedUndefined)).append("\n");
    sb.append("    localizedDefault: ").append(toIndentedString(localizedDefault)).append("\n");
    sb.append("    localizedForced: ").append(toIndentedString(localizedForced)).append("\n");
    sb.append("    localizedExternal: ").append(toIndentedString(localizedExternal)).append("\n");
    sb.append("    displayTitle: ").append(toIndentedString(displayTitle)).append("\n");
    sb.append("    nalLengthSize: ").append(toIndentedString(nalLengthSize)).append("\n");
    sb.append("    isInterlaced: ").append(toIndentedString(isInterlaced)).append("\n");
    sb.append("    isAVC: ").append(toIndentedString(isAVC)).append("\n");
    sb.append("    channelLayout: ").append(toIndentedString(channelLayout)).append("\n");
    sb.append("    bitRate: ").append(toIndentedString(bitRate)).append("\n");
    sb.append("    bitDepth: ").append(toIndentedString(bitDepth)).append("\n");
    sb.append("    refFrames: ").append(toIndentedString(refFrames)).append("\n");
    sb.append("    packetLength: ").append(toIndentedString(packetLength)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    isForced: ").append(toIndentedString(isForced)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    averageFrameRate: ").append(toIndentedString(averageFrameRate)).append("\n");
    sb.append("    realFrameRate: ").append(toIndentedString(realFrameRate)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    deliveryUrl: ").append(toIndentedString(deliveryUrl)).append("\n");
    sb.append("    isExternalUrl: ").append(toIndentedString(isExternalUrl)).append("\n");
    sb.append("    isTextSubtitleStream: ").append(toIndentedString(isTextSubtitleStream)).append("\n");
    sb.append("    supportsExternalStream: ").append(toIndentedString(supportsExternalStream)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pixelFormat: ").append(toIndentedString(pixelFormat)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    isAnamorphic: ").append(toIndentedString(isAnamorphic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Codec");
    openapiFields.add("CodecTag");
    openapiFields.add("Language");
    openapiFields.add("ColorRange");
    openapiFields.add("ColorSpace");
    openapiFields.add("ColorTransfer");
    openapiFields.add("ColorPrimaries");
    openapiFields.add("DvVersionMajor");
    openapiFields.add("DvVersionMinor");
    openapiFields.add("DvProfile");
    openapiFields.add("DvLevel");
    openapiFields.add("RpuPresentFlag");
    openapiFields.add("ElPresentFlag");
    openapiFields.add("BlPresentFlag");
    openapiFields.add("DvBlSignalCompatibilityId");
    openapiFields.add("Comment");
    openapiFields.add("TimeBase");
    openapiFields.add("CodecTimeBase");
    openapiFields.add("Title");
    openapiFields.add("VideoRange");
    openapiFields.add("VideoRangeType");
    openapiFields.add("VideoDoViTitle");
    openapiFields.add("LocalizedUndefined");
    openapiFields.add("LocalizedDefault");
    openapiFields.add("LocalizedForced");
    openapiFields.add("LocalizedExternal");
    openapiFields.add("DisplayTitle");
    openapiFields.add("NalLengthSize");
    openapiFields.add("IsInterlaced");
    openapiFields.add("IsAVC");
    openapiFields.add("ChannelLayout");
    openapiFields.add("BitRate");
    openapiFields.add("BitDepth");
    openapiFields.add("RefFrames");
    openapiFields.add("PacketLength");
    openapiFields.add("Channels");
    openapiFields.add("SampleRate");
    openapiFields.add("IsDefault");
    openapiFields.add("IsForced");
    openapiFields.add("Height");
    openapiFields.add("Width");
    openapiFields.add("AverageFrameRate");
    openapiFields.add("RealFrameRate");
    openapiFields.add("Profile");
    openapiFields.add("Type");
    openapiFields.add("AspectRatio");
    openapiFields.add("Index");
    openapiFields.add("Score");
    openapiFields.add("IsExternal");
    openapiFields.add("DeliveryMethod");
    openapiFields.add("DeliveryUrl");
    openapiFields.add("IsExternalUrl");
    openapiFields.add("IsTextSubtitleStream");
    openapiFields.add("SupportsExternalStream");
    openapiFields.add("Path");
    openapiFields.add("PixelFormat");
    openapiFields.add("Level");
    openapiFields.add("IsAnamorphic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaStream is not found in the empty JSON string", MediaStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Codec") != null && !jsonObj.get("Codec").isJsonNull()) && !jsonObj.get("Codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Codec").toString()));
      }
      if ((jsonObj.get("CodecTag") != null && !jsonObj.get("CodecTag").isJsonNull()) && !jsonObj.get("CodecTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodecTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodecTag").toString()));
      }
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      if ((jsonObj.get("ColorRange") != null && !jsonObj.get("ColorRange").isJsonNull()) && !jsonObj.get("ColorRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorRange").toString()));
      }
      if ((jsonObj.get("ColorSpace") != null && !jsonObj.get("ColorSpace").isJsonNull()) && !jsonObj.get("ColorSpace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorSpace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorSpace").toString()));
      }
      if ((jsonObj.get("ColorTransfer") != null && !jsonObj.get("ColorTransfer").isJsonNull()) && !jsonObj.get("ColorTransfer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorTransfer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorTransfer").toString()));
      }
      if ((jsonObj.get("ColorPrimaries") != null && !jsonObj.get("ColorPrimaries").isJsonNull()) && !jsonObj.get("ColorPrimaries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorPrimaries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorPrimaries").toString()));
      }
      if ((jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) && !jsonObj.get("Comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comment").toString()));
      }
      if ((jsonObj.get("TimeBase") != null && !jsonObj.get("TimeBase").isJsonNull()) && !jsonObj.get("TimeBase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeBase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeBase").toString()));
      }
      if ((jsonObj.get("CodecTimeBase") != null && !jsonObj.get("CodecTimeBase").isJsonNull()) && !jsonObj.get("CodecTimeBase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodecTimeBase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodecTimeBase").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("VideoRange") != null && !jsonObj.get("VideoRange").isJsonNull()) && !jsonObj.get("VideoRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoRange").toString()));
      }
      if ((jsonObj.get("VideoRangeType") != null && !jsonObj.get("VideoRangeType").isJsonNull()) && !jsonObj.get("VideoRangeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoRangeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoRangeType").toString()));
      }
      if ((jsonObj.get("VideoDoViTitle") != null && !jsonObj.get("VideoDoViTitle").isJsonNull()) && !jsonObj.get("VideoDoViTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoDoViTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoDoViTitle").toString()));
      }
      if ((jsonObj.get("LocalizedUndefined") != null && !jsonObj.get("LocalizedUndefined").isJsonNull()) && !jsonObj.get("LocalizedUndefined").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedUndefined` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedUndefined").toString()));
      }
      if ((jsonObj.get("LocalizedDefault") != null && !jsonObj.get("LocalizedDefault").isJsonNull()) && !jsonObj.get("LocalizedDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedDefault").toString()));
      }
      if ((jsonObj.get("LocalizedForced") != null && !jsonObj.get("LocalizedForced").isJsonNull()) && !jsonObj.get("LocalizedForced").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedForced` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedForced").toString()));
      }
      if ((jsonObj.get("LocalizedExternal") != null && !jsonObj.get("LocalizedExternal").isJsonNull()) && !jsonObj.get("LocalizedExternal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedExternal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedExternal").toString()));
      }
      if ((jsonObj.get("DisplayTitle") != null && !jsonObj.get("DisplayTitle").isJsonNull()) && !jsonObj.get("DisplayTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayTitle").toString()));
      }
      if ((jsonObj.get("NalLengthSize") != null && !jsonObj.get("NalLengthSize").isJsonNull()) && !jsonObj.get("NalLengthSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NalLengthSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NalLengthSize").toString()));
      }
      if ((jsonObj.get("ChannelLayout") != null && !jsonObj.get("ChannelLayout").isJsonNull()) && !jsonObj.get("ChannelLayout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelLayout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelLayout").toString()));
      }
      if ((jsonObj.get("Profile") != null && !jsonObj.get("Profile").isJsonNull()) && !jsonObj.get("Profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Profile").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        MediaStreamType.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("AspectRatio") != null && !jsonObj.get("AspectRatio").isJsonNull()) && !jsonObj.get("AspectRatio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AspectRatio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AspectRatio").toString()));
      }
      // validate the optional field `DeliveryMethod`
      if (jsonObj.get("DeliveryMethod") != null && !jsonObj.get("DeliveryMethod").isJsonNull()) {
        SubtitleDeliveryMethod.validateJsonElement(jsonObj.get("DeliveryMethod"));
      }
      if ((jsonObj.get("DeliveryUrl") != null && !jsonObj.get("DeliveryUrl").isJsonNull()) && !jsonObj.get("DeliveryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryUrl").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("PixelFormat") != null && !jsonObj.get("PixelFormat").isJsonNull()) && !jsonObj.get("PixelFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PixelFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PixelFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaStream.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaStream>() {
           @Override
           public void write(JsonWriter out, MediaStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaStream
   * @throws IOException if the JSON string is invalid with respect to MediaStream
   */
  public static MediaStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaStream.class);
  }

  /**
   * Convert an instance of MediaStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

