/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.ImageType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * ImageOption
 */
@JsonPropertyOrder({
  ImageOption.JSON_PROPERTY_TYPE,
  ImageOption.JSON_PROPERTY_LIMIT,
  ImageOption.JSON_PROPERTY_MIN_WIDTH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ImageOption {
  public static final String JSON_PROPERTY_TYPE = "Type";
  @javax.annotation.Nullable
  private ImageType type;

  public static final String JSON_PROPERTY_LIMIT = "Limit";
  @javax.annotation.Nullable
  private Integer limit;

  public static final String JSON_PROPERTY_MIN_WIDTH = "MinWidth";
  @javax.annotation.Nullable
  private Integer minWidth;

  public ImageOption() { 
  }

  public ImageOption type(@javax.annotation.Nullable ImageType type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the type.
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ImageType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable ImageType type) {
    this.type = type;
  }


  public ImageOption limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Gets or sets the limit.
   * @return limit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public ImageOption minWidth(@javax.annotation.Nullable Integer minWidth) {
    this.minWidth = minWidth;
    return this;
  }

  /**
   * Gets or sets the minimum width.
   * @return minWidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMinWidth() {
    return minWidth;
  }


  @JsonProperty(JSON_PROPERTY_MIN_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinWidth(@javax.annotation.Nullable Integer minWidth) {
    this.minWidth = minWidth;
  }


  /**
   * Return true if this ImageOption object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageOption imageOption = (ImageOption) o;
    return Objects.equals(this.type, imageOption.type) &&
        Objects.equals(this.limit, imageOption.limit) &&
        Objects.equals(this.minWidth, imageOption.minWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, limit, minWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageOption {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    minWidth: ").append(toIndentedString(minWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `Limit` to the URL query string
    if (getLimit() != null) {
      joiner.add(String.format("%sLimit%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLimit()))));
    }

    // add `MinWidth` to the URL query string
    if (getMinWidth() != null) {
      joiner.add(String.format("%sMinWidth%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMinWidth()))));
    }

    return joiner.toString();
  }
}

