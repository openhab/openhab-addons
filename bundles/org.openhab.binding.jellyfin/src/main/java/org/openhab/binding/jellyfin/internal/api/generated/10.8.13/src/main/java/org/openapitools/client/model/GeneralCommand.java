/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.GeneralCommandType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * GeneralCommand
 */
@JsonPropertyOrder({
  GeneralCommand.JSON_PROPERTY_NAME,
  GeneralCommand.JSON_PROPERTY_CONTROLLING_USER_ID,
  GeneralCommand.JSON_PROPERTY_ARGUMENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:40.061690683Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class GeneralCommand {
  public static final String JSON_PROPERTY_NAME = "Name";
  @javax.annotation.Nullable
  private GeneralCommandType name;

  public static final String JSON_PROPERTY_CONTROLLING_USER_ID = "ControllingUserId";
  @javax.annotation.Nullable
  private UUID controllingUserId;

  public static final String JSON_PROPERTY_ARGUMENTS = "Arguments";
  @javax.annotation.Nullable
  private Map<String, String> arguments = new HashMap<>();

  public GeneralCommand() { 
  }

  public GeneralCommand name(@javax.annotation.Nullable GeneralCommandType name) {
    this.name = name;
    return this;
  }

  /**
   * This exists simply to identify a set of known commands.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public GeneralCommandType getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable GeneralCommandType name) {
    this.name = name;
  }


  public GeneralCommand controllingUserId(@javax.annotation.Nullable UUID controllingUserId) {
    this.controllingUserId = controllingUserId;
    return this;
  }

  /**
   * Get controllingUserId
   * @return controllingUserId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROLLING_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getControllingUserId() {
    return controllingUserId;
  }


  @JsonProperty(JSON_PROPERTY_CONTROLLING_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControllingUserId(@javax.annotation.Nullable UUID controllingUserId) {
    this.controllingUserId = controllingUserId;
  }


  public GeneralCommand arguments(@javax.annotation.Nullable Map<String, String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public GeneralCommand putArgumentsItem(String key, String argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new HashMap<>();
    }
    this.arguments.put(key, argumentsItem);
    return this;
  }

  /**
   * Get arguments
   * @return arguments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getArguments() {
    return arguments;
  }


  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setArguments(@javax.annotation.Nullable Map<String, String> arguments) {
    this.arguments = arguments;
  }


  /**
   * Return true if this GeneralCommand object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralCommand generalCommand = (GeneralCommand) o;
    return Objects.equals(this.name, generalCommand.name) &&
        Objects.equals(this.controllingUserId, generalCommand.controllingUserId) &&
        Objects.equals(this.arguments, generalCommand.arguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, controllingUserId, arguments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralCommand {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    controllingUserId: ").append(toIndentedString(controllingUserId)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `ControllingUserId` to the URL query string
    if (getControllingUserId() != null) {
      joiner.add(String.format("%sControllingUserId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getControllingUserId()))));
    }

    // add `Arguments` to the URL query string
    if (getArguments() != null) {
      for (String _key : getArguments().keySet()) {
        joiner.add(String.format("%sArguments%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getArguments().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getArguments().get(_key)))));
      }
    }

    return joiner.toString();
  }
}

