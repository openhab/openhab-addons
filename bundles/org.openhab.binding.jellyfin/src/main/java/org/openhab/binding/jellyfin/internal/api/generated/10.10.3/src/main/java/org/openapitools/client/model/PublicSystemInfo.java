/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublicSystemInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class PublicSystemInfo {
  public static final String SERIALIZED_NAME_LOCAL_ADDRESS = "LocalAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_ADDRESS)
  @javax.annotation.Nullable
  private String localAddress;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  @javax.annotation.Nullable
  private String serverName;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "ProductName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  @javax.annotation.Nullable
  private String productName;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "OperatingSystem";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  @javax.annotation.Nullable
  private String operatingSystem;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_STARTUP_WIZARD_COMPLETED = "StartupWizardCompleted";
  @SerializedName(SERIALIZED_NAME_STARTUP_WIZARD_COMPLETED)
  @javax.annotation.Nullable
  private Boolean startupWizardCompleted;

  public PublicSystemInfo() {
  }

  public PublicSystemInfo localAddress(@javax.annotation.Nullable String localAddress) {
    this.localAddress = localAddress;
    return this;
  }

  /**
   * Gets or sets the local address.
   * @return localAddress
   */
  @javax.annotation.Nullable
  public String getLocalAddress() {
    return localAddress;
  }

  public void setLocalAddress(@javax.annotation.Nullable String localAddress) {
    this.localAddress = localAddress;
  }


  public PublicSystemInfo serverName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Gets or sets the name of the server.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
  }


  public PublicSystemInfo version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Gets or sets the server version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public PublicSystemInfo productName(@javax.annotation.Nullable String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Gets or sets the product name. This is the AssemblyProduct name.
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(@javax.annotation.Nullable String productName) {
    this.productName = productName;
  }


  @Deprecated
  public PublicSystemInfo operatingSystem(@javax.annotation.Nullable String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Gets or sets the operating system.
   * @return operatingSystem
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }

  @Deprecated
  public void setOperatingSystem(@javax.annotation.Nullable String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public PublicSystemInfo id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public PublicSystemInfo startupWizardCompleted(@javax.annotation.Nullable Boolean startupWizardCompleted) {
    this.startupWizardCompleted = startupWizardCompleted;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the startup wizard is completed.
   * @return startupWizardCompleted
   */
  @javax.annotation.Nullable
  public Boolean getStartupWizardCompleted() {
    return startupWizardCompleted;
  }

  public void setStartupWizardCompleted(@javax.annotation.Nullable Boolean startupWizardCompleted) {
    this.startupWizardCompleted = startupWizardCompleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicSystemInfo publicSystemInfo = (PublicSystemInfo) o;
    return Objects.equals(this.localAddress, publicSystemInfo.localAddress) &&
        Objects.equals(this.serverName, publicSystemInfo.serverName) &&
        Objects.equals(this.version, publicSystemInfo.version) &&
        Objects.equals(this.productName, publicSystemInfo.productName) &&
        Objects.equals(this.operatingSystem, publicSystemInfo.operatingSystem) &&
        Objects.equals(this.id, publicSystemInfo.id) &&
        Objects.equals(this.startupWizardCompleted, publicSystemInfo.startupWizardCompleted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(localAddress, serverName, version, productName, operatingSystem, id, startupWizardCompleted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicSystemInfo {\n");
    sb.append("    localAddress: ").append(toIndentedString(localAddress)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startupWizardCompleted: ").append(toIndentedString(startupWizardCompleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocalAddress");
    openapiFields.add("ServerName");
    openapiFields.add("Version");
    openapiFields.add("ProductName");
    openapiFields.add("OperatingSystem");
    openapiFields.add("Id");
    openapiFields.add("StartupWizardCompleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicSystemInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicSystemInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicSystemInfo is not found in the empty JSON string", PublicSystemInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicSystemInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicSystemInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LocalAddress") != null && !jsonObj.get("LocalAddress").isJsonNull()) && !jsonObj.get("LocalAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalAddress").toString()));
      }
      if ((jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) && !jsonObj.get("ServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerName").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("ProductName") != null && !jsonObj.get("ProductName").isJsonNull()) && !jsonObj.get("ProductName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductName").toString()));
      }
      if ((jsonObj.get("OperatingSystem") != null && !jsonObj.get("OperatingSystem").isJsonNull()) && !jsonObj.get("OperatingSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatingSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatingSystem").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicSystemInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicSystemInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicSystemInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicSystemInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicSystemInfo>() {
           @Override
           public void write(JsonWriter out, PublicSystemInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicSystemInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicSystemInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicSystemInfo
   * @throws IOException if the JSON string is invalid with respect to PublicSystemInfo
   */
  public static PublicSystemInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicSystemInfo.class);
  }

  /**
   * Convert an instance of PublicSystemInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

