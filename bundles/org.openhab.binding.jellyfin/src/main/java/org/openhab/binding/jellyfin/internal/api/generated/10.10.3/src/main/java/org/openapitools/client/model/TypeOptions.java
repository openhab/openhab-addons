/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageOption;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TypeOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class TypeOptions {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_METADATA_FETCHERS = "MetadataFetchers";
  @SerializedName(SERIALIZED_NAME_METADATA_FETCHERS)
  @javax.annotation.Nullable
  private List<String> metadataFetchers;

  public static final String SERIALIZED_NAME_METADATA_FETCHER_ORDER = "MetadataFetcherOrder";
  @SerializedName(SERIALIZED_NAME_METADATA_FETCHER_ORDER)
  @javax.annotation.Nullable
  private List<String> metadataFetcherOrder;

  public static final String SERIALIZED_NAME_IMAGE_FETCHERS = "ImageFetchers";
  @SerializedName(SERIALIZED_NAME_IMAGE_FETCHERS)
  @javax.annotation.Nullable
  private List<String> imageFetchers;

  public static final String SERIALIZED_NAME_IMAGE_FETCHER_ORDER = "ImageFetcherOrder";
  @SerializedName(SERIALIZED_NAME_IMAGE_FETCHER_ORDER)
  @javax.annotation.Nullable
  private List<String> imageFetcherOrder;

  public static final String SERIALIZED_NAME_IMAGE_OPTIONS = "ImageOptions";
  @SerializedName(SERIALIZED_NAME_IMAGE_OPTIONS)
  @javax.annotation.Nullable
  private List<ImageOption> imageOptions;

  public TypeOptions() {
  }

  public TypeOptions type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public TypeOptions metadataFetchers(@javax.annotation.Nullable List<String> metadataFetchers) {
    this.metadataFetchers = metadataFetchers;
    return this;
  }

  public TypeOptions addMetadataFetchersItem(String metadataFetchersItem) {
    if (this.metadataFetchers == null) {
      this.metadataFetchers = new ArrayList<>();
    }
    this.metadataFetchers.add(metadataFetchersItem);
    return this;
  }

  /**
   * Get metadataFetchers
   * @return metadataFetchers
   */
  @javax.annotation.Nullable
  public List<String> getMetadataFetchers() {
    return metadataFetchers;
  }

  public void setMetadataFetchers(@javax.annotation.Nullable List<String> metadataFetchers) {
    this.metadataFetchers = metadataFetchers;
  }


  public TypeOptions metadataFetcherOrder(@javax.annotation.Nullable List<String> metadataFetcherOrder) {
    this.metadataFetcherOrder = metadataFetcherOrder;
    return this;
  }

  public TypeOptions addMetadataFetcherOrderItem(String metadataFetcherOrderItem) {
    if (this.metadataFetcherOrder == null) {
      this.metadataFetcherOrder = new ArrayList<>();
    }
    this.metadataFetcherOrder.add(metadataFetcherOrderItem);
    return this;
  }

  /**
   * Get metadataFetcherOrder
   * @return metadataFetcherOrder
   */
  @javax.annotation.Nullable
  public List<String> getMetadataFetcherOrder() {
    return metadataFetcherOrder;
  }

  public void setMetadataFetcherOrder(@javax.annotation.Nullable List<String> metadataFetcherOrder) {
    this.metadataFetcherOrder = metadataFetcherOrder;
  }


  public TypeOptions imageFetchers(@javax.annotation.Nullable List<String> imageFetchers) {
    this.imageFetchers = imageFetchers;
    return this;
  }

  public TypeOptions addImageFetchersItem(String imageFetchersItem) {
    if (this.imageFetchers == null) {
      this.imageFetchers = new ArrayList<>();
    }
    this.imageFetchers.add(imageFetchersItem);
    return this;
  }

  /**
   * Get imageFetchers
   * @return imageFetchers
   */
  @javax.annotation.Nullable
  public List<String> getImageFetchers() {
    return imageFetchers;
  }

  public void setImageFetchers(@javax.annotation.Nullable List<String> imageFetchers) {
    this.imageFetchers = imageFetchers;
  }


  public TypeOptions imageFetcherOrder(@javax.annotation.Nullable List<String> imageFetcherOrder) {
    this.imageFetcherOrder = imageFetcherOrder;
    return this;
  }

  public TypeOptions addImageFetcherOrderItem(String imageFetcherOrderItem) {
    if (this.imageFetcherOrder == null) {
      this.imageFetcherOrder = new ArrayList<>();
    }
    this.imageFetcherOrder.add(imageFetcherOrderItem);
    return this;
  }

  /**
   * Get imageFetcherOrder
   * @return imageFetcherOrder
   */
  @javax.annotation.Nullable
  public List<String> getImageFetcherOrder() {
    return imageFetcherOrder;
  }

  public void setImageFetcherOrder(@javax.annotation.Nullable List<String> imageFetcherOrder) {
    this.imageFetcherOrder = imageFetcherOrder;
  }


  public TypeOptions imageOptions(@javax.annotation.Nullable List<ImageOption> imageOptions) {
    this.imageOptions = imageOptions;
    return this;
  }

  public TypeOptions addImageOptionsItem(ImageOption imageOptionsItem) {
    if (this.imageOptions == null) {
      this.imageOptions = new ArrayList<>();
    }
    this.imageOptions.add(imageOptionsItem);
    return this;
  }

  /**
   * Get imageOptions
   * @return imageOptions
   */
  @javax.annotation.Nullable
  public List<ImageOption> getImageOptions() {
    return imageOptions;
  }

  public void setImageOptions(@javax.annotation.Nullable List<ImageOption> imageOptions) {
    this.imageOptions = imageOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypeOptions typeOptions = (TypeOptions) o;
    return Objects.equals(this.type, typeOptions.type) &&
        Objects.equals(this.metadataFetchers, typeOptions.metadataFetchers) &&
        Objects.equals(this.metadataFetcherOrder, typeOptions.metadataFetcherOrder) &&
        Objects.equals(this.imageFetchers, typeOptions.imageFetchers) &&
        Objects.equals(this.imageFetcherOrder, typeOptions.imageFetcherOrder) &&
        Objects.equals(this.imageOptions, typeOptions.imageOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, metadataFetchers, metadataFetcherOrder, imageFetchers, imageFetcherOrder, imageOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypeOptions {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    metadataFetchers: ").append(toIndentedString(metadataFetchers)).append("\n");
    sb.append("    metadataFetcherOrder: ").append(toIndentedString(metadataFetcherOrder)).append("\n");
    sb.append("    imageFetchers: ").append(toIndentedString(imageFetchers)).append("\n");
    sb.append("    imageFetcherOrder: ").append(toIndentedString(imageFetcherOrder)).append("\n");
    sb.append("    imageOptions: ").append(toIndentedString(imageOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("MetadataFetchers");
    openapiFields.add("MetadataFetcherOrder");
    openapiFields.add("ImageFetchers");
    openapiFields.add("ImageFetcherOrder");
    openapiFields.add("ImageOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypeOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypeOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypeOptions is not found in the empty JSON string", TypeOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypeOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypeOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MetadataFetchers") != null && !jsonObj.get("MetadataFetchers").isJsonNull() && !jsonObj.get("MetadataFetchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataFetchers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MetadataFetcherOrder") != null && !jsonObj.get("MetadataFetcherOrder").isJsonNull() && !jsonObj.get("MetadataFetcherOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataFetcherOrder` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataFetcherOrder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ImageFetchers") != null && !jsonObj.get("ImageFetchers").isJsonNull() && !jsonObj.get("ImageFetchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("ImageFetchers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ImageFetcherOrder") != null && !jsonObj.get("ImageFetcherOrder").isJsonNull() && !jsonObj.get("ImageFetcherOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageFetcherOrder` to be an array in the JSON string but got `%s`", jsonObj.get("ImageFetcherOrder").toString()));
      }
      if (jsonObj.get("ImageOptions") != null && !jsonObj.get("ImageOptions").isJsonNull()) {
        JsonArray jsonArrayimageOptions = jsonObj.getAsJsonArray("ImageOptions");
        if (jsonArrayimageOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ImageOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ImageOptions` to be an array in the JSON string but got `%s`", jsonObj.get("ImageOptions").toString()));
          }

          // validate the optional field `ImageOptions` (array)
          for (int i = 0; i < jsonArrayimageOptions.size(); i++) {
            ImageOption.validateJsonElement(jsonArrayimageOptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypeOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypeOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypeOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypeOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TypeOptions>() {
           @Override
           public void write(JsonWriter out, TypeOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypeOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypeOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypeOptions
   * @throws IOException if the JSON string is invalid with respect to TypeOptions
   */
  public static TypeOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypeOptions.class);
  }

  /**
   * Convert an instance of TypeOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

