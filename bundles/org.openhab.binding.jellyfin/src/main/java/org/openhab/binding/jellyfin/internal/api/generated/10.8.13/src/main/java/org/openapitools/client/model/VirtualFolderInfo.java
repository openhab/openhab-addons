/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CollectionTypeOptions;
import org.openapitools.client.model.LibraryOptions;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Used to hold information about a user&#39;s list of configured virtual folders.
 */
@JsonPropertyOrder({
  VirtualFolderInfo.JSON_PROPERTY_NAME,
  VirtualFolderInfo.JSON_PROPERTY_LOCATIONS,
  VirtualFolderInfo.JSON_PROPERTY_COLLECTION_TYPE,
  VirtualFolderInfo.JSON_PROPERTY_LIBRARY_OPTIONS,
  VirtualFolderInfo.JSON_PROPERTY_ITEM_ID,
  VirtualFolderInfo.JSON_PROPERTY_PRIMARY_IMAGE_ITEM_ID,
  VirtualFolderInfo.JSON_PROPERTY_REFRESH_PROGRESS,
  VirtualFolderInfo.JSON_PROPERTY_REFRESH_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class VirtualFolderInfo {
  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_LOCATIONS = "Locations";
  private JsonNullable<List<String>> locations = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_COLLECTION_TYPE = "CollectionType";
  private JsonNullable<CollectionTypeOptions> collectionType = JsonNullable.<CollectionTypeOptions>undefined();

  public static final String JSON_PROPERTY_LIBRARY_OPTIONS = "LibraryOptions";
  private JsonNullable<LibraryOptions> libraryOptions = JsonNullable.<LibraryOptions>undefined();

  public static final String JSON_PROPERTY_ITEM_ID = "ItemId";
  private JsonNullable<String> itemId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PRIMARY_IMAGE_ITEM_ID = "PrimaryImageItemId";
  private JsonNullable<String> primaryImageItemId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REFRESH_PROGRESS = "RefreshProgress";
  private JsonNullable<Double> refreshProgress = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_REFRESH_STATUS = "RefreshStatus";
  private JsonNullable<String> refreshStatus = JsonNullable.<String>undefined();

  public VirtualFolderInfo() { 
  }

  public VirtualFolderInfo name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public VirtualFolderInfo locations(@javax.annotation.Nullable List<String> locations) {
    this.locations = JsonNullable.<List<String>>of(locations);
    return this;
  }

  public VirtualFolderInfo addLocationsItem(String locationsItem) {
    if (this.locations == null || !this.locations.isPresent()) {
      this.locations = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.locations.get().add(locationsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Gets or sets the locations.
   * @return locations
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getLocations() {
        return locations.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getLocations_JsonNullable() {
    return locations;
  }
  
  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  public void setLocations_JsonNullable(JsonNullable<List<String>> locations) {
    this.locations = locations;
  }

  public void setLocations(@javax.annotation.Nullable List<String> locations) {
    this.locations = JsonNullable.<List<String>>of(locations);
  }


  public VirtualFolderInfo collectionType(@javax.annotation.Nullable CollectionTypeOptions collectionType) {
    this.collectionType = JsonNullable.<CollectionTypeOptions>of(collectionType);
    return this;
  }

  /**
   * Gets or sets the type of the collection.
   * @return collectionType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public CollectionTypeOptions getCollectionType() {
        return collectionType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COLLECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CollectionTypeOptions> getCollectionType_JsonNullable() {
    return collectionType;
  }
  
  @JsonProperty(JSON_PROPERTY_COLLECTION_TYPE)
  public void setCollectionType_JsonNullable(JsonNullable<CollectionTypeOptions> collectionType) {
    this.collectionType = collectionType;
  }

  public void setCollectionType(@javax.annotation.Nullable CollectionTypeOptions collectionType) {
    this.collectionType = JsonNullable.<CollectionTypeOptions>of(collectionType);
  }


  public VirtualFolderInfo libraryOptions(@javax.annotation.Nullable LibraryOptions libraryOptions) {
    this.libraryOptions = JsonNullable.<LibraryOptions>of(libraryOptions);
    return this;
  }

  /**
   * Get libraryOptions
   * @return libraryOptions
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public LibraryOptions getLibraryOptions() {
        return libraryOptions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LIBRARY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LibraryOptions> getLibraryOptions_JsonNullable() {
    return libraryOptions;
  }
  
  @JsonProperty(JSON_PROPERTY_LIBRARY_OPTIONS)
  public void setLibraryOptions_JsonNullable(JsonNullable<LibraryOptions> libraryOptions) {
    this.libraryOptions = libraryOptions;
  }

  public void setLibraryOptions(@javax.annotation.Nullable LibraryOptions libraryOptions) {
    this.libraryOptions = JsonNullable.<LibraryOptions>of(libraryOptions);
  }


  public VirtualFolderInfo itemId(@javax.annotation.Nullable String itemId) {
    this.itemId = JsonNullable.<String>of(itemId);
    return this;
  }

  /**
   * Gets or sets the item identifier.
   * @return itemId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getItemId() {
        return itemId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getItemId_JsonNullable() {
    return itemId;
  }
  
  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  public void setItemId_JsonNullable(JsonNullable<String> itemId) {
    this.itemId = itemId;
  }

  public void setItemId(@javax.annotation.Nullable String itemId) {
    this.itemId = JsonNullable.<String>of(itemId);
  }


  public VirtualFolderInfo primaryImageItemId(@javax.annotation.Nullable String primaryImageItemId) {
    this.primaryImageItemId = JsonNullable.<String>of(primaryImageItemId);
    return this;
  }

  /**
   * Gets or sets the primary image item identifier.
   * @return primaryImageItemId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getPrimaryImageItemId() {
        return primaryImageItemId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRIMARY_IMAGE_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPrimaryImageItemId_JsonNullable() {
    return primaryImageItemId;
  }
  
  @JsonProperty(JSON_PROPERTY_PRIMARY_IMAGE_ITEM_ID)
  public void setPrimaryImageItemId_JsonNullable(JsonNullable<String> primaryImageItemId) {
    this.primaryImageItemId = primaryImageItemId;
  }

  public void setPrimaryImageItemId(@javax.annotation.Nullable String primaryImageItemId) {
    this.primaryImageItemId = JsonNullable.<String>of(primaryImageItemId);
  }


  public VirtualFolderInfo refreshProgress(@javax.annotation.Nullable Double refreshProgress) {
    this.refreshProgress = JsonNullable.<Double>of(refreshProgress);
    return this;
  }

  /**
   * Get refreshProgress
   * @return refreshProgress
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Double getRefreshProgress() {
        return refreshProgress.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFRESH_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getRefreshProgress_JsonNullable() {
    return refreshProgress;
  }
  
  @JsonProperty(JSON_PROPERTY_REFRESH_PROGRESS)
  public void setRefreshProgress_JsonNullable(JsonNullable<Double> refreshProgress) {
    this.refreshProgress = refreshProgress;
  }

  public void setRefreshProgress(@javax.annotation.Nullable Double refreshProgress) {
    this.refreshProgress = JsonNullable.<Double>of(refreshProgress);
  }


  public VirtualFolderInfo refreshStatus(@javax.annotation.Nullable String refreshStatus) {
    this.refreshStatus = JsonNullable.<String>of(refreshStatus);
    return this;
  }

  /**
   * Get refreshStatus
   * @return refreshStatus
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRefreshStatus() {
        return refreshStatus.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFRESH_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRefreshStatus_JsonNullable() {
    return refreshStatus;
  }
  
  @JsonProperty(JSON_PROPERTY_REFRESH_STATUS)
  public void setRefreshStatus_JsonNullable(JsonNullable<String> refreshStatus) {
    this.refreshStatus = refreshStatus;
  }

  public void setRefreshStatus(@javax.annotation.Nullable String refreshStatus) {
    this.refreshStatus = JsonNullable.<String>of(refreshStatus);
  }


  /**
   * Return true if this VirtualFolderInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualFolderInfo virtualFolderInfo = (VirtualFolderInfo) o;
    return equalsNullable(this.name, virtualFolderInfo.name) &&
        equalsNullable(this.locations, virtualFolderInfo.locations) &&
        equalsNullable(this.collectionType, virtualFolderInfo.collectionType) &&
        equalsNullable(this.libraryOptions, virtualFolderInfo.libraryOptions) &&
        equalsNullable(this.itemId, virtualFolderInfo.itemId) &&
        equalsNullable(this.primaryImageItemId, virtualFolderInfo.primaryImageItemId) &&
        equalsNullable(this.refreshProgress, virtualFolderInfo.refreshProgress) &&
        equalsNullable(this.refreshStatus, virtualFolderInfo.refreshStatus);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(locations), hashCodeNullable(collectionType), hashCodeNullable(libraryOptions), hashCodeNullable(itemId), hashCodeNullable(primaryImageItemId), hashCodeNullable(refreshProgress), hashCodeNullable(refreshStatus));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualFolderInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    collectionType: ").append(toIndentedString(collectionType)).append("\n");
    sb.append("    libraryOptions: ").append(toIndentedString(libraryOptions)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    primaryImageItemId: ").append(toIndentedString(primaryImageItemId)).append("\n");
    sb.append("    refreshProgress: ").append(toIndentedString(refreshProgress)).append("\n");
    sb.append("    refreshStatus: ").append(toIndentedString(refreshStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Locations` to the URL query string
    if (getLocations() != null) {
      for (int i = 0; i < getLocations().size(); i++) {
        joiner.add(String.format("%sLocations%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getLocations().get(i)))));
      }
    }

    // add `CollectionType` to the URL query string
    if (getCollectionType() != null) {
      joiner.add(String.format("%sCollectionType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCollectionType()))));
    }

    // add `LibraryOptions` to the URL query string
    if (getLibraryOptions() != null) {
      joiner.add(getLibraryOptions().toUrlQueryString(prefix + "LibraryOptions" + suffix));
    }

    // add `ItemId` to the URL query string
    if (getItemId() != null) {
      joiner.add(String.format("%sItemId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getItemId()))));
    }

    // add `PrimaryImageItemId` to the URL query string
    if (getPrimaryImageItemId() != null) {
      joiner.add(String.format("%sPrimaryImageItemId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPrimaryImageItemId()))));
    }

    // add `RefreshProgress` to the URL query string
    if (getRefreshProgress() != null) {
      joiner.add(String.format("%sRefreshProgress%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRefreshProgress()))));
    }

    // add `RefreshStatus` to the URL query string
    if (getRefreshStatus() != null) {
      joiner.add(String.format("%sRefreshStatus%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRefreshStatus()))));
    }

    return joiner.toString();
  }
}

