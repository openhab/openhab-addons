/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PlaylistUserPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO for playlists.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class PlaylistDto {
  public static final String SERIALIZED_NAME_OPEN_ACCESS = "OpenAccess";
  @SerializedName(SERIALIZED_NAME_OPEN_ACCESS)
  @javax.annotation.Nullable
  private Boolean openAccess;

  public static final String SERIALIZED_NAME_SHARES = "Shares";
  @SerializedName(SERIALIZED_NAME_SHARES)
  @javax.annotation.Nullable
  private List<PlaylistUserPermissions> shares = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_IDS = "ItemIds";
  @SerializedName(SERIALIZED_NAME_ITEM_IDS)
  @javax.annotation.Nullable
  private List<UUID> itemIds = new ArrayList<>();

  public PlaylistDto() {
  }

  public PlaylistDto openAccess(@javax.annotation.Nullable Boolean openAccess) {
    this.openAccess = openAccess;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the playlist is publicly readable.
   * @return openAccess
   */
  @javax.annotation.Nullable
  public Boolean getOpenAccess() {
    return openAccess;
  }

  public void setOpenAccess(@javax.annotation.Nullable Boolean openAccess) {
    this.openAccess = openAccess;
  }


  public PlaylistDto shares(@javax.annotation.Nullable List<PlaylistUserPermissions> shares) {
    this.shares = shares;
    return this;
  }

  public PlaylistDto addSharesItem(PlaylistUserPermissions sharesItem) {
    if (this.shares == null) {
      this.shares = new ArrayList<>();
    }
    this.shares.add(sharesItem);
    return this;
  }

  /**
   * Gets or sets the share permissions.
   * @return shares
   */
  @javax.annotation.Nullable
  public List<PlaylistUserPermissions> getShares() {
    return shares;
  }

  public void setShares(@javax.annotation.Nullable List<PlaylistUserPermissions> shares) {
    this.shares = shares;
  }


  public PlaylistDto itemIds(@javax.annotation.Nullable List<UUID> itemIds) {
    this.itemIds = itemIds;
    return this;
  }

  public PlaylistDto addItemIdsItem(UUID itemIdsItem) {
    if (this.itemIds == null) {
      this.itemIds = new ArrayList<>();
    }
    this.itemIds.add(itemIdsItem);
    return this;
  }

  /**
   * Gets or sets the item ids.
   * @return itemIds
   */
  @javax.annotation.Nullable
  public List<UUID> getItemIds() {
    return itemIds;
  }

  public void setItemIds(@javax.annotation.Nullable List<UUID> itemIds) {
    this.itemIds = itemIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistDto playlistDto = (PlaylistDto) o;
    return Objects.equals(this.openAccess, playlistDto.openAccess) &&
        Objects.equals(this.shares, playlistDto.shares) &&
        Objects.equals(this.itemIds, playlistDto.itemIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openAccess, shares, itemIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistDto {\n");
    sb.append("    openAccess: ").append(toIndentedString(openAccess)).append("\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("    itemIds: ").append(toIndentedString(itemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OpenAccess");
    openapiFields.add("Shares");
    openapiFields.add("ItemIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistDto is not found in the empty JSON string", PlaylistDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Shares") != null && !jsonObj.get("Shares").isJsonNull()) {
        JsonArray jsonArrayshares = jsonObj.getAsJsonArray("Shares");
        if (jsonArrayshares != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Shares").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Shares` to be an array in the JSON string but got `%s`", jsonObj.get("Shares").toString()));
          }

          // validate the optional field `Shares` (array)
          for (int i = 0; i < jsonArrayshares.size(); i++) {
            PlaylistUserPermissions.validateJsonElement(jsonArrayshares.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ItemIds") != null && !jsonObj.get("ItemIds").isJsonNull() && !jsonObj.get("ItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("ItemIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistDto>() {
           @Override
           public void write(JsonWriter out, PlaylistDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistDto
   * @throws IOException if the JSON string is invalid with respect to PlaylistDto
   */
  public static PlaylistDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistDto.class);
  }

  /**
   * Convert an instance of PlaylistDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

