/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.QueueItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class PlaybackStopInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class PlaybackStopInfo {
  public static final String SERIALIZED_NAME_ITEM = "Item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  @javax.annotation.Nullable
  private BaseItemDto item;

  public static final String SERIALIZED_NAME_ITEM_ID = "ItemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  @javax.annotation.Nullable
  private UUID itemId;

  public static final String SERIALIZED_NAME_SESSION_ID = "SessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  @javax.annotation.Nullable
  private String sessionId;

  public static final String SERIALIZED_NAME_MEDIA_SOURCE_ID = "MediaSourceId";
  @SerializedName(SERIALIZED_NAME_MEDIA_SOURCE_ID)
  @javax.annotation.Nullable
  private String mediaSourceId;

  public static final String SERIALIZED_NAME_POSITION_TICKS = "PositionTicks";
  @SerializedName(SERIALIZED_NAME_POSITION_TICKS)
  @javax.annotation.Nullable
  private Long positionTicks;

  public static final String SERIALIZED_NAME_LIVE_STREAM_ID = "LiveStreamId";
  @SerializedName(SERIALIZED_NAME_LIVE_STREAM_ID)
  @javax.annotation.Nullable
  private String liveStreamId;

  public static final String SERIALIZED_NAME_PLAY_SESSION_ID = "PlaySessionId";
  @SerializedName(SERIALIZED_NAME_PLAY_SESSION_ID)
  @javax.annotation.Nullable
  private String playSessionId;

  public static final String SERIALIZED_NAME_FAILED = "Failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  @javax.annotation.Nullable
  private Boolean failed;

  public static final String SERIALIZED_NAME_NEXT_MEDIA_TYPE = "NextMediaType";
  @SerializedName(SERIALIZED_NAME_NEXT_MEDIA_TYPE)
  @javax.annotation.Nullable
  private String nextMediaType;

  public static final String SERIALIZED_NAME_PLAYLIST_ITEM_ID = "PlaylistItemId";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_ITEM_ID)
  @javax.annotation.Nullable
  private String playlistItemId;

  public static final String SERIALIZED_NAME_NOW_PLAYING_QUEUE = "NowPlayingQueue";
  @SerializedName(SERIALIZED_NAME_NOW_PLAYING_QUEUE)
  @javax.annotation.Nullable
  private List<QueueItem> nowPlayingQueue;

  public PlaybackStopInfo() {
  }

  public PlaybackStopInfo item(@javax.annotation.Nullable BaseItemDto item) {
    this.item = item;
    return this;
  }

  /**
   * Gets or sets the item.
   * @return item
   */
  @javax.annotation.Nullable
  public BaseItemDto getItem() {
    return item;
  }

  public void setItem(@javax.annotation.Nullable BaseItemDto item) {
    this.item = item;
  }


  public PlaybackStopInfo itemId(@javax.annotation.Nullable UUID itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Gets or sets the item identifier.
   * @return itemId
   */
  @javax.annotation.Nullable
  public UUID getItemId() {
    return itemId;
  }

  public void setItemId(@javax.annotation.Nullable UUID itemId) {
    this.itemId = itemId;
  }


  public PlaybackStopInfo sessionId(@javax.annotation.Nullable String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Gets or sets the session id.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(@javax.annotation.Nullable String sessionId) {
    this.sessionId = sessionId;
  }


  public PlaybackStopInfo mediaSourceId(@javax.annotation.Nullable String mediaSourceId) {
    this.mediaSourceId = mediaSourceId;
    return this;
  }

  /**
   * Gets or sets the media version identifier.
   * @return mediaSourceId
   */
  @javax.annotation.Nullable
  public String getMediaSourceId() {
    return mediaSourceId;
  }

  public void setMediaSourceId(@javax.annotation.Nullable String mediaSourceId) {
    this.mediaSourceId = mediaSourceId;
  }


  public PlaybackStopInfo positionTicks(@javax.annotation.Nullable Long positionTicks) {
    this.positionTicks = positionTicks;
    return this;
  }

  /**
   * Gets or sets the position ticks.
   * @return positionTicks
   */
  @javax.annotation.Nullable
  public Long getPositionTicks() {
    return positionTicks;
  }

  public void setPositionTicks(@javax.annotation.Nullable Long positionTicks) {
    this.positionTicks = positionTicks;
  }


  public PlaybackStopInfo liveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = liveStreamId;
    return this;
  }

  /**
   * Gets or sets the live stream identifier.
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  public String getLiveStreamId() {
    return liveStreamId;
  }

  public void setLiveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = liveStreamId;
  }


  public PlaybackStopInfo playSessionId(@javax.annotation.Nullable String playSessionId) {
    this.playSessionId = playSessionId;
    return this;
  }

  /**
   * Gets or sets the play session identifier.
   * @return playSessionId
   */
  @javax.annotation.Nullable
  public String getPlaySessionId() {
    return playSessionId;
  }

  public void setPlaySessionId(@javax.annotation.Nullable String playSessionId) {
    this.playSessionId = playSessionId;
  }


  public PlaybackStopInfo failed(@javax.annotation.Nullable Boolean failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this MediaBrowser.Model.Session.PlaybackStopInfo is failed.
   * @return failed
   */
  @javax.annotation.Nullable
  public Boolean getFailed() {
    return failed;
  }

  public void setFailed(@javax.annotation.Nullable Boolean failed) {
    this.failed = failed;
  }


  public PlaybackStopInfo nextMediaType(@javax.annotation.Nullable String nextMediaType) {
    this.nextMediaType = nextMediaType;
    return this;
  }

  /**
   * Get nextMediaType
   * @return nextMediaType
   */
  @javax.annotation.Nullable
  public String getNextMediaType() {
    return nextMediaType;
  }

  public void setNextMediaType(@javax.annotation.Nullable String nextMediaType) {
    this.nextMediaType = nextMediaType;
  }


  public PlaybackStopInfo playlistItemId(@javax.annotation.Nullable String playlistItemId) {
    this.playlistItemId = playlistItemId;
    return this;
  }

  /**
   * Get playlistItemId
   * @return playlistItemId
   */
  @javax.annotation.Nullable
  public String getPlaylistItemId() {
    return playlistItemId;
  }

  public void setPlaylistItemId(@javax.annotation.Nullable String playlistItemId) {
    this.playlistItemId = playlistItemId;
  }


  public PlaybackStopInfo nowPlayingQueue(@javax.annotation.Nullable List<QueueItem> nowPlayingQueue) {
    this.nowPlayingQueue = nowPlayingQueue;
    return this;
  }

  public PlaybackStopInfo addNowPlayingQueueItem(QueueItem nowPlayingQueueItem) {
    if (this.nowPlayingQueue == null) {
      this.nowPlayingQueue = new ArrayList<>();
    }
    this.nowPlayingQueue.add(nowPlayingQueueItem);
    return this;
  }

  /**
   * Get nowPlayingQueue
   * @return nowPlayingQueue
   */
  @javax.annotation.Nullable
  public List<QueueItem> getNowPlayingQueue() {
    return nowPlayingQueue;
  }

  public void setNowPlayingQueue(@javax.annotation.Nullable List<QueueItem> nowPlayingQueue) {
    this.nowPlayingQueue = nowPlayingQueue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaybackStopInfo playbackStopInfo = (PlaybackStopInfo) o;
    return Objects.equals(this.item, playbackStopInfo.item) &&
        Objects.equals(this.itemId, playbackStopInfo.itemId) &&
        Objects.equals(this.sessionId, playbackStopInfo.sessionId) &&
        Objects.equals(this.mediaSourceId, playbackStopInfo.mediaSourceId) &&
        Objects.equals(this.positionTicks, playbackStopInfo.positionTicks) &&
        Objects.equals(this.liveStreamId, playbackStopInfo.liveStreamId) &&
        Objects.equals(this.playSessionId, playbackStopInfo.playSessionId) &&
        Objects.equals(this.failed, playbackStopInfo.failed) &&
        Objects.equals(this.nextMediaType, playbackStopInfo.nextMediaType) &&
        Objects.equals(this.playlistItemId, playbackStopInfo.playlistItemId) &&
        Objects.equals(this.nowPlayingQueue, playbackStopInfo.nowPlayingQueue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(item, itemId, sessionId, mediaSourceId, positionTicks, liveStreamId, playSessionId, failed, nextMediaType, playlistItemId, nowPlayingQueue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaybackStopInfo {\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    mediaSourceId: ").append(toIndentedString(mediaSourceId)).append("\n");
    sb.append("    positionTicks: ").append(toIndentedString(positionTicks)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    playSessionId: ").append(toIndentedString(playSessionId)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    nextMediaType: ").append(toIndentedString(nextMediaType)).append("\n");
    sb.append("    playlistItemId: ").append(toIndentedString(playlistItemId)).append("\n");
    sb.append("    nowPlayingQueue: ").append(toIndentedString(nowPlayingQueue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Item");
    openapiFields.add("ItemId");
    openapiFields.add("SessionId");
    openapiFields.add("MediaSourceId");
    openapiFields.add("PositionTicks");
    openapiFields.add("LiveStreamId");
    openapiFields.add("PlaySessionId");
    openapiFields.add("Failed");
    openapiFields.add("NextMediaType");
    openapiFields.add("PlaylistItemId");
    openapiFields.add("NowPlayingQueue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaybackStopInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaybackStopInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaybackStopInfo is not found in the empty JSON string", PlaybackStopInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaybackStopInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaybackStopInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Item`
      if (jsonObj.get("Item") != null && !jsonObj.get("Item").isJsonNull()) {
        BaseItemDto.validateJsonElement(jsonObj.get("Item"));
      }
      if ((jsonObj.get("ItemId") != null && !jsonObj.get("ItemId").isJsonNull()) && !jsonObj.get("ItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemId").toString()));
      }
      if ((jsonObj.get("SessionId") != null && !jsonObj.get("SessionId").isJsonNull()) && !jsonObj.get("SessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SessionId").toString()));
      }
      if ((jsonObj.get("MediaSourceId") != null && !jsonObj.get("MediaSourceId").isJsonNull()) && !jsonObj.get("MediaSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MediaSourceId").toString()));
      }
      if ((jsonObj.get("LiveStreamId") != null && !jsonObj.get("LiveStreamId").isJsonNull()) && !jsonObj.get("LiveStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveStreamId").toString()));
      }
      if ((jsonObj.get("PlaySessionId") != null && !jsonObj.get("PlaySessionId").isJsonNull()) && !jsonObj.get("PlaySessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaySessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaySessionId").toString()));
      }
      if ((jsonObj.get("NextMediaType") != null && !jsonObj.get("NextMediaType").isJsonNull()) && !jsonObj.get("NextMediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextMediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextMediaType").toString()));
      }
      if ((jsonObj.get("PlaylistItemId") != null && !jsonObj.get("PlaylistItemId").isJsonNull()) && !jsonObj.get("PlaylistItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaylistItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaylistItemId").toString()));
      }
      if (jsonObj.get("NowPlayingQueue") != null && !jsonObj.get("NowPlayingQueue").isJsonNull()) {
        JsonArray jsonArraynowPlayingQueue = jsonObj.getAsJsonArray("NowPlayingQueue");
        if (jsonArraynowPlayingQueue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NowPlayingQueue").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NowPlayingQueue` to be an array in the JSON string but got `%s`", jsonObj.get("NowPlayingQueue").toString()));
          }

          // validate the optional field `NowPlayingQueue` (array)
          for (int i = 0; i < jsonArraynowPlayingQueue.size(); i++) {
            QueueItem.validateJsonElement(jsonArraynowPlayingQueue.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaybackStopInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaybackStopInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaybackStopInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaybackStopInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaybackStopInfo>() {
           @Override
           public void write(JsonWriter out, PlaybackStopInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaybackStopInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaybackStopInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaybackStopInfo
   * @throws IOException if the JSON string is invalid with respect to PlaybackStopInfo
   */
  public static PlaybackStopInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaybackStopInfo.class);
  }

  /**
   * Convert an instance of PlaybackStopInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

