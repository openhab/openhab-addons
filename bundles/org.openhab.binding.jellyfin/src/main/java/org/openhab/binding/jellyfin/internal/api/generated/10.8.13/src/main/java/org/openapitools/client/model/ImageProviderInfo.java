/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class ImageProviderInfo.
 */
@JsonPropertyOrder({
  ImageProviderInfo.JSON_PROPERTY_NAME,
  ImageProviderInfo.JSON_PROPERTY_SUPPORTED_IMAGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:40.061690683Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ImageProviderInfo {
  public static final String JSON_PROPERTY_NAME = "Name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_SUPPORTED_IMAGES = "SupportedImages";
  @javax.annotation.Nullable
  private List<ImageType> supportedImages = new ArrayList<>();

  public ImageProviderInfo() { 
  }

  public ImageProviderInfo name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets the name.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ImageProviderInfo supportedImages(@javax.annotation.Nullable List<ImageType> supportedImages) {
    this.supportedImages = supportedImages;
    return this;
  }

  public ImageProviderInfo addSupportedImagesItem(ImageType supportedImagesItem) {
    if (this.supportedImages == null) {
      this.supportedImages = new ArrayList<>();
    }
    this.supportedImages.add(supportedImagesItem);
    return this;
  }

  /**
   * Gets the supported image types.
   * @return supportedImages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ImageType> getSupportedImages() {
    return supportedImages;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedImages(@javax.annotation.Nullable List<ImageType> supportedImages) {
    this.supportedImages = supportedImages;
  }


  /**
   * Return true if this ImageProviderInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageProviderInfo imageProviderInfo = (ImageProviderInfo) o;
    return Objects.equals(this.name, imageProviderInfo.name) &&
        Objects.equals(this.supportedImages, imageProviderInfo.supportedImages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, supportedImages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageProviderInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    supportedImages: ").append(toIndentedString(supportedImages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `SupportedImages` to the URL query string
    if (getSupportedImages() != null) {
      for (int i = 0; i < getSupportedImages().size(); i++) {
        if (getSupportedImages().get(i) != null) {
          joiner.add(String.format("%sSupportedImages%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getSupportedImages().get(i)))));
        }
      }
    }

    return joiner.toString();
  }
}

