/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class InstantMixApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public InstantMixApi() {
    this(Configuration.getDefaultApiClient());
  }

  public InstantMixApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates an instant playlist based on a given album.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getInstantMixFromAlbum(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromAlbumWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given album.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromAlbumWithHttpInfo(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromAlbumRequestBuilder(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromAlbum", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromAlbumRequestBuilder(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstantMixFromAlbum");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Albums/{id}/InstantMix"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates an instant playlist based on a given artist.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getInstantMixFromArtists(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromArtistsWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given artist.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromArtistsWithHttpInfo(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromArtistsRequestBuilder(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromArtists", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromArtistsRequestBuilder(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstantMixFromArtists");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Artists/{id}/InstantMix"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates an instant playlist based on a given artist.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public BaseItemDtoQueryResult getInstantMixFromArtists2(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromArtists2WithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given artist.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromArtists2WithHttpInfo(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromArtists2RequestBuilder(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromArtists2", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromArtists2RequestBuilder(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstantMixFromArtists2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Artists/InstantMix";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates an instant playlist based on a given item.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getInstantMixFromItem(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromItemWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given item.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromItemWithHttpInfo(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromItemRequestBuilder(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromItem", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromItemRequestBuilder(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstantMixFromItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{id}/InstantMix"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates an instant playlist based on a given genre.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getInstantMixFromMusicGenreById(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromMusicGenreByIdWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given genre.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromMusicGenreByIdWithHttpInfo(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromMusicGenreByIdRequestBuilder(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromMusicGenreById", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromMusicGenreByIdRequestBuilder(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstantMixFromMusicGenreById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/MusicGenres/InstantMix";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates an instant playlist based on a given genre.
   * 
   * @param name The genre name. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getInstantMixFromMusicGenreByName(String name, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromMusicGenreByNameWithHttpInfo(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given genre.
   * 
   * @param name The genre name. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromMusicGenreByNameWithHttpInfo(String name, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromMusicGenreByNameRequestBuilder(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromMusicGenreByName", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromMusicGenreByNameRequestBuilder(String name, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getInstantMixFromMusicGenreByName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/MusicGenres/{name}/InstantMix"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates an instant playlist based on a given playlist.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getInstantMixFromPlaylist(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromPlaylistWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given playlist.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromPlaylistWithHttpInfo(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromPlaylistRequestBuilder(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromPlaylist", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromPlaylistRequestBuilder(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstantMixFromPlaylist");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Playlists/{id}/InstantMix"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Creates an instant playlist based on a given song.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getInstantMixFromSong(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getInstantMixFromSongWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    return localVarResponse.getData();
  }

  /**
   * Creates an instant playlist based on a given song.
   * 
   * @param id The item id. (required)
   * @param userId Optional. Filter by user id, and attach user data. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param enableImages Optional. Include image information in output. (optional)
   * @param enableUserData Optional. Include user data. (optional)
   * @param imageTypeLimit Optional. The max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getInstantMixFromSongWithHttpInfo(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstantMixFromSongRequestBuilder(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstantMixFromSong", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstantMixFromSongRequestBuilder(UUID id, UUID userId, Integer limit, List<ItemFields> fields, Boolean enableImages, Boolean enableUserData, Integer imageTypeLimit, List<ImageType> enableImageTypes) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getInstantMixFromSong");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Songs/{id}/InstantMix"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
