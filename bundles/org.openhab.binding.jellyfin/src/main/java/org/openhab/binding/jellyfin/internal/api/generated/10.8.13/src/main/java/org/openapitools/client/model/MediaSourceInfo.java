/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IsoType;
import org.openapitools.client.model.MediaAttachment;
import org.openapitools.client.model.MediaProtocol;
import org.openapitools.client.model.MediaSourceType;
import org.openapitools.client.model.MediaStream;
import org.openapitools.client.model.TransportStreamTimestamp;
import org.openapitools.client.model.Video3DFormat;
import org.openapitools.client.model.VideoType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * MediaSourceInfo
 */
@JsonPropertyOrder({
  MediaSourceInfo.JSON_PROPERTY_PROTOCOL,
  MediaSourceInfo.JSON_PROPERTY_ID,
  MediaSourceInfo.JSON_PROPERTY_PATH,
  MediaSourceInfo.JSON_PROPERTY_ENCODER_PATH,
  MediaSourceInfo.JSON_PROPERTY_ENCODER_PROTOCOL,
  MediaSourceInfo.JSON_PROPERTY_TYPE,
  MediaSourceInfo.JSON_PROPERTY_CONTAINER,
  MediaSourceInfo.JSON_PROPERTY_SIZE,
  MediaSourceInfo.JSON_PROPERTY_NAME,
  MediaSourceInfo.JSON_PROPERTY_IS_REMOTE,
  MediaSourceInfo.JSON_PROPERTY_ETAG,
  MediaSourceInfo.JSON_PROPERTY_RUN_TIME_TICKS,
  MediaSourceInfo.JSON_PROPERTY_READ_AT_NATIVE_FRAMERATE,
  MediaSourceInfo.JSON_PROPERTY_IGNORE_DTS,
  MediaSourceInfo.JSON_PROPERTY_IGNORE_INDEX,
  MediaSourceInfo.JSON_PROPERTY_GEN_PTS_INPUT,
  MediaSourceInfo.JSON_PROPERTY_SUPPORTS_TRANSCODING,
  MediaSourceInfo.JSON_PROPERTY_SUPPORTS_DIRECT_STREAM,
  MediaSourceInfo.JSON_PROPERTY_SUPPORTS_DIRECT_PLAY,
  MediaSourceInfo.JSON_PROPERTY_IS_INFINITE_STREAM,
  MediaSourceInfo.JSON_PROPERTY_REQUIRES_OPENING,
  MediaSourceInfo.JSON_PROPERTY_OPEN_TOKEN,
  MediaSourceInfo.JSON_PROPERTY_REQUIRES_CLOSING,
  MediaSourceInfo.JSON_PROPERTY_LIVE_STREAM_ID,
  MediaSourceInfo.JSON_PROPERTY_BUFFER_MS,
  MediaSourceInfo.JSON_PROPERTY_REQUIRES_LOOPING,
  MediaSourceInfo.JSON_PROPERTY_SUPPORTS_PROBING,
  MediaSourceInfo.JSON_PROPERTY_VIDEO_TYPE,
  MediaSourceInfo.JSON_PROPERTY_ISO_TYPE,
  MediaSourceInfo.JSON_PROPERTY_VIDEO3_D_FORMAT,
  MediaSourceInfo.JSON_PROPERTY_MEDIA_STREAMS,
  MediaSourceInfo.JSON_PROPERTY_MEDIA_ATTACHMENTS,
  MediaSourceInfo.JSON_PROPERTY_FORMATS,
  MediaSourceInfo.JSON_PROPERTY_BITRATE,
  MediaSourceInfo.JSON_PROPERTY_TIMESTAMP,
  MediaSourceInfo.JSON_PROPERTY_REQUIRED_HTTP_HEADERS,
  MediaSourceInfo.JSON_PROPERTY_TRANSCODING_URL,
  MediaSourceInfo.JSON_PROPERTY_TRANSCODING_SUB_PROTOCOL,
  MediaSourceInfo.JSON_PROPERTY_TRANSCODING_CONTAINER,
  MediaSourceInfo.JSON_PROPERTY_ANALYZE_DURATION_MS,
  MediaSourceInfo.JSON_PROPERTY_DEFAULT_AUDIO_STREAM_INDEX,
  MediaSourceInfo.JSON_PROPERTY_DEFAULT_SUBTITLE_STREAM_INDEX
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class MediaSourceInfo {
  public static final String JSON_PROPERTY_PROTOCOL = "Protocol";
  @javax.annotation.Nullable
  private MediaProtocol protocol;

  public static final String JSON_PROPERTY_ID = "Id";
  private JsonNullable<String> id = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PATH = "Path";
  private JsonNullable<String> path = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENCODER_PATH = "EncoderPath";
  private JsonNullable<String> encoderPath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENCODER_PROTOCOL = "EncoderProtocol";
  private JsonNullable<MediaProtocol> encoderProtocol = JsonNullable.<MediaProtocol>undefined();

  public static final String JSON_PROPERTY_TYPE = "Type";
  @javax.annotation.Nullable
  private MediaSourceType type;

  public static final String JSON_PROPERTY_CONTAINER = "Container";
  private JsonNullable<String> container = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SIZE = "Size";
  private JsonNullable<Long> size = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_REMOTE = "IsRemote";
  @javax.annotation.Nullable
  private Boolean isRemote;

  public static final String JSON_PROPERTY_ETAG = "ETag";
  private JsonNullable<String> etag = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_RUN_TIME_TICKS = "RunTimeTicks";
  private JsonNullable<Long> runTimeTicks = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_READ_AT_NATIVE_FRAMERATE = "ReadAtNativeFramerate";
  @javax.annotation.Nullable
  private Boolean readAtNativeFramerate;

  public static final String JSON_PROPERTY_IGNORE_DTS = "IgnoreDts";
  @javax.annotation.Nullable
  private Boolean ignoreDts;

  public static final String JSON_PROPERTY_IGNORE_INDEX = "IgnoreIndex";
  @javax.annotation.Nullable
  private Boolean ignoreIndex;

  public static final String JSON_PROPERTY_GEN_PTS_INPUT = "GenPtsInput";
  @javax.annotation.Nullable
  private Boolean genPtsInput;

  public static final String JSON_PROPERTY_SUPPORTS_TRANSCODING = "SupportsTranscoding";
  @javax.annotation.Nullable
  private Boolean supportsTranscoding;

  public static final String JSON_PROPERTY_SUPPORTS_DIRECT_STREAM = "SupportsDirectStream";
  @javax.annotation.Nullable
  private Boolean supportsDirectStream;

  public static final String JSON_PROPERTY_SUPPORTS_DIRECT_PLAY = "SupportsDirectPlay";
  @javax.annotation.Nullable
  private Boolean supportsDirectPlay;

  public static final String JSON_PROPERTY_IS_INFINITE_STREAM = "IsInfiniteStream";
  @javax.annotation.Nullable
  private Boolean isInfiniteStream;

  public static final String JSON_PROPERTY_REQUIRES_OPENING = "RequiresOpening";
  @javax.annotation.Nullable
  private Boolean requiresOpening;

  public static final String JSON_PROPERTY_OPEN_TOKEN = "OpenToken";
  private JsonNullable<String> openToken = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REQUIRES_CLOSING = "RequiresClosing";
  @javax.annotation.Nullable
  private Boolean requiresClosing;

  public static final String JSON_PROPERTY_LIVE_STREAM_ID = "LiveStreamId";
  private JsonNullable<String> liveStreamId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BUFFER_MS = "BufferMs";
  private JsonNullable<Integer> bufferMs = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_REQUIRES_LOOPING = "RequiresLooping";
  @javax.annotation.Nullable
  private Boolean requiresLooping;

  public static final String JSON_PROPERTY_SUPPORTS_PROBING = "SupportsProbing";
  @javax.annotation.Nullable
  private Boolean supportsProbing;

  public static final String JSON_PROPERTY_VIDEO_TYPE = "VideoType";
  private JsonNullable<VideoType> videoType = JsonNullable.<VideoType>undefined();

  public static final String JSON_PROPERTY_ISO_TYPE = "IsoType";
  private JsonNullable<IsoType> isoType = JsonNullable.<IsoType>undefined();

  public static final String JSON_PROPERTY_VIDEO3_D_FORMAT = "Video3DFormat";
  private JsonNullable<Video3DFormat> video3DFormat = JsonNullable.<Video3DFormat>undefined();

  public static final String JSON_PROPERTY_MEDIA_STREAMS = "MediaStreams";
  private JsonNullable<List<MediaStream>> mediaStreams = JsonNullable.<List<MediaStream>>undefined();

  public static final String JSON_PROPERTY_MEDIA_ATTACHMENTS = "MediaAttachments";
  private JsonNullable<List<MediaAttachment>> mediaAttachments = JsonNullable.<List<MediaAttachment>>undefined();

  public static final String JSON_PROPERTY_FORMATS = "Formats";
  private JsonNullable<List<String>> formats = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_BITRATE = "Bitrate";
  private JsonNullable<Integer> bitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_TIMESTAMP = "Timestamp";
  private JsonNullable<TransportStreamTimestamp> timestamp = JsonNullable.<TransportStreamTimestamp>undefined();

  public static final String JSON_PROPERTY_REQUIRED_HTTP_HEADERS = "RequiredHttpHeaders";
  private JsonNullable<Map<String, String>> requiredHttpHeaders = JsonNullable.<Map<String, String>>undefined();

  public static final String JSON_PROPERTY_TRANSCODING_URL = "TranscodingUrl";
  private JsonNullable<String> transcodingUrl = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TRANSCODING_SUB_PROTOCOL = "TranscodingSubProtocol";
  private JsonNullable<String> transcodingSubProtocol = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TRANSCODING_CONTAINER = "TranscodingContainer";
  private JsonNullable<String> transcodingContainer = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ANALYZE_DURATION_MS = "AnalyzeDurationMs";
  private JsonNullable<Integer> analyzeDurationMs = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DEFAULT_AUDIO_STREAM_INDEX = "DefaultAudioStreamIndex";
  private JsonNullable<Integer> defaultAudioStreamIndex = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DEFAULT_SUBTITLE_STREAM_INDEX = "DefaultSubtitleStreamIndex";
  private JsonNullable<Integer> defaultSubtitleStreamIndex = JsonNullable.<Integer>undefined();

  public MediaSourceInfo() { 
  }

  public MediaSourceInfo protocol(@javax.annotation.Nullable MediaProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public MediaProtocol getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(@javax.annotation.Nullable MediaProtocol protocol) {
    this.protocol = protocol;
  }


  public MediaSourceInfo id(@javax.annotation.Nullable String id) {
    this.id = JsonNullable.<String>of(id);
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<String> id) {
    this.id = id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = JsonNullable.<String>of(id);
  }


  public MediaSourceInfo path(@javax.annotation.Nullable String path) {
    this.path = JsonNullable.<String>of(path);
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getPath() {
        return path.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPath_JsonNullable() {
    return path;
  }
  
  @JsonProperty(JSON_PROPERTY_PATH)
  public void setPath_JsonNullable(JsonNullable<String> path) {
    this.path = path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = JsonNullable.<String>of(path);
  }


  public MediaSourceInfo encoderPath(@javax.annotation.Nullable String encoderPath) {
    this.encoderPath = JsonNullable.<String>of(encoderPath);
    return this;
  }

  /**
   * Get encoderPath
   * @return encoderPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getEncoderPath() {
        return encoderPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEncoderPath_JsonNullable() {
    return encoderPath;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_PATH)
  public void setEncoderPath_JsonNullable(JsonNullable<String> encoderPath) {
    this.encoderPath = encoderPath;
  }

  public void setEncoderPath(@javax.annotation.Nullable String encoderPath) {
    this.encoderPath = JsonNullable.<String>of(encoderPath);
  }


  public MediaSourceInfo encoderProtocol(@javax.annotation.Nullable MediaProtocol encoderProtocol) {
    this.encoderProtocol = JsonNullable.<MediaProtocol>of(encoderProtocol);
    return this;
  }

  /**
   * Get encoderProtocol
   * @return encoderProtocol
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public MediaProtocol getEncoderProtocol() {
        return encoderProtocol.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MediaProtocol> getEncoderProtocol_JsonNullable() {
    return encoderProtocol;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_PROTOCOL)
  public void setEncoderProtocol_JsonNullable(JsonNullable<MediaProtocol> encoderProtocol) {
    this.encoderProtocol = encoderProtocol;
  }

  public void setEncoderProtocol(@javax.annotation.Nullable MediaProtocol encoderProtocol) {
    this.encoderProtocol = JsonNullable.<MediaProtocol>of(encoderProtocol);
  }


  public MediaSourceInfo type(@javax.annotation.Nullable MediaSourceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public MediaSourceType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable MediaSourceType type) {
    this.type = type;
  }


  public MediaSourceInfo container(@javax.annotation.Nullable String container) {
    this.container = JsonNullable.<String>of(container);
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getContainer() {
        return container.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getContainer_JsonNullable() {
    return container;
  }
  
  @JsonProperty(JSON_PROPERTY_CONTAINER)
  public void setContainer_JsonNullable(JsonNullable<String> container) {
    this.container = container;
  }

  public void setContainer(@javax.annotation.Nullable String container) {
    this.container = JsonNullable.<String>of(container);
  }


  public MediaSourceInfo size(@javax.annotation.Nullable Long size) {
    this.size = JsonNullable.<Long>of(size);
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getSize() {
        return size.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getSize_JsonNullable() {
    return size;
  }
  
  @JsonProperty(JSON_PROPERTY_SIZE)
  public void setSize_JsonNullable(JsonNullable<Long> size) {
    this.size = size;
  }

  public void setSize(@javax.annotation.Nullable Long size) {
    this.size = JsonNullable.<Long>of(size);
  }


  public MediaSourceInfo name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public MediaSourceInfo isRemote(@javax.annotation.Nullable Boolean isRemote) {
    this.isRemote = isRemote;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the media is remote.  Differentiate internet url vs local network.
   * @return isRemote
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_REMOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsRemote() {
    return isRemote;
  }


  @JsonProperty(JSON_PROPERTY_IS_REMOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsRemote(@javax.annotation.Nullable Boolean isRemote) {
    this.isRemote = isRemote;
  }


  public MediaSourceInfo etag(@javax.annotation.Nullable String etag) {
    this.etag = JsonNullable.<String>of(etag);
    return this;
  }

  /**
   * Get etag
   * @return etag
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getEtag() {
        return etag.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ETAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEtag_JsonNullable() {
    return etag;
  }
  
  @JsonProperty(JSON_PROPERTY_ETAG)
  public void setEtag_JsonNullable(JsonNullable<String> etag) {
    this.etag = etag;
  }

  public void setEtag(@javax.annotation.Nullable String etag) {
    this.etag = JsonNullable.<String>of(etag);
  }


  public MediaSourceInfo runTimeTicks(@javax.annotation.Nullable Long runTimeTicks) {
    this.runTimeTicks = JsonNullable.<Long>of(runTimeTicks);
    return this;
  }

  /**
   * Get runTimeTicks
   * @return runTimeTicks
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getRunTimeTicks() {
        return runTimeTicks.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RUN_TIME_TICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getRunTimeTicks_JsonNullable() {
    return runTimeTicks;
  }
  
  @JsonProperty(JSON_PROPERTY_RUN_TIME_TICKS)
  public void setRunTimeTicks_JsonNullable(JsonNullable<Long> runTimeTicks) {
    this.runTimeTicks = runTimeTicks;
  }

  public void setRunTimeTicks(@javax.annotation.Nullable Long runTimeTicks) {
    this.runTimeTicks = JsonNullable.<Long>of(runTimeTicks);
  }


  public MediaSourceInfo readAtNativeFramerate(@javax.annotation.Nullable Boolean readAtNativeFramerate) {
    this.readAtNativeFramerate = readAtNativeFramerate;
    return this;
  }

  /**
   * Get readAtNativeFramerate
   * @return readAtNativeFramerate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_READ_AT_NATIVE_FRAMERATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getReadAtNativeFramerate() {
    return readAtNativeFramerate;
  }


  @JsonProperty(JSON_PROPERTY_READ_AT_NATIVE_FRAMERATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadAtNativeFramerate(@javax.annotation.Nullable Boolean readAtNativeFramerate) {
    this.readAtNativeFramerate = readAtNativeFramerate;
  }


  public MediaSourceInfo ignoreDts(@javax.annotation.Nullable Boolean ignoreDts) {
    this.ignoreDts = ignoreDts;
    return this;
  }

  /**
   * Get ignoreDts
   * @return ignoreDts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_DTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIgnoreDts() {
    return ignoreDts;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_DTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreDts(@javax.annotation.Nullable Boolean ignoreDts) {
    this.ignoreDts = ignoreDts;
  }


  public MediaSourceInfo ignoreIndex(@javax.annotation.Nullable Boolean ignoreIndex) {
    this.ignoreIndex = ignoreIndex;
    return this;
  }

  /**
   * Get ignoreIndex
   * @return ignoreIndex
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIgnoreIndex() {
    return ignoreIndex;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreIndex(@javax.annotation.Nullable Boolean ignoreIndex) {
    this.ignoreIndex = ignoreIndex;
  }


  public MediaSourceInfo genPtsInput(@javax.annotation.Nullable Boolean genPtsInput) {
    this.genPtsInput = genPtsInput;
    return this;
  }

  /**
   * Get genPtsInput
   * @return genPtsInput
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEN_PTS_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getGenPtsInput() {
    return genPtsInput;
  }


  @JsonProperty(JSON_PROPERTY_GEN_PTS_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGenPtsInput(@javax.annotation.Nullable Boolean genPtsInput) {
    this.genPtsInput = genPtsInput;
  }


  public MediaSourceInfo supportsTranscoding(@javax.annotation.Nullable Boolean supportsTranscoding) {
    this.supportsTranscoding = supportsTranscoding;
    return this;
  }

  /**
   * Get supportsTranscoding
   * @return supportsTranscoding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTS_TRANSCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSupportsTranscoding() {
    return supportsTranscoding;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTS_TRANSCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportsTranscoding(@javax.annotation.Nullable Boolean supportsTranscoding) {
    this.supportsTranscoding = supportsTranscoding;
  }


  public MediaSourceInfo supportsDirectStream(@javax.annotation.Nullable Boolean supportsDirectStream) {
    this.supportsDirectStream = supportsDirectStream;
    return this;
  }

  /**
   * Get supportsDirectStream
   * @return supportsDirectStream
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTS_DIRECT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSupportsDirectStream() {
    return supportsDirectStream;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTS_DIRECT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportsDirectStream(@javax.annotation.Nullable Boolean supportsDirectStream) {
    this.supportsDirectStream = supportsDirectStream;
  }


  public MediaSourceInfo supportsDirectPlay(@javax.annotation.Nullable Boolean supportsDirectPlay) {
    this.supportsDirectPlay = supportsDirectPlay;
    return this;
  }

  /**
   * Get supportsDirectPlay
   * @return supportsDirectPlay
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTS_DIRECT_PLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSupportsDirectPlay() {
    return supportsDirectPlay;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTS_DIRECT_PLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportsDirectPlay(@javax.annotation.Nullable Boolean supportsDirectPlay) {
    this.supportsDirectPlay = supportsDirectPlay;
  }


  public MediaSourceInfo isInfiniteStream(@javax.annotation.Nullable Boolean isInfiniteStream) {
    this.isInfiniteStream = isInfiniteStream;
    return this;
  }

  /**
   * Get isInfiniteStream
   * @return isInfiniteStream
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_INFINITE_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsInfiniteStream() {
    return isInfiniteStream;
  }


  @JsonProperty(JSON_PROPERTY_IS_INFINITE_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsInfiniteStream(@javax.annotation.Nullable Boolean isInfiniteStream) {
    this.isInfiniteStream = isInfiniteStream;
  }


  public MediaSourceInfo requiresOpening(@javax.annotation.Nullable Boolean requiresOpening) {
    this.requiresOpening = requiresOpening;
    return this;
  }

  /**
   * Get requiresOpening
   * @return requiresOpening
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_OPENING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequiresOpening() {
    return requiresOpening;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_OPENING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresOpening(@javax.annotation.Nullable Boolean requiresOpening) {
    this.requiresOpening = requiresOpening;
  }


  public MediaSourceInfo openToken(@javax.annotation.Nullable String openToken) {
    this.openToken = JsonNullable.<String>of(openToken);
    return this;
  }

  /**
   * Get openToken
   * @return openToken
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getOpenToken() {
        return openToken.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OPEN_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOpenToken_JsonNullable() {
    return openToken;
  }
  
  @JsonProperty(JSON_PROPERTY_OPEN_TOKEN)
  public void setOpenToken_JsonNullable(JsonNullable<String> openToken) {
    this.openToken = openToken;
  }

  public void setOpenToken(@javax.annotation.Nullable String openToken) {
    this.openToken = JsonNullable.<String>of(openToken);
  }


  public MediaSourceInfo requiresClosing(@javax.annotation.Nullable Boolean requiresClosing) {
    this.requiresClosing = requiresClosing;
    return this;
  }

  /**
   * Get requiresClosing
   * @return requiresClosing
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_CLOSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequiresClosing() {
    return requiresClosing;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_CLOSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresClosing(@javax.annotation.Nullable Boolean requiresClosing) {
    this.requiresClosing = requiresClosing;
  }


  public MediaSourceInfo liveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = JsonNullable.<String>of(liveStreamId);
    return this;
  }

  /**
   * Get liveStreamId
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getLiveStreamId() {
        return liveStreamId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LIVE_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getLiveStreamId_JsonNullable() {
    return liveStreamId;
  }
  
  @JsonProperty(JSON_PROPERTY_LIVE_STREAM_ID)
  public void setLiveStreamId_JsonNullable(JsonNullable<String> liveStreamId) {
    this.liveStreamId = liveStreamId;
  }

  public void setLiveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = JsonNullable.<String>of(liveStreamId);
  }


  public MediaSourceInfo bufferMs(@javax.annotation.Nullable Integer bufferMs) {
    this.bufferMs = JsonNullable.<Integer>of(bufferMs);
    return this;
  }

  /**
   * Get bufferMs
   * @return bufferMs
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getBufferMs() {
        return bufferMs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BUFFER_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getBufferMs_JsonNullable() {
    return bufferMs;
  }
  
  @JsonProperty(JSON_PROPERTY_BUFFER_MS)
  public void setBufferMs_JsonNullable(JsonNullable<Integer> bufferMs) {
    this.bufferMs = bufferMs;
  }

  public void setBufferMs(@javax.annotation.Nullable Integer bufferMs) {
    this.bufferMs = JsonNullable.<Integer>of(bufferMs);
  }


  public MediaSourceInfo requiresLooping(@javax.annotation.Nullable Boolean requiresLooping) {
    this.requiresLooping = requiresLooping;
    return this;
  }

  /**
   * Get requiresLooping
   * @return requiresLooping
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_LOOPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequiresLooping() {
    return requiresLooping;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_LOOPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresLooping(@javax.annotation.Nullable Boolean requiresLooping) {
    this.requiresLooping = requiresLooping;
  }


  public MediaSourceInfo supportsProbing(@javax.annotation.Nullable Boolean supportsProbing) {
    this.supportsProbing = supportsProbing;
    return this;
  }

  /**
   * Get supportsProbing
   * @return supportsProbing
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTS_PROBING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSupportsProbing() {
    return supportsProbing;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTS_PROBING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportsProbing(@javax.annotation.Nullable Boolean supportsProbing) {
    this.supportsProbing = supportsProbing;
  }


  public MediaSourceInfo videoType(@javax.annotation.Nullable VideoType videoType) {
    this.videoType = JsonNullable.<VideoType>of(videoType);
    return this;
  }

  /**
   * Get videoType
   * @return videoType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public VideoType getVideoType() {
        return videoType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VIDEO_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<VideoType> getVideoType_JsonNullable() {
    return videoType;
  }
  
  @JsonProperty(JSON_PROPERTY_VIDEO_TYPE)
  public void setVideoType_JsonNullable(JsonNullable<VideoType> videoType) {
    this.videoType = videoType;
  }

  public void setVideoType(@javax.annotation.Nullable VideoType videoType) {
    this.videoType = JsonNullable.<VideoType>of(videoType);
  }


  public MediaSourceInfo isoType(@javax.annotation.Nullable IsoType isoType) {
    this.isoType = JsonNullable.<IsoType>of(isoType);
    return this;
  }

  /**
   * Get isoType
   * @return isoType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public IsoType getIsoType() {
        return isoType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ISO_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<IsoType> getIsoType_JsonNullable() {
    return isoType;
  }
  
  @JsonProperty(JSON_PROPERTY_ISO_TYPE)
  public void setIsoType_JsonNullable(JsonNullable<IsoType> isoType) {
    this.isoType = isoType;
  }

  public void setIsoType(@javax.annotation.Nullable IsoType isoType) {
    this.isoType = JsonNullable.<IsoType>of(isoType);
  }


  public MediaSourceInfo video3DFormat(@javax.annotation.Nullable Video3DFormat video3DFormat) {
    this.video3DFormat = JsonNullable.<Video3DFormat>of(video3DFormat);
    return this;
  }

  /**
   * Get video3DFormat
   * @return video3DFormat
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Video3DFormat getVideo3DFormat() {
        return video3DFormat.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VIDEO3_D_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Video3DFormat> getVideo3DFormat_JsonNullable() {
    return video3DFormat;
  }
  
  @JsonProperty(JSON_PROPERTY_VIDEO3_D_FORMAT)
  public void setVideo3DFormat_JsonNullable(JsonNullable<Video3DFormat> video3DFormat) {
    this.video3DFormat = video3DFormat;
  }

  public void setVideo3DFormat(@javax.annotation.Nullable Video3DFormat video3DFormat) {
    this.video3DFormat = JsonNullable.<Video3DFormat>of(video3DFormat);
  }


  public MediaSourceInfo mediaStreams(@javax.annotation.Nullable List<MediaStream> mediaStreams) {
    this.mediaStreams = JsonNullable.<List<MediaStream>>of(mediaStreams);
    return this;
  }

  public MediaSourceInfo addMediaStreamsItem(MediaStream mediaStreamsItem) {
    if (this.mediaStreams == null || !this.mediaStreams.isPresent()) {
      this.mediaStreams = JsonNullable.<List<MediaStream>>of(new ArrayList<>());
    }
    try {
      this.mediaStreams.get().add(mediaStreamsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get mediaStreams
   * @return mediaStreams
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<MediaStream> getMediaStreams() {
        return mediaStreams.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEDIA_STREAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<MediaStream>> getMediaStreams_JsonNullable() {
    return mediaStreams;
  }
  
  @JsonProperty(JSON_PROPERTY_MEDIA_STREAMS)
  public void setMediaStreams_JsonNullable(JsonNullable<List<MediaStream>> mediaStreams) {
    this.mediaStreams = mediaStreams;
  }

  public void setMediaStreams(@javax.annotation.Nullable List<MediaStream> mediaStreams) {
    this.mediaStreams = JsonNullable.<List<MediaStream>>of(mediaStreams);
  }


  public MediaSourceInfo mediaAttachments(@javax.annotation.Nullable List<MediaAttachment> mediaAttachments) {
    this.mediaAttachments = JsonNullable.<List<MediaAttachment>>of(mediaAttachments);
    return this;
  }

  public MediaSourceInfo addMediaAttachmentsItem(MediaAttachment mediaAttachmentsItem) {
    if (this.mediaAttachments == null || !this.mediaAttachments.isPresent()) {
      this.mediaAttachments = JsonNullable.<List<MediaAttachment>>of(new ArrayList<>());
    }
    try {
      this.mediaAttachments.get().add(mediaAttachmentsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get mediaAttachments
   * @return mediaAttachments
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<MediaAttachment> getMediaAttachments() {
        return mediaAttachments.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEDIA_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<MediaAttachment>> getMediaAttachments_JsonNullable() {
    return mediaAttachments;
  }
  
  @JsonProperty(JSON_PROPERTY_MEDIA_ATTACHMENTS)
  public void setMediaAttachments_JsonNullable(JsonNullable<List<MediaAttachment>> mediaAttachments) {
    this.mediaAttachments = mediaAttachments;
  }

  public void setMediaAttachments(@javax.annotation.Nullable List<MediaAttachment> mediaAttachments) {
    this.mediaAttachments = JsonNullable.<List<MediaAttachment>>of(mediaAttachments);
  }


  public MediaSourceInfo formats(@javax.annotation.Nullable List<String> formats) {
    this.formats = JsonNullable.<List<String>>of(formats);
    return this;
  }

  public MediaSourceInfo addFormatsItem(String formatsItem) {
    if (this.formats == null || !this.formats.isPresent()) {
      this.formats = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.formats.get().add(formatsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get formats
   * @return formats
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getFormats() {
        return formats.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FORMATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getFormats_JsonNullable() {
    return formats;
  }
  
  @JsonProperty(JSON_PROPERTY_FORMATS)
  public void setFormats_JsonNullable(JsonNullable<List<String>> formats) {
    this.formats = formats;
  }

  public void setFormats(@javax.annotation.Nullable List<String> formats) {
    this.formats = JsonNullable.<List<String>>of(formats);
  }


  public MediaSourceInfo bitrate(@javax.annotation.Nullable Integer bitrate) {
    this.bitrate = JsonNullable.<Integer>of(bitrate);
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getBitrate() {
        return bitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getBitrate_JsonNullable() {
    return bitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_BITRATE)
  public void setBitrate_JsonNullable(JsonNullable<Integer> bitrate) {
    this.bitrate = bitrate;
  }

  public void setBitrate(@javax.annotation.Nullable Integer bitrate) {
    this.bitrate = JsonNullable.<Integer>of(bitrate);
  }


  public MediaSourceInfo timestamp(@javax.annotation.Nullable TransportStreamTimestamp timestamp) {
    this.timestamp = JsonNullable.<TransportStreamTimestamp>of(timestamp);
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public TransportStreamTimestamp getTimestamp() {
        return timestamp.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<TransportStreamTimestamp> getTimestamp_JsonNullable() {
    return timestamp;
  }
  
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  public void setTimestamp_JsonNullable(JsonNullable<TransportStreamTimestamp> timestamp) {
    this.timestamp = timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable TransportStreamTimestamp timestamp) {
    this.timestamp = JsonNullable.<TransportStreamTimestamp>of(timestamp);
  }


  public MediaSourceInfo requiredHttpHeaders(@javax.annotation.Nullable Map<String, String> requiredHttpHeaders) {
    this.requiredHttpHeaders = JsonNullable.<Map<String, String>>of(requiredHttpHeaders);
    return this;
  }

  public MediaSourceInfo putRequiredHttpHeadersItem(String key, String requiredHttpHeadersItem) {
    if (this.requiredHttpHeaders == null || !this.requiredHttpHeaders.isPresent()) {
      this.requiredHttpHeaders = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.requiredHttpHeaders.get().put(key, requiredHttpHeadersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get requiredHttpHeaders
   * @return requiredHttpHeaders
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Map<String, String> getRequiredHttpHeaders() {
        return requiredHttpHeaders.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REQUIRED_HTTP_HEADERS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getRequiredHttpHeaders_JsonNullable() {
    return requiredHttpHeaders;
  }
  
  @JsonProperty(JSON_PROPERTY_REQUIRED_HTTP_HEADERS)
  public void setRequiredHttpHeaders_JsonNullable(JsonNullable<Map<String, String>> requiredHttpHeaders) {
    this.requiredHttpHeaders = requiredHttpHeaders;
  }

  public void setRequiredHttpHeaders(@javax.annotation.Nullable Map<String, String> requiredHttpHeaders) {
    this.requiredHttpHeaders = JsonNullable.<Map<String, String>>of(requiredHttpHeaders);
  }


  public MediaSourceInfo transcodingUrl(@javax.annotation.Nullable String transcodingUrl) {
    this.transcodingUrl = JsonNullable.<String>of(transcodingUrl);
    return this;
  }

  /**
   * Get transcodingUrl
   * @return transcodingUrl
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTranscodingUrl() {
        return transcodingUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSCODING_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTranscodingUrl_JsonNullable() {
    return transcodingUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSCODING_URL)
  public void setTranscodingUrl_JsonNullable(JsonNullable<String> transcodingUrl) {
    this.transcodingUrl = transcodingUrl;
  }

  public void setTranscodingUrl(@javax.annotation.Nullable String transcodingUrl) {
    this.transcodingUrl = JsonNullable.<String>of(transcodingUrl);
  }


  public MediaSourceInfo transcodingSubProtocol(@javax.annotation.Nullable String transcodingSubProtocol) {
    this.transcodingSubProtocol = JsonNullable.<String>of(transcodingSubProtocol);
    return this;
  }

  /**
   * Get transcodingSubProtocol
   * @return transcodingSubProtocol
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTranscodingSubProtocol() {
        return transcodingSubProtocol.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSCODING_SUB_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTranscodingSubProtocol_JsonNullable() {
    return transcodingSubProtocol;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSCODING_SUB_PROTOCOL)
  public void setTranscodingSubProtocol_JsonNullable(JsonNullable<String> transcodingSubProtocol) {
    this.transcodingSubProtocol = transcodingSubProtocol;
  }

  public void setTranscodingSubProtocol(@javax.annotation.Nullable String transcodingSubProtocol) {
    this.transcodingSubProtocol = JsonNullable.<String>of(transcodingSubProtocol);
  }


  public MediaSourceInfo transcodingContainer(@javax.annotation.Nullable String transcodingContainer) {
    this.transcodingContainer = JsonNullable.<String>of(transcodingContainer);
    return this;
  }

  /**
   * Get transcodingContainer
   * @return transcodingContainer
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTranscodingContainer() {
        return transcodingContainer.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSCODING_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTranscodingContainer_JsonNullable() {
    return transcodingContainer;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSCODING_CONTAINER)
  public void setTranscodingContainer_JsonNullable(JsonNullable<String> transcodingContainer) {
    this.transcodingContainer = transcodingContainer;
  }

  public void setTranscodingContainer(@javax.annotation.Nullable String transcodingContainer) {
    this.transcodingContainer = JsonNullable.<String>of(transcodingContainer);
  }


  public MediaSourceInfo analyzeDurationMs(@javax.annotation.Nullable Integer analyzeDurationMs) {
    this.analyzeDurationMs = JsonNullable.<Integer>of(analyzeDurationMs);
    return this;
  }

  /**
   * Get analyzeDurationMs
   * @return analyzeDurationMs
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getAnalyzeDurationMs() {
        return analyzeDurationMs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ANALYZE_DURATION_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAnalyzeDurationMs_JsonNullable() {
    return analyzeDurationMs;
  }
  
  @JsonProperty(JSON_PROPERTY_ANALYZE_DURATION_MS)
  public void setAnalyzeDurationMs_JsonNullable(JsonNullable<Integer> analyzeDurationMs) {
    this.analyzeDurationMs = analyzeDurationMs;
  }

  public void setAnalyzeDurationMs(@javax.annotation.Nullable Integer analyzeDurationMs) {
    this.analyzeDurationMs = JsonNullable.<Integer>of(analyzeDurationMs);
  }


  public MediaSourceInfo defaultAudioStreamIndex(@javax.annotation.Nullable Integer defaultAudioStreamIndex) {
    this.defaultAudioStreamIndex = JsonNullable.<Integer>of(defaultAudioStreamIndex);
    return this;
  }

  /**
   * Get defaultAudioStreamIndex
   * @return defaultAudioStreamIndex
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getDefaultAudioStreamIndex() {
        return defaultAudioStreamIndex.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEFAULT_AUDIO_STREAM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getDefaultAudioStreamIndex_JsonNullable() {
    return defaultAudioStreamIndex;
  }
  
  @JsonProperty(JSON_PROPERTY_DEFAULT_AUDIO_STREAM_INDEX)
  public void setDefaultAudioStreamIndex_JsonNullable(JsonNullable<Integer> defaultAudioStreamIndex) {
    this.defaultAudioStreamIndex = defaultAudioStreamIndex;
  }

  public void setDefaultAudioStreamIndex(@javax.annotation.Nullable Integer defaultAudioStreamIndex) {
    this.defaultAudioStreamIndex = JsonNullable.<Integer>of(defaultAudioStreamIndex);
  }


  public MediaSourceInfo defaultSubtitleStreamIndex(@javax.annotation.Nullable Integer defaultSubtitleStreamIndex) {
    this.defaultSubtitleStreamIndex = JsonNullable.<Integer>of(defaultSubtitleStreamIndex);
    return this;
  }

  /**
   * Get defaultSubtitleStreamIndex
   * @return defaultSubtitleStreamIndex
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getDefaultSubtitleStreamIndex() {
        return defaultSubtitleStreamIndex.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEFAULT_SUBTITLE_STREAM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getDefaultSubtitleStreamIndex_JsonNullable() {
    return defaultSubtitleStreamIndex;
  }
  
  @JsonProperty(JSON_PROPERTY_DEFAULT_SUBTITLE_STREAM_INDEX)
  public void setDefaultSubtitleStreamIndex_JsonNullable(JsonNullable<Integer> defaultSubtitleStreamIndex) {
    this.defaultSubtitleStreamIndex = defaultSubtitleStreamIndex;
  }

  public void setDefaultSubtitleStreamIndex(@javax.annotation.Nullable Integer defaultSubtitleStreamIndex) {
    this.defaultSubtitleStreamIndex = JsonNullable.<Integer>of(defaultSubtitleStreamIndex);
  }


  /**
   * Return true if this MediaSourceInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaSourceInfo mediaSourceInfo = (MediaSourceInfo) o;
    return Objects.equals(this.protocol, mediaSourceInfo.protocol) &&
        equalsNullable(this.id, mediaSourceInfo.id) &&
        equalsNullable(this.path, mediaSourceInfo.path) &&
        equalsNullable(this.encoderPath, mediaSourceInfo.encoderPath) &&
        equalsNullable(this.encoderProtocol, mediaSourceInfo.encoderProtocol) &&
        Objects.equals(this.type, mediaSourceInfo.type) &&
        equalsNullable(this.container, mediaSourceInfo.container) &&
        equalsNullable(this.size, mediaSourceInfo.size) &&
        equalsNullable(this.name, mediaSourceInfo.name) &&
        Objects.equals(this.isRemote, mediaSourceInfo.isRemote) &&
        equalsNullable(this.etag, mediaSourceInfo.etag) &&
        equalsNullable(this.runTimeTicks, mediaSourceInfo.runTimeTicks) &&
        Objects.equals(this.readAtNativeFramerate, mediaSourceInfo.readAtNativeFramerate) &&
        Objects.equals(this.ignoreDts, mediaSourceInfo.ignoreDts) &&
        Objects.equals(this.ignoreIndex, mediaSourceInfo.ignoreIndex) &&
        Objects.equals(this.genPtsInput, mediaSourceInfo.genPtsInput) &&
        Objects.equals(this.supportsTranscoding, mediaSourceInfo.supportsTranscoding) &&
        Objects.equals(this.supportsDirectStream, mediaSourceInfo.supportsDirectStream) &&
        Objects.equals(this.supportsDirectPlay, mediaSourceInfo.supportsDirectPlay) &&
        Objects.equals(this.isInfiniteStream, mediaSourceInfo.isInfiniteStream) &&
        Objects.equals(this.requiresOpening, mediaSourceInfo.requiresOpening) &&
        equalsNullable(this.openToken, mediaSourceInfo.openToken) &&
        Objects.equals(this.requiresClosing, mediaSourceInfo.requiresClosing) &&
        equalsNullable(this.liveStreamId, mediaSourceInfo.liveStreamId) &&
        equalsNullable(this.bufferMs, mediaSourceInfo.bufferMs) &&
        Objects.equals(this.requiresLooping, mediaSourceInfo.requiresLooping) &&
        Objects.equals(this.supportsProbing, mediaSourceInfo.supportsProbing) &&
        equalsNullable(this.videoType, mediaSourceInfo.videoType) &&
        equalsNullable(this.isoType, mediaSourceInfo.isoType) &&
        equalsNullable(this.video3DFormat, mediaSourceInfo.video3DFormat) &&
        equalsNullable(this.mediaStreams, mediaSourceInfo.mediaStreams) &&
        equalsNullable(this.mediaAttachments, mediaSourceInfo.mediaAttachments) &&
        equalsNullable(this.formats, mediaSourceInfo.formats) &&
        equalsNullable(this.bitrate, mediaSourceInfo.bitrate) &&
        equalsNullable(this.timestamp, mediaSourceInfo.timestamp) &&
        equalsNullable(this.requiredHttpHeaders, mediaSourceInfo.requiredHttpHeaders) &&
        equalsNullable(this.transcodingUrl, mediaSourceInfo.transcodingUrl) &&
        equalsNullable(this.transcodingSubProtocol, mediaSourceInfo.transcodingSubProtocol) &&
        equalsNullable(this.transcodingContainer, mediaSourceInfo.transcodingContainer) &&
        equalsNullable(this.analyzeDurationMs, mediaSourceInfo.analyzeDurationMs) &&
        equalsNullable(this.defaultAudioStreamIndex, mediaSourceInfo.defaultAudioStreamIndex) &&
        equalsNullable(this.defaultSubtitleStreamIndex, mediaSourceInfo.defaultSubtitleStreamIndex);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocol, hashCodeNullable(id), hashCodeNullable(path), hashCodeNullable(encoderPath), hashCodeNullable(encoderProtocol), type, hashCodeNullable(container), hashCodeNullable(size), hashCodeNullable(name), isRemote, hashCodeNullable(etag), hashCodeNullable(runTimeTicks), readAtNativeFramerate, ignoreDts, ignoreIndex, genPtsInput, supportsTranscoding, supportsDirectStream, supportsDirectPlay, isInfiniteStream, requiresOpening, hashCodeNullable(openToken), requiresClosing, hashCodeNullable(liveStreamId), hashCodeNullable(bufferMs), requiresLooping, supportsProbing, hashCodeNullable(videoType), hashCodeNullable(isoType), hashCodeNullable(video3DFormat), hashCodeNullable(mediaStreams), hashCodeNullable(mediaAttachments), hashCodeNullable(formats), hashCodeNullable(bitrate), hashCodeNullable(timestamp), hashCodeNullable(requiredHttpHeaders), hashCodeNullable(transcodingUrl), hashCodeNullable(transcodingSubProtocol), hashCodeNullable(transcodingContainer), hashCodeNullable(analyzeDurationMs), hashCodeNullable(defaultAudioStreamIndex), hashCodeNullable(defaultSubtitleStreamIndex));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaSourceInfo {\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    encoderPath: ").append(toIndentedString(encoderPath)).append("\n");
    sb.append("    encoderProtocol: ").append(toIndentedString(encoderProtocol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isRemote: ").append(toIndentedString(isRemote)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    runTimeTicks: ").append(toIndentedString(runTimeTicks)).append("\n");
    sb.append("    readAtNativeFramerate: ").append(toIndentedString(readAtNativeFramerate)).append("\n");
    sb.append("    ignoreDts: ").append(toIndentedString(ignoreDts)).append("\n");
    sb.append("    ignoreIndex: ").append(toIndentedString(ignoreIndex)).append("\n");
    sb.append("    genPtsInput: ").append(toIndentedString(genPtsInput)).append("\n");
    sb.append("    supportsTranscoding: ").append(toIndentedString(supportsTranscoding)).append("\n");
    sb.append("    supportsDirectStream: ").append(toIndentedString(supportsDirectStream)).append("\n");
    sb.append("    supportsDirectPlay: ").append(toIndentedString(supportsDirectPlay)).append("\n");
    sb.append("    isInfiniteStream: ").append(toIndentedString(isInfiniteStream)).append("\n");
    sb.append("    requiresOpening: ").append(toIndentedString(requiresOpening)).append("\n");
    sb.append("    openToken: ").append(toIndentedString(openToken)).append("\n");
    sb.append("    requiresClosing: ").append(toIndentedString(requiresClosing)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    bufferMs: ").append(toIndentedString(bufferMs)).append("\n");
    sb.append("    requiresLooping: ").append(toIndentedString(requiresLooping)).append("\n");
    sb.append("    supportsProbing: ").append(toIndentedString(supportsProbing)).append("\n");
    sb.append("    videoType: ").append(toIndentedString(videoType)).append("\n");
    sb.append("    isoType: ").append(toIndentedString(isoType)).append("\n");
    sb.append("    video3DFormat: ").append(toIndentedString(video3DFormat)).append("\n");
    sb.append("    mediaStreams: ").append(toIndentedString(mediaStreams)).append("\n");
    sb.append("    mediaAttachments: ").append(toIndentedString(mediaAttachments)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    requiredHttpHeaders: ").append(toIndentedString(requiredHttpHeaders)).append("\n");
    sb.append("    transcodingUrl: ").append(toIndentedString(transcodingUrl)).append("\n");
    sb.append("    transcodingSubProtocol: ").append(toIndentedString(transcodingSubProtocol)).append("\n");
    sb.append("    transcodingContainer: ").append(toIndentedString(transcodingContainer)).append("\n");
    sb.append("    analyzeDurationMs: ").append(toIndentedString(analyzeDurationMs)).append("\n");
    sb.append("    defaultAudioStreamIndex: ").append(toIndentedString(defaultAudioStreamIndex)).append("\n");
    sb.append("    defaultSubtitleStreamIndex: ").append(toIndentedString(defaultSubtitleStreamIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Protocol` to the URL query string
    if (getProtocol() != null) {
      joiner.add(String.format("%sProtocol%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getProtocol()))));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `Path` to the URL query string
    if (getPath() != null) {
      joiner.add(String.format("%sPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPath()))));
    }

    // add `EncoderPath` to the URL query string
    if (getEncoderPath() != null) {
      joiner.add(String.format("%sEncoderPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderPath()))));
    }

    // add `EncoderProtocol` to the URL query string
    if (getEncoderProtocol() != null) {
      joiner.add(String.format("%sEncoderProtocol%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderProtocol()))));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `Container` to the URL query string
    if (getContainer() != null) {
      joiner.add(String.format("%sContainer%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContainer()))));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(String.format("%sSize%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSize()))));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `IsRemote` to the URL query string
    if (getIsRemote() != null) {
      joiner.add(String.format("%sIsRemote%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsRemote()))));
    }

    // add `ETag` to the URL query string
    if (getEtag() != null) {
      joiner.add(String.format("%sETag%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEtag()))));
    }

    // add `RunTimeTicks` to the URL query string
    if (getRunTimeTicks() != null) {
      joiner.add(String.format("%sRunTimeTicks%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRunTimeTicks()))));
    }

    // add `ReadAtNativeFramerate` to the URL query string
    if (getReadAtNativeFramerate() != null) {
      joiner.add(String.format("%sReadAtNativeFramerate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getReadAtNativeFramerate()))));
    }

    // add `IgnoreDts` to the URL query string
    if (getIgnoreDts() != null) {
      joiner.add(String.format("%sIgnoreDts%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIgnoreDts()))));
    }

    // add `IgnoreIndex` to the URL query string
    if (getIgnoreIndex() != null) {
      joiner.add(String.format("%sIgnoreIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIgnoreIndex()))));
    }

    // add `GenPtsInput` to the URL query string
    if (getGenPtsInput() != null) {
      joiner.add(String.format("%sGenPtsInput%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGenPtsInput()))));
    }

    // add `SupportsTranscoding` to the URL query string
    if (getSupportsTranscoding() != null) {
      joiner.add(String.format("%sSupportsTranscoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSupportsTranscoding()))));
    }

    // add `SupportsDirectStream` to the URL query string
    if (getSupportsDirectStream() != null) {
      joiner.add(String.format("%sSupportsDirectStream%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSupportsDirectStream()))));
    }

    // add `SupportsDirectPlay` to the URL query string
    if (getSupportsDirectPlay() != null) {
      joiner.add(String.format("%sSupportsDirectPlay%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSupportsDirectPlay()))));
    }

    // add `IsInfiniteStream` to the URL query string
    if (getIsInfiniteStream() != null) {
      joiner.add(String.format("%sIsInfiniteStream%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsInfiniteStream()))));
    }

    // add `RequiresOpening` to the URL query string
    if (getRequiresOpening() != null) {
      joiner.add(String.format("%sRequiresOpening%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequiresOpening()))));
    }

    // add `OpenToken` to the URL query string
    if (getOpenToken() != null) {
      joiner.add(String.format("%sOpenToken%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOpenToken()))));
    }

    // add `RequiresClosing` to the URL query string
    if (getRequiresClosing() != null) {
      joiner.add(String.format("%sRequiresClosing%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequiresClosing()))));
    }

    // add `LiveStreamId` to the URL query string
    if (getLiveStreamId() != null) {
      joiner.add(String.format("%sLiveStreamId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLiveStreamId()))));
    }

    // add `BufferMs` to the URL query string
    if (getBufferMs() != null) {
      joiner.add(String.format("%sBufferMs%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBufferMs()))));
    }

    // add `RequiresLooping` to the URL query string
    if (getRequiresLooping() != null) {
      joiner.add(String.format("%sRequiresLooping%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequiresLooping()))));
    }

    // add `SupportsProbing` to the URL query string
    if (getSupportsProbing() != null) {
      joiner.add(String.format("%sSupportsProbing%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSupportsProbing()))));
    }

    // add `VideoType` to the URL query string
    if (getVideoType() != null) {
      joiner.add(String.format("%sVideoType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVideoType()))));
    }

    // add `IsoType` to the URL query string
    if (getIsoType() != null) {
      joiner.add(String.format("%sIsoType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsoType()))));
    }

    // add `Video3DFormat` to the URL query string
    if (getVideo3DFormat() != null) {
      joiner.add(String.format("%sVideo3DFormat%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVideo3DFormat()))));
    }

    // add `MediaStreams` to the URL query string
    if (getMediaStreams() != null) {
      for (int i = 0; i < getMediaStreams().size(); i++) {
        if (getMediaStreams().get(i) != null) {
          joiner.add(getMediaStreams().get(i).toUrlQueryString(String.format("%sMediaStreams%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `MediaAttachments` to the URL query string
    if (getMediaAttachments() != null) {
      for (int i = 0; i < getMediaAttachments().size(); i++) {
        if (getMediaAttachments().get(i) != null) {
          joiner.add(getMediaAttachments().get(i).toUrlQueryString(String.format("%sMediaAttachments%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Formats` to the URL query string
    if (getFormats() != null) {
      for (int i = 0; i < getFormats().size(); i++) {
        joiner.add(String.format("%sFormats%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getFormats().get(i)))));
      }
    }

    // add `Bitrate` to the URL query string
    if (getBitrate() != null) {
      joiner.add(String.format("%sBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBitrate()))));
    }

    // add `Timestamp` to the URL query string
    if (getTimestamp() != null) {
      joiner.add(String.format("%sTimestamp%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTimestamp()))));
    }

    // add `RequiredHttpHeaders` to the URL query string
    if (getRequiredHttpHeaders() != null) {
      for (String _key : getRequiredHttpHeaders().keySet()) {
        joiner.add(String.format("%sRequiredHttpHeaders%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getRequiredHttpHeaders().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getRequiredHttpHeaders().get(_key)))));
      }
    }

    // add `TranscodingUrl` to the URL query string
    if (getTranscodingUrl() != null) {
      joiner.add(String.format("%sTranscodingUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTranscodingUrl()))));
    }

    // add `TranscodingSubProtocol` to the URL query string
    if (getTranscodingSubProtocol() != null) {
      joiner.add(String.format("%sTranscodingSubProtocol%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTranscodingSubProtocol()))));
    }

    // add `TranscodingContainer` to the URL query string
    if (getTranscodingContainer() != null) {
      joiner.add(String.format("%sTranscodingContainer%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTranscodingContainer()))));
    }

    // add `AnalyzeDurationMs` to the URL query string
    if (getAnalyzeDurationMs() != null) {
      joiner.add(String.format("%sAnalyzeDurationMs%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAnalyzeDurationMs()))));
    }

    // add `DefaultAudioStreamIndex` to the URL query string
    if (getDefaultAudioStreamIndex() != null) {
      joiner.add(String.format("%sDefaultAudioStreamIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDefaultAudioStreamIndex()))));
    }

    // add `DefaultSubtitleStreamIndex` to the URL query string
    if (getDefaultSubtitleStreamIndex() != null) {
      joiner.add(String.format("%sDefaultSubtitleStreamIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDefaultSubtitleStreamIndex()))));
    }

    return joiner.toString();
  }
}

