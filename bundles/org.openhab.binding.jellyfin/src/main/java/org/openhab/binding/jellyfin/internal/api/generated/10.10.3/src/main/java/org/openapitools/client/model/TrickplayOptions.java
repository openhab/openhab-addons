/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProcessPriorityClass;
import org.openapitools.client.model.TrickplayScanBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class TrickplayOptions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class TrickplayOptions {
  public static final String SERIALIZED_NAME_ENABLE_HW_ACCELERATION = "EnableHwAcceleration";
  @SerializedName(SERIALIZED_NAME_ENABLE_HW_ACCELERATION)
  @javax.annotation.Nullable
  private Boolean enableHwAcceleration;

  public static final String SERIALIZED_NAME_ENABLE_HW_ENCODING = "EnableHwEncoding";
  @SerializedName(SERIALIZED_NAME_ENABLE_HW_ENCODING)
  @javax.annotation.Nullable
  private Boolean enableHwEncoding;

  public static final String SERIALIZED_NAME_ENABLE_KEY_FRAME_ONLY_EXTRACTION = "EnableKeyFrameOnlyExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_KEY_FRAME_ONLY_EXTRACTION)
  @javax.annotation.Nullable
  private Boolean enableKeyFrameOnlyExtraction;

  public static final String SERIALIZED_NAME_SCAN_BEHAVIOR = "ScanBehavior";
  @SerializedName(SERIALIZED_NAME_SCAN_BEHAVIOR)
  @javax.annotation.Nullable
  private TrickplayScanBehavior scanBehavior;

  public static final String SERIALIZED_NAME_PROCESS_PRIORITY = "ProcessPriority";
  @SerializedName(SERIALIZED_NAME_PROCESS_PRIORITY)
  @javax.annotation.Nullable
  private ProcessPriorityClass processPriority;

  public static final String SERIALIZED_NAME_INTERVAL = "Interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  @javax.annotation.Nullable
  private Integer interval;

  public static final String SERIALIZED_NAME_WIDTH_RESOLUTIONS = "WidthResolutions";
  @SerializedName(SERIALIZED_NAME_WIDTH_RESOLUTIONS)
  @javax.annotation.Nullable
  private List<Integer> widthResolutions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TILE_WIDTH = "TileWidth";
  @SerializedName(SERIALIZED_NAME_TILE_WIDTH)
  @javax.annotation.Nullable
  private Integer tileWidth;

  public static final String SERIALIZED_NAME_TILE_HEIGHT = "TileHeight";
  @SerializedName(SERIALIZED_NAME_TILE_HEIGHT)
  @javax.annotation.Nullable
  private Integer tileHeight;

  public static final String SERIALIZED_NAME_QSCALE = "Qscale";
  @SerializedName(SERIALIZED_NAME_QSCALE)
  @javax.annotation.Nullable
  private Integer qscale;

  public static final String SERIALIZED_NAME_JPEG_QUALITY = "JpegQuality";
  @SerializedName(SERIALIZED_NAME_JPEG_QUALITY)
  @javax.annotation.Nullable
  private Integer jpegQuality;

  public static final String SERIALIZED_NAME_PROCESS_THREADS = "ProcessThreads";
  @SerializedName(SERIALIZED_NAME_PROCESS_THREADS)
  @javax.annotation.Nullable
  private Integer processThreads;

  public TrickplayOptions() {
  }

  public TrickplayOptions enableHwAcceleration(@javax.annotation.Nullable Boolean enableHwAcceleration) {
    this.enableHwAcceleration = enableHwAcceleration;
    return this;
  }

  /**
   * Gets or sets a value indicating whether or not to use HW acceleration.
   * @return enableHwAcceleration
   */
  @javax.annotation.Nullable
  public Boolean getEnableHwAcceleration() {
    return enableHwAcceleration;
  }

  public void setEnableHwAcceleration(@javax.annotation.Nullable Boolean enableHwAcceleration) {
    this.enableHwAcceleration = enableHwAcceleration;
  }


  public TrickplayOptions enableHwEncoding(@javax.annotation.Nullable Boolean enableHwEncoding) {
    this.enableHwEncoding = enableHwEncoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether or not to use HW accelerated MJPEG encoding.
   * @return enableHwEncoding
   */
  @javax.annotation.Nullable
  public Boolean getEnableHwEncoding() {
    return enableHwEncoding;
  }

  public void setEnableHwEncoding(@javax.annotation.Nullable Boolean enableHwEncoding) {
    this.enableHwEncoding = enableHwEncoding;
  }


  public TrickplayOptions enableKeyFrameOnlyExtraction(@javax.annotation.Nullable Boolean enableKeyFrameOnlyExtraction) {
    this.enableKeyFrameOnlyExtraction = enableKeyFrameOnlyExtraction;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to only extract key frames.  Significantly faster, but is not compatible with all decoders and/or video files.
   * @return enableKeyFrameOnlyExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableKeyFrameOnlyExtraction() {
    return enableKeyFrameOnlyExtraction;
  }

  public void setEnableKeyFrameOnlyExtraction(@javax.annotation.Nullable Boolean enableKeyFrameOnlyExtraction) {
    this.enableKeyFrameOnlyExtraction = enableKeyFrameOnlyExtraction;
  }


  public TrickplayOptions scanBehavior(@javax.annotation.Nullable TrickplayScanBehavior scanBehavior) {
    this.scanBehavior = scanBehavior;
    return this;
  }

  /**
   * Gets or sets the behavior used by trickplay provider on library scan/update.
   * @return scanBehavior
   */
  @javax.annotation.Nullable
  public TrickplayScanBehavior getScanBehavior() {
    return scanBehavior;
  }

  public void setScanBehavior(@javax.annotation.Nullable TrickplayScanBehavior scanBehavior) {
    this.scanBehavior = scanBehavior;
  }


  public TrickplayOptions processPriority(@javax.annotation.Nullable ProcessPriorityClass processPriority) {
    this.processPriority = processPriority;
    return this;
  }

  /**
   * Gets or sets the process priority for the ffmpeg process.
   * @return processPriority
   */
  @javax.annotation.Nullable
  public ProcessPriorityClass getProcessPriority() {
    return processPriority;
  }

  public void setProcessPriority(@javax.annotation.Nullable ProcessPriorityClass processPriority) {
    this.processPriority = processPriority;
  }


  public TrickplayOptions interval(@javax.annotation.Nullable Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Gets or sets the interval, in ms, between each new trickplay image.
   * @return interval
   */
  @javax.annotation.Nullable
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(@javax.annotation.Nullable Integer interval) {
    this.interval = interval;
  }


  public TrickplayOptions widthResolutions(@javax.annotation.Nullable List<Integer> widthResolutions) {
    this.widthResolutions = widthResolutions;
    return this;
  }

  public TrickplayOptions addWidthResolutionsItem(Integer widthResolutionsItem) {
    if (this.widthResolutions == null) {
      this.widthResolutions = new ArrayList<>();
    }
    this.widthResolutions.add(widthResolutionsItem);
    return this;
  }

  /**
   * Gets or sets the target width resolutions, in px, to generates preview images for.
   * @return widthResolutions
   */
  @javax.annotation.Nullable
  public List<Integer> getWidthResolutions() {
    return widthResolutions;
  }

  public void setWidthResolutions(@javax.annotation.Nullable List<Integer> widthResolutions) {
    this.widthResolutions = widthResolutions;
  }


  public TrickplayOptions tileWidth(@javax.annotation.Nullable Integer tileWidth) {
    this.tileWidth = tileWidth;
    return this;
  }

  /**
   * Gets or sets number of tile images to allow in X dimension.
   * @return tileWidth
   */
  @javax.annotation.Nullable
  public Integer getTileWidth() {
    return tileWidth;
  }

  public void setTileWidth(@javax.annotation.Nullable Integer tileWidth) {
    this.tileWidth = tileWidth;
  }


  public TrickplayOptions tileHeight(@javax.annotation.Nullable Integer tileHeight) {
    this.tileHeight = tileHeight;
    return this;
  }

  /**
   * Gets or sets number of tile images to allow in Y dimension.
   * @return tileHeight
   */
  @javax.annotation.Nullable
  public Integer getTileHeight() {
    return tileHeight;
  }

  public void setTileHeight(@javax.annotation.Nullable Integer tileHeight) {
    this.tileHeight = tileHeight;
  }


  public TrickplayOptions qscale(@javax.annotation.Nullable Integer qscale) {
    this.qscale = qscale;
    return this;
  }

  /**
   * Gets or sets the ffmpeg output quality level.
   * @return qscale
   */
  @javax.annotation.Nullable
  public Integer getQscale() {
    return qscale;
  }

  public void setQscale(@javax.annotation.Nullable Integer qscale) {
    this.qscale = qscale;
  }


  public TrickplayOptions jpegQuality(@javax.annotation.Nullable Integer jpegQuality) {
    this.jpegQuality = jpegQuality;
    return this;
  }

  /**
   * Gets or sets the jpeg quality to use for image tiles.
   * @return jpegQuality
   */
  @javax.annotation.Nullable
  public Integer getJpegQuality() {
    return jpegQuality;
  }

  public void setJpegQuality(@javax.annotation.Nullable Integer jpegQuality) {
    this.jpegQuality = jpegQuality;
  }


  public TrickplayOptions processThreads(@javax.annotation.Nullable Integer processThreads) {
    this.processThreads = processThreads;
    return this;
  }

  /**
   * Gets or sets the number of threads to be used by ffmpeg.
   * @return processThreads
   */
  @javax.annotation.Nullable
  public Integer getProcessThreads() {
    return processThreads;
  }

  public void setProcessThreads(@javax.annotation.Nullable Integer processThreads) {
    this.processThreads = processThreads;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrickplayOptions trickplayOptions = (TrickplayOptions) o;
    return Objects.equals(this.enableHwAcceleration, trickplayOptions.enableHwAcceleration) &&
        Objects.equals(this.enableHwEncoding, trickplayOptions.enableHwEncoding) &&
        Objects.equals(this.enableKeyFrameOnlyExtraction, trickplayOptions.enableKeyFrameOnlyExtraction) &&
        Objects.equals(this.scanBehavior, trickplayOptions.scanBehavior) &&
        Objects.equals(this.processPriority, trickplayOptions.processPriority) &&
        Objects.equals(this.interval, trickplayOptions.interval) &&
        Objects.equals(this.widthResolutions, trickplayOptions.widthResolutions) &&
        Objects.equals(this.tileWidth, trickplayOptions.tileWidth) &&
        Objects.equals(this.tileHeight, trickplayOptions.tileHeight) &&
        Objects.equals(this.qscale, trickplayOptions.qscale) &&
        Objects.equals(this.jpegQuality, trickplayOptions.jpegQuality) &&
        Objects.equals(this.processThreads, trickplayOptions.processThreads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableHwAcceleration, enableHwEncoding, enableKeyFrameOnlyExtraction, scanBehavior, processPriority, interval, widthResolutions, tileWidth, tileHeight, qscale, jpegQuality, processThreads);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrickplayOptions {\n");
    sb.append("    enableHwAcceleration: ").append(toIndentedString(enableHwAcceleration)).append("\n");
    sb.append("    enableHwEncoding: ").append(toIndentedString(enableHwEncoding)).append("\n");
    sb.append("    enableKeyFrameOnlyExtraction: ").append(toIndentedString(enableKeyFrameOnlyExtraction)).append("\n");
    sb.append("    scanBehavior: ").append(toIndentedString(scanBehavior)).append("\n");
    sb.append("    processPriority: ").append(toIndentedString(processPriority)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    widthResolutions: ").append(toIndentedString(widthResolutions)).append("\n");
    sb.append("    tileWidth: ").append(toIndentedString(tileWidth)).append("\n");
    sb.append("    tileHeight: ").append(toIndentedString(tileHeight)).append("\n");
    sb.append("    qscale: ").append(toIndentedString(qscale)).append("\n");
    sb.append("    jpegQuality: ").append(toIndentedString(jpegQuality)).append("\n");
    sb.append("    processThreads: ").append(toIndentedString(processThreads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EnableHwAcceleration");
    openapiFields.add("EnableHwEncoding");
    openapiFields.add("EnableKeyFrameOnlyExtraction");
    openapiFields.add("ScanBehavior");
    openapiFields.add("ProcessPriority");
    openapiFields.add("Interval");
    openapiFields.add("WidthResolutions");
    openapiFields.add("TileWidth");
    openapiFields.add("TileHeight");
    openapiFields.add("Qscale");
    openapiFields.add("JpegQuality");
    openapiFields.add("ProcessThreads");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrickplayOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrickplayOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrickplayOptions is not found in the empty JSON string", TrickplayOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrickplayOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrickplayOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ScanBehavior`
      if (jsonObj.get("ScanBehavior") != null && !jsonObj.get("ScanBehavior").isJsonNull()) {
        TrickplayScanBehavior.validateJsonElement(jsonObj.get("ScanBehavior"));
      }
      // validate the optional field `ProcessPriority`
      if (jsonObj.get("ProcessPriority") != null && !jsonObj.get("ProcessPriority").isJsonNull()) {
        ProcessPriorityClass.validateJsonElement(jsonObj.get("ProcessPriority"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WidthResolutions") != null && !jsonObj.get("WidthResolutions").isJsonNull() && !jsonObj.get("WidthResolutions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WidthResolutions` to be an array in the JSON string but got `%s`", jsonObj.get("WidthResolutions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrickplayOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrickplayOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrickplayOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrickplayOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TrickplayOptions>() {
           @Override
           public void write(JsonWriter out, TrickplayOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrickplayOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrickplayOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrickplayOptions
   * @throws IOException if the JSON string is invalid with respect to TrickplayOptions
   */
  public static TrickplayOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrickplayOptions.class);
  }

  /**
   * Convert an instance of TrickplayOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

