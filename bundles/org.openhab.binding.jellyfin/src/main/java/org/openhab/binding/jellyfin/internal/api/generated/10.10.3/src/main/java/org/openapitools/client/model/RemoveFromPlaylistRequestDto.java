/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class RemoveFromPlaylistRequestDto.
 */
@JsonPropertyOrder({
  RemoveFromPlaylistRequestDto.JSON_PROPERTY_PLAYLIST_ITEM_IDS,
  RemoveFromPlaylistRequestDto.JSON_PROPERTY_CLEAR_PLAYLIST,
  RemoveFromPlaylistRequestDto.JSON_PROPERTY_CLEAR_PLAYING_ITEM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class RemoveFromPlaylistRequestDto {
  public static final String JSON_PROPERTY_PLAYLIST_ITEM_IDS = "PlaylistItemIds";
  @javax.annotation.Nullable
  private List<UUID> playlistItemIds = new ArrayList<>();

  public static final String JSON_PROPERTY_CLEAR_PLAYLIST = "ClearPlaylist";
  @javax.annotation.Nullable
  private Boolean clearPlaylist;

  public static final String JSON_PROPERTY_CLEAR_PLAYING_ITEM = "ClearPlayingItem";
  @javax.annotation.Nullable
  private Boolean clearPlayingItem;

  public RemoveFromPlaylistRequestDto() { 
  }

  public RemoveFromPlaylistRequestDto playlistItemIds(@javax.annotation.Nullable List<UUID> playlistItemIds) {
    this.playlistItemIds = playlistItemIds;
    return this;
  }

  public RemoveFromPlaylistRequestDto addPlaylistItemIdsItem(UUID playlistItemIdsItem) {
    if (this.playlistItemIds == null) {
      this.playlistItemIds = new ArrayList<>();
    }
    this.playlistItemIds.add(playlistItemIdsItem);
    return this;
  }

  /**
   * Gets or sets the playlist identifiers of the items. Ignored when clearing the playlist.
   * @return playlistItemIds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAYLIST_ITEM_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<UUID> getPlaylistItemIds() {
    return playlistItemIds;
  }


  @JsonProperty(JSON_PROPERTY_PLAYLIST_ITEM_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlaylistItemIds(@javax.annotation.Nullable List<UUID> playlistItemIds) {
    this.playlistItemIds = playlistItemIds;
  }


  public RemoveFromPlaylistRequestDto clearPlaylist(@javax.annotation.Nullable Boolean clearPlaylist) {
    this.clearPlaylist = clearPlaylist;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the entire playlist should be cleared.
   * @return clearPlaylist
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLEAR_PLAYLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getClearPlaylist() {
    return clearPlaylist;
  }


  @JsonProperty(JSON_PROPERTY_CLEAR_PLAYLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClearPlaylist(@javax.annotation.Nullable Boolean clearPlaylist) {
    this.clearPlaylist = clearPlaylist;
  }


  public RemoveFromPlaylistRequestDto clearPlayingItem(@javax.annotation.Nullable Boolean clearPlayingItem) {
    this.clearPlayingItem = clearPlayingItem;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the playing item should be removed as well. Used only when clearing the playlist.
   * @return clearPlayingItem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLEAR_PLAYING_ITEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getClearPlayingItem() {
    return clearPlayingItem;
  }


  @JsonProperty(JSON_PROPERTY_CLEAR_PLAYING_ITEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClearPlayingItem(@javax.annotation.Nullable Boolean clearPlayingItem) {
    this.clearPlayingItem = clearPlayingItem;
  }


  /**
   * Return true if this RemoveFromPlaylistRequestDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoveFromPlaylistRequestDto removeFromPlaylistRequestDto = (RemoveFromPlaylistRequestDto) o;
    return Objects.equals(this.playlistItemIds, removeFromPlaylistRequestDto.playlistItemIds) &&
        Objects.equals(this.clearPlaylist, removeFromPlaylistRequestDto.clearPlaylist) &&
        Objects.equals(this.clearPlayingItem, removeFromPlaylistRequestDto.clearPlayingItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playlistItemIds, clearPlaylist, clearPlayingItem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoveFromPlaylistRequestDto {\n");
    sb.append("    playlistItemIds: ").append(toIndentedString(playlistItemIds)).append("\n");
    sb.append("    clearPlaylist: ").append(toIndentedString(clearPlaylist)).append("\n");
    sb.append("    clearPlayingItem: ").append(toIndentedString(clearPlayingItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `PlaylistItemIds` to the URL query string
    if (getPlaylistItemIds() != null) {
      for (int i = 0; i < getPlaylistItemIds().size(); i++) {
        if (getPlaylistItemIds().get(i) != null) {
          joiner.add(String.format("%sPlaylistItemIds%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getPlaylistItemIds().get(i)))));
        }
      }
    }

    // add `ClearPlaylist` to the URL query string
    if (getClearPlaylist() != null) {
      joiner.add(String.format("%sClearPlaylist%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getClearPlaylist()))));
    }

    // add `ClearPlayingItem` to the URL query string
    if (getClearPlayingItem() != null) {
      joiner.add(String.format("%sClearPlayingItem%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getClearPlayingItem()))));
    }

    return joiner.toString();
  }
}

