/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LiveTvServiceStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class ServiceInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class LiveTvServiceInfo {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_HOME_PAGE_URL = "HomePageUrl";
  @SerializedName(SERIALIZED_NAME_HOME_PAGE_URL)
  @javax.annotation.Nullable
  private String homePageUrl;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private LiveTvServiceStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  @javax.annotation.Nullable
  private String statusMessage;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_HAS_UPDATE_AVAILABLE = "HasUpdateAvailable";
  @SerializedName(SERIALIZED_NAME_HAS_UPDATE_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean hasUpdateAvailable;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "IsVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  @javax.annotation.Nullable
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_TUNERS = "Tuners";
  @SerializedName(SERIALIZED_NAME_TUNERS)
  @javax.annotation.Nullable
  private List<String> tuners;

  public LiveTvServiceInfo() {
  }

  public LiveTvServiceInfo name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public LiveTvServiceInfo homePageUrl(@javax.annotation.Nullable String homePageUrl) {
    this.homePageUrl = homePageUrl;
    return this;
  }

  /**
   * Gets or sets the home page URL.
   * @return homePageUrl
   */
  @javax.annotation.Nullable
  public String getHomePageUrl() {
    return homePageUrl;
  }

  public void setHomePageUrl(@javax.annotation.Nullable String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }


  public LiveTvServiceInfo status(@javax.annotation.Nullable LiveTvServiceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets the status.
   * @return status
   */
  @javax.annotation.Nullable
  public LiveTvServiceStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable LiveTvServiceStatus status) {
    this.status = status;
  }


  public LiveTvServiceInfo statusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Gets or sets the status message.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public LiveTvServiceInfo version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Gets or sets the version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public LiveTvServiceInfo hasUpdateAvailable(@javax.annotation.Nullable Boolean hasUpdateAvailable) {
    this.hasUpdateAvailable = hasUpdateAvailable;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance has update available.
   * @return hasUpdateAvailable
   */
  @javax.annotation.Nullable
  public Boolean getHasUpdateAvailable() {
    return hasUpdateAvailable;
  }

  public void setHasUpdateAvailable(@javax.annotation.Nullable Boolean hasUpdateAvailable) {
    this.hasUpdateAvailable = hasUpdateAvailable;
  }


  public LiveTvServiceInfo isVisible(@javax.annotation.Nullable Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is visible.
   * @return isVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(@javax.annotation.Nullable Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public LiveTvServiceInfo tuners(@javax.annotation.Nullable List<String> tuners) {
    this.tuners = tuners;
    return this;
  }

  public LiveTvServiceInfo addTunersItem(String tunersItem) {
    if (this.tuners == null) {
      this.tuners = new ArrayList<>();
    }
    this.tuners.add(tunersItem);
    return this;
  }

  /**
   * Get tuners
   * @return tuners
   */
  @javax.annotation.Nullable
  public List<String> getTuners() {
    return tuners;
  }

  public void setTuners(@javax.annotation.Nullable List<String> tuners) {
    this.tuners = tuners;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveTvServiceInfo liveTvServiceInfo = (LiveTvServiceInfo) o;
    return Objects.equals(this.name, liveTvServiceInfo.name) &&
        Objects.equals(this.homePageUrl, liveTvServiceInfo.homePageUrl) &&
        Objects.equals(this.status, liveTvServiceInfo.status) &&
        Objects.equals(this.statusMessage, liveTvServiceInfo.statusMessage) &&
        Objects.equals(this.version, liveTvServiceInfo.version) &&
        Objects.equals(this.hasUpdateAvailable, liveTvServiceInfo.hasUpdateAvailable) &&
        Objects.equals(this.isVisible, liveTvServiceInfo.isVisible) &&
        Objects.equals(this.tuners, liveTvServiceInfo.tuners);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, homePageUrl, status, statusMessage, version, hasUpdateAvailable, isVisible, tuners);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveTvServiceInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    homePageUrl: ").append(toIndentedString(homePageUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    hasUpdateAvailable: ").append(toIndentedString(hasUpdateAvailable)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    tuners: ").append(toIndentedString(tuners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("HomePageUrl");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");
    openapiFields.add("Version");
    openapiFields.add("HasUpdateAvailable");
    openapiFields.add("IsVisible");
    openapiFields.add("Tuners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveTvServiceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveTvServiceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveTvServiceInfo is not found in the empty JSON string", LiveTvServiceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveTvServiceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveTvServiceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("HomePageUrl") != null && !jsonObj.get("HomePageUrl").isJsonNull()) && !jsonObj.get("HomePageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomePageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomePageUrl").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        LiveTvServiceStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) && !jsonObj.get("StatusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusMessage").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Tuners") != null && !jsonObj.get("Tuners").isJsonNull() && !jsonObj.get("Tuners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tuners` to be an array in the JSON string but got `%s`", jsonObj.get("Tuners").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveTvServiceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveTvServiceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveTvServiceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveTvServiceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveTvServiceInfo>() {
           @Override
           public void write(JsonWriter out, LiveTvServiceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveTvServiceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveTvServiceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveTvServiceInfo
   * @throws IOException if the JSON string is invalid with respect to LiveTvServiceInfo
   */
  public static LiveTvServiceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveTvServiceInfo.class);
  }

  /**
   * Convert an instance of LiveTvServiceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

