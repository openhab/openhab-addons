/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LyricMetadata model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class LyricMetadata {
  public static final String SERIALIZED_NAME_ARTIST = "Artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  @javax.annotation.Nullable
  private String artist;

  public static final String SERIALIZED_NAME_ALBUM = "Album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  @javax.annotation.Nullable
  private String album;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_AUTHOR = "Author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  @javax.annotation.Nullable
  private String author;

  public static final String SERIALIZED_NAME_LENGTH = "Length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  @javax.annotation.Nullable
  private Long length;

  public static final String SERIALIZED_NAME_BY = "By";
  @SerializedName(SERIALIZED_NAME_BY)
  @javax.annotation.Nullable
  private String by;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  @javax.annotation.Nullable
  private Long offset;

  public static final String SERIALIZED_NAME_CREATOR = "Creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  @javax.annotation.Nullable
  private String creator;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_IS_SYNCED = "IsSynced";
  @SerializedName(SERIALIZED_NAME_IS_SYNCED)
  @javax.annotation.Nullable
  private Boolean isSynced;

  public LyricMetadata() {
  }

  public LyricMetadata artist(@javax.annotation.Nullable String artist) {
    this.artist = artist;
    return this;
  }

  /**
   * Gets or sets the song artist.
   * @return artist
   */
  @javax.annotation.Nullable
  public String getArtist() {
    return artist;
  }

  public void setArtist(@javax.annotation.Nullable String artist) {
    this.artist = artist;
  }


  public LyricMetadata album(@javax.annotation.Nullable String album) {
    this.album = album;
    return this;
  }

  /**
   * Gets or sets the album this song is on.
   * @return album
   */
  @javax.annotation.Nullable
  public String getAlbum() {
    return album;
  }

  public void setAlbum(@javax.annotation.Nullable String album) {
    this.album = album;
  }


  public LyricMetadata title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * Gets or sets the title of the song.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public LyricMetadata author(@javax.annotation.Nullable String author) {
    this.author = author;
    return this;
  }

  /**
   * Gets or sets the author of the lyric data.
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(@javax.annotation.Nullable String author) {
    this.author = author;
  }


  public LyricMetadata length(@javax.annotation.Nullable Long length) {
    this.length = length;
    return this;
  }

  /**
   * Gets or sets the length of the song in ticks.
   * @return length
   */
  @javax.annotation.Nullable
  public Long getLength() {
    return length;
  }

  public void setLength(@javax.annotation.Nullable Long length) {
    this.length = length;
  }


  public LyricMetadata by(@javax.annotation.Nullable String by) {
    this.by = by;
    return this;
  }

  /**
   * Gets or sets who the LRC file was created by.
   * @return by
   */
  @javax.annotation.Nullable
  public String getBy() {
    return by;
  }

  public void setBy(@javax.annotation.Nullable String by) {
    this.by = by;
  }


  public LyricMetadata offset(@javax.annotation.Nullable Long offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Gets or sets the lyric offset compared to audio in ticks.
   * @return offset
   */
  @javax.annotation.Nullable
  public Long getOffset() {
    return offset;
  }

  public void setOffset(@javax.annotation.Nullable Long offset) {
    this.offset = offset;
  }


  public LyricMetadata creator(@javax.annotation.Nullable String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Gets or sets the software used to create the LRC file.
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(@javax.annotation.Nullable String creator) {
    this.creator = creator;
  }


  public LyricMetadata version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Gets or sets the version of the creator used.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public LyricMetadata isSynced(@javax.annotation.Nullable Boolean isSynced) {
    this.isSynced = isSynced;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this lyric is synced.
   * @return isSynced
   */
  @javax.annotation.Nullable
  public Boolean getIsSynced() {
    return isSynced;
  }

  public void setIsSynced(@javax.annotation.Nullable Boolean isSynced) {
    this.isSynced = isSynced;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LyricMetadata lyricMetadata = (LyricMetadata) o;
    return Objects.equals(this.artist, lyricMetadata.artist) &&
        Objects.equals(this.album, lyricMetadata.album) &&
        Objects.equals(this.title, lyricMetadata.title) &&
        Objects.equals(this.author, lyricMetadata.author) &&
        Objects.equals(this.length, lyricMetadata.length) &&
        Objects.equals(this.by, lyricMetadata.by) &&
        Objects.equals(this.offset, lyricMetadata.offset) &&
        Objects.equals(this.creator, lyricMetadata.creator) &&
        Objects.equals(this.version, lyricMetadata.version) &&
        Objects.equals(this.isSynced, lyricMetadata.isSynced);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(artist, album, title, author, length, by, offset, creator, version, isSynced);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LyricMetadata {\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    by: ").append(toIndentedString(by)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    isSynced: ").append(toIndentedString(isSynced)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Artist");
    openapiFields.add("Album");
    openapiFields.add("Title");
    openapiFields.add("Author");
    openapiFields.add("Length");
    openapiFields.add("By");
    openapiFields.add("Offset");
    openapiFields.add("Creator");
    openapiFields.add("Version");
    openapiFields.add("IsSynced");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LyricMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LyricMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LyricMetadata is not found in the empty JSON string", LyricMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LyricMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LyricMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Artist") != null && !jsonObj.get("Artist").isJsonNull()) && !jsonObj.get("Artist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Artist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Artist").toString()));
      }
      if ((jsonObj.get("Album") != null && !jsonObj.get("Album").isJsonNull()) && !jsonObj.get("Album").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Album` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Album").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Author") != null && !jsonObj.get("Author").isJsonNull()) && !jsonObj.get("Author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Author").toString()));
      }
      if ((jsonObj.get("By") != null && !jsonObj.get("By").isJsonNull()) && !jsonObj.get("By").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `By` to be a primitive type in the JSON string but got `%s`", jsonObj.get("By").toString()));
      }
      if ((jsonObj.get("Creator") != null && !jsonObj.get("Creator").isJsonNull()) && !jsonObj.get("Creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Creator").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LyricMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LyricMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LyricMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LyricMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<LyricMetadata>() {
           @Override
           public void write(JsonWriter out, LyricMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LyricMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LyricMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LyricMetadata
   * @throws IOException if the JSON string is invalid with respect to LyricMetadata
   */
  public static LyricMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LyricMetadata.class);
  }

  /**
   * Convert an instance of LyricMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

