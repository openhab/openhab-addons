/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Defines the Jellyfin.Networking.Configuration.NetworkConfiguration.
 */
@JsonPropertyOrder({
  NetworkConfiguration.JSON_PROPERTY_REQUIRE_HTTPS,
  NetworkConfiguration.JSON_PROPERTY_CERTIFICATE_PATH,
  NetworkConfiguration.JSON_PROPERTY_CERTIFICATE_PASSWORD,
  NetworkConfiguration.JSON_PROPERTY_BASE_URL,
  NetworkConfiguration.JSON_PROPERTY_PUBLIC_HTTPS_PORT,
  NetworkConfiguration.JSON_PROPERTY_HTTP_SERVER_PORT_NUMBER,
  NetworkConfiguration.JSON_PROPERTY_HTTPS_PORT_NUMBER,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_HTTPS,
  NetworkConfiguration.JSON_PROPERTY_PUBLIC_PORT,
  NetworkConfiguration.JSON_PROPERTY_UPN_P_CREATE_HTTP_PORT_MAP,
  NetworkConfiguration.JSON_PROPERTY_UD_P_PORT_RANGE,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_I_P_V6,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_I_P_V4,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_S_S_D_P_TRACING,
  NetworkConfiguration.JSON_PROPERTY_SS_D_P_TRACING_FILTER,
  NetworkConfiguration.JSON_PROPERTY_UD_P_SEND_COUNT,
  NetworkConfiguration.JSON_PROPERTY_UD_P_SEND_DELAY,
  NetworkConfiguration.JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES,
  NetworkConfiguration.JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES,
  NetworkConfiguration.JSON_PROPERTY_GATEWAY_MONITOR_PERIOD,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_MULTI_SOCKET_BINDING,
  NetworkConfiguration.JSON_PROPERTY_TRUST_ALL_I_P6_INTERFACES,
  NetworkConfiguration.JSON_PROPERTY_HD_HOMERUN_PORT_RANGE,
  NetworkConfiguration.JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET,
  NetworkConfiguration.JSON_PROPERTY_AUTO_DISCOVERY_TRACING,
  NetworkConfiguration.JSON_PROPERTY_AUTO_DISCOVERY,
  NetworkConfiguration.JSON_PROPERTY_REMOTE_I_P_FILTER,
  NetworkConfiguration.JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_U_PN_P,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_REMOTE_ACCESS,
  NetworkConfiguration.JSON_PROPERTY_LOCAL_NETWORK_SUBNETS,
  NetworkConfiguration.JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES,
  NetworkConfiguration.JSON_PROPERTY_KNOWN_PROXIES,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class NetworkConfiguration {
  public static final String JSON_PROPERTY_REQUIRE_HTTPS = "RequireHttps";
  @javax.annotation.Nullable
  private Boolean requireHttps;

  public static final String JSON_PROPERTY_CERTIFICATE_PATH = "CertificatePath";
  @javax.annotation.Nullable
  private String certificatePath;

  public static final String JSON_PROPERTY_CERTIFICATE_PASSWORD = "CertificatePassword";
  @javax.annotation.Nullable
  private String certificatePassword;

  public static final String JSON_PROPERTY_BASE_URL = "BaseUrl";
  @javax.annotation.Nullable
  private String baseUrl;

  public static final String JSON_PROPERTY_PUBLIC_HTTPS_PORT = "PublicHttpsPort";
  @javax.annotation.Nullable
  private Integer publicHttpsPort;

  public static final String JSON_PROPERTY_HTTP_SERVER_PORT_NUMBER = "HttpServerPortNumber";
  @javax.annotation.Nullable
  private Integer httpServerPortNumber;

  public static final String JSON_PROPERTY_HTTPS_PORT_NUMBER = "HttpsPortNumber";
  @javax.annotation.Nullable
  private Integer httpsPortNumber;

  public static final String JSON_PROPERTY_ENABLE_HTTPS = "EnableHttps";
  @javax.annotation.Nullable
  private Boolean enableHttps;

  public static final String JSON_PROPERTY_PUBLIC_PORT = "PublicPort";
  @javax.annotation.Nullable
  private Integer publicPort;

  public static final String JSON_PROPERTY_UPN_P_CREATE_HTTP_PORT_MAP = "UPnPCreateHttpPortMap";
  @javax.annotation.Nullable
  private Boolean upnPCreateHttpPortMap;

  public static final String JSON_PROPERTY_UD_P_PORT_RANGE = "UDPPortRange";
  @javax.annotation.Nullable
  private String udPPortRange;

  public static final String JSON_PROPERTY_ENABLE_I_P_V6 = "EnableIPV6";
  @javax.annotation.Nullable
  private Boolean enableIPV6;

  public static final String JSON_PROPERTY_ENABLE_I_P_V4 = "EnableIPV4";
  @javax.annotation.Nullable
  private Boolean enableIPV4;

  public static final String JSON_PROPERTY_ENABLE_S_S_D_P_TRACING = "EnableSSDPTracing";
  @javax.annotation.Nullable
  private Boolean enableSSDPTracing;

  public static final String JSON_PROPERTY_SS_D_P_TRACING_FILTER = "SSDPTracingFilter";
  @javax.annotation.Nullable
  private String ssDPTracingFilter;

  public static final String JSON_PROPERTY_UD_P_SEND_COUNT = "UDPSendCount";
  @javax.annotation.Nullable
  private Integer udPSendCount;

  public static final String JSON_PROPERTY_UD_P_SEND_DELAY = "UDPSendDelay";
  @javax.annotation.Nullable
  private Integer udPSendDelay;

  public static final String JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES = "IgnoreVirtualInterfaces";
  @javax.annotation.Nullable
  private Boolean ignoreVirtualInterfaces;

  public static final String JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES = "VirtualInterfaceNames";
  @javax.annotation.Nullable
  private String virtualInterfaceNames;

  public static final String JSON_PROPERTY_GATEWAY_MONITOR_PERIOD = "GatewayMonitorPeriod";
  @javax.annotation.Nullable
  private Integer gatewayMonitorPeriod;

  public static final String JSON_PROPERTY_ENABLE_MULTI_SOCKET_BINDING = "EnableMultiSocketBinding";
  @javax.annotation.Nullable
  private Boolean enableMultiSocketBinding;

  public static final String JSON_PROPERTY_TRUST_ALL_I_P6_INTERFACES = "TrustAllIP6Interfaces";
  @javax.annotation.Nullable
  private Boolean trustAllIP6Interfaces;

  public static final String JSON_PROPERTY_HD_HOMERUN_PORT_RANGE = "HDHomerunPortRange";
  @javax.annotation.Nullable
  private String hdHomerunPortRange;

  public static final String JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET = "PublishedServerUriBySubnet";
  @javax.annotation.Nullable
  private List<String> publishedServerUriBySubnet = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTO_DISCOVERY_TRACING = "AutoDiscoveryTracing";
  @javax.annotation.Nullable
  private Boolean autoDiscoveryTracing;

  public static final String JSON_PROPERTY_AUTO_DISCOVERY = "AutoDiscovery";
  @javax.annotation.Nullable
  private Boolean autoDiscovery;

  public static final String JSON_PROPERTY_REMOTE_I_P_FILTER = "RemoteIPFilter";
  @javax.annotation.Nullable
  private List<String> remoteIPFilter = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST = "IsRemoteIPFilterBlacklist";
  @javax.annotation.Nullable
  private Boolean isRemoteIPFilterBlacklist;

  public static final String JSON_PROPERTY_ENABLE_U_PN_P = "EnableUPnP";
  @javax.annotation.Nullable
  private Boolean enableUPnP;

  public static final String JSON_PROPERTY_ENABLE_REMOTE_ACCESS = "EnableRemoteAccess";
  @javax.annotation.Nullable
  private Boolean enableRemoteAccess;

  public static final String JSON_PROPERTY_LOCAL_NETWORK_SUBNETS = "LocalNetworkSubnets";
  @javax.annotation.Nullable
  private List<String> localNetworkSubnets = new ArrayList<>();

  public static final String JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES = "LocalNetworkAddresses";
  @javax.annotation.Nullable
  private List<String> localNetworkAddresses = new ArrayList<>();

  public static final String JSON_PROPERTY_KNOWN_PROXIES = "KnownProxies";
  @javax.annotation.Nullable
  private List<String> knownProxies = new ArrayList<>();

  public static final String JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST = "EnablePublishedServerUriByRequest";
  @javax.annotation.Nullable
  private Boolean enablePublishedServerUriByRequest;

  public NetworkConfiguration() { 
  }

  @JsonCreator
  public NetworkConfiguration(
    @JsonProperty(JSON_PROPERTY_ENABLE_MULTI_SOCKET_BINDING) Boolean enableMultiSocketBinding
  ) {
  this();
    this.enableMultiSocketBinding = enableMultiSocketBinding;
  }

  public NetworkConfiguration requireHttps(@javax.annotation.Nullable Boolean requireHttps) {
    this.requireHttps = requireHttps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the server should force connections over HTTPS.
   * @return requireHttps
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequireHttps() {
    return requireHttps;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequireHttps(@javax.annotation.Nullable Boolean requireHttps) {
    this.requireHttps = requireHttps;
  }


  public NetworkConfiguration certificatePath(@javax.annotation.Nullable String certificatePath) {
    this.certificatePath = certificatePath;
    return this;
  }

  /**
   * Gets or sets the filesystem path of an X.509 certificate to use for SSL.
   * @return certificatePath
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCertificatePath() {
    return certificatePath;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificatePath(@javax.annotation.Nullable String certificatePath) {
    this.certificatePath = certificatePath;
  }


  public NetworkConfiguration certificatePassword(@javax.annotation.Nullable String certificatePassword) {
    this.certificatePassword = certificatePassword;
    return this;
  }

  /**
   * Gets or sets the password required to access the X.509 certificate data in the file specified by Jellyfin.Networking.Configuration.NetworkConfiguration.CertificatePath.
   * @return certificatePassword
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCertificatePassword() {
    return certificatePassword;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificatePassword(@javax.annotation.Nullable String certificatePassword) {
    this.certificatePassword = certificatePassword;
  }


  public NetworkConfiguration baseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Gets or sets a value used to specify the URL prefix that your Jellyfin instance can be accessed at.
   * @return baseUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBaseUrl() {
    return baseUrl;
  }


  @JsonProperty(JSON_PROPERTY_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public NetworkConfiguration publicHttpsPort(@javax.annotation.Nullable Integer publicHttpsPort) {
    this.publicHttpsPort = publicHttpsPort;
    return this;
  }

  /**
   * Gets or sets the public HTTPS port.
   * @return publicHttpsPort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_HTTPS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPublicHttpsPort() {
    return publicHttpsPort;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_HTTPS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicHttpsPort(@javax.annotation.Nullable Integer publicHttpsPort) {
    this.publicHttpsPort = publicHttpsPort;
  }


  public NetworkConfiguration httpServerPortNumber(@javax.annotation.Nullable Integer httpServerPortNumber) {
    this.httpServerPortNumber = httpServerPortNumber;
    return this;
  }

  /**
   * Gets or sets the HTTP server port number.
   * @return httpServerPortNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_SERVER_PORT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHttpServerPortNumber() {
    return httpServerPortNumber;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_SERVER_PORT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpServerPortNumber(@javax.annotation.Nullable Integer httpServerPortNumber) {
    this.httpServerPortNumber = httpServerPortNumber;
  }


  public NetworkConfiguration httpsPortNumber(@javax.annotation.Nullable Integer httpsPortNumber) {
    this.httpsPortNumber = httpsPortNumber;
    return this;
  }

  /**
   * Gets or sets the HTTPS server port number.
   * @return httpsPortNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTPS_PORT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHttpsPortNumber() {
    return httpsPortNumber;
  }


  @JsonProperty(JSON_PROPERTY_HTTPS_PORT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpsPortNumber(@javax.annotation.Nullable Integer httpsPortNumber) {
    this.httpsPortNumber = httpsPortNumber;
  }


  public NetworkConfiguration enableHttps(@javax.annotation.Nullable Boolean enableHttps) {
    this.enableHttps = enableHttps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to use HTTPS.
   * @return enableHttps
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableHttps() {
    return enableHttps;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableHttps(@javax.annotation.Nullable Boolean enableHttps) {
    this.enableHttps = enableHttps;
  }


  public NetworkConfiguration publicPort(@javax.annotation.Nullable Integer publicPort) {
    this.publicPort = publicPort;
    return this;
  }

  /**
   * Gets or sets the public mapped port.
   * @return publicPort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPublicPort() {
    return publicPort;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicPort(@javax.annotation.Nullable Integer publicPort) {
    this.publicPort = publicPort;
  }


  public NetworkConfiguration upnPCreateHttpPortMap(@javax.annotation.Nullable Boolean upnPCreateHttpPortMap) {
    this.upnPCreateHttpPortMap = upnPCreateHttpPortMap;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.
   * @return upnPCreateHttpPortMap
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPN_P_CREATE_HTTP_PORT_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getUpnPCreateHttpPortMap() {
    return upnPCreateHttpPortMap;
  }


  @JsonProperty(JSON_PROPERTY_UPN_P_CREATE_HTTP_PORT_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpnPCreateHttpPortMap(@javax.annotation.Nullable Boolean upnPCreateHttpPortMap) {
    this.upnPCreateHttpPortMap = upnPCreateHttpPortMap;
  }


  public NetworkConfiguration udPPortRange(@javax.annotation.Nullable String udPPortRange) {
    this.udPPortRange = udPPortRange;
    return this;
  }

  /**
   * Gets or sets the UDPPortRange.
   * @return udPPortRange
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UD_P_PORT_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUdPPortRange() {
    return udPPortRange;
  }


  @JsonProperty(JSON_PROPERTY_UD_P_PORT_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUdPPortRange(@javax.annotation.Nullable String udPPortRange) {
    this.udPPortRange = udPPortRange;
  }


  public NetworkConfiguration enableIPV6(@javax.annotation.Nullable Boolean enableIPV6) {
    this.enableIPV6 = enableIPV6;
    return this;
  }

  /**
   * Gets or sets a value indicating whether gets or sets IPV6 capability.
   * @return enableIPV6
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_I_P_V6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIPV6() {
    return enableIPV6;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_I_P_V6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIPV6(@javax.annotation.Nullable Boolean enableIPV6) {
    this.enableIPV6 = enableIPV6;
  }


  public NetworkConfiguration enableIPV4(@javax.annotation.Nullable Boolean enableIPV4) {
    this.enableIPV4 = enableIPV4;
    return this;
  }

  /**
   * Gets or sets a value indicating whether gets or sets IPV4 capability.
   * @return enableIPV4
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_I_P_V4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIPV4() {
    return enableIPV4;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_I_P_V4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIPV4(@javax.annotation.Nullable Boolean enableIPV4) {
    this.enableIPV4 = enableIPV4;
  }


  public NetworkConfiguration enableSSDPTracing(@javax.annotation.Nullable Boolean enableSSDPTracing) {
    this.enableSSDPTracing = enableSSDPTracing;
    return this;
  }

  /**
   * Gets or sets a value indicating whether detailed SSDP logs are sent to the console/log.  \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; must be set in logging.default.json for this property to have any effect.
   * @return enableSSDPTracing
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_S_S_D_P_TRACING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableSSDPTracing() {
    return enableSSDPTracing;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_S_S_D_P_TRACING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSSDPTracing(@javax.annotation.Nullable Boolean enableSSDPTracing) {
    this.enableSSDPTracing = enableSSDPTracing;
  }


  public NetworkConfiguration ssDPTracingFilter(@javax.annotation.Nullable String ssDPTracingFilter) {
    this.ssDPTracingFilter = ssDPTracingFilter;
    return this;
  }

  /**
   * Gets or sets the SSDPTracingFilter  Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.
   * @return ssDPTracingFilter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SS_D_P_TRACING_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSsDPTracingFilter() {
    return ssDPTracingFilter;
  }


  @JsonProperty(JSON_PROPERTY_SS_D_P_TRACING_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSsDPTracingFilter(@javax.annotation.Nullable String ssDPTracingFilter) {
    this.ssDPTracingFilter = ssDPTracingFilter;
  }


  public NetworkConfiguration udPSendCount(@javax.annotation.Nullable Integer udPSendCount) {
    this.udPSendCount = udPSendCount;
    return this;
  }

  /**
   * Gets or sets the number of times SSDP UDP messages are sent.
   * @return udPSendCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UD_P_SEND_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getUdPSendCount() {
    return udPSendCount;
  }


  @JsonProperty(JSON_PROPERTY_UD_P_SEND_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUdPSendCount(@javax.annotation.Nullable Integer udPSendCount) {
    this.udPSendCount = udPSendCount;
  }


  public NetworkConfiguration udPSendDelay(@javax.annotation.Nullable Integer udPSendDelay) {
    this.udPSendDelay = udPSendDelay;
    return this;
  }

  /**
   * Gets or sets the delay between each groups of SSDP messages (in ms).
   * @return udPSendDelay
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UD_P_SEND_DELAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getUdPSendDelay() {
    return udPSendDelay;
  }


  @JsonProperty(JSON_PROPERTY_UD_P_SEND_DELAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUdPSendDelay(@javax.annotation.Nullable Integer udPSendDelay) {
    this.udPSendDelay = udPSendDelay;
  }


  public NetworkConfiguration ignoreVirtualInterfaces(@javax.annotation.Nullable Boolean ignoreVirtualInterfaces) {
    this.ignoreVirtualInterfaces = ignoreVirtualInterfaces;
    return this;
  }

  /**
   * Gets or sets a value indicating whether address names that match Jellyfin.Networking.Configuration.NetworkConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.
   * @return ignoreVirtualInterfaces
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIgnoreVirtualInterfaces() {
    return ignoreVirtualInterfaces;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreVirtualInterfaces(@javax.annotation.Nullable Boolean ignoreVirtualInterfaces) {
    this.ignoreVirtualInterfaces = ignoreVirtualInterfaces;
  }


  public NetworkConfiguration virtualInterfaceNames(@javax.annotation.Nullable String virtualInterfaceNames) {
    this.virtualInterfaceNames = virtualInterfaceNames;
    return this;
  }

  /**
   * Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. &lt;seealso cref&#x3D;\&quot;P:Jellyfin.Networking.Configuration.NetworkConfiguration.IgnoreVirtualInterfaces\&quot; /&gt;.
   * @return virtualInterfaceNames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVirtualInterfaceNames() {
    return virtualInterfaceNames;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVirtualInterfaceNames(@javax.annotation.Nullable String virtualInterfaceNames) {
    this.virtualInterfaceNames = virtualInterfaceNames;
  }


  public NetworkConfiguration gatewayMonitorPeriod(@javax.annotation.Nullable Integer gatewayMonitorPeriod) {
    this.gatewayMonitorPeriod = gatewayMonitorPeriod;
    return this;
  }

  /**
   * Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.
   * @return gatewayMonitorPeriod
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GATEWAY_MONITOR_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getGatewayMonitorPeriod() {
    return gatewayMonitorPeriod;
  }


  @JsonProperty(JSON_PROPERTY_GATEWAY_MONITOR_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGatewayMonitorPeriod(@javax.annotation.Nullable Integer gatewayMonitorPeriod) {
    this.gatewayMonitorPeriod = gatewayMonitorPeriod;
  }


  /**
   * Gets a value indicating whether multi-socket binding is available.
   * @return enableMultiSocketBinding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_MULTI_SOCKET_BINDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableMultiSocketBinding() {
    return enableMultiSocketBinding;
  }




  public NetworkConfiguration trustAllIP6Interfaces(@javax.annotation.Nullable Boolean trustAllIP6Interfaces) {
    this.trustAllIP6Interfaces = trustAllIP6Interfaces;
    return this;
  }

  /**
   * Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.
   * @return trustAllIP6Interfaces
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUST_ALL_I_P6_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTrustAllIP6Interfaces() {
    return trustAllIP6Interfaces;
  }


  @JsonProperty(JSON_PROPERTY_TRUST_ALL_I_P6_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrustAllIP6Interfaces(@javax.annotation.Nullable Boolean trustAllIP6Interfaces) {
    this.trustAllIP6Interfaces = trustAllIP6Interfaces;
  }


  public NetworkConfiguration hdHomerunPortRange(@javax.annotation.Nullable String hdHomerunPortRange) {
    this.hdHomerunPortRange = hdHomerunPortRange;
    return this;
  }

  /**
   * Gets or sets the ports that HDHomerun uses.
   * @return hdHomerunPortRange
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HD_HOMERUN_PORT_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHdHomerunPortRange() {
    return hdHomerunPortRange;
  }


  @JsonProperty(JSON_PROPERTY_HD_HOMERUN_PORT_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHdHomerunPortRange(@javax.annotation.Nullable String hdHomerunPortRange) {
    this.hdHomerunPortRange = hdHomerunPortRange;
  }


  public NetworkConfiguration publishedServerUriBySubnet(@javax.annotation.Nullable List<String> publishedServerUriBySubnet) {
    this.publishedServerUriBySubnet = publishedServerUriBySubnet;
    return this;
  }

  public NetworkConfiguration addPublishedServerUriBySubnetItem(String publishedServerUriBySubnetItem) {
    if (this.publishedServerUriBySubnet == null) {
      this.publishedServerUriBySubnet = new ArrayList<>();
    }
    this.publishedServerUriBySubnet.add(publishedServerUriBySubnetItem);
    return this;
  }

  /**
   * Gets or sets the PublishedServerUriBySubnet  Gets or sets PublishedServerUri to advertise for specific subnets.
   * @return publishedServerUriBySubnet
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getPublishedServerUriBySubnet() {
    return publishedServerUriBySubnet;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublishedServerUriBySubnet(@javax.annotation.Nullable List<String> publishedServerUriBySubnet) {
    this.publishedServerUriBySubnet = publishedServerUriBySubnet;
  }


  public NetworkConfiguration autoDiscoveryTracing(@javax.annotation.Nullable Boolean autoDiscoveryTracing) {
    this.autoDiscoveryTracing = autoDiscoveryTracing;
    return this;
  }

  /**
   * Gets or sets a value indicating whether Autodiscovery tracing is enabled.
   * @return autoDiscoveryTracing
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_DISCOVERY_TRACING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAutoDiscoveryTracing() {
    return autoDiscoveryTracing;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_DISCOVERY_TRACING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoDiscoveryTracing(@javax.annotation.Nullable Boolean autoDiscoveryTracing) {
    this.autoDiscoveryTracing = autoDiscoveryTracing;
  }


  public NetworkConfiguration autoDiscovery(@javax.annotation.Nullable Boolean autoDiscovery) {
    this.autoDiscovery = autoDiscovery;
    return this;
  }

  /**
   * Gets or sets a value indicating whether Autodiscovery is enabled.
   * @return autoDiscovery
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_DISCOVERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAutoDiscovery() {
    return autoDiscovery;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_DISCOVERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoDiscovery(@javax.annotation.Nullable Boolean autoDiscovery) {
    this.autoDiscovery = autoDiscovery;
  }


  public NetworkConfiguration remoteIPFilter(@javax.annotation.Nullable List<String> remoteIPFilter) {
    this.remoteIPFilter = remoteIPFilter;
    return this;
  }

  public NetworkConfiguration addRemoteIPFilterItem(String remoteIPFilterItem) {
    if (this.remoteIPFilter == null) {
      this.remoteIPFilter = new ArrayList<>();
    }
    this.remoteIPFilter.add(remoteIPFilterItem);
    return this;
  }

  /**
   * Gets or sets the filter for remote IP connectivity. Used in conjuntion with &lt;seealso cref&#x3D;\&quot;P:Jellyfin.Networking.Configuration.NetworkConfiguration.IsRemoteIPFilterBlacklist\&quot; /&gt;.
   * @return remoteIPFilter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_I_P_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getRemoteIPFilter() {
    return remoteIPFilter;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_I_P_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteIPFilter(@javax.annotation.Nullable List<String> remoteIPFilter) {
    this.remoteIPFilter = remoteIPFilter;
  }


  public NetworkConfiguration isRemoteIPFilterBlacklist(@javax.annotation.Nullable Boolean isRemoteIPFilterBlacklist) {
    this.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
    return this;
  }

  /**
   * Gets or sets a value indicating whether &lt;seealso cref&#x3D;\&quot;P:Jellyfin.Networking.Configuration.NetworkConfiguration.RemoteIPFilter\&quot; /&gt; contains a blacklist or a whitelist. Default is a whitelist.
   * @return isRemoteIPFilterBlacklist
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsRemoteIPFilterBlacklist() {
    return isRemoteIPFilterBlacklist;
  }


  @JsonProperty(JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsRemoteIPFilterBlacklist(@javax.annotation.Nullable Boolean isRemoteIPFilterBlacklist) {
    this.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
  }


  public NetworkConfiguration enableUPnP(@javax.annotation.Nullable Boolean enableUPnP) {
    this.enableUPnP = enableUPnP;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable automatic port forwarding.
   * @return enableUPnP
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_U_PN_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableUPnP() {
    return enableUPnP;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_U_PN_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableUPnP(@javax.annotation.Nullable Boolean enableUPnP) {
    this.enableUPnP = enableUPnP;
  }


  public NetworkConfiguration enableRemoteAccess(@javax.annotation.Nullable Boolean enableRemoteAccess) {
    this.enableRemoteAccess = enableRemoteAccess;
    return this;
  }

  /**
   * Gets or sets a value indicating whether access outside of the LAN is permitted.
   * @return enableRemoteAccess
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_REMOTE_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableRemoteAccess() {
    return enableRemoteAccess;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_REMOTE_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableRemoteAccess(@javax.annotation.Nullable Boolean enableRemoteAccess) {
    this.enableRemoteAccess = enableRemoteAccess;
  }


  public NetworkConfiguration localNetworkSubnets(@javax.annotation.Nullable List<String> localNetworkSubnets) {
    this.localNetworkSubnets = localNetworkSubnets;
    return this;
  }

  public NetworkConfiguration addLocalNetworkSubnetsItem(String localNetworkSubnetsItem) {
    if (this.localNetworkSubnets == null) {
      this.localNetworkSubnets = new ArrayList<>();
    }
    this.localNetworkSubnets.add(localNetworkSubnetsItem);
    return this;
  }

  /**
   * Gets or sets the subnets that are deemed to make up the LAN.
   * @return localNetworkSubnets
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_SUBNETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getLocalNetworkSubnets() {
    return localNetworkSubnets;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_SUBNETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalNetworkSubnets(@javax.annotation.Nullable List<String> localNetworkSubnets) {
    this.localNetworkSubnets = localNetworkSubnets;
  }


  public NetworkConfiguration localNetworkAddresses(@javax.annotation.Nullable List<String> localNetworkAddresses) {
    this.localNetworkAddresses = localNetworkAddresses;
    return this;
  }

  public NetworkConfiguration addLocalNetworkAddressesItem(String localNetworkAddressesItem) {
    if (this.localNetworkAddresses == null) {
      this.localNetworkAddresses = new ArrayList<>();
    }
    this.localNetworkAddresses.add(localNetworkAddressesItem);
    return this;
  }

  /**
   * Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
   * @return localNetworkAddresses
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getLocalNetworkAddresses() {
    return localNetworkAddresses;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalNetworkAddresses(@javax.annotation.Nullable List<String> localNetworkAddresses) {
    this.localNetworkAddresses = localNetworkAddresses;
  }


  public NetworkConfiguration knownProxies(@javax.annotation.Nullable List<String> knownProxies) {
    this.knownProxies = knownProxies;
    return this;
  }

  public NetworkConfiguration addKnownProxiesItem(String knownProxiesItem) {
    if (this.knownProxies == null) {
      this.knownProxies = new ArrayList<>();
    }
    this.knownProxies.add(knownProxiesItem);
    return this;
  }

  /**
   * Gets or sets the known proxies. If the proxy is a network, it&#39;s added to the KnownNetworks.
   * @return knownProxies
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KNOWN_PROXIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getKnownProxies() {
    return knownProxies;
  }


  @JsonProperty(JSON_PROPERTY_KNOWN_PROXIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKnownProxies(@javax.annotation.Nullable List<String> knownProxies) {
    this.knownProxies = knownProxies;
  }


  public NetworkConfiguration enablePublishedServerUriByRequest(@javax.annotation.Nullable Boolean enablePublishedServerUriByRequest) {
    this.enablePublishedServerUriByRequest = enablePublishedServerUriByRequest;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the published server uri is based on information in HTTP requests.
   * @return enablePublishedServerUriByRequest
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnablePublishedServerUriByRequest() {
    return enablePublishedServerUriByRequest;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnablePublishedServerUriByRequest(@javax.annotation.Nullable Boolean enablePublishedServerUriByRequest) {
    this.enablePublishedServerUriByRequest = enablePublishedServerUriByRequest;
  }


  /**
   * Return true if this NetworkConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfiguration networkConfiguration = (NetworkConfiguration) o;
    return Objects.equals(this.requireHttps, networkConfiguration.requireHttps) &&
        Objects.equals(this.certificatePath, networkConfiguration.certificatePath) &&
        Objects.equals(this.certificatePassword, networkConfiguration.certificatePassword) &&
        Objects.equals(this.baseUrl, networkConfiguration.baseUrl) &&
        Objects.equals(this.publicHttpsPort, networkConfiguration.publicHttpsPort) &&
        Objects.equals(this.httpServerPortNumber, networkConfiguration.httpServerPortNumber) &&
        Objects.equals(this.httpsPortNumber, networkConfiguration.httpsPortNumber) &&
        Objects.equals(this.enableHttps, networkConfiguration.enableHttps) &&
        Objects.equals(this.publicPort, networkConfiguration.publicPort) &&
        Objects.equals(this.upnPCreateHttpPortMap, networkConfiguration.upnPCreateHttpPortMap) &&
        Objects.equals(this.udPPortRange, networkConfiguration.udPPortRange) &&
        Objects.equals(this.enableIPV6, networkConfiguration.enableIPV6) &&
        Objects.equals(this.enableIPV4, networkConfiguration.enableIPV4) &&
        Objects.equals(this.enableSSDPTracing, networkConfiguration.enableSSDPTracing) &&
        Objects.equals(this.ssDPTracingFilter, networkConfiguration.ssDPTracingFilter) &&
        Objects.equals(this.udPSendCount, networkConfiguration.udPSendCount) &&
        Objects.equals(this.udPSendDelay, networkConfiguration.udPSendDelay) &&
        Objects.equals(this.ignoreVirtualInterfaces, networkConfiguration.ignoreVirtualInterfaces) &&
        Objects.equals(this.virtualInterfaceNames, networkConfiguration.virtualInterfaceNames) &&
        Objects.equals(this.gatewayMonitorPeriod, networkConfiguration.gatewayMonitorPeriod) &&
        Objects.equals(this.enableMultiSocketBinding, networkConfiguration.enableMultiSocketBinding) &&
        Objects.equals(this.trustAllIP6Interfaces, networkConfiguration.trustAllIP6Interfaces) &&
        Objects.equals(this.hdHomerunPortRange, networkConfiguration.hdHomerunPortRange) &&
        Objects.equals(this.publishedServerUriBySubnet, networkConfiguration.publishedServerUriBySubnet) &&
        Objects.equals(this.autoDiscoveryTracing, networkConfiguration.autoDiscoveryTracing) &&
        Objects.equals(this.autoDiscovery, networkConfiguration.autoDiscovery) &&
        Objects.equals(this.remoteIPFilter, networkConfiguration.remoteIPFilter) &&
        Objects.equals(this.isRemoteIPFilterBlacklist, networkConfiguration.isRemoteIPFilterBlacklist) &&
        Objects.equals(this.enableUPnP, networkConfiguration.enableUPnP) &&
        Objects.equals(this.enableRemoteAccess, networkConfiguration.enableRemoteAccess) &&
        Objects.equals(this.localNetworkSubnets, networkConfiguration.localNetworkSubnets) &&
        Objects.equals(this.localNetworkAddresses, networkConfiguration.localNetworkAddresses) &&
        Objects.equals(this.knownProxies, networkConfiguration.knownProxies) &&
        Objects.equals(this.enablePublishedServerUriByRequest, networkConfiguration.enablePublishedServerUriByRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requireHttps, certificatePath, certificatePassword, baseUrl, publicHttpsPort, httpServerPortNumber, httpsPortNumber, enableHttps, publicPort, upnPCreateHttpPortMap, udPPortRange, enableIPV6, enableIPV4, enableSSDPTracing, ssDPTracingFilter, udPSendCount, udPSendDelay, ignoreVirtualInterfaces, virtualInterfaceNames, gatewayMonitorPeriod, enableMultiSocketBinding, trustAllIP6Interfaces, hdHomerunPortRange, publishedServerUriBySubnet, autoDiscoveryTracing, autoDiscovery, remoteIPFilter, isRemoteIPFilterBlacklist, enableUPnP, enableRemoteAccess, localNetworkSubnets, localNetworkAddresses, knownProxies, enablePublishedServerUriByRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfiguration {\n");
    sb.append("    requireHttps: ").append(toIndentedString(requireHttps)).append("\n");
    sb.append("    certificatePath: ").append(toIndentedString(certificatePath)).append("\n");
    sb.append("    certificatePassword: ").append(toIndentedString(certificatePassword)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    publicHttpsPort: ").append(toIndentedString(publicHttpsPort)).append("\n");
    sb.append("    httpServerPortNumber: ").append(toIndentedString(httpServerPortNumber)).append("\n");
    sb.append("    httpsPortNumber: ").append(toIndentedString(httpsPortNumber)).append("\n");
    sb.append("    enableHttps: ").append(toIndentedString(enableHttps)).append("\n");
    sb.append("    publicPort: ").append(toIndentedString(publicPort)).append("\n");
    sb.append("    upnPCreateHttpPortMap: ").append(toIndentedString(upnPCreateHttpPortMap)).append("\n");
    sb.append("    udPPortRange: ").append(toIndentedString(udPPortRange)).append("\n");
    sb.append("    enableIPV6: ").append(toIndentedString(enableIPV6)).append("\n");
    sb.append("    enableIPV4: ").append(toIndentedString(enableIPV4)).append("\n");
    sb.append("    enableSSDPTracing: ").append(toIndentedString(enableSSDPTracing)).append("\n");
    sb.append("    ssDPTracingFilter: ").append(toIndentedString(ssDPTracingFilter)).append("\n");
    sb.append("    udPSendCount: ").append(toIndentedString(udPSendCount)).append("\n");
    sb.append("    udPSendDelay: ").append(toIndentedString(udPSendDelay)).append("\n");
    sb.append("    ignoreVirtualInterfaces: ").append(toIndentedString(ignoreVirtualInterfaces)).append("\n");
    sb.append("    virtualInterfaceNames: ").append(toIndentedString(virtualInterfaceNames)).append("\n");
    sb.append("    gatewayMonitorPeriod: ").append(toIndentedString(gatewayMonitorPeriod)).append("\n");
    sb.append("    enableMultiSocketBinding: ").append(toIndentedString(enableMultiSocketBinding)).append("\n");
    sb.append("    trustAllIP6Interfaces: ").append(toIndentedString(trustAllIP6Interfaces)).append("\n");
    sb.append("    hdHomerunPortRange: ").append(toIndentedString(hdHomerunPortRange)).append("\n");
    sb.append("    publishedServerUriBySubnet: ").append(toIndentedString(publishedServerUriBySubnet)).append("\n");
    sb.append("    autoDiscoveryTracing: ").append(toIndentedString(autoDiscoveryTracing)).append("\n");
    sb.append("    autoDiscovery: ").append(toIndentedString(autoDiscovery)).append("\n");
    sb.append("    remoteIPFilter: ").append(toIndentedString(remoteIPFilter)).append("\n");
    sb.append("    isRemoteIPFilterBlacklist: ").append(toIndentedString(isRemoteIPFilterBlacklist)).append("\n");
    sb.append("    enableUPnP: ").append(toIndentedString(enableUPnP)).append("\n");
    sb.append("    enableRemoteAccess: ").append(toIndentedString(enableRemoteAccess)).append("\n");
    sb.append("    localNetworkSubnets: ").append(toIndentedString(localNetworkSubnets)).append("\n");
    sb.append("    localNetworkAddresses: ").append(toIndentedString(localNetworkAddresses)).append("\n");
    sb.append("    knownProxies: ").append(toIndentedString(knownProxies)).append("\n");
    sb.append("    enablePublishedServerUriByRequest: ").append(toIndentedString(enablePublishedServerUriByRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `RequireHttps` to the URL query string
    if (getRequireHttps() != null) {
      joiner.add(String.format("%sRequireHttps%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequireHttps()))));
    }

    // add `CertificatePath` to the URL query string
    if (getCertificatePath() != null) {
      joiner.add(String.format("%sCertificatePath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCertificatePath()))));
    }

    // add `CertificatePassword` to the URL query string
    if (getCertificatePassword() != null) {
      joiner.add(String.format("%sCertificatePassword%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCertificatePassword()))));
    }

    // add `BaseUrl` to the URL query string
    if (getBaseUrl() != null) {
      joiner.add(String.format("%sBaseUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBaseUrl()))));
    }

    // add `PublicHttpsPort` to the URL query string
    if (getPublicHttpsPort() != null) {
      joiner.add(String.format("%sPublicHttpsPort%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPublicHttpsPort()))));
    }

    // add `HttpServerPortNumber` to the URL query string
    if (getHttpServerPortNumber() != null) {
      joiner.add(String.format("%sHttpServerPortNumber%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHttpServerPortNumber()))));
    }

    // add `HttpsPortNumber` to the URL query string
    if (getHttpsPortNumber() != null) {
      joiner.add(String.format("%sHttpsPortNumber%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHttpsPortNumber()))));
    }

    // add `EnableHttps` to the URL query string
    if (getEnableHttps() != null) {
      joiner.add(String.format("%sEnableHttps%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableHttps()))));
    }

    // add `PublicPort` to the URL query string
    if (getPublicPort() != null) {
      joiner.add(String.format("%sPublicPort%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPublicPort()))));
    }

    // add `UPnPCreateHttpPortMap` to the URL query string
    if (getUpnPCreateHttpPortMap() != null) {
      joiner.add(String.format("%sUPnPCreateHttpPortMap%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUpnPCreateHttpPortMap()))));
    }

    // add `UDPPortRange` to the URL query string
    if (getUdPPortRange() != null) {
      joiner.add(String.format("%sUDPPortRange%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUdPPortRange()))));
    }

    // add `EnableIPV6` to the URL query string
    if (getEnableIPV6() != null) {
      joiner.add(String.format("%sEnableIPV6%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIPV6()))));
    }

    // add `EnableIPV4` to the URL query string
    if (getEnableIPV4() != null) {
      joiner.add(String.format("%sEnableIPV4%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIPV4()))));
    }

    // add `EnableSSDPTracing` to the URL query string
    if (getEnableSSDPTracing() != null) {
      joiner.add(String.format("%sEnableSSDPTracing%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableSSDPTracing()))));
    }

    // add `SSDPTracingFilter` to the URL query string
    if (getSsDPTracingFilter() != null) {
      joiner.add(String.format("%sSSDPTracingFilter%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSsDPTracingFilter()))));
    }

    // add `UDPSendCount` to the URL query string
    if (getUdPSendCount() != null) {
      joiner.add(String.format("%sUDPSendCount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUdPSendCount()))));
    }

    // add `UDPSendDelay` to the URL query string
    if (getUdPSendDelay() != null) {
      joiner.add(String.format("%sUDPSendDelay%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUdPSendDelay()))));
    }

    // add `IgnoreVirtualInterfaces` to the URL query string
    if (getIgnoreVirtualInterfaces() != null) {
      joiner.add(String.format("%sIgnoreVirtualInterfaces%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIgnoreVirtualInterfaces()))));
    }

    // add `VirtualInterfaceNames` to the URL query string
    if (getVirtualInterfaceNames() != null) {
      joiner.add(String.format("%sVirtualInterfaceNames%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVirtualInterfaceNames()))));
    }

    // add `GatewayMonitorPeriod` to the URL query string
    if (getGatewayMonitorPeriod() != null) {
      joiner.add(String.format("%sGatewayMonitorPeriod%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getGatewayMonitorPeriod()))));
    }

    // add `EnableMultiSocketBinding` to the URL query string
    if (getEnableMultiSocketBinding() != null) {
      joiner.add(String.format("%sEnableMultiSocketBinding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableMultiSocketBinding()))));
    }

    // add `TrustAllIP6Interfaces` to the URL query string
    if (getTrustAllIP6Interfaces() != null) {
      joiner.add(String.format("%sTrustAllIP6Interfaces%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTrustAllIP6Interfaces()))));
    }

    // add `HDHomerunPortRange` to the URL query string
    if (getHdHomerunPortRange() != null) {
      joiner.add(String.format("%sHDHomerunPortRange%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHdHomerunPortRange()))));
    }

    // add `PublishedServerUriBySubnet` to the URL query string
    if (getPublishedServerUriBySubnet() != null) {
      for (int i = 0; i < getPublishedServerUriBySubnet().size(); i++) {
        joiner.add(String.format("%sPublishedServerUriBySubnet%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getPublishedServerUriBySubnet().get(i)))));
      }
    }

    // add `AutoDiscoveryTracing` to the URL query string
    if (getAutoDiscoveryTracing() != null) {
      joiner.add(String.format("%sAutoDiscoveryTracing%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAutoDiscoveryTracing()))));
    }

    // add `AutoDiscovery` to the URL query string
    if (getAutoDiscovery() != null) {
      joiner.add(String.format("%sAutoDiscovery%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAutoDiscovery()))));
    }

    // add `RemoteIPFilter` to the URL query string
    if (getRemoteIPFilter() != null) {
      for (int i = 0; i < getRemoteIPFilter().size(); i++) {
        joiner.add(String.format("%sRemoteIPFilter%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getRemoteIPFilter().get(i)))));
      }
    }

    // add `IsRemoteIPFilterBlacklist` to the URL query string
    if (getIsRemoteIPFilterBlacklist() != null) {
      joiner.add(String.format("%sIsRemoteIPFilterBlacklist%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsRemoteIPFilterBlacklist()))));
    }

    // add `EnableUPnP` to the URL query string
    if (getEnableUPnP() != null) {
      joiner.add(String.format("%sEnableUPnP%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableUPnP()))));
    }

    // add `EnableRemoteAccess` to the URL query string
    if (getEnableRemoteAccess() != null) {
      joiner.add(String.format("%sEnableRemoteAccess%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableRemoteAccess()))));
    }

    // add `LocalNetworkSubnets` to the URL query string
    if (getLocalNetworkSubnets() != null) {
      for (int i = 0; i < getLocalNetworkSubnets().size(); i++) {
        joiner.add(String.format("%sLocalNetworkSubnets%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getLocalNetworkSubnets().get(i)))));
      }
    }

    // add `LocalNetworkAddresses` to the URL query string
    if (getLocalNetworkAddresses() != null) {
      for (int i = 0; i < getLocalNetworkAddresses().size(); i++) {
        joiner.add(String.format("%sLocalNetworkAddresses%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getLocalNetworkAddresses().get(i)))));
      }
    }

    // add `KnownProxies` to the URL query string
    if (getKnownProxies() != null) {
      for (int i = 0; i < getKnownProxies().size(); i++) {
        joiner.add(String.format("%sKnownProxies%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getKnownProxies().get(i)))));
      }
    }

    // add `EnablePublishedServerUriByRequest` to the URL query string
    if (getEnablePublishedServerUriByRequest() != null) {
      joiner.add(String.format("%sEnablePublishedServerUriByRequest%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnablePublishedServerUriByRequest()))));
    }

    return joiner.toString();
  }
}

