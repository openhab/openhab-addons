/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Validate path object.
 */
@JsonPropertyOrder({
  ValidatePathDto.JSON_PROPERTY_VALIDATE_WRITABLE,
  ValidatePathDto.JSON_PROPERTY_PATH,
  ValidatePathDto.JSON_PROPERTY_IS_FILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:58.939457991Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ValidatePathDto {
  public static final String JSON_PROPERTY_VALIDATE_WRITABLE = "ValidateWritable";
  @javax.annotation.Nullable
  private Boolean validateWritable;

  public static final String JSON_PROPERTY_PATH = "Path";
  private JsonNullable<String> path = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_FILE = "IsFile";
  private JsonNullable<Boolean> isFile = JsonNullable.<Boolean>undefined();

  public ValidatePathDto() { 
  }

  public ValidatePathDto validateWritable(@javax.annotation.Nullable Boolean validateWritable) {
    this.validateWritable = validateWritable;
    return this;
  }

  /**
   * Gets or sets a value indicating whether validate if path is writable.
   * @return validateWritable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALIDATE_WRITABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getValidateWritable() {
    return validateWritable;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATE_WRITABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidateWritable(@javax.annotation.Nullable Boolean validateWritable) {
    this.validateWritable = validateWritable;
  }


  public ValidatePathDto path(@javax.annotation.Nullable String path) {
    this.path = JsonNullable.<String>of(path);
    return this;
  }

  /**
   * Gets or sets the path.
   * @return path
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getPath() {
        return path.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPath_JsonNullable() {
    return path;
  }
  
  @JsonProperty(JSON_PROPERTY_PATH)
  public void setPath_JsonNullable(JsonNullable<String> path) {
    this.path = path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = JsonNullable.<String>of(path);
  }


  public ValidatePathDto isFile(@javax.annotation.Nullable Boolean isFile) {
    this.isFile = JsonNullable.<Boolean>of(isFile);
    return this;
  }

  /**
   * Gets or sets is path file.
   * @return isFile
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getIsFile() {
        return isFile.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsFile_JsonNullable() {
    return isFile;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_FILE)
  public void setIsFile_JsonNullable(JsonNullable<Boolean> isFile) {
    this.isFile = isFile;
  }

  public void setIsFile(@javax.annotation.Nullable Boolean isFile) {
    this.isFile = JsonNullable.<Boolean>of(isFile);
  }


  /**
   * Return true if this ValidatePathDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidatePathDto validatePathDto = (ValidatePathDto) o;
    return Objects.equals(this.validateWritable, validatePathDto.validateWritable) &&
        equalsNullable(this.path, validatePathDto.path) &&
        equalsNullable(this.isFile, validatePathDto.isFile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(validateWritable, hashCodeNullable(path), hashCodeNullable(isFile));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidatePathDto {\n");
    sb.append("    validateWritable: ").append(toIndentedString(validateWritable)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    isFile: ").append(toIndentedString(isFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ValidateWritable` to the URL query string
    if (getValidateWritable() != null) {
      joiner.add(String.format("%sValidateWritable%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getValidateWritable()))));
    }

    // add `Path` to the URL query string
    if (getPath() != null) {
      joiner.add(String.format("%sPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPath()))));
    }

    // add `IsFile` to the URL query string
    if (getIsFile() != null) {
      joiner.add(String.format("%sIsFile%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsFile()))));
    }

    return joiner.toString();
  }
}

