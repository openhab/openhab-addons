/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediaSourceInfo;
import org.openapitools.client.model.PlaybackErrorCode;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class PlaybackInfoResponse.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class PlaybackInfoResponse {
  public static final String SERIALIZED_NAME_MEDIA_SOURCES = "MediaSources";
  @SerializedName(SERIALIZED_NAME_MEDIA_SOURCES)
  @javax.annotation.Nullable
  private List<MediaSourceInfo> mediaSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAY_SESSION_ID = "PlaySessionId";
  @SerializedName(SERIALIZED_NAME_PLAY_SESSION_ID)
  @javax.annotation.Nullable
  private String playSessionId;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  @javax.annotation.Nullable
  private PlaybackErrorCode errorCode;

  public PlaybackInfoResponse() {
  }

  public PlaybackInfoResponse mediaSources(@javax.annotation.Nullable List<MediaSourceInfo> mediaSources) {
    this.mediaSources = mediaSources;
    return this;
  }

  public PlaybackInfoResponse addMediaSourcesItem(MediaSourceInfo mediaSourcesItem) {
    if (this.mediaSources == null) {
      this.mediaSources = new ArrayList<>();
    }
    this.mediaSources.add(mediaSourcesItem);
    return this;
  }

  /**
   * Gets or sets the media sources.
   * @return mediaSources
   */
  @javax.annotation.Nullable
  public List<MediaSourceInfo> getMediaSources() {
    return mediaSources;
  }

  public void setMediaSources(@javax.annotation.Nullable List<MediaSourceInfo> mediaSources) {
    this.mediaSources = mediaSources;
  }


  public PlaybackInfoResponse playSessionId(@javax.annotation.Nullable String playSessionId) {
    this.playSessionId = playSessionId;
    return this;
  }

  /**
   * Gets or sets the play session identifier.
   * @return playSessionId
   */
  @javax.annotation.Nullable
  public String getPlaySessionId() {
    return playSessionId;
  }

  public void setPlaySessionId(@javax.annotation.Nullable String playSessionId) {
    this.playSessionId = playSessionId;
  }


  public PlaybackInfoResponse errorCode(@javax.annotation.Nullable PlaybackErrorCode errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Gets or sets the error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public PlaybackErrorCode getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(@javax.annotation.Nullable PlaybackErrorCode errorCode) {
    this.errorCode = errorCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaybackInfoResponse playbackInfoResponse = (PlaybackInfoResponse) o;
    return Objects.equals(this.mediaSources, playbackInfoResponse.mediaSources) &&
        Objects.equals(this.playSessionId, playbackInfoResponse.playSessionId) &&
        Objects.equals(this.errorCode, playbackInfoResponse.errorCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaSources, playSessionId, errorCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaybackInfoResponse {\n");
    sb.append("    mediaSources: ").append(toIndentedString(mediaSources)).append("\n");
    sb.append("    playSessionId: ").append(toIndentedString(playSessionId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MediaSources");
    openapiFields.add("PlaySessionId");
    openapiFields.add("ErrorCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaybackInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaybackInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaybackInfoResponse is not found in the empty JSON string", PlaybackInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaybackInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaybackInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("MediaSources") != null && !jsonObj.get("MediaSources").isJsonNull()) {
        JsonArray jsonArraymediaSources = jsonObj.getAsJsonArray("MediaSources");
        if (jsonArraymediaSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MediaSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MediaSources` to be an array in the JSON string but got `%s`", jsonObj.get("MediaSources").toString()));
          }

          // validate the optional field `MediaSources` (array)
          for (int i = 0; i < jsonArraymediaSources.size(); i++) {
            MediaSourceInfo.validateJsonElement(jsonArraymediaSources.get(i));
          };
        }
      }
      if ((jsonObj.get("PlaySessionId") != null && !jsonObj.get("PlaySessionId").isJsonNull()) && !jsonObj.get("PlaySessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaySessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaySessionId").toString()));
      }
      // validate the optional field `ErrorCode`
      if (jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) {
        PlaybackErrorCode.validateJsonElement(jsonObj.get("ErrorCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaybackInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaybackInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaybackInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaybackInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaybackInfoResponse>() {
           @Override
           public void write(JsonWriter out, PlaybackInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaybackInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaybackInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaybackInfoResponse
   * @throws IOException if the JSON string is invalid with respect to PlaybackInfoResponse
   */
  public static PlaybackInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaybackInfoResponse.class);
  }

  /**
   * Convert an instance of PlaybackInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

