/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HardwareAccelerationType;
import org.openapitools.client.model.TranscodeReason;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class holding information on a runnning transcode.
 */
@JsonPropertyOrder({
  TranscodingInfo.JSON_PROPERTY_AUDIO_CODEC,
  TranscodingInfo.JSON_PROPERTY_VIDEO_CODEC,
  TranscodingInfo.JSON_PROPERTY_CONTAINER,
  TranscodingInfo.JSON_PROPERTY_IS_VIDEO_DIRECT,
  TranscodingInfo.JSON_PROPERTY_IS_AUDIO_DIRECT,
  TranscodingInfo.JSON_PROPERTY_BITRATE,
  TranscodingInfo.JSON_PROPERTY_FRAMERATE,
  TranscodingInfo.JSON_PROPERTY_COMPLETION_PERCENTAGE,
  TranscodingInfo.JSON_PROPERTY_WIDTH,
  TranscodingInfo.JSON_PROPERTY_HEIGHT,
  TranscodingInfo.JSON_PROPERTY_AUDIO_CHANNELS,
  TranscodingInfo.JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE,
  TranscodingInfo.JSON_PROPERTY_TRANSCODE_REASONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:50.987643556Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class TranscodingInfo {
  public static final String JSON_PROPERTY_AUDIO_CODEC = "AudioCodec";
  private JsonNullable<String> audioCodec = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VIDEO_CODEC = "VideoCodec";
  private JsonNullable<String> videoCodec = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CONTAINER = "Container";
  private JsonNullable<String> container = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_VIDEO_DIRECT = "IsVideoDirect";
  @javax.annotation.Nullable
  private Boolean isVideoDirect;

  public static final String JSON_PROPERTY_IS_AUDIO_DIRECT = "IsAudioDirect";
  @javax.annotation.Nullable
  private Boolean isAudioDirect;

  public static final String JSON_PROPERTY_BITRATE = "Bitrate";
  private JsonNullable<Integer> bitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_FRAMERATE = "Framerate";
  private JsonNullable<Float> framerate = JsonNullable.<Float>undefined();

  public static final String JSON_PROPERTY_COMPLETION_PERCENTAGE = "CompletionPercentage";
  private JsonNullable<Double> completionPercentage = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_WIDTH = "Width";
  private JsonNullable<Integer> width = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_HEIGHT = "Height";
  private JsonNullable<Integer> height = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_AUDIO_CHANNELS = "AudioChannels";
  private JsonNullable<Integer> audioChannels = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE = "HardwareAccelerationType";
  private JsonNullable<HardwareAccelerationType> hardwareAccelerationType = JsonNullable.<HardwareAccelerationType>undefined();

  /**
   * Gets or Sets transcodeReasons
   */
  public enum TranscodeReason {
    CONTAINER_NOT_SUPPORTED(TranscodeReason.valueOf("ContainerNotSupported")),
    
    VIDEO_CODEC_NOT_SUPPORTED(TranscodeReason.valueOf("VideoCodecNotSupported")),
    
    AUDIO_CODEC_NOT_SUPPORTED(TranscodeReason.valueOf("AudioCodecNotSupported")),
    
    SUBTITLE_CODEC_NOT_SUPPORTED(TranscodeReason.valueOf("SubtitleCodecNotSupported")),
    
    AUDIO_IS_EXTERNAL(TranscodeReason.valueOf("AudioIsExternal")),
    
    SECONDARY_AUDIO_NOT_SUPPORTED(TranscodeReason.valueOf("SecondaryAudioNotSupported")),
    
    VIDEO_PROFILE_NOT_SUPPORTED(TranscodeReason.valueOf("VideoProfileNotSupported")),
    
    VIDEO_LEVEL_NOT_SUPPORTED(TranscodeReason.valueOf("VideoLevelNotSupported")),
    
    VIDEO_RESOLUTION_NOT_SUPPORTED(TranscodeReason.valueOf("VideoResolutionNotSupported")),
    
    VIDEO_BIT_DEPTH_NOT_SUPPORTED(TranscodeReason.valueOf("VideoBitDepthNotSupported")),
    
    VIDEO_FRAMERATE_NOT_SUPPORTED(TranscodeReason.valueOf("VideoFramerateNotSupported")),
    
    REF_FRAMES_NOT_SUPPORTED(TranscodeReason.valueOf("RefFramesNotSupported")),
    
    ANAMORPHIC_VIDEO_NOT_SUPPORTED(TranscodeReason.valueOf("AnamorphicVideoNotSupported")),
    
    INTERLACED_VIDEO_NOT_SUPPORTED(TranscodeReason.valueOf("InterlacedVideoNotSupported")),
    
    AUDIO_CHANNELS_NOT_SUPPORTED(TranscodeReason.valueOf("AudioChannelsNotSupported")),
    
    AUDIO_PROFILE_NOT_SUPPORTED(TranscodeReason.valueOf("AudioProfileNotSupported")),
    
    AUDIO_SAMPLE_RATE_NOT_SUPPORTED(TranscodeReason.valueOf("AudioSampleRateNotSupported")),
    
    AUDIO_BIT_DEPTH_NOT_SUPPORTED(TranscodeReason.valueOf("AudioBitDepthNotSupported")),
    
    CONTAINER_BITRATE_EXCEEDS_LIMIT(TranscodeReason.valueOf("ContainerBitrateExceedsLimit")),
    
    VIDEO_BITRATE_NOT_SUPPORTED(TranscodeReason.valueOf("VideoBitrateNotSupported")),
    
    AUDIO_BITRATE_NOT_SUPPORTED(TranscodeReason.valueOf("AudioBitrateNotSupported")),
    
    UNKNOWN_VIDEO_STREAM_INFO(TranscodeReason.valueOf("UnknownVideoStreamInfo")),
    
    UNKNOWN_AUDIO_STREAM_INFO(TranscodeReason.valueOf("UnknownAudioStreamInfo")),
    
    DIRECT_PLAY_ERROR(TranscodeReason.valueOf("DirectPlayError")),
    
    VIDEO_RANGE_TYPE_NOT_SUPPORTED(TranscodeReason.valueOf("VideoRangeTypeNotSupported")),
    
    VIDEO_CODEC_TAG_NOT_SUPPORTED(TranscodeReason.valueOf("VideoCodecTagNotSupported"));

    private TranscodeReason value;

    TranscodeReason(TranscodeReason value) {
      this.value = value;
    }

    @JsonValue
    public TranscodeReason getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TranscodeReason fromValue(TranscodeReason value) {
      for (TranscodeReason b : TranscodeReason.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSCODE_REASONS = "TranscodeReasons";
  @javax.annotation.Nullable
  private TranscodeReasonsEnum transcodeReasons = new ArrayList<>();

  public TranscodingInfo() { 
  }

  public TranscodingInfo audioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = JsonNullable.<String>of(audioCodec);
    return this;
  }

  /**
   * Gets or sets the thread count used for encoding.
   * @return audioCodec
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getAudioCodec() {
        return audioCodec.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAudioCodec_JsonNullable() {
    return audioCodec;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  public void setAudioCodec_JsonNullable(JsonNullable<String> audioCodec) {
    this.audioCodec = audioCodec;
  }

  public void setAudioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = JsonNullable.<String>of(audioCodec);
  }


  public TranscodingInfo videoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = JsonNullable.<String>of(videoCodec);
    return this;
  }

  /**
   * Gets or sets the thread count used for encoding.
   * @return videoCodec
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getVideoCodec() {
        return videoCodec.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VIDEO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getVideoCodec_JsonNullable() {
    return videoCodec;
  }
  
  @JsonProperty(JSON_PROPERTY_VIDEO_CODEC)
  public void setVideoCodec_JsonNullable(JsonNullable<String> videoCodec) {
    this.videoCodec = videoCodec;
  }

  public void setVideoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = JsonNullable.<String>of(videoCodec);
  }


  public TranscodingInfo container(@javax.annotation.Nullable String container) {
    this.container = JsonNullable.<String>of(container);
    return this;
  }

  /**
   * Gets or sets the thread count used for encoding.
   * @return container
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getContainer() {
        return container.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getContainer_JsonNullable() {
    return container;
  }
  
  @JsonProperty(JSON_PROPERTY_CONTAINER)
  public void setContainer_JsonNullable(JsonNullable<String> container) {
    this.container = container;
  }

  public void setContainer(@javax.annotation.Nullable String container) {
    this.container = JsonNullable.<String>of(container);
  }


  public TranscodingInfo isVideoDirect(@javax.annotation.Nullable Boolean isVideoDirect) {
    this.isVideoDirect = isVideoDirect;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the video is passed through.
   * @return isVideoDirect
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_VIDEO_DIRECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsVideoDirect() {
    return isVideoDirect;
  }


  @JsonProperty(JSON_PROPERTY_IS_VIDEO_DIRECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsVideoDirect(@javax.annotation.Nullable Boolean isVideoDirect) {
    this.isVideoDirect = isVideoDirect;
  }


  public TranscodingInfo isAudioDirect(@javax.annotation.Nullable Boolean isAudioDirect) {
    this.isAudioDirect = isAudioDirect;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the audio is passed through.
   * @return isAudioDirect
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_AUDIO_DIRECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsAudioDirect() {
    return isAudioDirect;
  }


  @JsonProperty(JSON_PROPERTY_IS_AUDIO_DIRECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAudioDirect(@javax.annotation.Nullable Boolean isAudioDirect) {
    this.isAudioDirect = isAudioDirect;
  }


  public TranscodingInfo bitrate(@javax.annotation.Nullable Integer bitrate) {
    this.bitrate = JsonNullable.<Integer>of(bitrate);
    return this;
  }

  /**
   * Gets or sets the bitrate.
   * @return bitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getBitrate() {
        return bitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getBitrate_JsonNullable() {
    return bitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_BITRATE)
  public void setBitrate_JsonNullable(JsonNullable<Integer> bitrate) {
    this.bitrate = bitrate;
  }

  public void setBitrate(@javax.annotation.Nullable Integer bitrate) {
    this.bitrate = JsonNullable.<Integer>of(bitrate);
  }


  public TranscodingInfo framerate(@javax.annotation.Nullable Float framerate) {
    this.framerate = JsonNullable.<Float>of(framerate);
    return this;
  }

  /**
   * Gets or sets the framerate.
   * @return framerate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Float getFramerate() {
        return framerate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FRAMERATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Float> getFramerate_JsonNullable() {
    return framerate;
  }
  
  @JsonProperty(JSON_PROPERTY_FRAMERATE)
  public void setFramerate_JsonNullable(JsonNullable<Float> framerate) {
    this.framerate = framerate;
  }

  public void setFramerate(@javax.annotation.Nullable Float framerate) {
    this.framerate = JsonNullable.<Float>of(framerate);
  }


  public TranscodingInfo completionPercentage(@javax.annotation.Nullable Double completionPercentage) {
    this.completionPercentage = JsonNullable.<Double>of(completionPercentage);
    return this;
  }

  /**
   * Gets or sets the completion percentage.
   * @return completionPercentage
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Double getCompletionPercentage() {
        return completionPercentage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETION_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getCompletionPercentage_JsonNullable() {
    return completionPercentage;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETION_PERCENTAGE)
  public void setCompletionPercentage_JsonNullable(JsonNullable<Double> completionPercentage) {
    this.completionPercentage = completionPercentage;
  }

  public void setCompletionPercentage(@javax.annotation.Nullable Double completionPercentage) {
    this.completionPercentage = JsonNullable.<Double>of(completionPercentage);
  }


  public TranscodingInfo width(@javax.annotation.Nullable Integer width) {
    this.width = JsonNullable.<Integer>of(width);
    return this;
  }

  /**
   * Gets or sets the video width.
   * @return width
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getWidth() {
        return width.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getWidth_JsonNullable() {
    return width;
  }
  
  @JsonProperty(JSON_PROPERTY_WIDTH)
  public void setWidth_JsonNullable(JsonNullable<Integer> width) {
    this.width = width;
  }

  public void setWidth(@javax.annotation.Nullable Integer width) {
    this.width = JsonNullable.<Integer>of(width);
  }


  public TranscodingInfo height(@javax.annotation.Nullable Integer height) {
    this.height = JsonNullable.<Integer>of(height);
    return this;
  }

  /**
   * Gets or sets the video height.
   * @return height
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getHeight() {
        return height.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getHeight_JsonNullable() {
    return height;
  }
  
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  public void setHeight_JsonNullable(JsonNullable<Integer> height) {
    this.height = height;
  }

  public void setHeight(@javax.annotation.Nullable Integer height) {
    this.height = JsonNullable.<Integer>of(height);
  }


  public TranscodingInfo audioChannels(@javax.annotation.Nullable Integer audioChannels) {
    this.audioChannels = JsonNullable.<Integer>of(audioChannels);
    return this;
  }

  /**
   * Gets or sets the audio channels.
   * @return audioChannels
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getAudioChannels() {
        return audioChannels.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAudioChannels_JsonNullable() {
    return audioChannels;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_CHANNELS)
  public void setAudioChannels_JsonNullable(JsonNullable<Integer> audioChannels) {
    this.audioChannels = audioChannels;
  }

  public void setAudioChannels(@javax.annotation.Nullable Integer audioChannels) {
    this.audioChannels = JsonNullable.<Integer>of(audioChannels);
  }


  public TranscodingInfo hardwareAccelerationType(@javax.annotation.Nullable HardwareAccelerationType hardwareAccelerationType) {
    this.hardwareAccelerationType = JsonNullable.<HardwareAccelerationType>of(hardwareAccelerationType);
    return this;
  }

  /**
   * Gets or sets the hardware acceleration type.
   * @return hardwareAccelerationType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public HardwareAccelerationType getHardwareAccelerationType() {
        return hardwareAccelerationType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<HardwareAccelerationType> getHardwareAccelerationType_JsonNullable() {
    return hardwareAccelerationType;
  }
  
  @JsonProperty(JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE)
  public void setHardwareAccelerationType_JsonNullable(JsonNullable<HardwareAccelerationType> hardwareAccelerationType) {
    this.hardwareAccelerationType = hardwareAccelerationType;
  }

  public void setHardwareAccelerationType(@javax.annotation.Nullable HardwareAccelerationType hardwareAccelerationType) {
    this.hardwareAccelerationType = JsonNullable.<HardwareAccelerationType>of(hardwareAccelerationType);
  }


  public TranscodingInfo transcodeReasons(@javax.annotation.Nullable TranscodeReasonsEnum transcodeReasons) {
    this.transcodeReasons = transcodeReasons;
    return this;
  }

  public TranscodingInfo addTranscodeReasonsItem(TranscodeReason transcodeReasonsItem) {
    if (this.transcodeReasons == null) {
      this.transcodeReasons = new ArrayList<>();
    }
    this.transcodeReasons.add(transcodeReasonsItem);
    return this;
  }

  /**
   * Gets or sets the transcode reasons.
   * @return transcodeReasons
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSCODE_REASONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TranscodeReasonsEnum getTranscodeReasons() {
    return transcodeReasons;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCODE_REASONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscodeReasons(@javax.annotation.Nullable TranscodeReasonsEnum transcodeReasons) {
    this.transcodeReasons = transcodeReasons;
  }


  /**
   * Return true if this TranscodingInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscodingInfo transcodingInfo = (TranscodingInfo) o;
    return equalsNullable(this.audioCodec, transcodingInfo.audioCodec) &&
        equalsNullable(this.videoCodec, transcodingInfo.videoCodec) &&
        equalsNullable(this.container, transcodingInfo.container) &&
        Objects.equals(this.isVideoDirect, transcodingInfo.isVideoDirect) &&
        Objects.equals(this.isAudioDirect, transcodingInfo.isAudioDirect) &&
        equalsNullable(this.bitrate, transcodingInfo.bitrate) &&
        equalsNullable(this.framerate, transcodingInfo.framerate) &&
        equalsNullable(this.completionPercentage, transcodingInfo.completionPercentage) &&
        equalsNullable(this.width, transcodingInfo.width) &&
        equalsNullable(this.height, transcodingInfo.height) &&
        equalsNullable(this.audioChannels, transcodingInfo.audioChannels) &&
        equalsNullable(this.hardwareAccelerationType, transcodingInfo.hardwareAccelerationType) &&
        Objects.equals(this.transcodeReasons, transcodingInfo.transcodeReasons);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(audioCodec), hashCodeNullable(videoCodec), hashCodeNullable(container), isVideoDirect, isAudioDirect, hashCodeNullable(bitrate), hashCodeNullable(framerate), hashCodeNullable(completionPercentage), hashCodeNullable(width), hashCodeNullable(height), hashCodeNullable(audioChannels), hashCodeNullable(hardwareAccelerationType), transcodeReasons);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscodingInfo {\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    isVideoDirect: ").append(toIndentedString(isVideoDirect)).append("\n");
    sb.append("    isAudioDirect: ").append(toIndentedString(isAudioDirect)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    framerate: ").append(toIndentedString(framerate)).append("\n");
    sb.append("    completionPercentage: ").append(toIndentedString(completionPercentage)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    audioChannels: ").append(toIndentedString(audioChannels)).append("\n");
    sb.append("    hardwareAccelerationType: ").append(toIndentedString(hardwareAccelerationType)).append("\n");
    sb.append("    transcodeReasons: ").append(toIndentedString(transcodeReasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `AudioCodec` to the URL query string
    if (getAudioCodec() != null) {
      joiner.add(String.format("%sAudioCodec%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAudioCodec()))));
    }

    // add `VideoCodec` to the URL query string
    if (getVideoCodec() != null) {
      joiner.add(String.format("%sVideoCodec%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVideoCodec()))));
    }

    // add `Container` to the URL query string
    if (getContainer() != null) {
      joiner.add(String.format("%sContainer%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContainer()))));
    }

    // add `IsVideoDirect` to the URL query string
    if (getIsVideoDirect() != null) {
      joiner.add(String.format("%sIsVideoDirect%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsVideoDirect()))));
    }

    // add `IsAudioDirect` to the URL query string
    if (getIsAudioDirect() != null) {
      joiner.add(String.format("%sIsAudioDirect%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsAudioDirect()))));
    }

    // add `Bitrate` to the URL query string
    if (getBitrate() != null) {
      joiner.add(String.format("%sBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBitrate()))));
    }

    // add `Framerate` to the URL query string
    if (getFramerate() != null) {
      joiner.add(String.format("%sFramerate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFramerate()))));
    }

    // add `CompletionPercentage` to the URL query string
    if (getCompletionPercentage() != null) {
      joiner.add(String.format("%sCompletionPercentage%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCompletionPercentage()))));
    }

    // add `Width` to the URL query string
    if (getWidth() != null) {
      joiner.add(String.format("%sWidth%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getWidth()))));
    }

    // add `Height` to the URL query string
    if (getHeight() != null) {
      joiner.add(String.format("%sHeight%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHeight()))));
    }

    // add `AudioChannels` to the URL query string
    if (getAudioChannels() != null) {
      joiner.add(String.format("%sAudioChannels%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAudioChannels()))));
    }

    // add `HardwareAccelerationType` to the URL query string
    if (getHardwareAccelerationType() != null) {
      joiner.add(String.format("%sHardwareAccelerationType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHardwareAccelerationType()))));
    }

    // add `TranscodeReasons` to the URL query string
    if (getTranscodeReasons() != null) {
      for (int i = 0; i < getTranscodeReasons().size(); i++) {
        if (getTranscodeReasons().get(i) != null) {
          joiner.add(String.format("%sTranscodeReasons%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getTranscodeReasons().get(i)))));
        }
      }
    }

    return joiner.toString();
  }
}

