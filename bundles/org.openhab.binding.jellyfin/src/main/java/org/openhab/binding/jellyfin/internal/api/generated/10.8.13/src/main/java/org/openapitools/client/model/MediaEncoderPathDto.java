/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Media Encoder Path Dto.
 */
@JsonPropertyOrder({
  MediaEncoderPathDto.JSON_PROPERTY_PATH,
  MediaEncoderPathDto.JSON_PROPERTY_PATH_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class MediaEncoderPathDto {
  public static final String JSON_PROPERTY_PATH = "Path";
  @javax.annotation.Nullable
  private String path;

  public static final String JSON_PROPERTY_PATH_TYPE = "PathType";
  @javax.annotation.Nullable
  private String pathType;

  public MediaEncoderPathDto() { 
  }

  public MediaEncoderPathDto path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * Gets or sets media encoder path.
   * @return path
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public MediaEncoderPathDto pathType(@javax.annotation.Nullable String pathType) {
    this.pathType = pathType;
    return this;
  }

  /**
   * Gets or sets media encoder path type.
   * @return pathType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPathType() {
    return pathType;
  }


  @JsonProperty(JSON_PROPERTY_PATH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPathType(@javax.annotation.Nullable String pathType) {
    this.pathType = pathType;
  }


  /**
   * Return true if this MediaEncoderPathDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaEncoderPathDto mediaEncoderPathDto = (MediaEncoderPathDto) o;
    return Objects.equals(this.path, mediaEncoderPathDto.path) &&
        Objects.equals(this.pathType, mediaEncoderPathDto.pathType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, pathType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaEncoderPathDto {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pathType: ").append(toIndentedString(pathType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Path` to the URL query string
    if (getPath() != null) {
      joiner.add(String.format("%sPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPath()))));
    }

    // add `PathType` to the URL query string
    if (getPathType() != null) {
      joiner.add(String.format("%sPathType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPathType()))));
    }

    return joiner.toString();
  }
}

