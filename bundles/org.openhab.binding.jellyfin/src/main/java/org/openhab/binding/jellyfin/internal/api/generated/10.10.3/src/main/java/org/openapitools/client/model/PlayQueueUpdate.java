/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupRepeatMode;
import org.openapitools.client.model.GroupShuffleMode;
import org.openapitools.client.model.PlayQueueUpdateReason;
import org.openapitools.client.model.SyncPlayQueueItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class PlayQueueUpdate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class PlayQueueUpdate {
  public static final String SERIALIZED_NAME_REASON = "Reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nullable
  private PlayQueueUpdateReason reason;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "LastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  @javax.annotation.Nullable
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_PLAYLIST = "Playlist";
  @SerializedName(SERIALIZED_NAME_PLAYLIST)
  @javax.annotation.Nullable
  private List<SyncPlayQueueItem> playlist = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYING_ITEM_INDEX = "PlayingItemIndex";
  @SerializedName(SERIALIZED_NAME_PLAYING_ITEM_INDEX)
  @javax.annotation.Nullable
  private Integer playingItemIndex;

  public static final String SERIALIZED_NAME_START_POSITION_TICKS = "StartPositionTicks";
  @SerializedName(SERIALIZED_NAME_START_POSITION_TICKS)
  @javax.annotation.Nullable
  private Long startPositionTicks;

  public static final String SERIALIZED_NAME_IS_PLAYING = "IsPlaying";
  @SerializedName(SERIALIZED_NAME_IS_PLAYING)
  @javax.annotation.Nullable
  private Boolean isPlaying;

  public static final String SERIALIZED_NAME_SHUFFLE_MODE = "ShuffleMode";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_MODE)
  @javax.annotation.Nullable
  private GroupShuffleMode shuffleMode;

  public static final String SERIALIZED_NAME_REPEAT_MODE = "RepeatMode";
  @SerializedName(SERIALIZED_NAME_REPEAT_MODE)
  @javax.annotation.Nullable
  private GroupRepeatMode repeatMode;

  public PlayQueueUpdate() {
  }

  public PlayQueueUpdate reason(@javax.annotation.Nullable PlayQueueUpdateReason reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Gets the request type that originated this update.
   * @return reason
   */
  @javax.annotation.Nullable
  public PlayQueueUpdateReason getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nullable PlayQueueUpdateReason reason) {
    this.reason = reason;
  }


  public PlayQueueUpdate lastUpdate(@javax.annotation.Nullable OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Gets the UTC time of the last change to the playing queue.
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(@javax.annotation.Nullable OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public PlayQueueUpdate playlist(@javax.annotation.Nullable List<SyncPlayQueueItem> playlist) {
    this.playlist = playlist;
    return this;
  }

  public PlayQueueUpdate addPlaylistItem(SyncPlayQueueItem playlistItem) {
    if (this.playlist == null) {
      this.playlist = new ArrayList<>();
    }
    this.playlist.add(playlistItem);
    return this;
  }

  /**
   * Gets the playlist.
   * @return playlist
   */
  @javax.annotation.Nullable
  public List<SyncPlayQueueItem> getPlaylist() {
    return playlist;
  }

  public void setPlaylist(@javax.annotation.Nullable List<SyncPlayQueueItem> playlist) {
    this.playlist = playlist;
  }


  public PlayQueueUpdate playingItemIndex(@javax.annotation.Nullable Integer playingItemIndex) {
    this.playingItemIndex = playingItemIndex;
    return this;
  }

  /**
   * Gets the playing item index in the playlist.
   * @return playingItemIndex
   */
  @javax.annotation.Nullable
  public Integer getPlayingItemIndex() {
    return playingItemIndex;
  }

  public void setPlayingItemIndex(@javax.annotation.Nullable Integer playingItemIndex) {
    this.playingItemIndex = playingItemIndex;
  }


  public PlayQueueUpdate startPositionTicks(@javax.annotation.Nullable Long startPositionTicks) {
    this.startPositionTicks = startPositionTicks;
    return this;
  }

  /**
   * Gets the start position ticks.
   * @return startPositionTicks
   */
  @javax.annotation.Nullable
  public Long getStartPositionTicks() {
    return startPositionTicks;
  }

  public void setStartPositionTicks(@javax.annotation.Nullable Long startPositionTicks) {
    this.startPositionTicks = startPositionTicks;
  }


  public PlayQueueUpdate isPlaying(@javax.annotation.Nullable Boolean isPlaying) {
    this.isPlaying = isPlaying;
    return this;
  }

  /**
   * Gets a value indicating whether the current item is playing.
   * @return isPlaying
   */
  @javax.annotation.Nullable
  public Boolean getIsPlaying() {
    return isPlaying;
  }

  public void setIsPlaying(@javax.annotation.Nullable Boolean isPlaying) {
    this.isPlaying = isPlaying;
  }


  public PlayQueueUpdate shuffleMode(@javax.annotation.Nullable GroupShuffleMode shuffleMode) {
    this.shuffleMode = shuffleMode;
    return this;
  }

  /**
   * Gets the shuffle mode.
   * @return shuffleMode
   */
  @javax.annotation.Nullable
  public GroupShuffleMode getShuffleMode() {
    return shuffleMode;
  }

  public void setShuffleMode(@javax.annotation.Nullable GroupShuffleMode shuffleMode) {
    this.shuffleMode = shuffleMode;
  }


  public PlayQueueUpdate repeatMode(@javax.annotation.Nullable GroupRepeatMode repeatMode) {
    this.repeatMode = repeatMode;
    return this;
  }

  /**
   * Gets the repeat mode.
   * @return repeatMode
   */
  @javax.annotation.Nullable
  public GroupRepeatMode getRepeatMode() {
    return repeatMode;
  }

  public void setRepeatMode(@javax.annotation.Nullable GroupRepeatMode repeatMode) {
    this.repeatMode = repeatMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayQueueUpdate playQueueUpdate = (PlayQueueUpdate) o;
    return Objects.equals(this.reason, playQueueUpdate.reason) &&
        Objects.equals(this.lastUpdate, playQueueUpdate.lastUpdate) &&
        Objects.equals(this.playlist, playQueueUpdate.playlist) &&
        Objects.equals(this.playingItemIndex, playQueueUpdate.playingItemIndex) &&
        Objects.equals(this.startPositionTicks, playQueueUpdate.startPositionTicks) &&
        Objects.equals(this.isPlaying, playQueueUpdate.isPlaying) &&
        Objects.equals(this.shuffleMode, playQueueUpdate.shuffleMode) &&
        Objects.equals(this.repeatMode, playQueueUpdate.repeatMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, lastUpdate, playlist, playingItemIndex, startPositionTicks, isPlaying, shuffleMode, repeatMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayQueueUpdate {\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    playlist: ").append(toIndentedString(playlist)).append("\n");
    sb.append("    playingItemIndex: ").append(toIndentedString(playingItemIndex)).append("\n");
    sb.append("    startPositionTicks: ").append(toIndentedString(startPositionTicks)).append("\n");
    sb.append("    isPlaying: ").append(toIndentedString(isPlaying)).append("\n");
    sb.append("    shuffleMode: ").append(toIndentedString(shuffleMode)).append("\n");
    sb.append("    repeatMode: ").append(toIndentedString(repeatMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Reason");
    openapiFields.add("LastUpdate");
    openapiFields.add("Playlist");
    openapiFields.add("PlayingItemIndex");
    openapiFields.add("StartPositionTicks");
    openapiFields.add("IsPlaying");
    openapiFields.add("ShuffleMode");
    openapiFields.add("RepeatMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayQueueUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayQueueUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayQueueUpdate is not found in the empty JSON string", PlayQueueUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayQueueUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayQueueUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Reason`
      if (jsonObj.get("Reason") != null && !jsonObj.get("Reason").isJsonNull()) {
        PlayQueueUpdateReason.validateJsonElement(jsonObj.get("Reason"));
      }
      if (jsonObj.get("Playlist") != null && !jsonObj.get("Playlist").isJsonNull()) {
        JsonArray jsonArrayplaylist = jsonObj.getAsJsonArray("Playlist");
        if (jsonArrayplaylist != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Playlist").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Playlist` to be an array in the JSON string but got `%s`", jsonObj.get("Playlist").toString()));
          }

          // validate the optional field `Playlist` (array)
          for (int i = 0; i < jsonArrayplaylist.size(); i++) {
            SyncPlayQueueItem.validateJsonElement(jsonArrayplaylist.get(i));
          };
        }
      }
      // validate the optional field `ShuffleMode`
      if (jsonObj.get("ShuffleMode") != null && !jsonObj.get("ShuffleMode").isJsonNull()) {
        GroupShuffleMode.validateJsonElement(jsonObj.get("ShuffleMode"));
      }
      // validate the optional field `RepeatMode`
      if (jsonObj.get("RepeatMode") != null && !jsonObj.get("RepeatMode").isJsonNull()) {
        GroupRepeatMode.validateJsonElement(jsonObj.get("RepeatMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayQueueUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayQueueUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayQueueUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayQueueUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayQueueUpdate>() {
           @Override
           public void write(JsonWriter out, PlayQueueUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayQueueUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayQueueUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayQueueUpdate
   * @throws IOException if the JSON string is invalid with respect to PlayQueueUpdate
   */
  public static PlayQueueUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayQueueUpdate.class);
  }

  /**
   * Convert an instance of PlayQueueUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

