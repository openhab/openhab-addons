/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.PluginStatus;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * This is a serializable stub class that is used by the api to provide information about installed plugins.
 */
@JsonPropertyOrder({
  PluginInfo.JSON_PROPERTY_NAME,
  PluginInfo.JSON_PROPERTY_VERSION,
  PluginInfo.JSON_PROPERTY_CONFIGURATION_FILE_NAME,
  PluginInfo.JSON_PROPERTY_DESCRIPTION,
  PluginInfo.JSON_PROPERTY_ID,
  PluginInfo.JSON_PROPERTY_CAN_UNINSTALL,
  PluginInfo.JSON_PROPERTY_HAS_IMAGE,
  PluginInfo.JSON_PROPERTY_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:40.061690683Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class PluginInfo {
  public static final String JSON_PROPERTY_NAME = "Name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_VERSION = "Version";
  @javax.annotation.Nullable
  private String version;

  public static final String JSON_PROPERTY_CONFIGURATION_FILE_NAME = "ConfigurationFileName";
  private JsonNullable<String> configurationFileName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "Description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_ID = "Id";
  @javax.annotation.Nullable
  private UUID id;

  public static final String JSON_PROPERTY_CAN_UNINSTALL = "CanUninstall";
  @javax.annotation.Nullable
  private Boolean canUninstall;

  public static final String JSON_PROPERTY_HAS_IMAGE = "HasImage";
  @javax.annotation.Nullable
  private Boolean hasImage;

  public static final String JSON_PROPERTY_STATUS = "Status";
  @javax.annotation.Nullable
  private PluginStatus status;

  public PluginInfo() { 
  }

  public PluginInfo name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public PluginInfo version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Gets or sets the version.
   * @return version
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public PluginInfo configurationFileName(@javax.annotation.Nullable String configurationFileName) {
    this.configurationFileName = JsonNullable.<String>of(configurationFileName);
    return this;
  }

  /**
   * Gets or sets the name of the configuration file.
   * @return configurationFileName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getConfigurationFileName() {
        return configurationFileName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONFIGURATION_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getConfigurationFileName_JsonNullable() {
    return configurationFileName;
  }
  
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_FILE_NAME)
  public void setConfigurationFileName_JsonNullable(JsonNullable<String> configurationFileName) {
    this.configurationFileName = configurationFileName;
  }

  public void setConfigurationFileName(@javax.annotation.Nullable String configurationFileName) {
    this.configurationFileName = JsonNullable.<String>of(configurationFileName);
  }


  public PluginInfo description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public PluginInfo id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the unique id.
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public PluginInfo canUninstall(@javax.annotation.Nullable Boolean canUninstall) {
    this.canUninstall = canUninstall;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the plugin can be uninstalled.
   * @return canUninstall
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_UNINSTALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCanUninstall() {
    return canUninstall;
  }


  @JsonProperty(JSON_PROPERTY_CAN_UNINSTALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanUninstall(@javax.annotation.Nullable Boolean canUninstall) {
    this.canUninstall = canUninstall;
  }


  public PluginInfo hasImage(@javax.annotation.Nullable Boolean hasImage) {
    this.hasImage = hasImage;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this plugin has a valid image.
   * @return hasImage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getHasImage() {
    return hasImage;
  }


  @JsonProperty(JSON_PROPERTY_HAS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasImage(@javax.annotation.Nullable Boolean hasImage) {
    this.hasImage = hasImage;
  }


  public PluginInfo status(@javax.annotation.Nullable PluginStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets a value indicating the status of the plugin.
   * @return status
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PluginStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(@javax.annotation.Nullable PluginStatus status) {
    this.status = status;
  }


  /**
   * Return true if this PluginInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginInfo pluginInfo = (PluginInfo) o;
    return Objects.equals(this.name, pluginInfo.name) &&
        Objects.equals(this.version, pluginInfo.version) &&
        equalsNullable(this.configurationFileName, pluginInfo.configurationFileName) &&
        Objects.equals(this.description, pluginInfo.description) &&
        Objects.equals(this.id, pluginInfo.id) &&
        Objects.equals(this.canUninstall, pluginInfo.canUninstall) &&
        Objects.equals(this.hasImage, pluginInfo.hasImage) &&
        Objects.equals(this.status, pluginInfo.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, version, hashCodeNullable(configurationFileName), description, id, canUninstall, hasImage, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    configurationFileName: ").append(toIndentedString(configurationFileName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    canUninstall: ").append(toIndentedString(canUninstall)).append("\n");
    sb.append("    hasImage: ").append(toIndentedString(hasImage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sVersion%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVersion()))));
    }

    // add `ConfigurationFileName` to the URL query string
    if (getConfigurationFileName() != null) {
      joiner.add(String.format("%sConfigurationFileName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getConfigurationFileName()))));
    }

    // add `Description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sDescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `CanUninstall` to the URL query string
    if (getCanUninstall() != null) {
      joiner.add(String.format("%sCanUninstall%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCanUninstall()))));
    }

    // add `HasImage` to the URL query string
    if (getHasImage() != null) {
      joiner.add(String.format("%sHasImage%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHasImage()))));
    }

    // add `Status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sStatus%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
    }

    return joiner.toString();
  }
}

