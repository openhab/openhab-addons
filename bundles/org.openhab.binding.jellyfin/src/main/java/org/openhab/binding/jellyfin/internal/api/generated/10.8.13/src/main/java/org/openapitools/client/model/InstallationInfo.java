/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.PackageInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class InstallationInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class InstallationInfo {
  public static final String SERIALIZED_NAME_GUID = "Guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  @javax.annotation.Nullable
  private UUID guid;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_CHANGELOG = "Changelog";
  @SerializedName(SERIALIZED_NAME_CHANGELOG)
  @javax.annotation.Nullable
  private String changelog;

  public static final String SERIALIZED_NAME_SOURCE_URL = "SourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  @javax.annotation.Nullable
  private String sourceUrl;

  public static final String SERIALIZED_NAME_CHECKSUM = "Checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  @javax.annotation.Nullable
  private String checksum;

  public static final String SERIALIZED_NAME_PACKAGE_INFO = "PackageInfo";
  @SerializedName(SERIALIZED_NAME_PACKAGE_INFO)
  @javax.annotation.Nullable
  private PackageInfo packageInfo;

  public InstallationInfo() {
  }

  public InstallationInfo guid(@javax.annotation.Nullable UUID guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Gets or sets the Id.
   * @return guid
   */
  @javax.annotation.Nullable
  public UUID getGuid() {
    return guid;
  }

  public void setGuid(@javax.annotation.Nullable UUID guid) {
    this.guid = guid;
  }


  public InstallationInfo name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public InstallationInfo version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Gets or sets the version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public InstallationInfo changelog(@javax.annotation.Nullable String changelog) {
    this.changelog = changelog;
    return this;
  }

  /**
   * Gets or sets the changelog for this version.
   * @return changelog
   */
  @javax.annotation.Nullable
  public String getChangelog() {
    return changelog;
  }

  public void setChangelog(@javax.annotation.Nullable String changelog) {
    this.changelog = changelog;
  }


  public InstallationInfo sourceUrl(@javax.annotation.Nullable String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Gets or sets the source URL.
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(@javax.annotation.Nullable String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public InstallationInfo checksum(@javax.annotation.Nullable String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Gets or sets a checksum for the binary.
   * @return checksum
   */
  @javax.annotation.Nullable
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(@javax.annotation.Nullable String checksum) {
    this.checksum = checksum;
  }


  public InstallationInfo packageInfo(@javax.annotation.Nullable PackageInfo packageInfo) {
    this.packageInfo = packageInfo;
    return this;
  }

  /**
   * Gets or sets package information for the installation.
   * @return packageInfo
   */
  @javax.annotation.Nullable
  public PackageInfo getPackageInfo() {
    return packageInfo;
  }

  public void setPackageInfo(@javax.annotation.Nullable PackageInfo packageInfo) {
    this.packageInfo = packageInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstallationInfo installationInfo = (InstallationInfo) o;
    return Objects.equals(this.guid, installationInfo.guid) &&
        Objects.equals(this.name, installationInfo.name) &&
        Objects.equals(this.version, installationInfo.version) &&
        Objects.equals(this.changelog, installationInfo.changelog) &&
        Objects.equals(this.sourceUrl, installationInfo.sourceUrl) &&
        Objects.equals(this.checksum, installationInfo.checksum) &&
        Objects.equals(this.packageInfo, installationInfo.packageInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(guid, name, version, changelog, sourceUrl, checksum, packageInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstallationInfo {\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    packageInfo: ").append(toIndentedString(packageInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Guid");
    openapiFields.add("Name");
    openapiFields.add("Version");
    openapiFields.add("Changelog");
    openapiFields.add("SourceUrl");
    openapiFields.add("Checksum");
    openapiFields.add("PackageInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstallationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstallationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstallationInfo is not found in the empty JSON string", InstallationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstallationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Guid") != null && !jsonObj.get("Guid").isJsonNull()) && !jsonObj.get("Guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Guid").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("Changelog") != null && !jsonObj.get("Changelog").isJsonNull()) && !jsonObj.get("Changelog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Changelog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Changelog").toString()));
      }
      if ((jsonObj.get("SourceUrl") != null && !jsonObj.get("SourceUrl").isJsonNull()) && !jsonObj.get("SourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceUrl").toString()));
      }
      if ((jsonObj.get("Checksum") != null && !jsonObj.get("Checksum").isJsonNull()) && !jsonObj.get("Checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Checksum").toString()));
      }
      // validate the optional field `PackageInfo`
      if (jsonObj.get("PackageInfo") != null && !jsonObj.get("PackageInfo").isJsonNull()) {
        PackageInfo.validateJsonElement(jsonObj.get("PackageInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstallationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstallationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstallationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstallationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<InstallationInfo>() {
           @Override
           public void write(JsonWriter out, InstallationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstallationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstallationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstallationInfo
   * @throws IOException if the JSON string is invalid with respect to InstallationInfo
   */
  public static InstallationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstallationInfo.class);
  }

  /**
   * Convert an instance of InstallationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

