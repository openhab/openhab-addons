/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ImageFormat;
import org.openapitools.client.model.ImageInfo;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ProblemDetails;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCustomSplashscreen
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the custom splashscreen. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomSplashscreenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Branding/Splashscreen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomSplashscreenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteCustomSplashscreenCall(_callback);

    }

    /**
     * Delete a custom splashscreen.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the custom splashscreen. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomSplashscreen() throws ApiException {
        deleteCustomSplashscreenWithHttpInfo();
    }

    /**
     * Delete a custom splashscreen.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the custom splashscreen. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomSplashscreenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteCustomSplashscreenValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a custom splashscreen. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the custom splashscreen. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomSplashscreenAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomSplashscreenValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItemImage
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemImageCall(UUID itemId, ImageType imageType, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemImageValidateBeforeCall(UUID itemId, ImageType imageType, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteItemImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling deleteItemImage(Async)");
        }

        return deleteItemImageCall(itemId, imageType, imageIndex, _callback);

    }

    /**
     * Delete an item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteItemImage(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
        deleteItemImageWithHttpInfo(itemId, imageType, imageIndex);
    }

    /**
     * Delete an item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteItemImageWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = deleteItemImageValidateBeforeCall(itemId, imageType, imageIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemImageAsync(UUID itemId, ImageType imageType, Integer imageIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemImageValidateBeforeCall(itemId, imageType, imageIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItemImageByIndex
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemImageByIndexCall(UUID itemId, ImageType imageType, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemImageByIndexValidateBeforeCall(UUID itemId, ImageType imageType, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling deleteItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling deleteItemImageByIndex(Async)");
        }

        return deleteItemImageByIndexCall(itemId, imageType, imageIndex, _callback);

    }

    /**
     * Delete an item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
        deleteItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex);
    }

    /**
     * Delete an item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = deleteItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex The image index. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemImageByIndexAsync(UUID itemId, ImageType imageType, Integer imageIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserImage
     * @param userId User Id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserImageCall(UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/UserImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserImageValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        return deleteUserImageCall(userId, _callback);

    }

    /**
     * Delete the user&#39;s image.
     * 
     * @param userId User Id. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserImage(UUID userId) throws ApiException {
        deleteUserImageWithHttpInfo(userId);
    }

    /**
     * Delete the user&#39;s image.
     * 
     * @param userId User Id. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserImageWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserImageValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the user&#39;s image. (asynchronously)
     * 
     * @param userId User Id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserImageAsync(UUID userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserImageValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArtistImage
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtistImageCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArtistImageValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getArtistImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getArtistImage(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling getArtistImage(Async)");
        }

        return getArtistImageCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get artist image by name.
     * 
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getArtistImage(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = getArtistImageWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get artist image by name.
     * 
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getArtistImageWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = getArtistImageValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get artist image by name. (asynchronously)
     * 
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtistImageAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArtistImageValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenreImage
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Genres/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenreImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getGenreImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getGenreImage(Async)");
        }

        return getGenreImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = getGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = getGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get genre image by name. (asynchronously)
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenreImageByIndex
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenreImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling getGenreImageByIndex(Async)");
        }

        return getGenreImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = getGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = getGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get genre image by name. (asynchronously)
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemImage
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImageCall(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemImageValidateBeforeCall(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getItemImage(Async)");
        }

        return getItemImageCall(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getItemImage(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = getItemImageWithHttpInfo(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getItemImageWithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = getItemImageValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImageAsync(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemImageValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemImage2
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImage2Call(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "maxWidth" + "}", localVarApiClient.escapeString(maxWidth.toString()))
            .replace("{" + "maxHeight" + "}", localVarApiClient.escapeString(maxHeight.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()))
            .replace("{" + "percentPlayed" + "}", localVarApiClient.escapeString(percentPlayed.toString()))
            .replace("{" + "unplayedCount" + "}", localVarApiClient.escapeString(unplayedCount.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemImage2ValidateBeforeCall(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'maxWidth' is set
        if (maxWidth == null) {
            throw new ApiException("Missing the required parameter 'maxWidth' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'maxHeight' is set
        if (maxHeight == null) {
            throw new ApiException("Missing the required parameter 'maxHeight' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'percentPlayed' is set
        if (percentPlayed == null) {
            throw new ApiException("Missing the required parameter 'percentPlayed' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'unplayedCount' is set
        if (unplayedCount == null) {
            throw new ApiException("Missing the required parameter 'unplayedCount' when calling getItemImage2(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling getItemImage2(Async)");
        }

        return getItemImage2Call(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getItemImage2(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = getItemImage2WithHttpInfo(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getItemImage2WithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = getItemImage2ValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImage2Async(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemImage2ValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemImageByIndex
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImageByIndexCall(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemImageByIndexValidateBeforeCall(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling getItemImageByIndex(Async)");
        }

        return getItemImageByIndexCall(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = getItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = getItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImageByIndexAsync(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemImageInfos
     * @param itemId Item id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item images returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImageInfosCall(UUID itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemImageInfosValidateBeforeCall(UUID itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemImageInfos(Async)");
        }

        return getItemImageInfosCall(itemId, _callback);

    }

    /**
     * Get item image infos.
     * 
     * @param itemId Item id. (required)
     * @return List&lt;ImageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item images returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<ImageInfo> getItemImageInfos(UUID itemId) throws ApiException {
        ApiResponse<List<ImageInfo>> localVarResp = getItemImageInfosWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get item image infos.
     * 
     * @param itemId Item id. (required)
     * @return ApiResponse&lt;List&lt;ImageInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item images returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImageInfo>> getItemImageInfosWithHttpInfo(UUID itemId) throws ApiException {
        okhttp3.Call localVarCall = getItemImageInfosValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<List<ImageInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get item image infos. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item images returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemImageInfosAsync(UUID itemId, final ApiCallback<List<ImageInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemImageInfosValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<List<ImageInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicGenreImage
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicGenreImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/MusicGenres/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicGenreImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMusicGenreImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getMusicGenreImage(Async)");
        }

        return getMusicGenreImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getMusicGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = getMusicGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getMusicGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = getMusicGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get music genre image by name. (asynchronously)
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicGenreImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicGenreImageByIndex
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicGenreImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicGenreImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMusicGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getMusicGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling getMusicGenreImageByIndex(Async)");
        }

        return getMusicGenreImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getMusicGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = getMusicGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getMusicGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = getMusicGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get music genre image by name. (asynchronously)
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicGenreImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonImage
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Persons/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPersonImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getPersonImage(Async)");
        }

        return getPersonImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getPersonImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = getPersonImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPersonImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = getPersonImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person image by name. (asynchronously)
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonImageByIndex
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPersonImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getPersonImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling getPersonImageByIndex(Async)");
        }

        return getPersonImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getPersonImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = getPersonImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPersonImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = getPersonImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person image by name. (asynchronously)
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSplashscreen
     * @param tag Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Blur image. (optional)
     * @param backgroundColor Apply a background color for transparent images. (optional)
     * @param foregroundLayer Apply a foreground layer on top of the image. (optional)
     * @param quality Quality setting, from 0-100. (optional, default to 90)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Splashscreen returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSplashscreenCall(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Branding/Splashscreen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
            "image/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSplashscreenValidateBeforeCall(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality, final ApiCallback _callback) throws ApiException {
        return getSplashscreenCall(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality, _callback);

    }

    /**
     * Generates or gets the splashscreen.
     * 
     * @param tag Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Blur image. (optional)
     * @param backgroundColor Apply a background color for transparent images. (optional)
     * @param foregroundLayer Apply a foreground layer on top of the image. (optional)
     * @param quality Quality setting, from 0-100. (optional, default to 90)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Splashscreen returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public File getSplashscreen(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality) throws ApiException {
        ApiResponse<File> localVarResp = getSplashscreenWithHttpInfo(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality);
        return localVarResp.getData();
    }

    /**
     * Generates or gets the splashscreen.
     * 
     * @param tag Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Blur image. (optional)
     * @param backgroundColor Apply a background color for transparent images. (optional)
     * @param foregroundLayer Apply a foreground layer on top of the image. (optional)
     * @param quality Quality setting, from 0-100. (optional, default to 90)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Splashscreen returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getSplashscreenWithHttpInfo(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = getSplashscreenValidateBeforeCall(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates or gets the splashscreen. (asynchronously)
     * 
     * @param tag Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Blur image. (optional)
     * @param backgroundColor Apply a background color for transparent images. (optional)
     * @param foregroundLayer Apply a foreground layer on top of the image. (optional)
     * @param quality Quality setting, from 0-100. (optional, default to 90)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Splashscreen returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSplashscreenAsync(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSplashscreenValidateBeforeCall(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStudioImage
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudioImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Studios/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStudioImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStudioImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getStudioImage(Async)");
        }

        return getStudioImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getStudioImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = getStudioImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getStudioImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = getStudioImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get studio image by name. (asynchronously)
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudioImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStudioImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStudioImageByIndex
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudioImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStudioImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStudioImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getStudioImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling getStudioImageByIndex(Async)");
        }

        return getStudioImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getStudioImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = getStudioImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getStudioImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = getStudioImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get studio image by name. (asynchronously)
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudioImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStudioImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserImage
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserImageCall(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/UserImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserImageValidateBeforeCall(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        return getUserImageCall(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get user profile image.
     * 
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getUserImage(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = getUserImageWithHttpInfo(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get user profile image.
     * 
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getUserImageWithHttpInfo(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = getUserImageValidateBeforeCall(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user profile image. (asynchronously)
     * 
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserImageAsync(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserImageValidateBeforeCall(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headArtistImage
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headArtistImageCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headArtistImageValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headArtistImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headArtistImage(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling headArtistImage(Async)");
        }

        return headArtistImageCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get artist image by name.
     * 
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headArtistImage(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = headArtistImageWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get artist image by name.
     * 
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headArtistImageWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = headArtistImageValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get artist image by name. (asynchronously)
     * 
     * @param name Artist name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headArtistImageAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headArtistImageValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headGenreImage
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headGenreImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Genres/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headGenreImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headGenreImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headGenreImage(Async)");
        }

        return headGenreImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = headGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = headGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get genre image by name. (asynchronously)
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headGenreImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headGenreImageByIndex
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headGenreImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headGenreImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling headGenreImageByIndex(Async)");
        }

        return headGenreImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = headGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get genre image by name.
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = headGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get genre image by name. (asynchronously)
     * 
     * @param name Genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headGenreImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headItemImage
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headItemImageCall(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headItemImageValidateBeforeCall(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling headItemImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headItemImage(Async)");
        }

        return headItemImageCall(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headItemImage(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = headItemImageWithHttpInfo(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headItemImageWithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = headItemImageValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headItemImageAsync(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headItemImageValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headItemImage2
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headItemImage2Call(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "maxWidth" + "}", localVarApiClient.escapeString(maxWidth.toString()))
            .replace("{" + "maxHeight" + "}", localVarApiClient.escapeString(maxHeight.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()))
            .replace("{" + "percentPlayed" + "}", localVarApiClient.escapeString(percentPlayed.toString()))
            .replace("{" + "unplayedCount" + "}", localVarApiClient.escapeString(unplayedCount.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headItemImage2ValidateBeforeCall(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'maxWidth' is set
        if (maxWidth == null) {
            throw new ApiException("Missing the required parameter 'maxWidth' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'maxHeight' is set
        if (maxHeight == null) {
            throw new ApiException("Missing the required parameter 'maxHeight' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'percentPlayed' is set
        if (percentPlayed == null) {
            throw new ApiException("Missing the required parameter 'percentPlayed' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'unplayedCount' is set
        if (unplayedCount == null) {
            throw new ApiException("Missing the required parameter 'unplayedCount' when calling headItemImage2(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling headItemImage2(Async)");
        }

        return headItemImage2Call(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headItemImage2(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = headItemImage2WithHttpInfo(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headItemImage2WithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = headItemImage2ValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param maxWidth The maximum image width to return. (required)
     * @param maxHeight The maximum image height to return. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
     * @param format Determines the output format of the image - original,gif,jpg,png. (required)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
     * @param unplayedCount Optional. Unplayed count overlay to render. (required)
     * @param imageIndex Image index. (required)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headItemImage2Async(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headItemImage2ValidateBeforeCall(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headItemImageByIndex
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headItemImageByIndexCall(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headItemImageByIndexValidateBeforeCall(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling headItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling headItemImageByIndex(Async)");
        }

        return headItemImageByIndexCall(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = headItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Gets the item&#39;s image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = headItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the item&#39;s image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headItemImageByIndexAsync(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headMusicGenreImage
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headMusicGenreImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/MusicGenres/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headMusicGenreImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headMusicGenreImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headMusicGenreImage(Async)");
        }

        return headMusicGenreImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headMusicGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = headMusicGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headMusicGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = headMusicGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get music genre image by name. (asynchronously)
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headMusicGenreImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headMusicGenreImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headMusicGenreImageByIndex
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headMusicGenreImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headMusicGenreImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headMusicGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headMusicGenreImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling headMusicGenreImageByIndex(Async)");
        }

        return headMusicGenreImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headMusicGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = headMusicGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get music genre image by name.
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headMusicGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = headMusicGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get music genre image by name. (asynchronously)
     * 
     * @param name Music genre name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headMusicGenreImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headMusicGenreImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headPersonImage
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headPersonImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Persons/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headPersonImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headPersonImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headPersonImage(Async)");
        }

        return headPersonImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headPersonImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = headPersonImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headPersonImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = headPersonImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person image by name. (asynchronously)
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headPersonImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headPersonImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headPersonImageByIndex
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headPersonImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headPersonImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headPersonImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headPersonImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling headPersonImageByIndex(Async)");
        }

        return headPersonImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headPersonImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = headPersonImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get person image by name.
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headPersonImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = headPersonImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person image by name. (asynchronously)
     * 
     * @param name Person name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headPersonImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headPersonImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headStudioImage
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headStudioImageCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Studios/{name}/Images/{imageType}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headStudioImageValidateBeforeCall(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headStudioImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headStudioImage(Async)");
        }

        return headStudioImageCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headStudioImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = headStudioImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headStudioImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = headStudioImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get studio image by name. (asynchronously)
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headStudioImageAsync(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headStudioImageValidateBeforeCall(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headStudioImageByIndex
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headStudioImageByIndexCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headStudioImageByIndexValidateBeforeCall(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling headStudioImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling headStudioImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling headStudioImageByIndex(Async)");
        }

        return headStudioImageByIndexCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);

    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headStudioImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        ApiResponse<File> localVarResp = headStudioImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
        return localVarResp.getData();
    }

    /**
     * Get studio image by name.
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headStudioImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
        okhttp3.Call localVarCall = headStudioImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get studio image by name. (asynchronously)
     * 
     * @param name Studio name. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Image index. (required)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headStudioImageByIndexAsync(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headStudioImageByIndexValidateBeforeCall(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headUserImage
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headUserImageCall(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/UserImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (percentPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentPlayed", percentPlayed));
        }

        if (unplayedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unplayedCount", unplayedCount));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (fillWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillWidth", fillWidth));
        }

        if (fillHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillHeight", fillHeight));
        }

        if (blur != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blur", blur));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (foregroundLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("foregroundLayer", foregroundLayer));
        }

        if (imageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageIndex", imageIndex));
        }

        final String[] localVarAccepts = {
            "image/*",
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headUserImageValidateBeforeCall(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback _callback) throws ApiException {
        return headUserImageCall(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);

    }

    /**
     * Get user profile image.
     * 
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public File headUserImage(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        ApiResponse<File> localVarResp = headUserImageWithHttpInfo(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
        return localVarResp.getData();
    }

    /**
     * Get user profile image.
     * 
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> headUserImageWithHttpInfo(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
        okhttp3.Call localVarCall = headUserImageValidateBeforeCall(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user profile image. (asynchronously)
     * 
     * @param userId User id. (optional)
     * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
     * @param maxWidth The maximum image width to return. (optional)
     * @param maxHeight The maximum image height to return. (optional)
     * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
     * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
     * @param width The fixed image width to return. (optional)
     * @param height The fixed image height to return. (optional)
     * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     * @param fillWidth Width of box to fill. (optional)
     * @param fillHeight Height of box to fill. (optional)
     * @param blur Optional. Blur image. (optional)
     * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
     * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
     * @param imageIndex Image index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image stream returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User id not provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headUserImageAsync(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = headUserImageValidateBeforeCall(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postUserImage
     * @param userId User Id. (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUserImageCall(UUID userId, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/UserImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUserImageValidateBeforeCall(UUID userId, File body, final ApiCallback _callback) throws ApiException {
        return postUserImageCall(userId, body, _callback);

    }

    /**
     * Sets the user image.
     * 
     * @param userId User Id. (optional)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void postUserImage(UUID userId, File body) throws ApiException {
        postUserImageWithHttpInfo(userId, body);
    }

    /**
     * Sets the user image.
     * 
     * @param userId User Id. (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postUserImageWithHttpInfo(UUID userId, File body) throws ApiException {
        okhttp3.Call localVarCall = postUserImageValidateBeforeCall(userId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets the user image. (asynchronously)
     * 
     * @param userId User Id. (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to delete the image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUserImageAsync(UUID userId, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUserImageValidateBeforeCall(userId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setItemImage
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemImageCall(UUID itemId, ImageType imageType, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setItemImageValidateBeforeCall(UUID itemId, ImageType imageType, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling setItemImage(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling setItemImage(Async)");
        }

        return setItemImageCall(itemId, imageType, body, _callback);

    }

    /**
     * Set item image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void setItemImage(UUID itemId, ImageType imageType, File body) throws ApiException {
        setItemImageWithHttpInfo(itemId, imageType, body);
    }

    /**
     * Set item image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setItemImageWithHttpInfo(UUID itemId, ImageType imageType, File body) throws ApiException {
        okhttp3.Call localVarCall = setItemImageValidateBeforeCall(itemId, imageType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set item image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemImageAsync(UUID itemId, ImageType imageType, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setItemImageValidateBeforeCall(itemId, imageType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setItemImageByIndex
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex (Unused) Image index. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemImageByIndexCall(UUID itemId, ImageType imageType, Integer imageIndex, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setItemImageByIndexValidateBeforeCall(UUID itemId, ImageType imageType, Integer imageIndex, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling setItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling setItemImageByIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling setItemImageByIndex(Async)");
        }

        return setItemImageByIndexCall(itemId, imageType, imageIndex, body, _callback);

    }

    /**
     * Set item image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex (Unused) Image index. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void setItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex, File body) throws ApiException {
        setItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, body);
    }

    /**
     * Set item image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex (Unused) Image index. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, File body) throws ApiException {
        okhttp3.Call localVarCall = setItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set item image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex (Unused) Image index. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemImageByIndexAsync(UUID itemId, ImageType imageType, Integer imageIndex, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setItemImageByIndexValidateBeforeCall(itemId, imageType, imageIndex, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemImageIndex
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Old image index. (required)
     * @param newIndex New image index. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image index updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemImageIndexCall(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/Index"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageIndex" + "}", localVarApiClient.escapeString(imageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newIndex", newIndex));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemImageIndexValidateBeforeCall(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateItemImageIndex(Async)");
        }

        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling updateItemImageIndex(Async)");
        }

        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling updateItemImageIndex(Async)");
        }

        // verify the required parameter 'newIndex' is set
        if (newIndex == null) {
            throw new ApiException("Missing the required parameter 'newIndex' when calling updateItemImageIndex(Async)");
        }

        return updateItemImageIndexCall(itemId, imageType, imageIndex, newIndex, _callback);

    }

    /**
     * Updates the index for an item image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Old image index. (required)
     * @param newIndex New image index. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image index updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void updateItemImageIndex(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex) throws ApiException {
        updateItemImageIndexWithHttpInfo(itemId, imageType, imageIndex, newIndex);
    }

    /**
     * Updates the index for an item image.
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Old image index. (required)
     * @param newIndex New image index. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image index updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateItemImageIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex) throws ApiException {
        okhttp3.Call localVarCall = updateItemImageIndexValidateBeforeCall(itemId, imageType, imageIndex, newIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates the index for an item image. (asynchronously)
     * 
     * @param itemId Item id. (required)
     * @param imageType Image type. (required)
     * @param imageIndex Old image index. (required)
     * @param newIndex New image index. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Image index updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemImageIndexAsync(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemImageIndexValidateBeforeCall(itemId, imageType, imageIndex, newIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadCustomSplashscreen
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully uploaded new splashscreen. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading MimeType from uploaded image. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to upload splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCustomSplashscreenCall(File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Branding/Splashscreen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "image/*"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadCustomSplashscreenValidateBeforeCall(File body, final ApiCallback _callback) throws ApiException {
        return uploadCustomSplashscreenCall(body, _callback);

    }

    /**
     * Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
     * 
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully uploaded new splashscreen. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading MimeType from uploaded image. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to upload splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void uploadCustomSplashscreen(File body) throws ApiException {
        uploadCustomSplashscreenWithHttpInfo(body);
    }

    /**
     * Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully uploaded new splashscreen. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading MimeType from uploaded image. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to upload splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadCustomSplashscreenWithHttpInfo(File body) throws ApiException {
        okhttp3.Call localVarCall = uploadCustomSplashscreenValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded. (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully uploaded new splashscreen. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading MimeType from uploaded image. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permission to upload splashscreen.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCustomSplashscreenAsync(File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadCustomSplashscreenValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
