/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import java.io.File;
import org.openapitools.client.model.ImageFormat;
import org.openapitools.client.model.ImageInfo;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ProblemDetails;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ImageApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ImageApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ImageApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Delete a custom splashscreen.
   * 
   * @throws ApiException if fails to make API call
   */
  public void deleteCustomSplashscreen() throws ApiException {
    deleteCustomSplashscreenWithHttpInfo();
  }

  /**
   * Delete a custom splashscreen.
   * 
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteCustomSplashscreenWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteCustomSplashscreenRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteCustomSplashscreen", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteCustomSplashscreenRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Branding/Splashscreen";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex The image index. (optional)
   * @throws ApiException if fails to make API call
   */
  public void deleteItemImage(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
    deleteItemImageWithHttpInfo(itemId, imageType, imageIndex);
  }

  /**
   * Delete an item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex The image index. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteItemImageWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteItemImageRequestBuilder(itemId, imageType, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteItemImage", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteItemImageRequestBuilder(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling deleteItemImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling deleteItemImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex The image index. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
    deleteItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex);
  }

  /**
   * Delete an item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex The image index. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteItemImageByIndexRequestBuilder(itemId, imageType, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteItemImageByIndex", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteItemImageByIndexRequestBuilder(UUID itemId, ImageType imageType, Integer imageIndex) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling deleteItemImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling deleteItemImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling deleteItemImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete the user&#39;s image.
   * 
   * @param userId User Id. (optional)
   * @throws ApiException if fails to make API call
   */
  public void deleteUserImage(UUID userId) throws ApiException {
    deleteUserImageWithHttpInfo(userId);
  }

  /**
   * Delete the user&#39;s image.
   * 
   * @param userId User Id. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteUserImageWithHttpInfo(UUID userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUserImageRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteUserImage", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUserImageRequestBuilder(UUID userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserImage";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get artist image by name.
   * 
   * @param name Artist name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getArtistImage(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = getArtistImageWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get artist image by name.
   * 
   * @param name Artist name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getArtistImageWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getArtistImageRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getArtistImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getArtistImageRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getArtistImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getArtistImage");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling getArtistImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = getGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGenreImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGenreImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGenreImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getGenreImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getGenreImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Genres/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = getGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGenreImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGenreImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGenreImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getGenreImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getGenreImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling getGenreImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getItemImage(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = getItemImageWithHttpInfo(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getItemImageWithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getItemImageRequestBuilder(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getItemImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getItemImageRequestBuilder(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getItemImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getItemImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (required)
   * @param maxHeight The maximum image height to return. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
   * @param format Determines the output format of the image - original,gif,jpg,png. (required)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
   * @param unplayedCount Optional. Unplayed count overlay to render. (required)
   * @param imageIndex Image index. (required)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getItemImage2(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = getItemImage2WithHttpInfo(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (required)
   * @param maxHeight The maximum image height to return. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
   * @param format Determines the output format of the image - original,gif,jpg,png. (required)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
   * @param unplayedCount Optional. Unplayed count overlay to render. (required)
   * @param imageIndex Image index. (required)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getItemImage2WithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getItemImage2RequestBuilder(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getItemImage2", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getItemImage2RequestBuilder(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getItemImage2");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getItemImage2");
    }
    // verify the required parameter 'maxWidth' is set
    if (maxWidth == null) {
      throw new ApiException(400, "Missing the required parameter 'maxWidth' when calling getItemImage2");
    }
    // verify the required parameter 'maxHeight' is set
    if (maxHeight == null) {
      throw new ApiException(400, "Missing the required parameter 'maxHeight' when calling getItemImage2");
    }
    // verify the required parameter 'tag' is set
    if (tag == null) {
      throw new ApiException(400, "Missing the required parameter 'tag' when calling getItemImage2");
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      throw new ApiException(400, "Missing the required parameter 'format' when calling getItemImage2");
    }
    // verify the required parameter 'percentPlayed' is set
    if (percentPlayed == null) {
      throw new ApiException(400, "Missing the required parameter 'percentPlayed' when calling getItemImage2");
    }
    // verify the required parameter 'unplayedCount' is set
    if (unplayedCount == null) {
      throw new ApiException(400, "Missing the required parameter 'unplayedCount' when calling getItemImage2");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling getItemImage2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{maxWidth}", ApiClient.urlEncode(maxWidth.toString()))
        .replace("{maxHeight}", ApiClient.urlEncode(maxHeight.toString()))
        .replace("{tag}", ApiClient.urlEncode(tag.toString()))
        .replace("{format}", ApiClient.urlEncode(format.toString()))
        .replace("{percentPlayed}", ApiClient.urlEncode(percentPlayed.toString()))
        .replace("{unplayedCount}", ApiClient.urlEncode(unplayedCount.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = getItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getItemImageByIndexRequestBuilder(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getItemImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getItemImageByIndexRequestBuilder(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getItemImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getItemImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling getItemImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get item image infos.
   * 
   * @param itemId Item id. (required)
   * @return List&lt;ImageInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ImageInfo> getItemImageInfos(UUID itemId) throws ApiException {
    ApiResponse<List<ImageInfo>> localVarResponse = getItemImageInfosWithHttpInfo(itemId);
    return localVarResponse.getData();
  }

  /**
   * Get item image infos.
   * 
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;List&lt;ImageInfo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ImageInfo>> getItemImageInfosWithHttpInfo(UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getItemImageInfosRequestBuilder(itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getItemImageInfos", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<ImageInfo>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<ImageInfo>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<ImageInfo>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getItemImageInfosRequestBuilder(UUID itemId) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getItemImageInfos");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getMusicGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = getMusicGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getMusicGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMusicGenreImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMusicGenreImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMusicGenreImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getMusicGenreImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getMusicGenreImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/MusicGenres/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getMusicGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = getMusicGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getMusicGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMusicGenreImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMusicGenreImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMusicGenreImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getMusicGenreImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getMusicGenreImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling getMusicGenreImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getPersonImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = getPersonImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getPersonImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPersonImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPersonImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPersonImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getPersonImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getPersonImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Persons/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getPersonImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = getPersonImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getPersonImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPersonImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPersonImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPersonImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getPersonImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getPersonImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling getPersonImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Generates or gets the splashscreen.
   * 
   * @param tag Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Blur image. (optional)
   * @param backgroundColor Apply a background color for transparent images. (optional)
   * @param foregroundLayer Apply a foreground layer on top of the image. (optional)
   * @param quality Quality setting, from 0-100. (optional, default to 90)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getSplashscreen(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality) throws ApiException {
    ApiResponse<File> localVarResponse = getSplashscreenWithHttpInfo(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality);
    return localVarResponse.getData();
  }

  /**
   * Generates or gets the splashscreen.
   * 
   * @param tag Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Blur image. (optional)
   * @param backgroundColor Apply a background color for transparent images. (optional)
   * @param foregroundLayer Apply a foreground layer on top of the image. (optional)
   * @param quality Quality setting, from 0-100. (optional, default to 90)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getSplashscreenWithHttpInfo(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSplashscreenRequestBuilder(tag, format, maxWidth, maxHeight, width, height, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, quality);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSplashscreen", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSplashscreenRequestBuilder(String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer quality) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Branding/Splashscreen";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getStudioImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = getStudioImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getStudioImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudioImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStudioImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudioImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getStudioImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getStudioImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Studios/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getStudioImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = getStudioImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getStudioImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStudioImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStudioImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStudioImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getStudioImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling getStudioImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling getStudioImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get user profile image.
   * 
   * @param userId User id. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getUserImage(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = getUserImageWithHttpInfo(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get user profile image.
   * 
   * @param userId User id. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> getUserImageWithHttpInfo(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserImageRequestBuilder(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserImageRequestBuilder(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserImage";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get artist image by name.
   * 
   * @param name Artist name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headArtistImage(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = headArtistImageWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get artist image by name.
   * 
   * @param name Artist name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headArtistImageWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headArtistImageRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headArtistImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headArtistImageRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headArtistImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headArtistImage");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling headArtistImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = headGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headGenreImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headGenreImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headGenreImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headGenreImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headGenreImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Genres/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = headGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get genre image by name.
   * 
   * @param name Genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headGenreImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headGenreImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headGenreImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headGenreImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headGenreImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling headGenreImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headItemImage(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = headItemImageWithHttpInfo(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headItemImageWithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headItemImageRequestBuilder(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headItemImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headItemImageRequestBuilder(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling headItemImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headItemImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (required)
   * @param maxHeight The maximum image height to return. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
   * @param format Determines the output format of the image - original,gif,jpg,png. (required)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
   * @param unplayedCount Optional. Unplayed count overlay to render. (required)
   * @param imageIndex Image index. (required)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headItemImage2(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = headItemImage2WithHttpInfo(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param maxWidth The maximum image width to return. (required)
   * @param maxHeight The maximum image height to return. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
   * @param format Determines the output format of the image - original,gif,jpg,png. (required)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (required)
   * @param unplayedCount Optional. Unplayed count overlay to render. (required)
   * @param imageIndex Image index. (required)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headItemImage2WithHttpInfo(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headItemImage2RequestBuilder(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headItemImage2", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headItemImage2RequestBuilder(UUID itemId, ImageType imageType, Integer maxWidth, Integer maxHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer imageIndex, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling headItemImage2");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headItemImage2");
    }
    // verify the required parameter 'maxWidth' is set
    if (maxWidth == null) {
      throw new ApiException(400, "Missing the required parameter 'maxWidth' when calling headItemImage2");
    }
    // verify the required parameter 'maxHeight' is set
    if (maxHeight == null) {
      throw new ApiException(400, "Missing the required parameter 'maxHeight' when calling headItemImage2");
    }
    // verify the required parameter 'tag' is set
    if (tag == null) {
      throw new ApiException(400, "Missing the required parameter 'tag' when calling headItemImage2");
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      throw new ApiException(400, "Missing the required parameter 'format' when calling headItemImage2");
    }
    // verify the required parameter 'percentPlayed' is set
    if (percentPlayed == null) {
      throw new ApiException(400, "Missing the required parameter 'percentPlayed' when calling headItemImage2");
    }
    // verify the required parameter 'unplayedCount' is set
    if (unplayedCount == null) {
      throw new ApiException(400, "Missing the required parameter 'unplayedCount' when calling headItemImage2");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling headItemImage2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{maxWidth}", ApiClient.urlEncode(maxWidth.toString()))
        .replace("{maxHeight}", ApiClient.urlEncode(maxHeight.toString()))
        .replace("{tag}", ApiClient.urlEncode(tag.toString()))
        .replace("{format}", ApiClient.urlEncode(format.toString()))
        .replace("{percentPlayed}", ApiClient.urlEncode(percentPlayed.toString()))
        .replace("{unplayedCount}", ApiClient.urlEncode(unplayedCount.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = headItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Gets the item&#39;s image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headItemImageByIndexRequestBuilder(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, format, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headItemImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headItemImageByIndexRequestBuilder(UUID itemId, ImageType imageType, Integer imageIndex, Integer maxWidth, Integer maxHeight, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, String tag, ImageFormat format, Double percentPlayed, Integer unplayedCount, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling headItemImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headItemImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling headItemImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headMusicGenreImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = headMusicGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headMusicGenreImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headMusicGenreImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headMusicGenreImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headMusicGenreImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headMusicGenreImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headMusicGenreImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/MusicGenres/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headMusicGenreImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = headMusicGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get music genre image by name.
   * 
   * @param name Music genre name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headMusicGenreImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headMusicGenreImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headMusicGenreImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headMusicGenreImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headMusicGenreImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headMusicGenreImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling headMusicGenreImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headPersonImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = headPersonImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headPersonImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headPersonImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headPersonImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headPersonImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headPersonImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headPersonImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Persons/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headPersonImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = headPersonImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get person image by name.
   * 
   * @param name Person name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headPersonImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headPersonImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headPersonImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headPersonImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headPersonImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headPersonImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling headPersonImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headStudioImage(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = headStudioImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headStudioImageWithHttpInfo(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headStudioImageRequestBuilder(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headStudioImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headStudioImageRequestBuilder(String name, ImageType imageType, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headStudioImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headStudioImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Studios/{name}/Images/{imageType}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headStudioImageByIndex(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    ApiResponse<File> localVarResponse = headStudioImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    return localVarResponse.getData();
  }

  /**
   * Get studio image by name.
   * 
   * @param name Studio name. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Image index. (required)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headStudioImageByIndexWithHttpInfo(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headStudioImageByIndexRequestBuilder(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headStudioImageByIndex", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headStudioImageByIndexRequestBuilder(String name, ImageType imageType, Integer imageIndex, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling headStudioImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling headStudioImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling headStudioImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get user profile image.
   * 
   * @param userId User id. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File headUserImage(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    ApiResponse<File> localVarResponse = headUserImageWithHttpInfo(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    return localVarResponse.getData();
  }

  /**
   * Get user profile image.
   * 
   * @param userId User id. (optional)
   * @param tag Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
   * @param format Determines the output format of the image - original,gif,jpg,png. (optional)
   * @param maxWidth The maximum image width to return. (optional)
   * @param maxHeight The maximum image height to return. (optional)
   * @param percentPlayed Optional. Percent to render for the percent played overlay. (optional)
   * @param unplayedCount Optional. Unplayed count overlay to render. (optional)
   * @param width The fixed image width to return. (optional)
   * @param height The fixed image height to return. (optional)
   * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
   * @param fillWidth Width of box to fill. (optional)
   * @param fillHeight Height of box to fill. (optional)
   * @param blur Optional. Blur image. (optional)
   * @param backgroundColor Optional. Apply a background color for transparent images. (optional)
   * @param foregroundLayer Optional. Apply a foreground layer on top of the image. (optional)
   * @param imageIndex Image index. (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> headUserImageWithHttpInfo(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = headUserImageRequestBuilder(userId, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, blur, backgroundColor, foregroundLayer, imageIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("headUserImage", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder headUserImageRequestBuilder(UUID userId, String tag, ImageFormat format, Integer maxWidth, Integer maxHeight, Double percentPlayed, Integer unplayedCount, Integer width, Integer height, Integer quality, Integer fillWidth, Integer fillHeight, Integer blur, String backgroundColor, String foregroundLayer, Integer imageIndex) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserImage";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));
    localVarQueryParameterBaseName = "maxWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxWidth", maxWidth));
    localVarQueryParameterBaseName = "maxHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("maxHeight", maxHeight));
    localVarQueryParameterBaseName = "percentPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("percentPlayed", percentPlayed));
    localVarQueryParameterBaseName = "unplayedCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unplayedCount", unplayedCount));
    localVarQueryParameterBaseName = "width";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("width", width));
    localVarQueryParameterBaseName = "height";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("height", height));
    localVarQueryParameterBaseName = "quality";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("quality", quality));
    localVarQueryParameterBaseName = "fillWidth";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillWidth", fillWidth));
    localVarQueryParameterBaseName = "fillHeight";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fillHeight", fillHeight));
    localVarQueryParameterBaseName = "blur";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blur", blur));
    localVarQueryParameterBaseName = "backgroundColor";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backgroundColor", backgroundColor));
    localVarQueryParameterBaseName = "foregroundLayer";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("foregroundLayer", foregroundLayer));
    localVarQueryParameterBaseName = "imageIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageIndex", imageIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "image/*, application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("HEAD", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Sets the user image.
   * 
   * @param userId User Id. (optional)
   * @param body  (optional)
   * @throws ApiException if fails to make API call
   */
  public void postUserImage(UUID userId, File body) throws ApiException {
    postUserImageWithHttpInfo(userId, body);
  }

  /**
   * Sets the user image.
   * 
   * @param userId User Id. (optional)
   * @param body  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> postUserImageWithHttpInfo(UUID userId, File body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = postUserImageRequestBuilder(userId, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("postUserImage", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder postUserImageRequestBuilder(UUID userId, File body) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserImage";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "image/*");
    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Set item image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param body  (optional)
   * @throws ApiException if fails to make API call
   */
  public void setItemImage(UUID itemId, ImageType imageType, File body) throws ApiException {
    setItemImageWithHttpInfo(itemId, imageType, body);
  }

  /**
   * Set item image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param body  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setItemImageWithHttpInfo(UUID itemId, ImageType imageType, File body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setItemImageRequestBuilder(itemId, imageType, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setItemImage", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setItemImageRequestBuilder(UUID itemId, ImageType imageType, File body) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling setItemImage");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling setItemImage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "image/*");
    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Set item image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex (Unused) Image index. (required)
   * @param body  (optional)
   * @throws ApiException if fails to make API call
   */
  public void setItemImageByIndex(UUID itemId, ImageType imageType, Integer imageIndex, File body) throws ApiException {
    setItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, body);
  }

  /**
   * Set item image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex (Unused) Image index. (required)
   * @param body  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setItemImageByIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, File body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setItemImageByIndexRequestBuilder(itemId, imageType, imageIndex, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setItemImageByIndex", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setItemImageByIndexRequestBuilder(UUID itemId, ImageType imageType, Integer imageIndex, File body) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling setItemImageByIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling setItemImageByIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling setItemImageByIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "image/*");
    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates the index for an item image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Old image index. (required)
   * @param newIndex New image index. (required)
   * @throws ApiException if fails to make API call
   */
  public void updateItemImageIndex(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex) throws ApiException {
    updateItemImageIndexWithHttpInfo(itemId, imageType, imageIndex, newIndex);
  }

  /**
   * Updates the index for an item image.
   * 
   * @param itemId Item id. (required)
   * @param imageType Image type. (required)
   * @param imageIndex Old image index. (required)
   * @param newIndex New image index. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateItemImageIndexWithHttpInfo(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateItemImageIndexRequestBuilder(itemId, imageType, imageIndex, newIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateItemImageIndex", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateItemImageIndexRequestBuilder(UUID itemId, ImageType imageType, Integer imageIndex, Integer newIndex) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling updateItemImageIndex");
    }
    // verify the required parameter 'imageType' is set
    if (imageType == null) {
      throw new ApiException(400, "Missing the required parameter 'imageType' when calling updateItemImageIndex");
    }
    // verify the required parameter 'imageIndex' is set
    if (imageIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'imageIndex' when calling updateItemImageIndex");
    }
    // verify the required parameter 'newIndex' is set
    if (newIndex == null) {
      throw new ApiException(400, "Missing the required parameter 'newIndex' when calling updateItemImageIndex");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/Index"
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()))
        .replace("{imageType}", ApiClient.urlEncode(imageType.toString()))
        .replace("{imageIndex}", ApiClient.urlEncode(imageIndex.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "newIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("newIndex", newIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
   * 
   * @param body  (optional)
   * @throws ApiException if fails to make API call
   */
  public void uploadCustomSplashscreen(File body) throws ApiException {
    uploadCustomSplashscreenWithHttpInfo(body);
  }

  /**
   * Uploads a custom splashscreen.  The body is expected to the image contents base64 encoded.
   * 
   * @param body  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> uploadCustomSplashscreenWithHttpInfo(File body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = uploadCustomSplashscreenRequestBuilder(body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("uploadCustomSplashscreen", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder uploadCustomSplashscreenRequestBuilder(File body) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Branding/Splashscreen";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "image/*");
    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
