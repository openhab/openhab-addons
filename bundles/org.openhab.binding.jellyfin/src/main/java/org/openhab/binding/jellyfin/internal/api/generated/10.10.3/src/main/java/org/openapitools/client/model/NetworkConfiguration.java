/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Defines the MediaBrowser.Common.Net.NetworkConfiguration.
 */
@JsonPropertyOrder({
  NetworkConfiguration.JSON_PROPERTY_BASE_URL,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_HTTPS,
  NetworkConfiguration.JSON_PROPERTY_REQUIRE_HTTPS,
  NetworkConfiguration.JSON_PROPERTY_CERTIFICATE_PATH,
  NetworkConfiguration.JSON_PROPERTY_CERTIFICATE_PASSWORD,
  NetworkConfiguration.JSON_PROPERTY_INTERNAL_HTTP_PORT,
  NetworkConfiguration.JSON_PROPERTY_INTERNAL_HTTPS_PORT,
  NetworkConfiguration.JSON_PROPERTY_PUBLIC_HTTP_PORT,
  NetworkConfiguration.JSON_PROPERTY_PUBLIC_HTTPS_PORT,
  NetworkConfiguration.JSON_PROPERTY_AUTO_DISCOVERY,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_U_PN_P,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_I_PV4,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_I_PV6,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_REMOTE_ACCESS,
  NetworkConfiguration.JSON_PROPERTY_LOCAL_NETWORK_SUBNETS,
  NetworkConfiguration.JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES,
  NetworkConfiguration.JSON_PROPERTY_KNOWN_PROXIES,
  NetworkConfiguration.JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES,
  NetworkConfiguration.JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES,
  NetworkConfiguration.JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST,
  NetworkConfiguration.JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET,
  NetworkConfiguration.JSON_PROPERTY_REMOTE_I_P_FILTER,
  NetworkConfiguration.JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:50.987643556Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class NetworkConfiguration {
  public static final String JSON_PROPERTY_BASE_URL = "BaseUrl";
  @javax.annotation.Nullable
  private String baseUrl;

  public static final String JSON_PROPERTY_ENABLE_HTTPS = "EnableHttps";
  @javax.annotation.Nullable
  private Boolean enableHttps;

  public static final String JSON_PROPERTY_REQUIRE_HTTPS = "RequireHttps";
  @javax.annotation.Nullable
  private Boolean requireHttps;

  public static final String JSON_PROPERTY_CERTIFICATE_PATH = "CertificatePath";
  @javax.annotation.Nullable
  private String certificatePath;

  public static final String JSON_PROPERTY_CERTIFICATE_PASSWORD = "CertificatePassword";
  @javax.annotation.Nullable
  private String certificatePassword;

  public static final String JSON_PROPERTY_INTERNAL_HTTP_PORT = "InternalHttpPort";
  @javax.annotation.Nullable
  private Integer internalHttpPort;

  public static final String JSON_PROPERTY_INTERNAL_HTTPS_PORT = "InternalHttpsPort";
  @javax.annotation.Nullable
  private Integer internalHttpsPort;

  public static final String JSON_PROPERTY_PUBLIC_HTTP_PORT = "PublicHttpPort";
  @javax.annotation.Nullable
  private Integer publicHttpPort;

  public static final String JSON_PROPERTY_PUBLIC_HTTPS_PORT = "PublicHttpsPort";
  @javax.annotation.Nullable
  private Integer publicHttpsPort;

  public static final String JSON_PROPERTY_AUTO_DISCOVERY = "AutoDiscovery";
  @javax.annotation.Nullable
  private Boolean autoDiscovery;

  public static final String JSON_PROPERTY_ENABLE_U_PN_P = "EnableUPnP";
  @javax.annotation.Nullable
  private Boolean enableUPnP;

  public static final String JSON_PROPERTY_ENABLE_I_PV4 = "EnableIPv4";
  @javax.annotation.Nullable
  private Boolean enableIPv4;

  public static final String JSON_PROPERTY_ENABLE_I_PV6 = "EnableIPv6";
  @javax.annotation.Nullable
  private Boolean enableIPv6;

  public static final String JSON_PROPERTY_ENABLE_REMOTE_ACCESS = "EnableRemoteAccess";
  @javax.annotation.Nullable
  private Boolean enableRemoteAccess;

  public static final String JSON_PROPERTY_LOCAL_NETWORK_SUBNETS = "LocalNetworkSubnets";
  @javax.annotation.Nullable
  private List<String> localNetworkSubnets = new ArrayList<>();

  public static final String JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES = "LocalNetworkAddresses";
  @javax.annotation.Nullable
  private List<String> localNetworkAddresses = new ArrayList<>();

  public static final String JSON_PROPERTY_KNOWN_PROXIES = "KnownProxies";
  @javax.annotation.Nullable
  private List<String> knownProxies = new ArrayList<>();

  public static final String JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES = "IgnoreVirtualInterfaces";
  @javax.annotation.Nullable
  private Boolean ignoreVirtualInterfaces;

  public static final String JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES = "VirtualInterfaceNames";
  @javax.annotation.Nullable
  private List<String> virtualInterfaceNames = new ArrayList<>();

  public static final String JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST = "EnablePublishedServerUriByRequest";
  @javax.annotation.Nullable
  private Boolean enablePublishedServerUriByRequest;

  public static final String JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET = "PublishedServerUriBySubnet";
  @javax.annotation.Nullable
  private List<String> publishedServerUriBySubnet = new ArrayList<>();

  public static final String JSON_PROPERTY_REMOTE_I_P_FILTER = "RemoteIPFilter";
  @javax.annotation.Nullable
  private List<String> remoteIPFilter = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST = "IsRemoteIPFilterBlacklist";
  @javax.annotation.Nullable
  private Boolean isRemoteIPFilterBlacklist;

  public NetworkConfiguration() { 
  }

  public NetworkConfiguration baseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Gets or sets a value used to specify the URL prefix that your Jellyfin instance can be accessed at.
   * @return baseUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBaseUrl() {
    return baseUrl;
  }


  @JsonProperty(JSON_PROPERTY_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseUrl(@javax.annotation.Nullable String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public NetworkConfiguration enableHttps(@javax.annotation.Nullable Boolean enableHttps) {
    this.enableHttps = enableHttps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to use HTTPS.
   * @return enableHttps
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableHttps() {
    return enableHttps;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableHttps(@javax.annotation.Nullable Boolean enableHttps) {
    this.enableHttps = enableHttps;
  }


  public NetworkConfiguration requireHttps(@javax.annotation.Nullable Boolean requireHttps) {
    this.requireHttps = requireHttps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the server should force connections over HTTPS.
   * @return requireHttps
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequireHttps() {
    return requireHttps;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRE_HTTPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequireHttps(@javax.annotation.Nullable Boolean requireHttps) {
    this.requireHttps = requireHttps;
  }


  public NetworkConfiguration certificatePath(@javax.annotation.Nullable String certificatePath) {
    this.certificatePath = certificatePath;
    return this;
  }

  /**
   * Gets or sets the filesystem path of an X.509 certificate to use for SSL.
   * @return certificatePath
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCertificatePath() {
    return certificatePath;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificatePath(@javax.annotation.Nullable String certificatePath) {
    this.certificatePath = certificatePath;
  }


  public NetworkConfiguration certificatePassword(@javax.annotation.Nullable String certificatePassword) {
    this.certificatePassword = certificatePassword;
    return this;
  }

  /**
   * Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Common.Net.NetworkConfiguration.CertificatePath.
   * @return certificatePassword
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCertificatePassword() {
    return certificatePassword;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificatePassword(@javax.annotation.Nullable String certificatePassword) {
    this.certificatePassword = certificatePassword;
  }


  public NetworkConfiguration internalHttpPort(@javax.annotation.Nullable Integer internalHttpPort) {
    this.internalHttpPort = internalHttpPort;
    return this;
  }

  /**
   * Gets or sets the internal HTTP server port.
   * @return internalHttpPort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_HTTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getInternalHttpPort() {
    return internalHttpPort;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_HTTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalHttpPort(@javax.annotation.Nullable Integer internalHttpPort) {
    this.internalHttpPort = internalHttpPort;
  }


  public NetworkConfiguration internalHttpsPort(@javax.annotation.Nullable Integer internalHttpsPort) {
    this.internalHttpsPort = internalHttpsPort;
    return this;
  }

  /**
   * Gets or sets the internal HTTPS server port.
   * @return internalHttpsPort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_HTTPS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getInternalHttpsPort() {
    return internalHttpsPort;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_HTTPS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalHttpsPort(@javax.annotation.Nullable Integer internalHttpsPort) {
    this.internalHttpsPort = internalHttpsPort;
  }


  public NetworkConfiguration publicHttpPort(@javax.annotation.Nullable Integer publicHttpPort) {
    this.publicHttpPort = publicHttpPort;
    return this;
  }

  /**
   * Gets or sets the public HTTP port.
   * @return publicHttpPort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_HTTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPublicHttpPort() {
    return publicHttpPort;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_HTTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicHttpPort(@javax.annotation.Nullable Integer publicHttpPort) {
    this.publicHttpPort = publicHttpPort;
  }


  public NetworkConfiguration publicHttpsPort(@javax.annotation.Nullable Integer publicHttpsPort) {
    this.publicHttpsPort = publicHttpsPort;
    return this;
  }

  /**
   * Gets or sets the public HTTPS port.
   * @return publicHttpsPort
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_HTTPS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPublicHttpsPort() {
    return publicHttpsPort;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_HTTPS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicHttpsPort(@javax.annotation.Nullable Integer publicHttpsPort) {
    this.publicHttpsPort = publicHttpsPort;
  }


  public NetworkConfiguration autoDiscovery(@javax.annotation.Nullable Boolean autoDiscovery) {
    this.autoDiscovery = autoDiscovery;
    return this;
  }

  /**
   * Gets or sets a value indicating whether Autodiscovery is enabled.
   * @return autoDiscovery
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_DISCOVERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAutoDiscovery() {
    return autoDiscovery;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_DISCOVERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoDiscovery(@javax.annotation.Nullable Boolean autoDiscovery) {
    this.autoDiscovery = autoDiscovery;
  }


  public NetworkConfiguration enableUPnP(@javax.annotation.Nullable Boolean enableUPnP) {
    this.enableUPnP = enableUPnP;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable automatic port forwarding.
   * @return enableUPnP
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_U_PN_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableUPnP() {
    return enableUPnP;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_U_PN_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableUPnP(@javax.annotation.Nullable Boolean enableUPnP) {
    this.enableUPnP = enableUPnP;
  }


  public NetworkConfiguration enableIPv4(@javax.annotation.Nullable Boolean enableIPv4) {
    this.enableIPv4 = enableIPv4;
    return this;
  }

  /**
   * Gets or sets a value indicating whether IPv6 is enabled.
   * @return enableIPv4
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIPv4() {
    return enableIPv4;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIPv4(@javax.annotation.Nullable Boolean enableIPv4) {
    this.enableIPv4 = enableIPv4;
  }


  public NetworkConfiguration enableIPv6(@javax.annotation.Nullable Boolean enableIPv6) {
    this.enableIPv6 = enableIPv6;
    return this;
  }

  /**
   * Gets or sets a value indicating whether IPv6 is enabled.
   * @return enableIPv6
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIPv6() {
    return enableIPv6;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIPv6(@javax.annotation.Nullable Boolean enableIPv6) {
    this.enableIPv6 = enableIPv6;
  }


  public NetworkConfiguration enableRemoteAccess(@javax.annotation.Nullable Boolean enableRemoteAccess) {
    this.enableRemoteAccess = enableRemoteAccess;
    return this;
  }

  /**
   * Gets or sets a value indicating whether access from outside of the LAN is permitted.
   * @return enableRemoteAccess
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_REMOTE_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableRemoteAccess() {
    return enableRemoteAccess;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_REMOTE_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableRemoteAccess(@javax.annotation.Nullable Boolean enableRemoteAccess) {
    this.enableRemoteAccess = enableRemoteAccess;
  }


  public NetworkConfiguration localNetworkSubnets(@javax.annotation.Nullable List<String> localNetworkSubnets) {
    this.localNetworkSubnets = localNetworkSubnets;
    return this;
  }

  public NetworkConfiguration addLocalNetworkSubnetsItem(String localNetworkSubnetsItem) {
    if (this.localNetworkSubnets == null) {
      this.localNetworkSubnets = new ArrayList<>();
    }
    this.localNetworkSubnets.add(localNetworkSubnetsItem);
    return this;
  }

  /**
   * Gets or sets the subnets that are deemed to make up the LAN.
   * @return localNetworkSubnets
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_SUBNETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getLocalNetworkSubnets() {
    return localNetworkSubnets;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_SUBNETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalNetworkSubnets(@javax.annotation.Nullable List<String> localNetworkSubnets) {
    this.localNetworkSubnets = localNetworkSubnets;
  }


  public NetworkConfiguration localNetworkAddresses(@javax.annotation.Nullable List<String> localNetworkAddresses) {
    this.localNetworkAddresses = localNetworkAddresses;
    return this;
  }

  public NetworkConfiguration addLocalNetworkAddressesItem(String localNetworkAddressesItem) {
    if (this.localNetworkAddresses == null) {
      this.localNetworkAddresses = new ArrayList<>();
    }
    this.localNetworkAddresses.add(localNetworkAddressesItem);
    return this;
  }

  /**
   * Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
   * @return localNetworkAddresses
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getLocalNetworkAddresses() {
    return localNetworkAddresses;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_NETWORK_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalNetworkAddresses(@javax.annotation.Nullable List<String> localNetworkAddresses) {
    this.localNetworkAddresses = localNetworkAddresses;
  }


  public NetworkConfiguration knownProxies(@javax.annotation.Nullable List<String> knownProxies) {
    this.knownProxies = knownProxies;
    return this;
  }

  public NetworkConfiguration addKnownProxiesItem(String knownProxiesItem) {
    if (this.knownProxies == null) {
      this.knownProxies = new ArrayList<>();
    }
    this.knownProxies.add(knownProxiesItem);
    return this;
  }

  /**
   * Gets or sets the known proxies.
   * @return knownProxies
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KNOWN_PROXIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getKnownProxies() {
    return knownProxies;
  }


  @JsonProperty(JSON_PROPERTY_KNOWN_PROXIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKnownProxies(@javax.annotation.Nullable List<String> knownProxies) {
    this.knownProxies = knownProxies;
  }


  public NetworkConfiguration ignoreVirtualInterfaces(@javax.annotation.Nullable Boolean ignoreVirtualInterfaces) {
    this.ignoreVirtualInterfaces = ignoreVirtualInterfaces;
    return this;
  }

  /**
   * Gets or sets a value indicating whether address names that match MediaBrowser.Common.Net.NetworkConfiguration.VirtualInterfaceNames should be ignored for the purposes of binding.
   * @return ignoreVirtualInterfaces
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIgnoreVirtualInterfaces() {
    return ignoreVirtualInterfaces;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_VIRTUAL_INTERFACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreVirtualInterfaces(@javax.annotation.Nullable Boolean ignoreVirtualInterfaces) {
    this.ignoreVirtualInterfaces = ignoreVirtualInterfaces;
  }


  public NetworkConfiguration virtualInterfaceNames(@javax.annotation.Nullable List<String> virtualInterfaceNames) {
    this.virtualInterfaceNames = virtualInterfaceNames;
    return this;
  }

  public NetworkConfiguration addVirtualInterfaceNamesItem(String virtualInterfaceNamesItem) {
    if (this.virtualInterfaceNames == null) {
      this.virtualInterfaceNames = new ArrayList<>();
    }
    this.virtualInterfaceNames.add(virtualInterfaceNamesItem);
    return this;
  }

  /**
   * Gets or sets a value indicating the interface name prefixes that should be ignored. The list can be comma separated and values are case-insensitive. &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Common.Net.NetworkConfiguration.IgnoreVirtualInterfaces\&quot; /&gt;.
   * @return virtualInterfaceNames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getVirtualInterfaceNames() {
    return virtualInterfaceNames;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_INTERFACE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVirtualInterfaceNames(@javax.annotation.Nullable List<String> virtualInterfaceNames) {
    this.virtualInterfaceNames = virtualInterfaceNames;
  }


  public NetworkConfiguration enablePublishedServerUriByRequest(@javax.annotation.Nullable Boolean enablePublishedServerUriByRequest) {
    this.enablePublishedServerUriByRequest = enablePublishedServerUriByRequest;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the published server uri is based on information in HTTP requests.
   * @return enablePublishedServerUriByRequest
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnablePublishedServerUriByRequest() {
    return enablePublishedServerUriByRequest;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_PUBLISHED_SERVER_URI_BY_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnablePublishedServerUriByRequest(@javax.annotation.Nullable Boolean enablePublishedServerUriByRequest) {
    this.enablePublishedServerUriByRequest = enablePublishedServerUriByRequest;
  }


  public NetworkConfiguration publishedServerUriBySubnet(@javax.annotation.Nullable List<String> publishedServerUriBySubnet) {
    this.publishedServerUriBySubnet = publishedServerUriBySubnet;
    return this;
  }

  public NetworkConfiguration addPublishedServerUriBySubnetItem(String publishedServerUriBySubnetItem) {
    if (this.publishedServerUriBySubnet == null) {
      this.publishedServerUriBySubnet = new ArrayList<>();
    }
    this.publishedServerUriBySubnet.add(publishedServerUriBySubnetItem);
    return this;
  }

  /**
   * Gets or sets the PublishedServerUriBySubnet  Gets or sets PublishedServerUri to advertise for specific subnets.
   * @return publishedServerUriBySubnet
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getPublishedServerUriBySubnet() {
    return publishedServerUriBySubnet;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHED_SERVER_URI_BY_SUBNET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublishedServerUriBySubnet(@javax.annotation.Nullable List<String> publishedServerUriBySubnet) {
    this.publishedServerUriBySubnet = publishedServerUriBySubnet;
  }


  public NetworkConfiguration remoteIPFilter(@javax.annotation.Nullable List<String> remoteIPFilter) {
    this.remoteIPFilter = remoteIPFilter;
    return this;
  }

  public NetworkConfiguration addRemoteIPFilterItem(String remoteIPFilterItem) {
    if (this.remoteIPFilter == null) {
      this.remoteIPFilter = new ArrayList<>();
    }
    this.remoteIPFilter.add(remoteIPFilterItem);
    return this;
  }

  /**
   * Gets or sets the filter for remote IP connectivity. Used in conjunction with &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Common.Net.NetworkConfiguration.IsRemoteIPFilterBlacklist\&quot; /&gt;.
   * @return remoteIPFilter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_I_P_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getRemoteIPFilter() {
    return remoteIPFilter;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_I_P_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteIPFilter(@javax.annotation.Nullable List<String> remoteIPFilter) {
    this.remoteIPFilter = remoteIPFilter;
  }


  public NetworkConfiguration isRemoteIPFilterBlacklist(@javax.annotation.Nullable Boolean isRemoteIPFilterBlacklist) {
    this.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
    return this;
  }

  /**
   * Gets or sets a value indicating whether &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Common.Net.NetworkConfiguration.RemoteIPFilter\&quot; /&gt; contains a blacklist or a whitelist. Default is a whitelist.
   * @return isRemoteIPFilterBlacklist
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsRemoteIPFilterBlacklist() {
    return isRemoteIPFilterBlacklist;
  }


  @JsonProperty(JSON_PROPERTY_IS_REMOTE_I_P_FILTER_BLACKLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsRemoteIPFilterBlacklist(@javax.annotation.Nullable Boolean isRemoteIPFilterBlacklist) {
    this.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
  }


  /**
   * Return true if this NetworkConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfiguration networkConfiguration = (NetworkConfiguration) o;
    return Objects.equals(this.baseUrl, networkConfiguration.baseUrl) &&
        Objects.equals(this.enableHttps, networkConfiguration.enableHttps) &&
        Objects.equals(this.requireHttps, networkConfiguration.requireHttps) &&
        Objects.equals(this.certificatePath, networkConfiguration.certificatePath) &&
        Objects.equals(this.certificatePassword, networkConfiguration.certificatePassword) &&
        Objects.equals(this.internalHttpPort, networkConfiguration.internalHttpPort) &&
        Objects.equals(this.internalHttpsPort, networkConfiguration.internalHttpsPort) &&
        Objects.equals(this.publicHttpPort, networkConfiguration.publicHttpPort) &&
        Objects.equals(this.publicHttpsPort, networkConfiguration.publicHttpsPort) &&
        Objects.equals(this.autoDiscovery, networkConfiguration.autoDiscovery) &&
        Objects.equals(this.enableUPnP, networkConfiguration.enableUPnP) &&
        Objects.equals(this.enableIPv4, networkConfiguration.enableIPv4) &&
        Objects.equals(this.enableIPv6, networkConfiguration.enableIPv6) &&
        Objects.equals(this.enableRemoteAccess, networkConfiguration.enableRemoteAccess) &&
        Objects.equals(this.localNetworkSubnets, networkConfiguration.localNetworkSubnets) &&
        Objects.equals(this.localNetworkAddresses, networkConfiguration.localNetworkAddresses) &&
        Objects.equals(this.knownProxies, networkConfiguration.knownProxies) &&
        Objects.equals(this.ignoreVirtualInterfaces, networkConfiguration.ignoreVirtualInterfaces) &&
        Objects.equals(this.virtualInterfaceNames, networkConfiguration.virtualInterfaceNames) &&
        Objects.equals(this.enablePublishedServerUriByRequest, networkConfiguration.enablePublishedServerUriByRequest) &&
        Objects.equals(this.publishedServerUriBySubnet, networkConfiguration.publishedServerUriBySubnet) &&
        Objects.equals(this.remoteIPFilter, networkConfiguration.remoteIPFilter) &&
        Objects.equals(this.isRemoteIPFilterBlacklist, networkConfiguration.isRemoteIPFilterBlacklist);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseUrl, enableHttps, requireHttps, certificatePath, certificatePassword, internalHttpPort, internalHttpsPort, publicHttpPort, publicHttpsPort, autoDiscovery, enableUPnP, enableIPv4, enableIPv6, enableRemoteAccess, localNetworkSubnets, localNetworkAddresses, knownProxies, ignoreVirtualInterfaces, virtualInterfaceNames, enablePublishedServerUriByRequest, publishedServerUriBySubnet, remoteIPFilter, isRemoteIPFilterBlacklist);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfiguration {\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    enableHttps: ").append(toIndentedString(enableHttps)).append("\n");
    sb.append("    requireHttps: ").append(toIndentedString(requireHttps)).append("\n");
    sb.append("    certificatePath: ").append(toIndentedString(certificatePath)).append("\n");
    sb.append("    certificatePassword: ").append(toIndentedString(certificatePassword)).append("\n");
    sb.append("    internalHttpPort: ").append(toIndentedString(internalHttpPort)).append("\n");
    sb.append("    internalHttpsPort: ").append(toIndentedString(internalHttpsPort)).append("\n");
    sb.append("    publicHttpPort: ").append(toIndentedString(publicHttpPort)).append("\n");
    sb.append("    publicHttpsPort: ").append(toIndentedString(publicHttpsPort)).append("\n");
    sb.append("    autoDiscovery: ").append(toIndentedString(autoDiscovery)).append("\n");
    sb.append("    enableUPnP: ").append(toIndentedString(enableUPnP)).append("\n");
    sb.append("    enableIPv4: ").append(toIndentedString(enableIPv4)).append("\n");
    sb.append("    enableIPv6: ").append(toIndentedString(enableIPv6)).append("\n");
    sb.append("    enableRemoteAccess: ").append(toIndentedString(enableRemoteAccess)).append("\n");
    sb.append("    localNetworkSubnets: ").append(toIndentedString(localNetworkSubnets)).append("\n");
    sb.append("    localNetworkAddresses: ").append(toIndentedString(localNetworkAddresses)).append("\n");
    sb.append("    knownProxies: ").append(toIndentedString(knownProxies)).append("\n");
    sb.append("    ignoreVirtualInterfaces: ").append(toIndentedString(ignoreVirtualInterfaces)).append("\n");
    sb.append("    virtualInterfaceNames: ").append(toIndentedString(virtualInterfaceNames)).append("\n");
    sb.append("    enablePublishedServerUriByRequest: ").append(toIndentedString(enablePublishedServerUriByRequest)).append("\n");
    sb.append("    publishedServerUriBySubnet: ").append(toIndentedString(publishedServerUriBySubnet)).append("\n");
    sb.append("    remoteIPFilter: ").append(toIndentedString(remoteIPFilter)).append("\n");
    sb.append("    isRemoteIPFilterBlacklist: ").append(toIndentedString(isRemoteIPFilterBlacklist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `BaseUrl` to the URL query string
    if (getBaseUrl() != null) {
      joiner.add(String.format("%sBaseUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBaseUrl()))));
    }

    // add `EnableHttps` to the URL query string
    if (getEnableHttps() != null) {
      joiner.add(String.format("%sEnableHttps%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableHttps()))));
    }

    // add `RequireHttps` to the URL query string
    if (getRequireHttps() != null) {
      joiner.add(String.format("%sRequireHttps%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequireHttps()))));
    }

    // add `CertificatePath` to the URL query string
    if (getCertificatePath() != null) {
      joiner.add(String.format("%sCertificatePath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCertificatePath()))));
    }

    // add `CertificatePassword` to the URL query string
    if (getCertificatePassword() != null) {
      joiner.add(String.format("%sCertificatePassword%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCertificatePassword()))));
    }

    // add `InternalHttpPort` to the URL query string
    if (getInternalHttpPort() != null) {
      joiner.add(String.format("%sInternalHttpPort%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getInternalHttpPort()))));
    }

    // add `InternalHttpsPort` to the URL query string
    if (getInternalHttpsPort() != null) {
      joiner.add(String.format("%sInternalHttpsPort%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getInternalHttpsPort()))));
    }

    // add `PublicHttpPort` to the URL query string
    if (getPublicHttpPort() != null) {
      joiner.add(String.format("%sPublicHttpPort%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPublicHttpPort()))));
    }

    // add `PublicHttpsPort` to the URL query string
    if (getPublicHttpsPort() != null) {
      joiner.add(String.format("%sPublicHttpsPort%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPublicHttpsPort()))));
    }

    // add `AutoDiscovery` to the URL query string
    if (getAutoDiscovery() != null) {
      joiner.add(String.format("%sAutoDiscovery%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAutoDiscovery()))));
    }

    // add `EnableUPnP` to the URL query string
    if (getEnableUPnP() != null) {
      joiner.add(String.format("%sEnableUPnP%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableUPnP()))));
    }

    // add `EnableIPv4` to the URL query string
    if (getEnableIPv4() != null) {
      joiner.add(String.format("%sEnableIPv4%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIPv4()))));
    }

    // add `EnableIPv6` to the URL query string
    if (getEnableIPv6() != null) {
      joiner.add(String.format("%sEnableIPv6%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIPv6()))));
    }

    // add `EnableRemoteAccess` to the URL query string
    if (getEnableRemoteAccess() != null) {
      joiner.add(String.format("%sEnableRemoteAccess%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableRemoteAccess()))));
    }

    // add `LocalNetworkSubnets` to the URL query string
    if (getLocalNetworkSubnets() != null) {
      for (int i = 0; i < getLocalNetworkSubnets().size(); i++) {
        joiner.add(String.format("%sLocalNetworkSubnets%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getLocalNetworkSubnets().get(i)))));
      }
    }

    // add `LocalNetworkAddresses` to the URL query string
    if (getLocalNetworkAddresses() != null) {
      for (int i = 0; i < getLocalNetworkAddresses().size(); i++) {
        joiner.add(String.format("%sLocalNetworkAddresses%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getLocalNetworkAddresses().get(i)))));
      }
    }

    // add `KnownProxies` to the URL query string
    if (getKnownProxies() != null) {
      for (int i = 0; i < getKnownProxies().size(); i++) {
        joiner.add(String.format("%sKnownProxies%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getKnownProxies().get(i)))));
      }
    }

    // add `IgnoreVirtualInterfaces` to the URL query string
    if (getIgnoreVirtualInterfaces() != null) {
      joiner.add(String.format("%sIgnoreVirtualInterfaces%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIgnoreVirtualInterfaces()))));
    }

    // add `VirtualInterfaceNames` to the URL query string
    if (getVirtualInterfaceNames() != null) {
      for (int i = 0; i < getVirtualInterfaceNames().size(); i++) {
        joiner.add(String.format("%sVirtualInterfaceNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getVirtualInterfaceNames().get(i)))));
      }
    }

    // add `EnablePublishedServerUriByRequest` to the URL query string
    if (getEnablePublishedServerUriByRequest() != null) {
      joiner.add(String.format("%sEnablePublishedServerUriByRequest%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnablePublishedServerUriByRequest()))));
    }

    // add `PublishedServerUriBySubnet` to the URL query string
    if (getPublishedServerUriBySubnet() != null) {
      for (int i = 0; i < getPublishedServerUriBySubnet().size(); i++) {
        joiner.add(String.format("%sPublishedServerUriBySubnet%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getPublishedServerUriBySubnet().get(i)))));
      }
    }

    // add `RemoteIPFilter` to the URL query string
    if (getRemoteIPFilter() != null) {
      for (int i = 0; i < getRemoteIPFilter().size(); i++) {
        joiner.add(String.format("%sRemoteIPFilter%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getRemoteIPFilter().get(i)))));
      }
    }

    // add `IsRemoteIPFilterBlacklist` to the URL query string
    if (getIsRemoteIPFilterBlacklist() != null) {
      joiner.add(String.format("%sIsRemoteIPFilterBlacklist%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsRemoteIPFilterBlacklist()))));
    }

    return joiner.toString();
  }
}

