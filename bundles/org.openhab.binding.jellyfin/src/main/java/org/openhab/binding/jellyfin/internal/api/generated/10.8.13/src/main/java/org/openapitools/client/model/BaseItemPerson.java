/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.BaseItemPersonImageBlurHashes;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * This is used by the api to get information about a Person within a BaseItem.
 */
@JsonPropertyOrder({
  BaseItemPerson.JSON_PROPERTY_NAME,
  BaseItemPerson.JSON_PROPERTY_ID,
  BaseItemPerson.JSON_PROPERTY_ROLE,
  BaseItemPerson.JSON_PROPERTY_TYPE,
  BaseItemPerson.JSON_PROPERTY_PRIMARY_IMAGE_TAG,
  BaseItemPerson.JSON_PROPERTY_IMAGE_BLUR_HASHES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class BaseItemPerson {
  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ID = "Id";
  @javax.annotation.Nullable
  private UUID id;

  public static final String JSON_PROPERTY_ROLE = "Role";
  private JsonNullable<String> role = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TYPE = "Type";
  private JsonNullable<String> type = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PRIMARY_IMAGE_TAG = "PrimaryImageTag";
  private JsonNullable<String> primaryImageTag = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IMAGE_BLUR_HASHES = "ImageBlurHashes";
  private JsonNullable<BaseItemPersonImageBlurHashes> imageBlurHashes = JsonNullable.<BaseItemPersonImageBlurHashes>undefined();

  public BaseItemPerson() { 
  }

  public BaseItemPerson name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public BaseItemPerson id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the identifier.
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public BaseItemPerson role(@javax.annotation.Nullable String role) {
    this.role = JsonNullable.<String>of(role);
    return this;
  }

  /**
   * Gets or sets the role.
   * @return role
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRole() {
        return role.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRole_JsonNullable() {
    return role;
  }
  
  @JsonProperty(JSON_PROPERTY_ROLE)
  public void setRole_JsonNullable(JsonNullable<String> role) {
    this.role = role;
  }

  public void setRole(@javax.annotation.Nullable String role) {
    this.role = JsonNullable.<String>of(role);
  }


  public BaseItemPerson type(@javax.annotation.Nullable String type) {
    this.type = JsonNullable.<String>of(type);
    return this;
  }

  /**
   * Gets or sets the type.
   * @return type
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getType() {
        return type.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getType_JsonNullable() {
    return type;
  }
  
  @JsonProperty(JSON_PROPERTY_TYPE)
  public void setType_JsonNullable(JsonNullable<String> type) {
    this.type = type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = JsonNullable.<String>of(type);
  }


  public BaseItemPerson primaryImageTag(@javax.annotation.Nullable String primaryImageTag) {
    this.primaryImageTag = JsonNullable.<String>of(primaryImageTag);
    return this;
  }

  /**
   * Gets or sets the primary image tag.
   * @return primaryImageTag
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getPrimaryImageTag() {
        return primaryImageTag.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRIMARY_IMAGE_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPrimaryImageTag_JsonNullable() {
    return primaryImageTag;
  }
  
  @JsonProperty(JSON_PROPERTY_PRIMARY_IMAGE_TAG)
  public void setPrimaryImageTag_JsonNullable(JsonNullable<String> primaryImageTag) {
    this.primaryImageTag = primaryImageTag;
  }

  public void setPrimaryImageTag(@javax.annotation.Nullable String primaryImageTag) {
    this.primaryImageTag = JsonNullable.<String>of(primaryImageTag);
  }


  public BaseItemPerson imageBlurHashes(@javax.annotation.Nullable BaseItemPersonImageBlurHashes imageBlurHashes) {
    this.imageBlurHashes = JsonNullable.<BaseItemPersonImageBlurHashes>of(imageBlurHashes);
    return this;
  }

  /**
   * Get imageBlurHashes
   * @return imageBlurHashes
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public BaseItemPersonImageBlurHashes getImageBlurHashes() {
        return imageBlurHashes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMAGE_BLUR_HASHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BaseItemPersonImageBlurHashes> getImageBlurHashes_JsonNullable() {
    return imageBlurHashes;
  }
  
  @JsonProperty(JSON_PROPERTY_IMAGE_BLUR_HASHES)
  public void setImageBlurHashes_JsonNullable(JsonNullable<BaseItemPersonImageBlurHashes> imageBlurHashes) {
    this.imageBlurHashes = imageBlurHashes;
  }

  public void setImageBlurHashes(@javax.annotation.Nullable BaseItemPersonImageBlurHashes imageBlurHashes) {
    this.imageBlurHashes = JsonNullable.<BaseItemPersonImageBlurHashes>of(imageBlurHashes);
  }


  /**
   * Return true if this BaseItemPerson object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseItemPerson baseItemPerson = (BaseItemPerson) o;
    return equalsNullable(this.name, baseItemPerson.name) &&
        Objects.equals(this.id, baseItemPerson.id) &&
        equalsNullable(this.role, baseItemPerson.role) &&
        equalsNullable(this.type, baseItemPerson.type) &&
        equalsNullable(this.primaryImageTag, baseItemPerson.primaryImageTag) &&
        equalsNullable(this.imageBlurHashes, baseItemPerson.imageBlurHashes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), id, hashCodeNullable(role), hashCodeNullable(type), hashCodeNullable(primaryImageTag), hashCodeNullable(imageBlurHashes));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseItemPerson {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    primaryImageTag: ").append(toIndentedString(primaryImageTag)).append("\n");
    sb.append("    imageBlurHashes: ").append(toIndentedString(imageBlurHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `Role` to the URL query string
    if (getRole() != null) {
      joiner.add(String.format("%sRole%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRole()))));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `PrimaryImageTag` to the URL query string
    if (getPrimaryImageTag() != null) {
      joiner.add(String.format("%sPrimaryImageTag%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPrimaryImageTag()))));
    }

    // add `ImageBlurHashes` to the URL query string
    if (getImageBlurHashes() != null) {
      joiner.add(getImageBlurHashes().toUrlQueryString(prefix + "ImageBlurHashes" + suffix));
    }

    return joiner.toString();
  }
}

