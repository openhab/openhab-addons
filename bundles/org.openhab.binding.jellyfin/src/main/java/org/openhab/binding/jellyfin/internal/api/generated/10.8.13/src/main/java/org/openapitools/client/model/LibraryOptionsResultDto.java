/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LibraryOptionInfoDto;
import org.openapitools.client.model.LibraryTypeOptionsDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Library options result dto.
 */
@JsonPropertyOrder({
  LibraryOptionsResultDto.JSON_PROPERTY_METADATA_SAVERS,
  LibraryOptionsResultDto.JSON_PROPERTY_METADATA_READERS,
  LibraryOptionsResultDto.JSON_PROPERTY_SUBTITLE_FETCHERS,
  LibraryOptionsResultDto.JSON_PROPERTY_TYPE_OPTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:40.061690683Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class LibraryOptionsResultDto {
  public static final String JSON_PROPERTY_METADATA_SAVERS = "MetadataSavers";
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> metadataSavers = new ArrayList<>();

  public static final String JSON_PROPERTY_METADATA_READERS = "MetadataReaders";
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> metadataReaders = new ArrayList<>();

  public static final String JSON_PROPERTY_SUBTITLE_FETCHERS = "SubtitleFetchers";
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> subtitleFetchers = new ArrayList<>();

  public static final String JSON_PROPERTY_TYPE_OPTIONS = "TypeOptions";
  @javax.annotation.Nullable
  private List<LibraryTypeOptionsDto> typeOptions = new ArrayList<>();

  public LibraryOptionsResultDto() { 
  }

  public LibraryOptionsResultDto metadataSavers(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataSavers) {
    this.metadataSavers = metadataSavers;
    return this;
  }

  public LibraryOptionsResultDto addMetadataSaversItem(LibraryOptionInfoDto metadataSaversItem) {
    if (this.metadataSavers == null) {
      this.metadataSavers = new ArrayList<>();
    }
    this.metadataSavers.add(metadataSaversItem);
    return this;
  }

  /**
   * Gets or sets the metadata savers.
   * @return metadataSavers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA_SAVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<LibraryOptionInfoDto> getMetadataSavers() {
    return metadataSavers;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_SAVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataSavers(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataSavers) {
    this.metadataSavers = metadataSavers;
  }


  public LibraryOptionsResultDto metadataReaders(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataReaders) {
    this.metadataReaders = metadataReaders;
    return this;
  }

  public LibraryOptionsResultDto addMetadataReadersItem(LibraryOptionInfoDto metadataReadersItem) {
    if (this.metadataReaders == null) {
      this.metadataReaders = new ArrayList<>();
    }
    this.metadataReaders.add(metadataReadersItem);
    return this;
  }

  /**
   * Gets or sets the metadata readers.
   * @return metadataReaders
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA_READERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<LibraryOptionInfoDto> getMetadataReaders() {
    return metadataReaders;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_READERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataReaders(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataReaders) {
    this.metadataReaders = metadataReaders;
  }


  public LibraryOptionsResultDto subtitleFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> subtitleFetchers) {
    this.subtitleFetchers = subtitleFetchers;
    return this;
  }

  public LibraryOptionsResultDto addSubtitleFetchersItem(LibraryOptionInfoDto subtitleFetchersItem) {
    if (this.subtitleFetchers == null) {
      this.subtitleFetchers = new ArrayList<>();
    }
    this.subtitleFetchers.add(subtitleFetchersItem);
    return this;
  }

  /**
   * Gets or sets the subtitle fetchers.
   * @return subtitleFetchers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTITLE_FETCHERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<LibraryOptionInfoDto> getSubtitleFetchers() {
    return subtitleFetchers;
  }


  @JsonProperty(JSON_PROPERTY_SUBTITLE_FETCHERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubtitleFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> subtitleFetchers) {
    this.subtitleFetchers = subtitleFetchers;
  }


  public LibraryOptionsResultDto typeOptions(@javax.annotation.Nullable List<LibraryTypeOptionsDto> typeOptions) {
    this.typeOptions = typeOptions;
    return this;
  }

  public LibraryOptionsResultDto addTypeOptionsItem(LibraryTypeOptionsDto typeOptionsItem) {
    if (this.typeOptions == null) {
      this.typeOptions = new ArrayList<>();
    }
    this.typeOptions.add(typeOptionsItem);
    return this;
  }

  /**
   * Gets or sets the type options.
   * @return typeOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<LibraryTypeOptionsDto> getTypeOptions() {
    return typeOptions;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeOptions(@javax.annotation.Nullable List<LibraryTypeOptionsDto> typeOptions) {
    this.typeOptions = typeOptions;
  }


  /**
   * Return true if this LibraryOptionsResultDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryOptionsResultDto libraryOptionsResultDto = (LibraryOptionsResultDto) o;
    return Objects.equals(this.metadataSavers, libraryOptionsResultDto.metadataSavers) &&
        Objects.equals(this.metadataReaders, libraryOptionsResultDto.metadataReaders) &&
        Objects.equals(this.subtitleFetchers, libraryOptionsResultDto.subtitleFetchers) &&
        Objects.equals(this.typeOptions, libraryOptionsResultDto.typeOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataSavers, metadataReaders, subtitleFetchers, typeOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryOptionsResultDto {\n");
    sb.append("    metadataSavers: ").append(toIndentedString(metadataSavers)).append("\n");
    sb.append("    metadataReaders: ").append(toIndentedString(metadataReaders)).append("\n");
    sb.append("    subtitleFetchers: ").append(toIndentedString(subtitleFetchers)).append("\n");
    sb.append("    typeOptions: ").append(toIndentedString(typeOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `MetadataSavers` to the URL query string
    if (getMetadataSavers() != null) {
      for (int i = 0; i < getMetadataSavers().size(); i++) {
        if (getMetadataSavers().get(i) != null) {
          joiner.add(getMetadataSavers().get(i).toUrlQueryString(String.format("%sMetadataSavers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `MetadataReaders` to the URL query string
    if (getMetadataReaders() != null) {
      for (int i = 0; i < getMetadataReaders().size(); i++) {
        if (getMetadataReaders().get(i) != null) {
          joiner.add(getMetadataReaders().get(i).toUrlQueryString(String.format("%sMetadataReaders%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `SubtitleFetchers` to the URL query string
    if (getSubtitleFetchers() != null) {
      for (int i = 0; i < getSubtitleFetchers().size(); i++) {
        if (getSubtitleFetchers().get(i) != null) {
          joiner.add(getSubtitleFetchers().get(i).toUrlQueryString(String.format("%sSubtitleFetchers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `TypeOptions` to the URL query string
    if (getTypeOptions() != null) {
      for (int i = 0; i < getTypeOptions().size(); i++) {
        if (getTypeOptions().get(i) != null) {
          joiner.add(getTypeOptions().get(i).toUrlQueryString(String.format("%sTypeOptions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

