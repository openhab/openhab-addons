/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QuickConnectResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuickConnectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuickConnectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuickConnectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authorizeQuickConnect
     * @param code Quick connect code to authorize. (required)
     * @param userId The user the authorize. Access to the requested user is required. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result authorized successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown user id. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizeQuickConnectCall(String code, UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/QuickConnect/Authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeQuickConnectValidateBeforeCall(String code, UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling authorizeQuickConnect(Async)");
        }

        return authorizeQuickConnectCall(code, userId, _callback);

    }

    /**
     * Authorizes a pending quick connect request.
     * 
     * @param code Quick connect code to authorize. (required)
     * @param userId The user the authorize. Access to the requested user is required. (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result authorized successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown user id. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Boolean authorizeQuickConnect(String code, UUID userId) throws ApiException {
        ApiResponse<Boolean> localVarResp = authorizeQuickConnectWithHttpInfo(code, userId);
        return localVarResp.getData();
    }

    /**
     * Authorizes a pending quick connect request.
     * 
     * @param code Quick connect code to authorize. (required)
     * @param userId The user the authorize. Access to the requested user is required. (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result authorized successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown user id. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> authorizeQuickConnectWithHttpInfo(String code, UUID userId) throws ApiException {
        okhttp3.Call localVarCall = authorizeQuickConnectValidateBeforeCall(code, userId, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authorizes a pending quick connect request. (asynchronously)
     * 
     * @param code Quick connect code to authorize. (required)
     * @param userId The user the authorize. Access to the requested user is required. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result authorized successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown user id. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizeQuickConnectAsync(String code, UUID userId, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeQuickConnectValidateBeforeCall(code, userId, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuickConnectEnabled
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect state returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuickConnectEnabledCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/QuickConnect/Enabled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuickConnectEnabledValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getQuickConnectEnabledCall(_callback);

    }

    /**
     * Gets the current quick connect state.
     * 
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect state returned. </td><td>  -  </td></tr>
     </table>
     */
    public Boolean getQuickConnectEnabled() throws ApiException {
        ApiResponse<Boolean> localVarResp = getQuickConnectEnabledWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets the current quick connect state.
     * 
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect state returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> getQuickConnectEnabledWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getQuickConnectEnabledValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the current quick connect state. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect state returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuickConnectEnabledAsync(final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuickConnectEnabledValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuickConnectState
     * @param secret Secret previously returned from the Initiate endpoint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown quick connect secret. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuickConnectStateCall(String secret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/QuickConnect/Connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (secret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret", secret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuickConnectStateValidateBeforeCall(String secret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secret' is set
        if (secret == null) {
            throw new ApiException("Missing the required parameter 'secret' when calling getQuickConnectState(Async)");
        }

        return getQuickConnectStateCall(secret, _callback);

    }

    /**
     * Attempts to retrieve authentication information.
     * 
     * @param secret Secret previously returned from the Initiate endpoint. (required)
     * @return QuickConnectResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown quick connect secret. </td><td>  -  </td></tr>
     </table>
     */
    public QuickConnectResult getQuickConnectState(String secret) throws ApiException {
        ApiResponse<QuickConnectResult> localVarResp = getQuickConnectStateWithHttpInfo(secret);
        return localVarResp.getData();
    }

    /**
     * Attempts to retrieve authentication information.
     * 
     * @param secret Secret previously returned from the Initiate endpoint. (required)
     * @return ApiResponse&lt;QuickConnectResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown quick connect secret. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuickConnectResult> getQuickConnectStateWithHttpInfo(String secret) throws ApiException {
        okhttp3.Call localVarCall = getQuickConnectStateValidateBeforeCall(secret, null);
        Type localVarReturnType = new TypeToken<QuickConnectResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attempts to retrieve authentication information. (asynchronously)
     * 
     * @param secret Secret previously returned from the Initiate endpoint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect result returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown quick connect secret. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuickConnectStateAsync(String secret, final ApiCallback<QuickConnectResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuickConnectStateValidateBeforeCall(secret, _callback);
        Type localVarReturnType = new TypeToken<QuickConnectResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiateQuickConnect
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect request successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Quick connect is not active on this server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateQuickConnectCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/QuickConnect/Initiate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateQuickConnectValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return initiateQuickConnectCall(_callback);

    }

    /**
     * Initiate a new quick connect request.
     * 
     * @return QuickConnectResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect request successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Quick connect is not active on this server. </td><td>  -  </td></tr>
     </table>
     */
    public QuickConnectResult initiateQuickConnect() throws ApiException {
        ApiResponse<QuickConnectResult> localVarResp = initiateQuickConnectWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Initiate a new quick connect request.
     * 
     * @return ApiResponse&lt;QuickConnectResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect request successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Quick connect is not active on this server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuickConnectResult> initiateQuickConnectWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initiateQuickConnectValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<QuickConnectResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate a new quick connect request. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quick connect request successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Quick connect is not active on this server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateQuickConnectAsync(final ApiCallback<QuickConnectResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateQuickConnectValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<QuickConnectResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
