/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.BaseItemKind;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import java.util.UUID;
import org.openapitools.client.model.UserItemDataDto;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UserLibraryApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UserLibraryApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UserLibraryApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Deletes a user&#39;s saved personal rating for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return UserItemDataDto
   * @throws ApiException if fails to make API call
   */
  public UserItemDataDto deleteUserItemRating(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<UserItemDataDto> localVarResponse = deleteUserItemRatingWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Deletes a user&#39;s saved personal rating for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;UserItemDataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserItemDataDto> deleteUserItemRatingWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUserItemRatingRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteUserItemRating", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserItemDataDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserItemDataDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserItemDataDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUserItemRatingRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling deleteUserItemRating");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling deleteUserItemRating");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/{itemId}/Rating"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets intros to play before the main media item plays.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getIntros(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getIntrosWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Gets intros to play before the main media item plays.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getIntrosWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIntrosRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIntros", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIntrosRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getIntros");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getIntros");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/{itemId}/Intros"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets an item from a user&#39;s library.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return BaseItemDto
   * @throws ApiException if fails to make API call
   */
  public BaseItemDto getItem(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<BaseItemDto> localVarResponse = getItemWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Gets an item from a user&#39;s library.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;BaseItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDto> getItemWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getItemRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getItem", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getItemRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getItem");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/{itemId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets latest media.
   * 
   * @param userId User id. (required)
   * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
   * @param isPlayed Filter by items that are played, or not. (optional)
   * @param enableImages Optional. include image information in output. (optional)
   * @param imageTypeLimit Optional. the max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. include user data. (optional)
   * @param limit Return item limit. (optional, default to 20)
   * @param groupItems Whether or not to group items into a parent container. (optional, default to true)
   * @return List&lt;BaseItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BaseItemDto> getLatestMedia(UUID userId, UUID parentId, List<ItemFields> fields, List<BaseItemKind> includeItemTypes, Boolean isPlayed, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, Integer limit, Boolean groupItems) throws ApiException {
    ApiResponse<List<BaseItemDto>> localVarResponse = getLatestMediaWithHttpInfo(userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems);
    return localVarResponse.getData();
  }

  /**
   * Gets latest media.
   * 
   * @param userId User id. (required)
   * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
   * @param isPlayed Filter by items that are played, or not. (optional)
   * @param enableImages Optional. include image information in output. (optional)
   * @param imageTypeLimit Optional. the max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param enableUserData Optional. include user data. (optional)
   * @param limit Return item limit. (optional, default to 20)
   * @param groupItems Whether or not to group items into a parent container. (optional, default to true)
   * @return ApiResponse&lt;List&lt;BaseItemDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<BaseItemDto>> getLatestMediaWithHttpInfo(UUID userId, UUID parentId, List<ItemFields> fields, List<BaseItemKind> includeItemTypes, Boolean isPlayed, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, Integer limit, Boolean groupItems) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLatestMediaRequestBuilder(userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLatestMedia", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<BaseItemDto>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<BaseItemDto>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<BaseItemDto>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLatestMediaRequestBuilder(UUID userId, UUID parentId, List<ItemFields> fields, List<BaseItemKind> includeItemTypes, Boolean isPlayed, Boolean enableImages, Integer imageTypeLimit, List<ImageType> enableImageTypes, Boolean enableUserData, Integer limit, Boolean groupItems) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getLatestMedia");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/Latest"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "includeItemTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "includeItemTypes", includeItemTypes));
    localVarQueryParameterBaseName = "isPlayed";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isPlayed", isPlayed));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
    localVarQueryParameterBaseName = "enableUserData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableUserData", enableUserData));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "groupItems";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("groupItems", groupItems));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets local trailers for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return List&lt;BaseItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BaseItemDto> getLocalTrailers(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<List<BaseItemDto>> localVarResponse = getLocalTrailersWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Gets local trailers for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;List&lt;BaseItemDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<BaseItemDto>> getLocalTrailersWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLocalTrailersRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLocalTrailers", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<BaseItemDto>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<BaseItemDto>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<BaseItemDto>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLocalTrailersRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getLocalTrailers");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getLocalTrailers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/{itemId}/LocalTrailers"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the root folder from a user&#39;s library.
   * 
   * @param userId User id. (required)
   * @return BaseItemDto
   * @throws ApiException if fails to make API call
   */
  public BaseItemDto getRootFolder(UUID userId) throws ApiException {
    ApiResponse<BaseItemDto> localVarResponse = getRootFolderWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * Gets the root folder from a user&#39;s library.
   * 
   * @param userId User id. (required)
   * @return ApiResponse&lt;BaseItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDto> getRootFolderWithHttpInfo(UUID userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRootFolderRequestBuilder(userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRootFolder", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRootFolderRequestBuilder(UUID userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getRootFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/Root"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets special features for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return List&lt;BaseItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BaseItemDto> getSpecialFeatures(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<List<BaseItemDto>> localVarResponse = getSpecialFeaturesWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Gets special features for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;List&lt;BaseItemDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<BaseItemDto>> getSpecialFeaturesWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSpecialFeaturesRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSpecialFeatures", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<BaseItemDto>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<BaseItemDto>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<BaseItemDto>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSpecialFeaturesRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getSpecialFeatures");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling getSpecialFeatures");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/{itemId}/SpecialFeatures"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Marks an item as a favorite.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return UserItemDataDto
   * @throws ApiException if fails to make API call
   */
  public UserItemDataDto markFavoriteItem(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<UserItemDataDto> localVarResponse = markFavoriteItemWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Marks an item as a favorite.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;UserItemDataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserItemDataDto> markFavoriteItemWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = markFavoriteItemRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("markFavoriteItem", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserItemDataDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserItemDataDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserItemDataDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder markFavoriteItemRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling markFavoriteItem");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling markFavoriteItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/FavoriteItems/{itemId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Unmarks item as a favorite.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return UserItemDataDto
   * @throws ApiException if fails to make API call
   */
  public UserItemDataDto unmarkFavoriteItem(UUID userId, UUID itemId) throws ApiException {
    ApiResponse<UserItemDataDto> localVarResponse = unmarkFavoriteItemWithHttpInfo(userId, itemId);
    return localVarResponse.getData();
  }

  /**
   * Unmarks item as a favorite.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @return ApiResponse&lt;UserItemDataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserItemDataDto> unmarkFavoriteItemWithHttpInfo(UUID userId, UUID itemId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unmarkFavoriteItemRequestBuilder(userId, itemId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("unmarkFavoriteItem", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserItemDataDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserItemDataDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserItemDataDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unmarkFavoriteItemRequestBuilder(UUID userId, UUID itemId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling unmarkFavoriteItem");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling unmarkFavoriteItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/FavoriteItems/{itemId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates a user&#39;s rating for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param likes Whether this M:Jellyfin.Api.Controllers.UserLibraryController.UpdateUserItemRating(System.Guid,System.Guid,System.Nullable{System.Boolean}) is likes. (optional)
   * @return UserItemDataDto
   * @throws ApiException if fails to make API call
   */
  public UserItemDataDto updateUserItemRating(UUID userId, UUID itemId, Boolean likes) throws ApiException {
    ApiResponse<UserItemDataDto> localVarResponse = updateUserItemRatingWithHttpInfo(userId, itemId, likes);
    return localVarResponse.getData();
  }

  /**
   * Updates a user&#39;s rating for an item.
   * 
   * @param userId User id. (required)
   * @param itemId Item id. (required)
   * @param likes Whether this M:Jellyfin.Api.Controllers.UserLibraryController.UpdateUserItemRating(System.Guid,System.Guid,System.Nullable{System.Boolean}) is likes. (optional)
   * @return ApiResponse&lt;UserItemDataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserItemDataDto> updateUserItemRatingWithHttpInfo(UUID userId, UUID itemId, Boolean likes) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateUserItemRatingRequestBuilder(userId, itemId, likes);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateUserItemRating", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserItemDataDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserItemDataDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserItemDataDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateUserItemRatingRequestBuilder(UUID userId, UUID itemId, Boolean likes) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling updateUserItemRating");
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      throw new ApiException(400, "Missing the required parameter 'itemId' when calling updateUserItemRating");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Users/{userId}/Items/{itemId}/Rating"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{itemId}", ApiClient.urlEncode(itemId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "likes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("likes", likes));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
