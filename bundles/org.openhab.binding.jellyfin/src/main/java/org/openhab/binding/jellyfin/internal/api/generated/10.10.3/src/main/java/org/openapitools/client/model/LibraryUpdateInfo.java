/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class LibraryUpdateInfo.
 */
@JsonPropertyOrder({
  LibraryUpdateInfo.JSON_PROPERTY_FOLDERS_ADDED_TO,
  LibraryUpdateInfo.JSON_PROPERTY_FOLDERS_REMOVED_FROM,
  LibraryUpdateInfo.JSON_PROPERTY_ITEMS_ADDED,
  LibraryUpdateInfo.JSON_PROPERTY_ITEMS_REMOVED,
  LibraryUpdateInfo.JSON_PROPERTY_ITEMS_UPDATED,
  LibraryUpdateInfo.JSON_PROPERTY_COLLECTION_FOLDERS,
  LibraryUpdateInfo.JSON_PROPERTY_IS_EMPTY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:50.987643556Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class LibraryUpdateInfo {
  public static final String JSON_PROPERTY_FOLDERS_ADDED_TO = "FoldersAddedTo";
  @javax.annotation.Nullable
  private List<String> foldersAddedTo = new ArrayList<>();

  public static final String JSON_PROPERTY_FOLDERS_REMOVED_FROM = "FoldersRemovedFrom";
  @javax.annotation.Nullable
  private List<String> foldersRemovedFrom = new ArrayList<>();

  public static final String JSON_PROPERTY_ITEMS_ADDED = "ItemsAdded";
  @javax.annotation.Nullable
  private List<String> itemsAdded = new ArrayList<>();

  public static final String JSON_PROPERTY_ITEMS_REMOVED = "ItemsRemoved";
  @javax.annotation.Nullable
  private List<String> itemsRemoved = new ArrayList<>();

  public static final String JSON_PROPERTY_ITEMS_UPDATED = "ItemsUpdated";
  @javax.annotation.Nullable
  private List<String> itemsUpdated = new ArrayList<>();

  public static final String JSON_PROPERTY_COLLECTION_FOLDERS = "CollectionFolders";
  @javax.annotation.Nullable
  private List<String> collectionFolders = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_EMPTY = "IsEmpty";
  @javax.annotation.Nullable
  private Boolean isEmpty;

  public LibraryUpdateInfo() { 
  }

  @JsonCreator
  public LibraryUpdateInfo(
    @JsonProperty(JSON_PROPERTY_IS_EMPTY) Boolean isEmpty
  ) {
  this();
    this.isEmpty = isEmpty;
  }

  public LibraryUpdateInfo foldersAddedTo(@javax.annotation.Nullable List<String> foldersAddedTo) {
    this.foldersAddedTo = foldersAddedTo;
    return this;
  }

  public LibraryUpdateInfo addFoldersAddedToItem(String foldersAddedToItem) {
    if (this.foldersAddedTo == null) {
      this.foldersAddedTo = new ArrayList<>();
    }
    this.foldersAddedTo.add(foldersAddedToItem);
    return this;
  }

  /**
   * Gets or sets the folders added to.
   * @return foldersAddedTo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOLDERS_ADDED_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getFoldersAddedTo() {
    return foldersAddedTo;
  }


  @JsonProperty(JSON_PROPERTY_FOLDERS_ADDED_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFoldersAddedTo(@javax.annotation.Nullable List<String> foldersAddedTo) {
    this.foldersAddedTo = foldersAddedTo;
  }


  public LibraryUpdateInfo foldersRemovedFrom(@javax.annotation.Nullable List<String> foldersRemovedFrom) {
    this.foldersRemovedFrom = foldersRemovedFrom;
    return this;
  }

  public LibraryUpdateInfo addFoldersRemovedFromItem(String foldersRemovedFromItem) {
    if (this.foldersRemovedFrom == null) {
      this.foldersRemovedFrom = new ArrayList<>();
    }
    this.foldersRemovedFrom.add(foldersRemovedFromItem);
    return this;
  }

  /**
   * Gets or sets the folders removed from.
   * @return foldersRemovedFrom
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOLDERS_REMOVED_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getFoldersRemovedFrom() {
    return foldersRemovedFrom;
  }


  @JsonProperty(JSON_PROPERTY_FOLDERS_REMOVED_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFoldersRemovedFrom(@javax.annotation.Nullable List<String> foldersRemovedFrom) {
    this.foldersRemovedFrom = foldersRemovedFrom;
  }


  public LibraryUpdateInfo itemsAdded(@javax.annotation.Nullable List<String> itemsAdded) {
    this.itemsAdded = itemsAdded;
    return this;
  }

  public LibraryUpdateInfo addItemsAddedItem(String itemsAddedItem) {
    if (this.itemsAdded == null) {
      this.itemsAdded = new ArrayList<>();
    }
    this.itemsAdded.add(itemsAddedItem);
    return this;
  }

  /**
   * Gets or sets the items added.
   * @return itemsAdded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEMS_ADDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getItemsAdded() {
    return itemsAdded;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS_ADDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemsAdded(@javax.annotation.Nullable List<String> itemsAdded) {
    this.itemsAdded = itemsAdded;
  }


  public LibraryUpdateInfo itemsRemoved(@javax.annotation.Nullable List<String> itemsRemoved) {
    this.itemsRemoved = itemsRemoved;
    return this;
  }

  public LibraryUpdateInfo addItemsRemovedItem(String itemsRemovedItem) {
    if (this.itemsRemoved == null) {
      this.itemsRemoved = new ArrayList<>();
    }
    this.itemsRemoved.add(itemsRemovedItem);
    return this;
  }

  /**
   * Gets or sets the items removed.
   * @return itemsRemoved
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEMS_REMOVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getItemsRemoved() {
    return itemsRemoved;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS_REMOVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemsRemoved(@javax.annotation.Nullable List<String> itemsRemoved) {
    this.itemsRemoved = itemsRemoved;
  }


  public LibraryUpdateInfo itemsUpdated(@javax.annotation.Nullable List<String> itemsUpdated) {
    this.itemsUpdated = itemsUpdated;
    return this;
  }

  public LibraryUpdateInfo addItemsUpdatedItem(String itemsUpdatedItem) {
    if (this.itemsUpdated == null) {
      this.itemsUpdated = new ArrayList<>();
    }
    this.itemsUpdated.add(itemsUpdatedItem);
    return this;
  }

  /**
   * Gets or sets the items updated.
   * @return itemsUpdated
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEMS_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getItemsUpdated() {
    return itemsUpdated;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemsUpdated(@javax.annotation.Nullable List<String> itemsUpdated) {
    this.itemsUpdated = itemsUpdated;
  }


  public LibraryUpdateInfo collectionFolders(@javax.annotation.Nullable List<String> collectionFolders) {
    this.collectionFolders = collectionFolders;
    return this;
  }

  public LibraryUpdateInfo addCollectionFoldersItem(String collectionFoldersItem) {
    if (this.collectionFolders == null) {
      this.collectionFolders = new ArrayList<>();
    }
    this.collectionFolders.add(collectionFoldersItem);
    return this;
  }

  /**
   * Get collectionFolders
   * @return collectionFolders
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLLECTION_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCollectionFolders() {
    return collectionFolders;
  }


  @JsonProperty(JSON_PROPERTY_COLLECTION_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCollectionFolders(@javax.annotation.Nullable List<String> collectionFolders) {
    this.collectionFolders = collectionFolders;
  }


  /**
   * Get isEmpty
   * @return isEmpty
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsEmpty() {
    return isEmpty;
  }




  /**
   * Return true if this LibraryUpdateInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryUpdateInfo libraryUpdateInfo = (LibraryUpdateInfo) o;
    return Objects.equals(this.foldersAddedTo, libraryUpdateInfo.foldersAddedTo) &&
        Objects.equals(this.foldersRemovedFrom, libraryUpdateInfo.foldersRemovedFrom) &&
        Objects.equals(this.itemsAdded, libraryUpdateInfo.itemsAdded) &&
        Objects.equals(this.itemsRemoved, libraryUpdateInfo.itemsRemoved) &&
        Objects.equals(this.itemsUpdated, libraryUpdateInfo.itemsUpdated) &&
        Objects.equals(this.collectionFolders, libraryUpdateInfo.collectionFolders) &&
        Objects.equals(this.isEmpty, libraryUpdateInfo.isEmpty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foldersAddedTo, foldersRemovedFrom, itemsAdded, itemsRemoved, itemsUpdated, collectionFolders, isEmpty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryUpdateInfo {\n");
    sb.append("    foldersAddedTo: ").append(toIndentedString(foldersAddedTo)).append("\n");
    sb.append("    foldersRemovedFrom: ").append(toIndentedString(foldersRemovedFrom)).append("\n");
    sb.append("    itemsAdded: ").append(toIndentedString(itemsAdded)).append("\n");
    sb.append("    itemsRemoved: ").append(toIndentedString(itemsRemoved)).append("\n");
    sb.append("    itemsUpdated: ").append(toIndentedString(itemsUpdated)).append("\n");
    sb.append("    collectionFolders: ").append(toIndentedString(collectionFolders)).append("\n");
    sb.append("    isEmpty: ").append(toIndentedString(isEmpty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `FoldersAddedTo` to the URL query string
    if (getFoldersAddedTo() != null) {
      for (int i = 0; i < getFoldersAddedTo().size(); i++) {
        joiner.add(String.format("%sFoldersAddedTo%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getFoldersAddedTo().get(i)))));
      }
    }

    // add `FoldersRemovedFrom` to the URL query string
    if (getFoldersRemovedFrom() != null) {
      for (int i = 0; i < getFoldersRemovedFrom().size(); i++) {
        joiner.add(String.format("%sFoldersRemovedFrom%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getFoldersRemovedFrom().get(i)))));
      }
    }

    // add `ItemsAdded` to the URL query string
    if (getItemsAdded() != null) {
      for (int i = 0; i < getItemsAdded().size(); i++) {
        joiner.add(String.format("%sItemsAdded%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getItemsAdded().get(i)))));
      }
    }

    // add `ItemsRemoved` to the URL query string
    if (getItemsRemoved() != null) {
      for (int i = 0; i < getItemsRemoved().size(); i++) {
        joiner.add(String.format("%sItemsRemoved%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getItemsRemoved().get(i)))));
      }
    }

    // add `ItemsUpdated` to the URL query string
    if (getItemsUpdated() != null) {
      for (int i = 0; i < getItemsUpdated().size(); i++) {
        joiner.add(String.format("%sItemsUpdated%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getItemsUpdated().get(i)))));
      }
    }

    // add `CollectionFolders` to the URL query string
    if (getCollectionFolders() != null) {
      for (int i = 0; i < getCollectionFolders().size(); i++) {
        joiner.add(String.format("%sCollectionFolders%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getCollectionFolders().get(i)))));
      }
    }

    // add `IsEmpty` to the URL query string
    if (getIsEmpty() != null) {
      joiner.add(String.format("%sIsEmpty%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsEmpty()))));
    }

    return joiner.toString();
  }
}

