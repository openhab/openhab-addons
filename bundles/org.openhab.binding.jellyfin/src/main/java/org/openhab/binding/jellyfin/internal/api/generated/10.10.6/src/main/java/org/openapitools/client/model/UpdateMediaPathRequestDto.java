/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.MediaPathInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Update library options dto.
 */
@JsonPropertyOrder({
  UpdateMediaPathRequestDto.JSON_PROPERTY_NAME,
  UpdateMediaPathRequestDto.JSON_PROPERTY_PATH_INFO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:58.939457991Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class UpdateMediaPathRequestDto {
  public static final String JSON_PROPERTY_NAME = "Name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_PATH_INFO = "PathInfo";
  @javax.annotation.Nonnull
  private MediaPathInfo pathInfo;

  public UpdateMediaPathRequestDto() { 
  }

  public UpdateMediaPathRequestDto name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the library name.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateMediaPathRequestDto pathInfo(@javax.annotation.Nonnull MediaPathInfo pathInfo) {
    this.pathInfo = pathInfo;
    return this;
  }

  /**
   * Gets or sets library folder path information.
   * @return pathInfo
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PATH_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public MediaPathInfo getPathInfo() {
    return pathInfo;
  }


  @JsonProperty(JSON_PROPERTY_PATH_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPathInfo(@javax.annotation.Nonnull MediaPathInfo pathInfo) {
    this.pathInfo = pathInfo;
  }


  /**
   * Return true if this UpdateMediaPathRequestDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMediaPathRequestDto updateMediaPathRequestDto = (UpdateMediaPathRequestDto) o;
    return Objects.equals(this.name, updateMediaPathRequestDto.name) &&
        Objects.equals(this.pathInfo, updateMediaPathRequestDto.pathInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, pathInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMediaPathRequestDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pathInfo: ").append(toIndentedString(pathInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `PathInfo` to the URL query string
    if (getPathInfo() != null) {
      joiner.add(getPathInfo().toUrlQueryString(prefix + "PathInfo" + suffix));
    }

    return joiner.toString();
  }
}

