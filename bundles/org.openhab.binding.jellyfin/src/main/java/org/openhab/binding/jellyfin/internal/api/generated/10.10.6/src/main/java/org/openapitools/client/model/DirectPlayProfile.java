/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.DlnaProfileType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Defines the MediaBrowser.Model.Dlna.DirectPlayProfile.
 */
@JsonPropertyOrder({
  DirectPlayProfile.JSON_PROPERTY_CONTAINER,
  DirectPlayProfile.JSON_PROPERTY_AUDIO_CODEC,
  DirectPlayProfile.JSON_PROPERTY_VIDEO_CODEC,
  DirectPlayProfile.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class DirectPlayProfile {
  public static final String JSON_PROPERTY_CONTAINER = "Container";
  @javax.annotation.Nullable
  private String container;

  public static final String JSON_PROPERTY_AUDIO_CODEC = "AudioCodec";
  private JsonNullable<String> audioCodec = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VIDEO_CODEC = "VideoCodec";
  private JsonNullable<String> videoCodec = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TYPE = "Type";
  @javax.annotation.Nullable
  private DlnaProfileType type;

  public DirectPlayProfile() { 
  }

  public DirectPlayProfile container(@javax.annotation.Nullable String container) {
    this.container = container;
    return this;
  }

  /**
   * Gets or sets the container.
   * @return container
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContainer() {
    return container;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainer(@javax.annotation.Nullable String container) {
    this.container = container;
  }


  public DirectPlayProfile audioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = JsonNullable.<String>of(audioCodec);
    return this;
  }

  /**
   * Gets or sets the audio codec.
   * @return audioCodec
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getAudioCodec() {
        return audioCodec.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAudioCodec_JsonNullable() {
    return audioCodec;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  public void setAudioCodec_JsonNullable(JsonNullable<String> audioCodec) {
    this.audioCodec = audioCodec;
  }

  public void setAudioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = JsonNullable.<String>of(audioCodec);
  }


  public DirectPlayProfile videoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = JsonNullable.<String>of(videoCodec);
    return this;
  }

  /**
   * Gets or sets the video codec.
   * @return videoCodec
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getVideoCodec() {
        return videoCodec.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VIDEO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getVideoCodec_JsonNullable() {
    return videoCodec;
  }
  
  @JsonProperty(JSON_PROPERTY_VIDEO_CODEC)
  public void setVideoCodec_JsonNullable(JsonNullable<String> videoCodec) {
    this.videoCodec = videoCodec;
  }

  public void setVideoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = JsonNullable.<String>of(videoCodec);
  }


  public DirectPlayProfile type(@javax.annotation.Nullable DlnaProfileType type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the Dlna profile type.
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DlnaProfileType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable DlnaProfileType type) {
    this.type = type;
  }


  /**
   * Return true if this DirectPlayProfile object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectPlayProfile directPlayProfile = (DirectPlayProfile) o;
    return Objects.equals(this.container, directPlayProfile.container) &&
        equalsNullable(this.audioCodec, directPlayProfile.audioCodec) &&
        equalsNullable(this.videoCodec, directPlayProfile.videoCodec) &&
        Objects.equals(this.type, directPlayProfile.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, hashCodeNullable(audioCodec), hashCodeNullable(videoCodec), type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectPlayProfile {\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Container` to the URL query string
    if (getContainer() != null) {
      joiner.add(String.format("%sContainer%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContainer()))));
    }

    // add `AudioCodec` to the URL query string
    if (getAudioCodec() != null) {
      joiner.add(String.format("%sAudioCodec%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAudioCodec()))));
    }

    // add `VideoCodec` to the URL query string
    if (getVideoCodec() != null) {
      joiner.add(String.format("%sVideoCodec%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVideoCodec()))));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    return joiner.toString();
  }
}

