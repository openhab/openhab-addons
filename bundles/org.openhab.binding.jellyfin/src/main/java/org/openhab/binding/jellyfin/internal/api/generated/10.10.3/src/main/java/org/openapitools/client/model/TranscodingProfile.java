/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DlnaProfileType;
import org.openapitools.client.model.EncodingContext;
import org.openapitools.client.model.MediaStreamProtocol;
import org.openapitools.client.model.ProfileCondition;
import org.openapitools.client.model.TranscodeSeekInfo;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * A class for transcoding profile information.
 */
@JsonPropertyOrder({
  TranscodingProfile.JSON_PROPERTY_CONTAINER,
  TranscodingProfile.JSON_PROPERTY_TYPE,
  TranscodingProfile.JSON_PROPERTY_VIDEO_CODEC,
  TranscodingProfile.JSON_PROPERTY_AUDIO_CODEC,
  TranscodingProfile.JSON_PROPERTY_PROTOCOL,
  TranscodingProfile.JSON_PROPERTY_ESTIMATE_CONTENT_LENGTH,
  TranscodingProfile.JSON_PROPERTY_ENABLE_MPEGTS_M2_TS_MODE,
  TranscodingProfile.JSON_PROPERTY_TRANSCODE_SEEK_INFO,
  TranscodingProfile.JSON_PROPERTY_COPY_TIMESTAMPS,
  TranscodingProfile.JSON_PROPERTY_CONTEXT,
  TranscodingProfile.JSON_PROPERTY_ENABLE_SUBTITLES_IN_MANIFEST,
  TranscodingProfile.JSON_PROPERTY_MAX_AUDIO_CHANNELS,
  TranscodingProfile.JSON_PROPERTY_MIN_SEGMENTS,
  TranscodingProfile.JSON_PROPERTY_SEGMENT_LENGTH,
  TranscodingProfile.JSON_PROPERTY_BREAK_ON_NON_KEY_FRAMES,
  TranscodingProfile.JSON_PROPERTY_CONDITIONS,
  TranscodingProfile.JSON_PROPERTY_ENABLE_AUDIO_VBR_ENCODING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:50.987643556Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class TranscodingProfile {
  public static final String JSON_PROPERTY_CONTAINER = "Container";
  @javax.annotation.Nullable
  private String container;

  public static final String JSON_PROPERTY_TYPE = "Type";
  @javax.annotation.Nullable
  private DlnaProfileType type;

  public static final String JSON_PROPERTY_VIDEO_CODEC = "VideoCodec";
  @javax.annotation.Nullable
  private String videoCodec;

  public static final String JSON_PROPERTY_AUDIO_CODEC = "AudioCodec";
  @javax.annotation.Nullable
  private String audioCodec;

  public static final String JSON_PROPERTY_PROTOCOL = "Protocol";
  @javax.annotation.Nullable
  private MediaStreamProtocol protocol;

  public static final String JSON_PROPERTY_ESTIMATE_CONTENT_LENGTH = "EstimateContentLength";
  @javax.annotation.Nullable
  private Boolean estimateContentLength = false;

  public static final String JSON_PROPERTY_ENABLE_MPEGTS_M2_TS_MODE = "EnableMpegtsM2TsMode";
  @javax.annotation.Nullable
  private Boolean enableMpegtsM2TsMode = false;

  public static final String JSON_PROPERTY_TRANSCODE_SEEK_INFO = "TranscodeSeekInfo";
  @javax.annotation.Nullable
  private TranscodeSeekInfo transcodeSeekInfo = TranscodeSeekInfo.AUTO;

  public static final String JSON_PROPERTY_COPY_TIMESTAMPS = "CopyTimestamps";
  @javax.annotation.Nullable
  private Boolean copyTimestamps = false;

  public static final String JSON_PROPERTY_CONTEXT = "Context";
  @javax.annotation.Nullable
  private EncodingContext context = EncodingContext.STREAMING;

  public static final String JSON_PROPERTY_ENABLE_SUBTITLES_IN_MANIFEST = "EnableSubtitlesInManifest";
  @javax.annotation.Nullable
  private Boolean enableSubtitlesInManifest = false;

  public static final String JSON_PROPERTY_MAX_AUDIO_CHANNELS = "MaxAudioChannels";
  private JsonNullable<String> maxAudioChannels = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MIN_SEGMENTS = "MinSegments";
  @javax.annotation.Nullable
  private Integer minSegments = 0;

  public static final String JSON_PROPERTY_SEGMENT_LENGTH = "SegmentLength";
  @javax.annotation.Nullable
  private Integer segmentLength = 0;

  public static final String JSON_PROPERTY_BREAK_ON_NON_KEY_FRAMES = "BreakOnNonKeyFrames";
  @javax.annotation.Nullable
  private Boolean breakOnNonKeyFrames = false;

  public static final String JSON_PROPERTY_CONDITIONS = "Conditions";
  @javax.annotation.Nullable
  private List<ProfileCondition> conditions = new ArrayList<>();

  public static final String JSON_PROPERTY_ENABLE_AUDIO_VBR_ENCODING = "EnableAudioVbrEncoding";
  @javax.annotation.Nullable
  private Boolean enableAudioVbrEncoding = true;

  public TranscodingProfile() { 
  }

  public TranscodingProfile container(@javax.annotation.Nullable String container) {
    this.container = container;
    return this;
  }

  /**
   * Gets or sets the container.
   * @return container
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContainer() {
    return container;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainer(@javax.annotation.Nullable String container) {
    this.container = container;
  }


  public TranscodingProfile type(@javax.annotation.Nullable DlnaProfileType type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the DLNA profile type.
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DlnaProfileType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable DlnaProfileType type) {
    this.type = type;
  }


  public TranscodingProfile videoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = videoCodec;
    return this;
  }

  /**
   * Gets or sets the video codec.
   * @return videoCodec
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIDEO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVideoCodec() {
    return videoCodec;
  }


  @JsonProperty(JSON_PROPERTY_VIDEO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVideoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = videoCodec;
  }


  public TranscodingProfile audioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

  /**
   * Gets or sets the audio codec.
   * @return audioCodec
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAudioCodec() {
    return audioCodec;
  }


  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAudioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = audioCodec;
  }


  public TranscodingProfile protocol(@javax.annotation.Nullable MediaStreamProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Media streaming protocol.  Lowercase for backwards compatibility.
   * @return protocol
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public MediaStreamProtocol getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(@javax.annotation.Nullable MediaStreamProtocol protocol) {
    this.protocol = protocol;
  }


  public TranscodingProfile estimateContentLength(@javax.annotation.Nullable Boolean estimateContentLength) {
    this.estimateContentLength = estimateContentLength;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the content length should be estimated.
   * @return estimateContentLength
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ESTIMATE_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEstimateContentLength() {
    return estimateContentLength;
  }


  @JsonProperty(JSON_PROPERTY_ESTIMATE_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEstimateContentLength(@javax.annotation.Nullable Boolean estimateContentLength) {
    this.estimateContentLength = estimateContentLength;
  }


  public TranscodingProfile enableMpegtsM2TsMode(@javax.annotation.Nullable Boolean enableMpegtsM2TsMode) {
    this.enableMpegtsM2TsMode = enableMpegtsM2TsMode;
    return this;
  }

  /**
   * Gets or sets a value indicating whether M2TS mode is enabled.
   * @return enableMpegtsM2TsMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_MPEGTS_M2_TS_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableMpegtsM2TsMode() {
    return enableMpegtsM2TsMode;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_MPEGTS_M2_TS_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableMpegtsM2TsMode(@javax.annotation.Nullable Boolean enableMpegtsM2TsMode) {
    this.enableMpegtsM2TsMode = enableMpegtsM2TsMode;
  }


  public TranscodingProfile transcodeSeekInfo(@javax.annotation.Nullable TranscodeSeekInfo transcodeSeekInfo) {
    this.transcodeSeekInfo = transcodeSeekInfo;
    return this;
  }

  /**
   * Gets or sets the transcoding seek info mode.
   * @return transcodeSeekInfo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSCODE_SEEK_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TranscodeSeekInfo getTranscodeSeekInfo() {
    return transcodeSeekInfo;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCODE_SEEK_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscodeSeekInfo(@javax.annotation.Nullable TranscodeSeekInfo transcodeSeekInfo) {
    this.transcodeSeekInfo = transcodeSeekInfo;
  }


  public TranscodingProfile copyTimestamps(@javax.annotation.Nullable Boolean copyTimestamps) {
    this.copyTimestamps = copyTimestamps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether timestamps should be copied.
   * @return copyTimestamps
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COPY_TIMESTAMPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCopyTimestamps() {
    return copyTimestamps;
  }


  @JsonProperty(JSON_PROPERTY_COPY_TIMESTAMPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCopyTimestamps(@javax.annotation.Nullable Boolean copyTimestamps) {
    this.copyTimestamps = copyTimestamps;
  }


  public TranscodingProfile context(@javax.annotation.Nullable EncodingContext context) {
    this.context = context;
    return this;
  }

  /**
   * Gets or sets the encoding context.
   * @return context
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public EncodingContext getContext() {
    return context;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContext(@javax.annotation.Nullable EncodingContext context) {
    this.context = context;
  }


  public TranscodingProfile enableSubtitlesInManifest(@javax.annotation.Nullable Boolean enableSubtitlesInManifest) {
    this.enableSubtitlesInManifest = enableSubtitlesInManifest;
    return this;
  }

  /**
   * Gets or sets a value indicating whether subtitles are allowed in the manifest.
   * @return enableSubtitlesInManifest
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SUBTITLES_IN_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableSubtitlesInManifest() {
    return enableSubtitlesInManifest;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SUBTITLES_IN_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSubtitlesInManifest(@javax.annotation.Nullable Boolean enableSubtitlesInManifest) {
    this.enableSubtitlesInManifest = enableSubtitlesInManifest;
  }


  public TranscodingProfile maxAudioChannels(@javax.annotation.Nullable String maxAudioChannels) {
    this.maxAudioChannels = JsonNullable.<String>of(maxAudioChannels);
    return this;
  }

  /**
   * Gets or sets the maximum audio channels.
   * @return maxAudioChannels
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getMaxAudioChannels() {
        return maxAudioChannels.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_AUDIO_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMaxAudioChannels_JsonNullable() {
    return maxAudioChannels;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_AUDIO_CHANNELS)
  public void setMaxAudioChannels_JsonNullable(JsonNullable<String> maxAudioChannels) {
    this.maxAudioChannels = maxAudioChannels;
  }

  public void setMaxAudioChannels(@javax.annotation.Nullable String maxAudioChannels) {
    this.maxAudioChannels = JsonNullable.<String>of(maxAudioChannels);
  }


  public TranscodingProfile minSegments(@javax.annotation.Nullable Integer minSegments) {
    this.minSegments = minSegments;
    return this;
  }

  /**
   * Gets or sets the minimum amount of segments.
   * @return minSegments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_SEGMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMinSegments() {
    return minSegments;
  }


  @JsonProperty(JSON_PROPERTY_MIN_SEGMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinSegments(@javax.annotation.Nullable Integer minSegments) {
    this.minSegments = minSegments;
  }


  public TranscodingProfile segmentLength(@javax.annotation.Nullable Integer segmentLength) {
    this.segmentLength = segmentLength;
    return this;
  }

  /**
   * Gets or sets the segment length.
   * @return segmentLength
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEGMENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getSegmentLength() {
    return segmentLength;
  }


  @JsonProperty(JSON_PROPERTY_SEGMENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSegmentLength(@javax.annotation.Nullable Integer segmentLength) {
    this.segmentLength = segmentLength;
  }


  public TranscodingProfile breakOnNonKeyFrames(@javax.annotation.Nullable Boolean breakOnNonKeyFrames) {
    this.breakOnNonKeyFrames = breakOnNonKeyFrames;
    return this;
  }

  /**
   * Gets or sets a value indicating whether breaking the video stream on non-keyframes is supported.
   * @return breakOnNonKeyFrames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BREAK_ON_NON_KEY_FRAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getBreakOnNonKeyFrames() {
    return breakOnNonKeyFrames;
  }


  @JsonProperty(JSON_PROPERTY_BREAK_ON_NON_KEY_FRAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBreakOnNonKeyFrames(@javax.annotation.Nullable Boolean breakOnNonKeyFrames) {
    this.breakOnNonKeyFrames = breakOnNonKeyFrames;
  }


  public TranscodingProfile conditions(@javax.annotation.Nullable List<ProfileCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public TranscodingProfile addConditionsItem(ProfileCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Gets or sets the profile conditions.
   * @return conditions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ProfileCondition> getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditions(@javax.annotation.Nullable List<ProfileCondition> conditions) {
    this.conditions = conditions;
  }


  public TranscodingProfile enableAudioVbrEncoding(@javax.annotation.Nullable Boolean enableAudioVbrEncoding) {
    this.enableAudioVbrEncoding = enableAudioVbrEncoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether variable bitrate encoding is supported.
   * @return enableAudioVbrEncoding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_AUDIO_VBR_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableAudioVbrEncoding() {
    return enableAudioVbrEncoding;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_AUDIO_VBR_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableAudioVbrEncoding(@javax.annotation.Nullable Boolean enableAudioVbrEncoding) {
    this.enableAudioVbrEncoding = enableAudioVbrEncoding;
  }


  /**
   * Return true if this TranscodingProfile object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscodingProfile transcodingProfile = (TranscodingProfile) o;
    return Objects.equals(this.container, transcodingProfile.container) &&
        Objects.equals(this.type, transcodingProfile.type) &&
        Objects.equals(this.videoCodec, transcodingProfile.videoCodec) &&
        Objects.equals(this.audioCodec, transcodingProfile.audioCodec) &&
        Objects.equals(this.protocol, transcodingProfile.protocol) &&
        Objects.equals(this.estimateContentLength, transcodingProfile.estimateContentLength) &&
        Objects.equals(this.enableMpegtsM2TsMode, transcodingProfile.enableMpegtsM2TsMode) &&
        Objects.equals(this.transcodeSeekInfo, transcodingProfile.transcodeSeekInfo) &&
        Objects.equals(this.copyTimestamps, transcodingProfile.copyTimestamps) &&
        Objects.equals(this.context, transcodingProfile.context) &&
        Objects.equals(this.enableSubtitlesInManifest, transcodingProfile.enableSubtitlesInManifest) &&
        equalsNullable(this.maxAudioChannels, transcodingProfile.maxAudioChannels) &&
        Objects.equals(this.minSegments, transcodingProfile.minSegments) &&
        Objects.equals(this.segmentLength, transcodingProfile.segmentLength) &&
        Objects.equals(this.breakOnNonKeyFrames, transcodingProfile.breakOnNonKeyFrames) &&
        Objects.equals(this.conditions, transcodingProfile.conditions) &&
        Objects.equals(this.enableAudioVbrEncoding, transcodingProfile.enableAudioVbrEncoding);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, type, videoCodec, audioCodec, protocol, estimateContentLength, enableMpegtsM2TsMode, transcodeSeekInfo, copyTimestamps, context, enableSubtitlesInManifest, hashCodeNullable(maxAudioChannels), minSegments, segmentLength, breakOnNonKeyFrames, conditions, enableAudioVbrEncoding);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscodingProfile {\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    estimateContentLength: ").append(toIndentedString(estimateContentLength)).append("\n");
    sb.append("    enableMpegtsM2TsMode: ").append(toIndentedString(enableMpegtsM2TsMode)).append("\n");
    sb.append("    transcodeSeekInfo: ").append(toIndentedString(transcodeSeekInfo)).append("\n");
    sb.append("    copyTimestamps: ").append(toIndentedString(copyTimestamps)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    enableSubtitlesInManifest: ").append(toIndentedString(enableSubtitlesInManifest)).append("\n");
    sb.append("    maxAudioChannels: ").append(toIndentedString(maxAudioChannels)).append("\n");
    sb.append("    minSegments: ").append(toIndentedString(minSegments)).append("\n");
    sb.append("    segmentLength: ").append(toIndentedString(segmentLength)).append("\n");
    sb.append("    breakOnNonKeyFrames: ").append(toIndentedString(breakOnNonKeyFrames)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    enableAudioVbrEncoding: ").append(toIndentedString(enableAudioVbrEncoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Container` to the URL query string
    if (getContainer() != null) {
      joiner.add(String.format("%sContainer%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContainer()))));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `VideoCodec` to the URL query string
    if (getVideoCodec() != null) {
      joiner.add(String.format("%sVideoCodec%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVideoCodec()))));
    }

    // add `AudioCodec` to the URL query string
    if (getAudioCodec() != null) {
      joiner.add(String.format("%sAudioCodec%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAudioCodec()))));
    }

    // add `Protocol` to the URL query string
    if (getProtocol() != null) {
      joiner.add(String.format("%sProtocol%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getProtocol()))));
    }

    // add `EstimateContentLength` to the URL query string
    if (getEstimateContentLength() != null) {
      joiner.add(String.format("%sEstimateContentLength%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEstimateContentLength()))));
    }

    // add `EnableMpegtsM2TsMode` to the URL query string
    if (getEnableMpegtsM2TsMode() != null) {
      joiner.add(String.format("%sEnableMpegtsM2TsMode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableMpegtsM2TsMode()))));
    }

    // add `TranscodeSeekInfo` to the URL query string
    if (getTranscodeSeekInfo() != null) {
      joiner.add(String.format("%sTranscodeSeekInfo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTranscodeSeekInfo()))));
    }

    // add `CopyTimestamps` to the URL query string
    if (getCopyTimestamps() != null) {
      joiner.add(String.format("%sCopyTimestamps%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCopyTimestamps()))));
    }

    // add `Context` to the URL query string
    if (getContext() != null) {
      joiner.add(String.format("%sContext%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContext()))));
    }

    // add `EnableSubtitlesInManifest` to the URL query string
    if (getEnableSubtitlesInManifest() != null) {
      joiner.add(String.format("%sEnableSubtitlesInManifest%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableSubtitlesInManifest()))));
    }

    // add `MaxAudioChannels` to the URL query string
    if (getMaxAudioChannels() != null) {
      joiner.add(String.format("%sMaxAudioChannels%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxAudioChannels()))));
    }

    // add `MinSegments` to the URL query string
    if (getMinSegments() != null) {
      joiner.add(String.format("%sMinSegments%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMinSegments()))));
    }

    // add `SegmentLength` to the URL query string
    if (getSegmentLength() != null) {
      joiner.add(String.format("%sSegmentLength%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSegmentLength()))));
    }

    // add `BreakOnNonKeyFrames` to the URL query string
    if (getBreakOnNonKeyFrames() != null) {
      joiner.add(String.format("%sBreakOnNonKeyFrames%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBreakOnNonKeyFrames()))));
    }

    // add `Conditions` to the URL query string
    if (getConditions() != null) {
      for (int i = 0; i < getConditions().size(); i++) {
        if (getConditions().get(i) != null) {
          joiner.add(getConditions().get(i).toUrlQueryString(String.format("%sConditions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `EnableAudioVbrEncoding` to the URL query string
    if (getEnableAudioVbrEncoding() != null) {
      joiner.add(String.format("%sEnableAudioVbrEncoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableAudioVbrEncoding()))));
    }

    return joiner.toString();
  }
}

