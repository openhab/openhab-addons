/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DlnaProfileType;
import org.openapitools.client.model.EncodingContext;
import org.openapitools.client.model.MediaStreamProtocol;
import org.openapitools.client.model.ProfileCondition;
import org.openapitools.client.model.TranscodeSeekInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A class for transcoding profile information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class TranscodingProfile {
  public static final String SERIALIZED_NAME_CONTAINER = "Container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  @javax.annotation.Nullable
  private String container;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private DlnaProfileType type;

  public static final String SERIALIZED_NAME_VIDEO_CODEC = "VideoCodec";
  @SerializedName(SERIALIZED_NAME_VIDEO_CODEC)
  @javax.annotation.Nullable
  private String videoCodec;

  public static final String SERIALIZED_NAME_AUDIO_CODEC = "AudioCodec";
  @SerializedName(SERIALIZED_NAME_AUDIO_CODEC)
  @javax.annotation.Nullable
  private String audioCodec;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  @javax.annotation.Nullable
  private MediaStreamProtocol protocol;

  public static final String SERIALIZED_NAME_ESTIMATE_CONTENT_LENGTH = "EstimateContentLength";
  @SerializedName(SERIALIZED_NAME_ESTIMATE_CONTENT_LENGTH)
  @javax.annotation.Nullable
  private Boolean estimateContentLength = false;

  public static final String SERIALIZED_NAME_ENABLE_MPEGTS_M2_TS_MODE = "EnableMpegtsM2TsMode";
  @SerializedName(SERIALIZED_NAME_ENABLE_MPEGTS_M2_TS_MODE)
  @javax.annotation.Nullable
  private Boolean enableMpegtsM2TsMode = false;

  public static final String SERIALIZED_NAME_TRANSCODE_SEEK_INFO = "TranscodeSeekInfo";
  @SerializedName(SERIALIZED_NAME_TRANSCODE_SEEK_INFO)
  @javax.annotation.Nullable
  private TranscodeSeekInfo transcodeSeekInfo = TranscodeSeekInfo.AUTO;

  public static final String SERIALIZED_NAME_COPY_TIMESTAMPS = "CopyTimestamps";
  @SerializedName(SERIALIZED_NAME_COPY_TIMESTAMPS)
  @javax.annotation.Nullable
  private Boolean copyTimestamps = false;

  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @javax.annotation.Nullable
  private EncodingContext context = EncodingContext.STREAMING;

  public static final String SERIALIZED_NAME_ENABLE_SUBTITLES_IN_MANIFEST = "EnableSubtitlesInManifest";
  @SerializedName(SERIALIZED_NAME_ENABLE_SUBTITLES_IN_MANIFEST)
  @javax.annotation.Nullable
  private Boolean enableSubtitlesInManifest = false;

  public static final String SERIALIZED_NAME_MAX_AUDIO_CHANNELS = "MaxAudioChannels";
  @SerializedName(SERIALIZED_NAME_MAX_AUDIO_CHANNELS)
  @javax.annotation.Nullable
  private String maxAudioChannels;

  public static final String SERIALIZED_NAME_MIN_SEGMENTS = "MinSegments";
  @SerializedName(SERIALIZED_NAME_MIN_SEGMENTS)
  @javax.annotation.Nullable
  private Integer minSegments = 0;

  public static final String SERIALIZED_NAME_SEGMENT_LENGTH = "SegmentLength";
  @SerializedName(SERIALIZED_NAME_SEGMENT_LENGTH)
  @javax.annotation.Nullable
  private Integer segmentLength = 0;

  public static final String SERIALIZED_NAME_BREAK_ON_NON_KEY_FRAMES = "BreakOnNonKeyFrames";
  @SerializedName(SERIALIZED_NAME_BREAK_ON_NON_KEY_FRAMES)
  @javax.annotation.Nullable
  private Boolean breakOnNonKeyFrames = false;

  public static final String SERIALIZED_NAME_CONDITIONS = "Conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  @javax.annotation.Nullable
  private List<ProfileCondition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_AUDIO_VBR_ENCODING = "EnableAudioVbrEncoding";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUDIO_VBR_ENCODING)
  @javax.annotation.Nullable
  private Boolean enableAudioVbrEncoding = true;

  public TranscodingProfile() {
  }

  public TranscodingProfile container(@javax.annotation.Nullable String container) {
    this.container = container;
    return this;
  }

  /**
   * Gets or sets the container.
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(@javax.annotation.Nullable String container) {
    this.container = container;
  }


  public TranscodingProfile type(@javax.annotation.Nullable DlnaProfileType type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the DLNA profile type.
   * @return type
   */
  @javax.annotation.Nullable
  public DlnaProfileType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable DlnaProfileType type) {
    this.type = type;
  }


  public TranscodingProfile videoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = videoCodec;
    return this;
  }

  /**
   * Gets or sets the video codec.
   * @return videoCodec
   */
  @javax.annotation.Nullable
  public String getVideoCodec() {
    return videoCodec;
  }

  public void setVideoCodec(@javax.annotation.Nullable String videoCodec) {
    this.videoCodec = videoCodec;
  }


  public TranscodingProfile audioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

  /**
   * Gets or sets the audio codec.
   * @return audioCodec
   */
  @javax.annotation.Nullable
  public String getAudioCodec() {
    return audioCodec;
  }

  public void setAudioCodec(@javax.annotation.Nullable String audioCodec) {
    this.audioCodec = audioCodec;
  }


  public TranscodingProfile protocol(@javax.annotation.Nullable MediaStreamProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Media streaming protocol.  Lowercase for backwards compatibility.
   * @return protocol
   */
  @javax.annotation.Nullable
  public MediaStreamProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(@javax.annotation.Nullable MediaStreamProtocol protocol) {
    this.protocol = protocol;
  }


  public TranscodingProfile estimateContentLength(@javax.annotation.Nullable Boolean estimateContentLength) {
    this.estimateContentLength = estimateContentLength;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the content length should be estimated.
   * @return estimateContentLength
   */
  @javax.annotation.Nullable
  public Boolean getEstimateContentLength() {
    return estimateContentLength;
  }

  public void setEstimateContentLength(@javax.annotation.Nullable Boolean estimateContentLength) {
    this.estimateContentLength = estimateContentLength;
  }


  public TranscodingProfile enableMpegtsM2TsMode(@javax.annotation.Nullable Boolean enableMpegtsM2TsMode) {
    this.enableMpegtsM2TsMode = enableMpegtsM2TsMode;
    return this;
  }

  /**
   * Gets or sets a value indicating whether M2TS mode is enabled.
   * @return enableMpegtsM2TsMode
   */
  @javax.annotation.Nullable
  public Boolean getEnableMpegtsM2TsMode() {
    return enableMpegtsM2TsMode;
  }

  public void setEnableMpegtsM2TsMode(@javax.annotation.Nullable Boolean enableMpegtsM2TsMode) {
    this.enableMpegtsM2TsMode = enableMpegtsM2TsMode;
  }


  public TranscodingProfile transcodeSeekInfo(@javax.annotation.Nullable TranscodeSeekInfo transcodeSeekInfo) {
    this.transcodeSeekInfo = transcodeSeekInfo;
    return this;
  }

  /**
   * Gets or sets the transcoding seek info mode.
   * @return transcodeSeekInfo
   */
  @javax.annotation.Nullable
  public TranscodeSeekInfo getTranscodeSeekInfo() {
    return transcodeSeekInfo;
  }

  public void setTranscodeSeekInfo(@javax.annotation.Nullable TranscodeSeekInfo transcodeSeekInfo) {
    this.transcodeSeekInfo = transcodeSeekInfo;
  }


  public TranscodingProfile copyTimestamps(@javax.annotation.Nullable Boolean copyTimestamps) {
    this.copyTimestamps = copyTimestamps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether timestamps should be copied.
   * @return copyTimestamps
   */
  @javax.annotation.Nullable
  public Boolean getCopyTimestamps() {
    return copyTimestamps;
  }

  public void setCopyTimestamps(@javax.annotation.Nullable Boolean copyTimestamps) {
    this.copyTimestamps = copyTimestamps;
  }


  public TranscodingProfile context(@javax.annotation.Nullable EncodingContext context) {
    this.context = context;
    return this;
  }

  /**
   * Gets or sets the encoding context.
   * @return context
   */
  @javax.annotation.Nullable
  public EncodingContext getContext() {
    return context;
  }

  public void setContext(@javax.annotation.Nullable EncodingContext context) {
    this.context = context;
  }


  public TranscodingProfile enableSubtitlesInManifest(@javax.annotation.Nullable Boolean enableSubtitlesInManifest) {
    this.enableSubtitlesInManifest = enableSubtitlesInManifest;
    return this;
  }

  /**
   * Gets or sets a value indicating whether subtitles are allowed in the manifest.
   * @return enableSubtitlesInManifest
   */
  @javax.annotation.Nullable
  public Boolean getEnableSubtitlesInManifest() {
    return enableSubtitlesInManifest;
  }

  public void setEnableSubtitlesInManifest(@javax.annotation.Nullable Boolean enableSubtitlesInManifest) {
    this.enableSubtitlesInManifest = enableSubtitlesInManifest;
  }


  public TranscodingProfile maxAudioChannels(@javax.annotation.Nullable String maxAudioChannels) {
    this.maxAudioChannels = maxAudioChannels;
    return this;
  }

  /**
   * Gets or sets the maximum audio channels.
   * @return maxAudioChannels
   */
  @javax.annotation.Nullable
  public String getMaxAudioChannels() {
    return maxAudioChannels;
  }

  public void setMaxAudioChannels(@javax.annotation.Nullable String maxAudioChannels) {
    this.maxAudioChannels = maxAudioChannels;
  }


  public TranscodingProfile minSegments(@javax.annotation.Nullable Integer minSegments) {
    this.minSegments = minSegments;
    return this;
  }

  /**
   * Gets or sets the minimum amount of segments.
   * @return minSegments
   */
  @javax.annotation.Nullable
  public Integer getMinSegments() {
    return minSegments;
  }

  public void setMinSegments(@javax.annotation.Nullable Integer minSegments) {
    this.minSegments = minSegments;
  }


  public TranscodingProfile segmentLength(@javax.annotation.Nullable Integer segmentLength) {
    this.segmentLength = segmentLength;
    return this;
  }

  /**
   * Gets or sets the segment length.
   * @return segmentLength
   */
  @javax.annotation.Nullable
  public Integer getSegmentLength() {
    return segmentLength;
  }

  public void setSegmentLength(@javax.annotation.Nullable Integer segmentLength) {
    this.segmentLength = segmentLength;
  }


  public TranscodingProfile breakOnNonKeyFrames(@javax.annotation.Nullable Boolean breakOnNonKeyFrames) {
    this.breakOnNonKeyFrames = breakOnNonKeyFrames;
    return this;
  }

  /**
   * Gets or sets a value indicating whether breaking the video stream on non-keyframes is supported.
   * @return breakOnNonKeyFrames
   */
  @javax.annotation.Nullable
  public Boolean getBreakOnNonKeyFrames() {
    return breakOnNonKeyFrames;
  }

  public void setBreakOnNonKeyFrames(@javax.annotation.Nullable Boolean breakOnNonKeyFrames) {
    this.breakOnNonKeyFrames = breakOnNonKeyFrames;
  }


  public TranscodingProfile conditions(@javax.annotation.Nullable List<ProfileCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public TranscodingProfile addConditionsItem(ProfileCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Gets or sets the profile conditions.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<ProfileCondition> getConditions() {
    return conditions;
  }

  public void setConditions(@javax.annotation.Nullable List<ProfileCondition> conditions) {
    this.conditions = conditions;
  }


  public TranscodingProfile enableAudioVbrEncoding(@javax.annotation.Nullable Boolean enableAudioVbrEncoding) {
    this.enableAudioVbrEncoding = enableAudioVbrEncoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether variable bitrate encoding is supported.
   * @return enableAudioVbrEncoding
   */
  @javax.annotation.Nullable
  public Boolean getEnableAudioVbrEncoding() {
    return enableAudioVbrEncoding;
  }

  public void setEnableAudioVbrEncoding(@javax.annotation.Nullable Boolean enableAudioVbrEncoding) {
    this.enableAudioVbrEncoding = enableAudioVbrEncoding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscodingProfile transcodingProfile = (TranscodingProfile) o;
    return Objects.equals(this.container, transcodingProfile.container) &&
        Objects.equals(this.type, transcodingProfile.type) &&
        Objects.equals(this.videoCodec, transcodingProfile.videoCodec) &&
        Objects.equals(this.audioCodec, transcodingProfile.audioCodec) &&
        Objects.equals(this.protocol, transcodingProfile.protocol) &&
        Objects.equals(this.estimateContentLength, transcodingProfile.estimateContentLength) &&
        Objects.equals(this.enableMpegtsM2TsMode, transcodingProfile.enableMpegtsM2TsMode) &&
        Objects.equals(this.transcodeSeekInfo, transcodingProfile.transcodeSeekInfo) &&
        Objects.equals(this.copyTimestamps, transcodingProfile.copyTimestamps) &&
        Objects.equals(this.context, transcodingProfile.context) &&
        Objects.equals(this.enableSubtitlesInManifest, transcodingProfile.enableSubtitlesInManifest) &&
        Objects.equals(this.maxAudioChannels, transcodingProfile.maxAudioChannels) &&
        Objects.equals(this.minSegments, transcodingProfile.minSegments) &&
        Objects.equals(this.segmentLength, transcodingProfile.segmentLength) &&
        Objects.equals(this.breakOnNonKeyFrames, transcodingProfile.breakOnNonKeyFrames) &&
        Objects.equals(this.conditions, transcodingProfile.conditions) &&
        Objects.equals(this.enableAudioVbrEncoding, transcodingProfile.enableAudioVbrEncoding);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, type, videoCodec, audioCodec, protocol, estimateContentLength, enableMpegtsM2TsMode, transcodeSeekInfo, copyTimestamps, context, enableSubtitlesInManifest, maxAudioChannels, minSegments, segmentLength, breakOnNonKeyFrames, conditions, enableAudioVbrEncoding);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscodingProfile {\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    estimateContentLength: ").append(toIndentedString(estimateContentLength)).append("\n");
    sb.append("    enableMpegtsM2TsMode: ").append(toIndentedString(enableMpegtsM2TsMode)).append("\n");
    sb.append("    transcodeSeekInfo: ").append(toIndentedString(transcodeSeekInfo)).append("\n");
    sb.append("    copyTimestamps: ").append(toIndentedString(copyTimestamps)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    enableSubtitlesInManifest: ").append(toIndentedString(enableSubtitlesInManifest)).append("\n");
    sb.append("    maxAudioChannels: ").append(toIndentedString(maxAudioChannels)).append("\n");
    sb.append("    minSegments: ").append(toIndentedString(minSegments)).append("\n");
    sb.append("    segmentLength: ").append(toIndentedString(segmentLength)).append("\n");
    sb.append("    breakOnNonKeyFrames: ").append(toIndentedString(breakOnNonKeyFrames)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    enableAudioVbrEncoding: ").append(toIndentedString(enableAudioVbrEncoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Container");
    openapiFields.add("Type");
    openapiFields.add("VideoCodec");
    openapiFields.add("AudioCodec");
    openapiFields.add("Protocol");
    openapiFields.add("EstimateContentLength");
    openapiFields.add("EnableMpegtsM2TsMode");
    openapiFields.add("TranscodeSeekInfo");
    openapiFields.add("CopyTimestamps");
    openapiFields.add("Context");
    openapiFields.add("EnableSubtitlesInManifest");
    openapiFields.add("MaxAudioChannels");
    openapiFields.add("MinSegments");
    openapiFields.add("SegmentLength");
    openapiFields.add("BreakOnNonKeyFrames");
    openapiFields.add("Conditions");
    openapiFields.add("EnableAudioVbrEncoding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TranscodingProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TranscodingProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TranscodingProfile is not found in the empty JSON string", TranscodingProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TranscodingProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TranscodingProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Container") != null && !jsonObj.get("Container").isJsonNull()) && !jsonObj.get("Container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Container").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        DlnaProfileType.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("VideoCodec") != null && !jsonObj.get("VideoCodec").isJsonNull()) && !jsonObj.get("VideoCodec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoCodec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoCodec").toString()));
      }
      if ((jsonObj.get("AudioCodec") != null && !jsonObj.get("AudioCodec").isJsonNull()) && !jsonObj.get("AudioCodec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AudioCodec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AudioCodec").toString()));
      }
      // validate the optional field `Protocol`
      if (jsonObj.get("Protocol") != null && !jsonObj.get("Protocol").isJsonNull()) {
        MediaStreamProtocol.validateJsonElement(jsonObj.get("Protocol"));
      }
      // validate the optional field `TranscodeSeekInfo`
      if (jsonObj.get("TranscodeSeekInfo") != null && !jsonObj.get("TranscodeSeekInfo").isJsonNull()) {
        TranscodeSeekInfo.validateJsonElement(jsonObj.get("TranscodeSeekInfo"));
      }
      // validate the optional field `Context`
      if (jsonObj.get("Context") != null && !jsonObj.get("Context").isJsonNull()) {
        EncodingContext.validateJsonElement(jsonObj.get("Context"));
      }
      if ((jsonObj.get("MaxAudioChannels") != null && !jsonObj.get("MaxAudioChannels").isJsonNull()) && !jsonObj.get("MaxAudioChannels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxAudioChannels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxAudioChannels").toString()));
      }
      if (jsonObj.get("Conditions") != null && !jsonObj.get("Conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("Conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Conditions` to be an array in the JSON string but got `%s`", jsonObj.get("Conditions").toString()));
          }

          // validate the optional field `Conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            ProfileCondition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TranscodingProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TranscodingProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TranscodingProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TranscodingProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<TranscodingProfile>() {
           @Override
           public void write(JsonWriter out, TranscodingProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TranscodingProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TranscodingProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TranscodingProfile
   * @throws IOException if the JSON string is invalid with respect to TranscodingProfile
   */
  public static TranscodingProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TranscodingProfile.class);
  }

  /**
   * Convert an instance of TranscodingProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

