/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.MediaSegmentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Api model for MediaSegment&#39;s.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class MediaSegmentDto {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_ITEM_ID = "ItemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  @javax.annotation.Nullable
  private UUID itemId;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private MediaSegmentType type;

  public static final String SERIALIZED_NAME_START_TICKS = "StartTicks";
  @SerializedName(SERIALIZED_NAME_START_TICKS)
  @javax.annotation.Nullable
  private Long startTicks;

  public static final String SERIALIZED_NAME_END_TICKS = "EndTicks";
  @SerializedName(SERIALIZED_NAME_END_TICKS)
  @javax.annotation.Nullable
  private Long endTicks;

  public MediaSegmentDto() {
  }

  public MediaSegmentDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id of the media segment.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public MediaSegmentDto itemId(@javax.annotation.Nullable UUID itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Gets or sets the id of the associated item.
   * @return itemId
   */
  @javax.annotation.Nullable
  public UUID getItemId() {
    return itemId;
  }

  public void setItemId(@javax.annotation.Nullable UUID itemId) {
    this.itemId = itemId;
  }


  public MediaSegmentDto type(@javax.annotation.Nullable MediaSegmentType type) {
    this.type = type;
    return this;
  }

  /**
   * Defines the types of content an individual Jellyfin.Data.Entities.MediaSegment represents.
   * @return type
   */
  @javax.annotation.Nullable
  public MediaSegmentType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable MediaSegmentType type) {
    this.type = type;
  }


  public MediaSegmentDto startTicks(@javax.annotation.Nullable Long startTicks) {
    this.startTicks = startTicks;
    return this;
  }

  /**
   * Gets or sets the start of the segment.
   * @return startTicks
   */
  @javax.annotation.Nullable
  public Long getStartTicks() {
    return startTicks;
  }

  public void setStartTicks(@javax.annotation.Nullable Long startTicks) {
    this.startTicks = startTicks;
  }


  public MediaSegmentDto endTicks(@javax.annotation.Nullable Long endTicks) {
    this.endTicks = endTicks;
    return this;
  }

  /**
   * Gets or sets the end of the segment.
   * @return endTicks
   */
  @javax.annotation.Nullable
  public Long getEndTicks() {
    return endTicks;
  }

  public void setEndTicks(@javax.annotation.Nullable Long endTicks) {
    this.endTicks = endTicks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaSegmentDto mediaSegmentDto = (MediaSegmentDto) o;
    return Objects.equals(this.id, mediaSegmentDto.id) &&
        Objects.equals(this.itemId, mediaSegmentDto.itemId) &&
        Objects.equals(this.type, mediaSegmentDto.type) &&
        Objects.equals(this.startTicks, mediaSegmentDto.startTicks) &&
        Objects.equals(this.endTicks, mediaSegmentDto.endTicks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, itemId, type, startTicks, endTicks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaSegmentDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    startTicks: ").append(toIndentedString(startTicks)).append("\n");
    sb.append("    endTicks: ").append(toIndentedString(endTicks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("ItemId");
    openapiFields.add("Type");
    openapiFields.add("StartTicks");
    openapiFields.add("EndTicks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaSegmentDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaSegmentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaSegmentDto is not found in the empty JSON string", MediaSegmentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaSegmentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaSegmentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("ItemId") != null && !jsonObj.get("ItemId").isJsonNull()) && !jsonObj.get("ItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemId").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        MediaSegmentType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaSegmentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaSegmentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaSegmentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaSegmentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaSegmentDto>() {
           @Override
           public void write(JsonWriter out, MediaSegmentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaSegmentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaSegmentDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaSegmentDto
   * @throws IOException if the JSON string is invalid with respect to MediaSegmentDto
   */
  public static MediaSegmentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaSegmentDto.class);
  }

  /**
   * Convert an instance of MediaSegmentDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

