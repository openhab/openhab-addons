/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NameIdPair;
import org.openapitools.client.model.NameValuePair;
import org.openapitools.client.model.TunerChannelMapping;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Channel mapping options dto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class ChannelMappingOptionsDto {
  public static final String SERIALIZED_NAME_TUNER_CHANNELS = "TunerChannels";
  @SerializedName(SERIALIZED_NAME_TUNER_CHANNELS)
  @javax.annotation.Nullable
  private List<TunerChannelMapping> tunerChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_CHANNELS = "ProviderChannels";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CHANNELS)
  @javax.annotation.Nullable
  private List<NameIdPair> providerChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPPINGS = "Mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  @javax.annotation.Nullable
  private List<NameValuePair> mappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "ProviderName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  @javax.annotation.Nullable
  private String providerName;

  public ChannelMappingOptionsDto() {
  }

  public ChannelMappingOptionsDto tunerChannels(@javax.annotation.Nullable List<TunerChannelMapping> tunerChannels) {
    this.tunerChannels = tunerChannels;
    return this;
  }

  public ChannelMappingOptionsDto addTunerChannelsItem(TunerChannelMapping tunerChannelsItem) {
    if (this.tunerChannels == null) {
      this.tunerChannels = new ArrayList<>();
    }
    this.tunerChannels.add(tunerChannelsItem);
    return this;
  }

  /**
   * Gets or sets list of tuner channels.
   * @return tunerChannels
   */
  @javax.annotation.Nullable
  public List<TunerChannelMapping> getTunerChannels() {
    return tunerChannels;
  }

  public void setTunerChannels(@javax.annotation.Nullable List<TunerChannelMapping> tunerChannels) {
    this.tunerChannels = tunerChannels;
  }


  public ChannelMappingOptionsDto providerChannels(@javax.annotation.Nullable List<NameIdPair> providerChannels) {
    this.providerChannels = providerChannels;
    return this;
  }

  public ChannelMappingOptionsDto addProviderChannelsItem(NameIdPair providerChannelsItem) {
    if (this.providerChannels == null) {
      this.providerChannels = new ArrayList<>();
    }
    this.providerChannels.add(providerChannelsItem);
    return this;
  }

  /**
   * Gets or sets list of provider channels.
   * @return providerChannels
   */
  @javax.annotation.Nullable
  public List<NameIdPair> getProviderChannels() {
    return providerChannels;
  }

  public void setProviderChannels(@javax.annotation.Nullable List<NameIdPair> providerChannels) {
    this.providerChannels = providerChannels;
  }


  public ChannelMappingOptionsDto mappings(@javax.annotation.Nullable List<NameValuePair> mappings) {
    this.mappings = mappings;
    return this;
  }

  public ChannelMappingOptionsDto addMappingsItem(NameValuePair mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

  /**
   * Gets or sets list of mappings.
   * @return mappings
   */
  @javax.annotation.Nullable
  public List<NameValuePair> getMappings() {
    return mappings;
  }

  public void setMappings(@javax.annotation.Nullable List<NameValuePair> mappings) {
    this.mappings = mappings;
  }


  public ChannelMappingOptionsDto providerName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * Gets or sets provider name.
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(@javax.annotation.Nullable String providerName) {
    this.providerName = providerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelMappingOptionsDto channelMappingOptionsDto = (ChannelMappingOptionsDto) o;
    return Objects.equals(this.tunerChannels, channelMappingOptionsDto.tunerChannels) &&
        Objects.equals(this.providerChannels, channelMappingOptionsDto.providerChannels) &&
        Objects.equals(this.mappings, channelMappingOptionsDto.mappings) &&
        Objects.equals(this.providerName, channelMappingOptionsDto.providerName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tunerChannels, providerChannels, mappings, providerName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelMappingOptionsDto {\n");
    sb.append("    tunerChannels: ").append(toIndentedString(tunerChannels)).append("\n");
    sb.append("    providerChannels: ").append(toIndentedString(providerChannels)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TunerChannels");
    openapiFields.add("ProviderChannels");
    openapiFields.add("Mappings");
    openapiFields.add("ProviderName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelMappingOptionsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelMappingOptionsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelMappingOptionsDto is not found in the empty JSON string", ChannelMappingOptionsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelMappingOptionsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelMappingOptionsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("TunerChannels") != null && !jsonObj.get("TunerChannels").isJsonNull()) {
        JsonArray jsonArraytunerChannels = jsonObj.getAsJsonArray("TunerChannels");
        if (jsonArraytunerChannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TunerChannels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TunerChannels` to be an array in the JSON string but got `%s`", jsonObj.get("TunerChannels").toString()));
          }

          // validate the optional field `TunerChannels` (array)
          for (int i = 0; i < jsonArraytunerChannels.size(); i++) {
            TunerChannelMapping.validateJsonElement(jsonArraytunerChannels.get(i));
          };
        }
      }
      if (jsonObj.get("ProviderChannels") != null && !jsonObj.get("ProviderChannels").isJsonNull()) {
        JsonArray jsonArrayproviderChannels = jsonObj.getAsJsonArray("ProviderChannels");
        if (jsonArrayproviderChannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ProviderChannels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ProviderChannels` to be an array in the JSON string but got `%s`", jsonObj.get("ProviderChannels").toString()));
          }

          // validate the optional field `ProviderChannels` (array)
          for (int i = 0; i < jsonArrayproviderChannels.size(); i++) {
            NameIdPair.validateJsonElement(jsonArrayproviderChannels.get(i));
          };
        }
      }
      if (jsonObj.get("Mappings") != null && !jsonObj.get("Mappings").isJsonNull()) {
        JsonArray jsonArraymappings = jsonObj.getAsJsonArray("Mappings");
        if (jsonArraymappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Mappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Mappings` to be an array in the JSON string but got `%s`", jsonObj.get("Mappings").toString()));
          }

          // validate the optional field `Mappings` (array)
          for (int i = 0; i < jsonArraymappings.size(); i++) {
            NameValuePair.validateJsonElement(jsonArraymappings.get(i));
          };
        }
      }
      if ((jsonObj.get("ProviderName") != null && !jsonObj.get("ProviderName").isJsonNull()) && !jsonObj.get("ProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProviderName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelMappingOptionsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelMappingOptionsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelMappingOptionsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelMappingOptionsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelMappingOptionsDto>() {
           @Override
           public void write(JsonWriter out, ChannelMappingOptionsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelMappingOptionsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelMappingOptionsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelMappingOptionsDto
   * @throws IOException if the JSON string is invalid with respect to ChannelMappingOptionsDto
   */
  public static ChannelMappingOptionsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelMappingOptionsDto.class);
  }

  /**
   * Convert an instance of ChannelMappingOptionsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

