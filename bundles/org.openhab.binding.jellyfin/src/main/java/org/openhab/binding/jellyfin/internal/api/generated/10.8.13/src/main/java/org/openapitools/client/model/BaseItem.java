/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.MediaUrl;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class BaseItem.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class BaseItem {
  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  @javax.annotation.Nullable
  private Long size;

  public static final String SERIALIZED_NAME_CONTAINER = "Container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  @javax.annotation.Nullable
  private String container;

  public static final String SERIALIZED_NAME_IS_H_D = "IsHD";
  @SerializedName(SERIALIZED_NAME_IS_H_D)
  @javax.annotation.Nullable
  private Boolean isHD;

  public static final String SERIALIZED_NAME_IS_SHORTCUT = "IsShortcut";
  @SerializedName(SERIALIZED_NAME_IS_SHORTCUT)
  @javax.annotation.Nullable
  private Boolean isShortcut;

  public static final String SERIALIZED_NAME_SHORTCUT_PATH = "ShortcutPath";
  @SerializedName(SERIALIZED_NAME_SHORTCUT_PATH)
  @javax.annotation.Nullable
  private String shortcutPath;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  @javax.annotation.Nullable
  private Integer width;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  @javax.annotation.Nullable
  private Integer height;

  public static final String SERIALIZED_NAME_EXTRA_IDS = "ExtraIds";
  @SerializedName(SERIALIZED_NAME_EXTRA_IDS)
  @javax.annotation.Nullable
  private List<UUID> extraIds;

  public static final String SERIALIZED_NAME_DATE_LAST_SAVED = "DateLastSaved";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_SAVED)
  @javax.annotation.Nullable
  private OffsetDateTime dateLastSaved;

  public static final String SERIALIZED_NAME_REMOTE_TRAILERS = "RemoteTrailers";
  @SerializedName(SERIALIZED_NAME_REMOTE_TRAILERS)
  @javax.annotation.Nullable
  private List<MediaUrl> remoteTrailers;

  public static final String SERIALIZED_NAME_SUPPORTS_EXTERNAL_TRANSFER = "SupportsExternalTransfer";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_EXTERNAL_TRANSFER)
  @javax.annotation.Nullable
  private Boolean supportsExternalTransfer;

  public BaseItem() {
  }

  public BaseItem(
     Boolean isHD, 
     Boolean supportsExternalTransfer
  ) {
    this();
    this.isHD = isHD;
    this.supportsExternalTransfer = supportsExternalTransfer;
  }

  public BaseItem size(@javax.annotation.Nullable Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(@javax.annotation.Nullable Long size) {
    this.size = size;
  }


  public BaseItem container(@javax.annotation.Nullable String container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(@javax.annotation.Nullable String container) {
    this.container = container;
  }


  /**
   * Get isHD
   * @return isHD
   */
  @javax.annotation.Nullable
  public Boolean getIsHD() {
    return isHD;
  }



  public BaseItem isShortcut(@javax.annotation.Nullable Boolean isShortcut) {
    this.isShortcut = isShortcut;
    return this;
  }

  /**
   * Get isShortcut
   * @return isShortcut
   */
  @javax.annotation.Nullable
  public Boolean getIsShortcut() {
    return isShortcut;
  }

  public void setIsShortcut(@javax.annotation.Nullable Boolean isShortcut) {
    this.isShortcut = isShortcut;
  }


  public BaseItem shortcutPath(@javax.annotation.Nullable String shortcutPath) {
    this.shortcutPath = shortcutPath;
    return this;
  }

  /**
   * Get shortcutPath
   * @return shortcutPath
   */
  @javax.annotation.Nullable
  public String getShortcutPath() {
    return shortcutPath;
  }

  public void setShortcutPath(@javax.annotation.Nullable String shortcutPath) {
    this.shortcutPath = shortcutPath;
  }


  public BaseItem width(@javax.annotation.Nullable Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(@javax.annotation.Nullable Integer width) {
    this.width = width;
  }


  public BaseItem height(@javax.annotation.Nullable Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(@javax.annotation.Nullable Integer height) {
    this.height = height;
  }


  public BaseItem extraIds(@javax.annotation.Nullable List<UUID> extraIds) {
    this.extraIds = extraIds;
    return this;
  }

  public BaseItem addExtraIdsItem(UUID extraIdsItem) {
    if (this.extraIds == null) {
      this.extraIds = new ArrayList<>();
    }
    this.extraIds.add(extraIdsItem);
    return this;
  }

  /**
   * Get extraIds
   * @return extraIds
   */
  @javax.annotation.Nullable
  public List<UUID> getExtraIds() {
    return extraIds;
  }

  public void setExtraIds(@javax.annotation.Nullable List<UUID> extraIds) {
    this.extraIds = extraIds;
  }


  public BaseItem dateLastSaved(@javax.annotation.Nullable OffsetDateTime dateLastSaved) {
    this.dateLastSaved = dateLastSaved;
    return this;
  }

  /**
   * Get dateLastSaved
   * @return dateLastSaved
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLastSaved() {
    return dateLastSaved;
  }

  public void setDateLastSaved(@javax.annotation.Nullable OffsetDateTime dateLastSaved) {
    this.dateLastSaved = dateLastSaved;
  }


  public BaseItem remoteTrailers(@javax.annotation.Nullable List<MediaUrl> remoteTrailers) {
    this.remoteTrailers = remoteTrailers;
    return this;
  }

  public BaseItem addRemoteTrailersItem(MediaUrl remoteTrailersItem) {
    if (this.remoteTrailers == null) {
      this.remoteTrailers = new ArrayList<>();
    }
    this.remoteTrailers.add(remoteTrailersItem);
    return this;
  }

  /**
   * Gets or sets the remote trailers.
   * @return remoteTrailers
   */
  @javax.annotation.Nullable
  public List<MediaUrl> getRemoteTrailers() {
    return remoteTrailers;
  }

  public void setRemoteTrailers(@javax.annotation.Nullable List<MediaUrl> remoteTrailers) {
    this.remoteTrailers = remoteTrailers;
  }


  /**
   * Get supportsExternalTransfer
   * @return supportsExternalTransfer
   */
  @javax.annotation.Nullable
  public Boolean getSupportsExternalTransfer() {
    return supportsExternalTransfer;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseItem baseItem = (BaseItem) o;
    return Objects.equals(this.size, baseItem.size) &&
        Objects.equals(this.container, baseItem.container) &&
        Objects.equals(this.isHD, baseItem.isHD) &&
        Objects.equals(this.isShortcut, baseItem.isShortcut) &&
        Objects.equals(this.shortcutPath, baseItem.shortcutPath) &&
        Objects.equals(this.width, baseItem.width) &&
        Objects.equals(this.height, baseItem.height) &&
        Objects.equals(this.extraIds, baseItem.extraIds) &&
        Objects.equals(this.dateLastSaved, baseItem.dateLastSaved) &&
        Objects.equals(this.remoteTrailers, baseItem.remoteTrailers) &&
        Objects.equals(this.supportsExternalTransfer, baseItem.supportsExternalTransfer);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, container, isHD, isShortcut, shortcutPath, width, height, extraIds, dateLastSaved, remoteTrailers, supportsExternalTransfer);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseItem {\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    isHD: ").append(toIndentedString(isHD)).append("\n");
    sb.append("    isShortcut: ").append(toIndentedString(isShortcut)).append("\n");
    sb.append("    shortcutPath: ").append(toIndentedString(shortcutPath)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    extraIds: ").append(toIndentedString(extraIds)).append("\n");
    sb.append("    dateLastSaved: ").append(toIndentedString(dateLastSaved)).append("\n");
    sb.append("    remoteTrailers: ").append(toIndentedString(remoteTrailers)).append("\n");
    sb.append("    supportsExternalTransfer: ").append(toIndentedString(supportsExternalTransfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Size");
    openapiFields.add("Container");
    openapiFields.add("IsHD");
    openapiFields.add("IsShortcut");
    openapiFields.add("ShortcutPath");
    openapiFields.add("Width");
    openapiFields.add("Height");
    openapiFields.add("ExtraIds");
    openapiFields.add("DateLastSaved");
    openapiFields.add("RemoteTrailers");
    openapiFields.add("SupportsExternalTransfer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseItem is not found in the empty JSON string", BaseItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaseItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Container") != null && !jsonObj.get("Container").isJsonNull()) && !jsonObj.get("Container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Container").toString()));
      }
      if ((jsonObj.get("ShortcutPath") != null && !jsonObj.get("ShortcutPath").isJsonNull()) && !jsonObj.get("ShortcutPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortcutPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortcutPath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ExtraIds") != null && !jsonObj.get("ExtraIds").isJsonNull() && !jsonObj.get("ExtraIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraIds` to be an array in the JSON string but got `%s`", jsonObj.get("ExtraIds").toString()));
      }
      if (jsonObj.get("RemoteTrailers") != null && !jsonObj.get("RemoteTrailers").isJsonNull()) {
        JsonArray jsonArrayremoteTrailers = jsonObj.getAsJsonArray("RemoteTrailers");
        if (jsonArrayremoteTrailers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RemoteTrailers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RemoteTrailers` to be an array in the JSON string but got `%s`", jsonObj.get("RemoteTrailers").toString()));
          }

          // validate the optional field `RemoteTrailers` (array)
          for (int i = 0; i < jsonArrayremoteTrailers.size(); i++) {
            MediaUrl.validateJsonElement(jsonArrayremoteTrailers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseItem>() {
           @Override
           public void write(JsonWriter out, BaseItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaseItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseItem
   * @throws IOException if the JSON string is invalid with respect to BaseItem
   */
  public static BaseItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseItem.class);
  }

  /**
   * Convert an instance of BaseItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

