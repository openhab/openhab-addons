/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageSavingConvention;
import org.openapitools.client.model.MetadataOptions;
import org.openapitools.client.model.NameValuePair;
import org.openapitools.client.model.PathSubstitution;
import org.openapitools.client.model.RepositoryInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the server configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class ServerConfiguration {
  public static final String SERIALIZED_NAME_LOG_FILE_RETENTION_DAYS = "LogFileRetentionDays";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_RETENTION_DAYS)
  @javax.annotation.Nullable
  private Integer logFileRetentionDays;

  public static final String SERIALIZED_NAME_IS_STARTUP_WIZARD_COMPLETED = "IsStartupWizardCompleted";
  @SerializedName(SERIALIZED_NAME_IS_STARTUP_WIZARD_COMPLETED)
  @javax.annotation.Nullable
  private Boolean isStartupWizardCompleted;

  public static final String SERIALIZED_NAME_CACHE_PATH = "CachePath";
  @SerializedName(SERIALIZED_NAME_CACHE_PATH)
  @javax.annotation.Nullable
  private String cachePath;

  public static final String SERIALIZED_NAME_PREVIOUS_VERSION = "PreviousVersion";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VERSION)
  @javax.annotation.Nullable
  private String previousVersion;

  public static final String SERIALIZED_NAME_PREVIOUS_VERSION_STR = "PreviousVersionStr";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VERSION_STR)
  @javax.annotation.Nullable
  private String previousVersionStr;

  public static final String SERIALIZED_NAME_ENABLE_METRICS = "EnableMetrics";
  @SerializedName(SERIALIZED_NAME_ENABLE_METRICS)
  @javax.annotation.Nullable
  private Boolean enableMetrics;

  public static final String SERIALIZED_NAME_ENABLE_NORMALIZED_ITEM_BY_NAME_IDS = "EnableNormalizedItemByNameIds";
  @SerializedName(SERIALIZED_NAME_ENABLE_NORMALIZED_ITEM_BY_NAME_IDS)
  @javax.annotation.Nullable
  private Boolean enableNormalizedItemByNameIds;

  public static final String SERIALIZED_NAME_IS_PORT_AUTHORIZED = "IsPortAuthorized";
  @SerializedName(SERIALIZED_NAME_IS_PORT_AUTHORIZED)
  @javax.annotation.Nullable
  private Boolean isPortAuthorized;

  public static final String SERIALIZED_NAME_QUICK_CONNECT_AVAILABLE = "QuickConnectAvailable";
  @SerializedName(SERIALIZED_NAME_QUICK_CONNECT_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean quickConnectAvailable;

  public static final String SERIALIZED_NAME_ENABLE_CASE_SENSITIVE_ITEM_IDS = "EnableCaseSensitiveItemIds";
  @SerializedName(SERIALIZED_NAME_ENABLE_CASE_SENSITIVE_ITEM_IDS)
  @javax.annotation.Nullable
  private Boolean enableCaseSensitiveItemIds;

  public static final String SERIALIZED_NAME_DISABLE_LIVE_TV_CHANNEL_USER_DATA_NAME = "DisableLiveTvChannelUserDataName";
  @SerializedName(SERIALIZED_NAME_DISABLE_LIVE_TV_CHANNEL_USER_DATA_NAME)
  @javax.annotation.Nullable
  private Boolean disableLiveTvChannelUserDataName;

  public static final String SERIALIZED_NAME_METADATA_PATH = "MetadataPath";
  @SerializedName(SERIALIZED_NAME_METADATA_PATH)
  @javax.annotation.Nullable
  private String metadataPath;

  public static final String SERIALIZED_NAME_METADATA_NETWORK_PATH = "MetadataNetworkPath";
  @SerializedName(SERIALIZED_NAME_METADATA_NETWORK_PATH)
  @javax.annotation.Nullable
  private String metadataNetworkPath;

  public static final String SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE = "PreferredMetadataLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE)
  @javax.annotation.Nullable
  private String preferredMetadataLanguage;

  public static final String SERIALIZED_NAME_METADATA_COUNTRY_CODE = "MetadataCountryCode";
  @SerializedName(SERIALIZED_NAME_METADATA_COUNTRY_CODE)
  @javax.annotation.Nullable
  private String metadataCountryCode;

  public static final String SERIALIZED_NAME_SORT_REPLACE_CHARACTERS = "SortReplaceCharacters";
  @SerializedName(SERIALIZED_NAME_SORT_REPLACE_CHARACTERS)
  @javax.annotation.Nullable
  private List<String> sortReplaceCharacters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT_REMOVE_CHARACTERS = "SortRemoveCharacters";
  @SerializedName(SERIALIZED_NAME_SORT_REMOVE_CHARACTERS)
  @javax.annotation.Nullable
  private List<String> sortRemoveCharacters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT_REMOVE_WORDS = "SortRemoveWords";
  @SerializedName(SERIALIZED_NAME_SORT_REMOVE_WORDS)
  @javax.annotation.Nullable
  private List<String> sortRemoveWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_RESUME_PCT = "MinResumePct";
  @SerializedName(SERIALIZED_NAME_MIN_RESUME_PCT)
  @javax.annotation.Nullable
  private Integer minResumePct;

  public static final String SERIALIZED_NAME_MAX_RESUME_PCT = "MaxResumePct";
  @SerializedName(SERIALIZED_NAME_MAX_RESUME_PCT)
  @javax.annotation.Nullable
  private Integer maxResumePct;

  public static final String SERIALIZED_NAME_MIN_RESUME_DURATION_SECONDS = "MinResumeDurationSeconds";
  @SerializedName(SERIALIZED_NAME_MIN_RESUME_DURATION_SECONDS)
  @javax.annotation.Nullable
  private Integer minResumeDurationSeconds;

  public static final String SERIALIZED_NAME_MIN_AUDIOBOOK_RESUME = "MinAudiobookResume";
  @SerializedName(SERIALIZED_NAME_MIN_AUDIOBOOK_RESUME)
  @javax.annotation.Nullable
  private Integer minAudiobookResume;

  public static final String SERIALIZED_NAME_MAX_AUDIOBOOK_RESUME = "MaxAudiobookResume";
  @SerializedName(SERIALIZED_NAME_MAX_AUDIOBOOK_RESUME)
  @javax.annotation.Nullable
  private Integer maxAudiobookResume;

  public static final String SERIALIZED_NAME_LIBRARY_MONITOR_DELAY = "LibraryMonitorDelay";
  @SerializedName(SERIALIZED_NAME_LIBRARY_MONITOR_DELAY)
  @javax.annotation.Nullable
  private Integer libraryMonitorDelay;

  public static final String SERIALIZED_NAME_IMAGE_SAVING_CONVENTION = "ImageSavingConvention";
  @SerializedName(SERIALIZED_NAME_IMAGE_SAVING_CONVENTION)
  @javax.annotation.Nullable
  private ImageSavingConvention imageSavingConvention;

  public static final String SERIALIZED_NAME_METADATA_OPTIONS = "MetadataOptions";
  @SerializedName(SERIALIZED_NAME_METADATA_OPTIONS)
  @javax.annotation.Nullable
  private List<MetadataOptions> metadataOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_DESERIALIZATION_FOR_BASIC_TYPES = "SkipDeserializationForBasicTypes";
  @SerializedName(SERIALIZED_NAME_SKIP_DESERIALIZATION_FOR_BASIC_TYPES)
  @javax.annotation.Nullable
  private Boolean skipDeserializationForBasicTypes;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  @javax.annotation.Nullable
  private String serverName;

  public static final String SERIALIZED_NAME_UI_CULTURE = "UICulture";
  @SerializedName(SERIALIZED_NAME_UI_CULTURE)
  @javax.annotation.Nullable
  private String uiCulture;

  public static final String SERIALIZED_NAME_SAVE_METADATA_HIDDEN = "SaveMetadataHidden";
  @SerializedName(SERIALIZED_NAME_SAVE_METADATA_HIDDEN)
  @javax.annotation.Nullable
  private Boolean saveMetadataHidden;

  public static final String SERIALIZED_NAME_CONTENT_TYPES = "ContentTypes";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPES)
  @javax.annotation.Nullable
  private List<NameValuePair> contentTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOTE_CLIENT_BITRATE_LIMIT = "RemoteClientBitrateLimit";
  @SerializedName(SERIALIZED_NAME_REMOTE_CLIENT_BITRATE_LIMIT)
  @javax.annotation.Nullable
  private Integer remoteClientBitrateLimit;

  public static final String SERIALIZED_NAME_ENABLE_FOLDER_VIEW = "EnableFolderView";
  @SerializedName(SERIALIZED_NAME_ENABLE_FOLDER_VIEW)
  @javax.annotation.Nullable
  private Boolean enableFolderView;

  public static final String SERIALIZED_NAME_ENABLE_GROUPING_INTO_COLLECTIONS = "EnableGroupingIntoCollections";
  @SerializedName(SERIALIZED_NAME_ENABLE_GROUPING_INTO_COLLECTIONS)
  @javax.annotation.Nullable
  private Boolean enableGroupingIntoCollections;

  public static final String SERIALIZED_NAME_DISPLAY_SPECIALS_WITHIN_SEASONS = "DisplaySpecialsWithinSeasons";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SPECIALS_WITHIN_SEASONS)
  @javax.annotation.Nullable
  private Boolean displaySpecialsWithinSeasons;

  public static final String SERIALIZED_NAME_CODECS_USED = "CodecsUsed";
  @SerializedName(SERIALIZED_NAME_CODECS_USED)
  @javax.annotation.Nullable
  private List<String> codecsUsed = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGIN_REPOSITORIES = "PluginRepositories";
  @SerializedName(SERIALIZED_NAME_PLUGIN_REPOSITORIES)
  @javax.annotation.Nullable
  private List<RepositoryInfo> pluginRepositories = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_EXTERNAL_CONTENT_IN_SUGGESTIONS = "EnableExternalContentInSuggestions";
  @SerializedName(SERIALIZED_NAME_ENABLE_EXTERNAL_CONTENT_IN_SUGGESTIONS)
  @javax.annotation.Nullable
  private Boolean enableExternalContentInSuggestions;

  public static final String SERIALIZED_NAME_IMAGE_EXTRACTION_TIMEOUT_MS = "ImageExtractionTimeoutMs";
  @SerializedName(SERIALIZED_NAME_IMAGE_EXTRACTION_TIMEOUT_MS)
  @javax.annotation.Nullable
  private Integer imageExtractionTimeoutMs;

  public static final String SERIALIZED_NAME_PATH_SUBSTITUTIONS = "PathSubstitutions";
  @SerializedName(SERIALIZED_NAME_PATH_SUBSTITUTIONS)
  @javax.annotation.Nullable
  private List<PathSubstitution> pathSubstitutions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_SLOW_RESPONSE_WARNING = "EnableSlowResponseWarning";
  @SerializedName(SERIALIZED_NAME_ENABLE_SLOW_RESPONSE_WARNING)
  @javax.annotation.Nullable
  private Boolean enableSlowResponseWarning;

  public static final String SERIALIZED_NAME_SLOW_RESPONSE_THRESHOLD_MS = "SlowResponseThresholdMs";
  @SerializedName(SERIALIZED_NAME_SLOW_RESPONSE_THRESHOLD_MS)
  @javax.annotation.Nullable
  private Long slowResponseThresholdMs;

  public static final String SERIALIZED_NAME_CORS_HOSTS = "CorsHosts";
  @SerializedName(SERIALIZED_NAME_CORS_HOSTS)
  @javax.annotation.Nullable
  private List<String> corsHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVITY_LOG_RETENTION_DAYS = "ActivityLogRetentionDays";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_LOG_RETENTION_DAYS)
  @javax.annotation.Nullable
  private Integer activityLogRetentionDays;

  public static final String SERIALIZED_NAME_LIBRARY_SCAN_FANOUT_CONCURRENCY = "LibraryScanFanoutConcurrency";
  @SerializedName(SERIALIZED_NAME_LIBRARY_SCAN_FANOUT_CONCURRENCY)
  @javax.annotation.Nullable
  private Integer libraryScanFanoutConcurrency;

  public static final String SERIALIZED_NAME_LIBRARY_METADATA_REFRESH_CONCURRENCY = "LibraryMetadataRefreshConcurrency";
  @SerializedName(SERIALIZED_NAME_LIBRARY_METADATA_REFRESH_CONCURRENCY)
  @javax.annotation.Nullable
  private Integer libraryMetadataRefreshConcurrency;

  public static final String SERIALIZED_NAME_REMOVE_OLD_PLUGINS = "RemoveOldPlugins";
  @SerializedName(SERIALIZED_NAME_REMOVE_OLD_PLUGINS)
  @javax.annotation.Nullable
  private Boolean removeOldPlugins;

  public static final String SERIALIZED_NAME_ALLOW_CLIENT_LOG_UPLOAD = "AllowClientLogUpload";
  @SerializedName(SERIALIZED_NAME_ALLOW_CLIENT_LOG_UPLOAD)
  @javax.annotation.Nullable
  private Boolean allowClientLogUpload;

  public ServerConfiguration() {
  }

  public ServerConfiguration logFileRetentionDays(@javax.annotation.Nullable Integer logFileRetentionDays) {
    this.logFileRetentionDays = logFileRetentionDays;
    return this;
  }

  /**
   * Gets or sets the number of days we should retain log files.
   * @return logFileRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getLogFileRetentionDays() {
    return logFileRetentionDays;
  }

  public void setLogFileRetentionDays(@javax.annotation.Nullable Integer logFileRetentionDays) {
    this.logFileRetentionDays = logFileRetentionDays;
  }


  public ServerConfiguration isStartupWizardCompleted(@javax.annotation.Nullable Boolean isStartupWizardCompleted) {
    this.isStartupWizardCompleted = isStartupWizardCompleted;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is first run.
   * @return isStartupWizardCompleted
   */
  @javax.annotation.Nullable
  public Boolean getIsStartupWizardCompleted() {
    return isStartupWizardCompleted;
  }

  public void setIsStartupWizardCompleted(@javax.annotation.Nullable Boolean isStartupWizardCompleted) {
    this.isStartupWizardCompleted = isStartupWizardCompleted;
  }


  public ServerConfiguration cachePath(@javax.annotation.Nullable String cachePath) {
    this.cachePath = cachePath;
    return this;
  }

  /**
   * Gets or sets the cache path.
   * @return cachePath
   */
  @javax.annotation.Nullable
  public String getCachePath() {
    return cachePath;
  }

  public void setCachePath(@javax.annotation.Nullable String cachePath) {
    this.cachePath = cachePath;
  }


  public ServerConfiguration previousVersion(@javax.annotation.Nullable String previousVersion) {
    this.previousVersion = previousVersion;
    return this;
  }

  /**
   * Gets or sets the last known version that was ran using the configuration.
   * @return previousVersion
   */
  @javax.annotation.Nullable
  public String getPreviousVersion() {
    return previousVersion;
  }

  public void setPreviousVersion(@javax.annotation.Nullable String previousVersion) {
    this.previousVersion = previousVersion;
  }


  public ServerConfiguration previousVersionStr(@javax.annotation.Nullable String previousVersionStr) {
    this.previousVersionStr = previousVersionStr;
    return this;
  }

  /**
   * Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn&#39;t xml-serializable.
   * @return previousVersionStr
   */
  @javax.annotation.Nullable
  public String getPreviousVersionStr() {
    return previousVersionStr;
  }

  public void setPreviousVersionStr(@javax.annotation.Nullable String previousVersionStr) {
    this.previousVersionStr = previousVersionStr;
  }


  public ServerConfiguration enableMetrics(@javax.annotation.Nullable Boolean enableMetrics) {
    this.enableMetrics = enableMetrics;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable prometheus metrics exporting.
   * @return enableMetrics
   */
  @javax.annotation.Nullable
  public Boolean getEnableMetrics() {
    return enableMetrics;
  }

  public void setEnableMetrics(@javax.annotation.Nullable Boolean enableMetrics) {
    this.enableMetrics = enableMetrics;
  }


  public ServerConfiguration enableNormalizedItemByNameIds(@javax.annotation.Nullable Boolean enableNormalizedItemByNameIds) {
    this.enableNormalizedItemByNameIds = enableNormalizedItemByNameIds;
    return this;
  }

  /**
   * Get enableNormalizedItemByNameIds
   * @return enableNormalizedItemByNameIds
   */
  @javax.annotation.Nullable
  public Boolean getEnableNormalizedItemByNameIds() {
    return enableNormalizedItemByNameIds;
  }

  public void setEnableNormalizedItemByNameIds(@javax.annotation.Nullable Boolean enableNormalizedItemByNameIds) {
    this.enableNormalizedItemByNameIds = enableNormalizedItemByNameIds;
  }


  public ServerConfiguration isPortAuthorized(@javax.annotation.Nullable Boolean isPortAuthorized) {
    this.isPortAuthorized = isPortAuthorized;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is port authorized.
   * @return isPortAuthorized
   */
  @javax.annotation.Nullable
  public Boolean getIsPortAuthorized() {
    return isPortAuthorized;
  }

  public void setIsPortAuthorized(@javax.annotation.Nullable Boolean isPortAuthorized) {
    this.isPortAuthorized = isPortAuthorized;
  }


  public ServerConfiguration quickConnectAvailable(@javax.annotation.Nullable Boolean quickConnectAvailable) {
    this.quickConnectAvailable = quickConnectAvailable;
    return this;
  }

  /**
   * Gets or sets a value indicating whether quick connect is available for use on this server.
   * @return quickConnectAvailable
   */
  @javax.annotation.Nullable
  public Boolean getQuickConnectAvailable() {
    return quickConnectAvailable;
  }

  public void setQuickConnectAvailable(@javax.annotation.Nullable Boolean quickConnectAvailable) {
    this.quickConnectAvailable = quickConnectAvailable;
  }


  public ServerConfiguration enableCaseSensitiveItemIds(@javax.annotation.Nullable Boolean enableCaseSensitiveItemIds) {
    this.enableCaseSensitiveItemIds = enableCaseSensitiveItemIds;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [enable case sensitive item ids].
   * @return enableCaseSensitiveItemIds
   */
  @javax.annotation.Nullable
  public Boolean getEnableCaseSensitiveItemIds() {
    return enableCaseSensitiveItemIds;
  }

  public void setEnableCaseSensitiveItemIds(@javax.annotation.Nullable Boolean enableCaseSensitiveItemIds) {
    this.enableCaseSensitiveItemIds = enableCaseSensitiveItemIds;
  }


  public ServerConfiguration disableLiveTvChannelUserDataName(@javax.annotation.Nullable Boolean disableLiveTvChannelUserDataName) {
    this.disableLiveTvChannelUserDataName = disableLiveTvChannelUserDataName;
    return this;
  }

  /**
   * Get disableLiveTvChannelUserDataName
   * @return disableLiveTvChannelUserDataName
   */
  @javax.annotation.Nullable
  public Boolean getDisableLiveTvChannelUserDataName() {
    return disableLiveTvChannelUserDataName;
  }

  public void setDisableLiveTvChannelUserDataName(@javax.annotation.Nullable Boolean disableLiveTvChannelUserDataName) {
    this.disableLiveTvChannelUserDataName = disableLiveTvChannelUserDataName;
  }


  public ServerConfiguration metadataPath(@javax.annotation.Nullable String metadataPath) {
    this.metadataPath = metadataPath;
    return this;
  }

  /**
   * Gets or sets the metadata path.
   * @return metadataPath
   */
  @javax.annotation.Nullable
  public String getMetadataPath() {
    return metadataPath;
  }

  public void setMetadataPath(@javax.annotation.Nullable String metadataPath) {
    this.metadataPath = metadataPath;
  }


  public ServerConfiguration metadataNetworkPath(@javax.annotation.Nullable String metadataNetworkPath) {
    this.metadataNetworkPath = metadataNetworkPath;
    return this;
  }

  /**
   * Get metadataNetworkPath
   * @return metadataNetworkPath
   */
  @javax.annotation.Nullable
  public String getMetadataNetworkPath() {
    return metadataNetworkPath;
  }

  public void setMetadataNetworkPath(@javax.annotation.Nullable String metadataNetworkPath) {
    this.metadataNetworkPath = metadataNetworkPath;
  }


  public ServerConfiguration preferredMetadataLanguage(@javax.annotation.Nullable String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
    return this;
  }

  /**
   * Gets or sets the preferred metadata language.
   * @return preferredMetadataLanguage
   */
  @javax.annotation.Nullable
  public String getPreferredMetadataLanguage() {
    return preferredMetadataLanguage;
  }

  public void setPreferredMetadataLanguage(@javax.annotation.Nullable String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
  }


  public ServerConfiguration metadataCountryCode(@javax.annotation.Nullable String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
    return this;
  }

  /**
   * Gets or sets the metadata country code.
   * @return metadataCountryCode
   */
  @javax.annotation.Nullable
  public String getMetadataCountryCode() {
    return metadataCountryCode;
  }

  public void setMetadataCountryCode(@javax.annotation.Nullable String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
  }


  public ServerConfiguration sortReplaceCharacters(@javax.annotation.Nullable List<String> sortReplaceCharacters) {
    this.sortReplaceCharacters = sortReplaceCharacters;
    return this;
  }

  public ServerConfiguration addSortReplaceCharactersItem(String sortReplaceCharactersItem) {
    if (this.sortReplaceCharacters == null) {
      this.sortReplaceCharacters = new ArrayList<>();
    }
    this.sortReplaceCharacters.add(sortReplaceCharactersItem);
    return this;
  }

  /**
   * Gets or sets characters to be replaced with a &#39; &#39; in strings to create a sort name.
   * @return sortReplaceCharacters
   */
  @javax.annotation.Nullable
  public List<String> getSortReplaceCharacters() {
    return sortReplaceCharacters;
  }

  public void setSortReplaceCharacters(@javax.annotation.Nullable List<String> sortReplaceCharacters) {
    this.sortReplaceCharacters = sortReplaceCharacters;
  }


  public ServerConfiguration sortRemoveCharacters(@javax.annotation.Nullable List<String> sortRemoveCharacters) {
    this.sortRemoveCharacters = sortRemoveCharacters;
    return this;
  }

  public ServerConfiguration addSortRemoveCharactersItem(String sortRemoveCharactersItem) {
    if (this.sortRemoveCharacters == null) {
      this.sortRemoveCharacters = new ArrayList<>();
    }
    this.sortRemoveCharacters.add(sortRemoveCharactersItem);
    return this;
  }

  /**
   * Gets or sets characters to be removed from strings to create a sort name.
   * @return sortRemoveCharacters
   */
  @javax.annotation.Nullable
  public List<String> getSortRemoveCharacters() {
    return sortRemoveCharacters;
  }

  public void setSortRemoveCharacters(@javax.annotation.Nullable List<String> sortRemoveCharacters) {
    this.sortRemoveCharacters = sortRemoveCharacters;
  }


  public ServerConfiguration sortRemoveWords(@javax.annotation.Nullable List<String> sortRemoveWords) {
    this.sortRemoveWords = sortRemoveWords;
    return this;
  }

  public ServerConfiguration addSortRemoveWordsItem(String sortRemoveWordsItem) {
    if (this.sortRemoveWords == null) {
      this.sortRemoveWords = new ArrayList<>();
    }
    this.sortRemoveWords.add(sortRemoveWordsItem);
    return this;
  }

  /**
   * Gets or sets words to be removed from strings to create a sort name.
   * @return sortRemoveWords
   */
  @javax.annotation.Nullable
  public List<String> getSortRemoveWords() {
    return sortRemoveWords;
  }

  public void setSortRemoveWords(@javax.annotation.Nullable List<String> sortRemoveWords) {
    this.sortRemoveWords = sortRemoveWords;
  }


  public ServerConfiguration minResumePct(@javax.annotation.Nullable Integer minResumePct) {
    this.minResumePct = minResumePct;
    return this;
  }

  /**
   * Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.
   * @return minResumePct
   */
  @javax.annotation.Nullable
  public Integer getMinResumePct() {
    return minResumePct;
  }

  public void setMinResumePct(@javax.annotation.Nullable Integer minResumePct) {
    this.minResumePct = minResumePct;
  }


  public ServerConfiguration maxResumePct(@javax.annotation.Nullable Integer maxResumePct) {
    this.maxResumePct = maxResumePct;
    return this;
  }

  /**
   * Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
   * @return maxResumePct
   */
  @javax.annotation.Nullable
  public Integer getMaxResumePct() {
    return maxResumePct;
  }

  public void setMaxResumePct(@javax.annotation.Nullable Integer maxResumePct) {
    this.maxResumePct = maxResumePct;
  }


  public ServerConfiguration minResumeDurationSeconds(@javax.annotation.Nullable Integer minResumeDurationSeconds) {
    this.minResumeDurationSeconds = minResumeDurationSeconds;
    return this;
  }

  /**
   * Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..
   * @return minResumeDurationSeconds
   */
  @javax.annotation.Nullable
  public Integer getMinResumeDurationSeconds() {
    return minResumeDurationSeconds;
  }

  public void setMinResumeDurationSeconds(@javax.annotation.Nullable Integer minResumeDurationSeconds) {
    this.minResumeDurationSeconds = minResumeDurationSeconds;
  }


  public ServerConfiguration minAudiobookResume(@javax.annotation.Nullable Integer minAudiobookResume) {
    this.minAudiobookResume = minAudiobookResume;
    return this;
  }

  /**
   * Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.
   * @return minAudiobookResume
   */
  @javax.annotation.Nullable
  public Integer getMinAudiobookResume() {
    return minAudiobookResume;
  }

  public void setMinAudiobookResume(@javax.annotation.Nullable Integer minAudiobookResume) {
    this.minAudiobookResume = minAudiobookResume;
  }


  public ServerConfiguration maxAudiobookResume(@javax.annotation.Nullable Integer maxAudiobookResume) {
    this.maxAudiobookResume = maxAudiobookResume;
    return this;
  }

  /**
   * Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
   * @return maxAudiobookResume
   */
  @javax.annotation.Nullable
  public Integer getMaxAudiobookResume() {
    return maxAudiobookResume;
  }

  public void setMaxAudiobookResume(@javax.annotation.Nullable Integer maxAudiobookResume) {
    this.maxAudiobookResume = maxAudiobookResume;
  }


  public ServerConfiguration libraryMonitorDelay(@javax.annotation.Nullable Integer libraryMonitorDelay) {
    this.libraryMonitorDelay = libraryMonitorDelay;
    return this;
  }

  /**
   * Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.
   * @return libraryMonitorDelay
   */
  @javax.annotation.Nullable
  public Integer getLibraryMonitorDelay() {
    return libraryMonitorDelay;
  }

  public void setLibraryMonitorDelay(@javax.annotation.Nullable Integer libraryMonitorDelay) {
    this.libraryMonitorDelay = libraryMonitorDelay;
  }


  public ServerConfiguration imageSavingConvention(@javax.annotation.Nullable ImageSavingConvention imageSavingConvention) {
    this.imageSavingConvention = imageSavingConvention;
    return this;
  }

  /**
   * Gets or sets the image saving convention.
   * @return imageSavingConvention
   */
  @javax.annotation.Nullable
  public ImageSavingConvention getImageSavingConvention() {
    return imageSavingConvention;
  }

  public void setImageSavingConvention(@javax.annotation.Nullable ImageSavingConvention imageSavingConvention) {
    this.imageSavingConvention = imageSavingConvention;
  }


  public ServerConfiguration metadataOptions(@javax.annotation.Nullable List<MetadataOptions> metadataOptions) {
    this.metadataOptions = metadataOptions;
    return this;
  }

  public ServerConfiguration addMetadataOptionsItem(MetadataOptions metadataOptionsItem) {
    if (this.metadataOptions == null) {
      this.metadataOptions = new ArrayList<>();
    }
    this.metadataOptions.add(metadataOptionsItem);
    return this;
  }

  /**
   * Get metadataOptions
   * @return metadataOptions
   */
  @javax.annotation.Nullable
  public List<MetadataOptions> getMetadataOptions() {
    return metadataOptions;
  }

  public void setMetadataOptions(@javax.annotation.Nullable List<MetadataOptions> metadataOptions) {
    this.metadataOptions = metadataOptions;
  }


  public ServerConfiguration skipDeserializationForBasicTypes(@javax.annotation.Nullable Boolean skipDeserializationForBasicTypes) {
    this.skipDeserializationForBasicTypes = skipDeserializationForBasicTypes;
    return this;
  }

  /**
   * Get skipDeserializationForBasicTypes
   * @return skipDeserializationForBasicTypes
   */
  @javax.annotation.Nullable
  public Boolean getSkipDeserializationForBasicTypes() {
    return skipDeserializationForBasicTypes;
  }

  public void setSkipDeserializationForBasicTypes(@javax.annotation.Nullable Boolean skipDeserializationForBasicTypes) {
    this.skipDeserializationForBasicTypes = skipDeserializationForBasicTypes;
  }


  public ServerConfiguration serverName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Get serverName
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
  }


  public ServerConfiguration uiCulture(@javax.annotation.Nullable String uiCulture) {
    this.uiCulture = uiCulture;
    return this;
  }

  /**
   * Get uiCulture
   * @return uiCulture
   */
  @javax.annotation.Nullable
  public String getUiCulture() {
    return uiCulture;
  }

  public void setUiCulture(@javax.annotation.Nullable String uiCulture) {
    this.uiCulture = uiCulture;
  }


  public ServerConfiguration saveMetadataHidden(@javax.annotation.Nullable Boolean saveMetadataHidden) {
    this.saveMetadataHidden = saveMetadataHidden;
    return this;
  }

  /**
   * Get saveMetadataHidden
   * @return saveMetadataHidden
   */
  @javax.annotation.Nullable
  public Boolean getSaveMetadataHidden() {
    return saveMetadataHidden;
  }

  public void setSaveMetadataHidden(@javax.annotation.Nullable Boolean saveMetadataHidden) {
    this.saveMetadataHidden = saveMetadataHidden;
  }


  public ServerConfiguration contentTypes(@javax.annotation.Nullable List<NameValuePair> contentTypes) {
    this.contentTypes = contentTypes;
    return this;
  }

  public ServerConfiguration addContentTypesItem(NameValuePair contentTypesItem) {
    if (this.contentTypes == null) {
      this.contentTypes = new ArrayList<>();
    }
    this.contentTypes.add(contentTypesItem);
    return this;
  }

  /**
   * Get contentTypes
   * @return contentTypes
   */
  @javax.annotation.Nullable
  public List<NameValuePair> getContentTypes() {
    return contentTypes;
  }

  public void setContentTypes(@javax.annotation.Nullable List<NameValuePair> contentTypes) {
    this.contentTypes = contentTypes;
  }


  public ServerConfiguration remoteClientBitrateLimit(@javax.annotation.Nullable Integer remoteClientBitrateLimit) {
    this.remoteClientBitrateLimit = remoteClientBitrateLimit;
    return this;
  }

  /**
   * Get remoteClientBitrateLimit
   * @return remoteClientBitrateLimit
   */
  @javax.annotation.Nullable
  public Integer getRemoteClientBitrateLimit() {
    return remoteClientBitrateLimit;
  }

  public void setRemoteClientBitrateLimit(@javax.annotation.Nullable Integer remoteClientBitrateLimit) {
    this.remoteClientBitrateLimit = remoteClientBitrateLimit;
  }


  public ServerConfiguration enableFolderView(@javax.annotation.Nullable Boolean enableFolderView) {
    this.enableFolderView = enableFolderView;
    return this;
  }

  /**
   * Get enableFolderView
   * @return enableFolderView
   */
  @javax.annotation.Nullable
  public Boolean getEnableFolderView() {
    return enableFolderView;
  }

  public void setEnableFolderView(@javax.annotation.Nullable Boolean enableFolderView) {
    this.enableFolderView = enableFolderView;
  }


  public ServerConfiguration enableGroupingIntoCollections(@javax.annotation.Nullable Boolean enableGroupingIntoCollections) {
    this.enableGroupingIntoCollections = enableGroupingIntoCollections;
    return this;
  }

  /**
   * Get enableGroupingIntoCollections
   * @return enableGroupingIntoCollections
   */
  @javax.annotation.Nullable
  public Boolean getEnableGroupingIntoCollections() {
    return enableGroupingIntoCollections;
  }

  public void setEnableGroupingIntoCollections(@javax.annotation.Nullable Boolean enableGroupingIntoCollections) {
    this.enableGroupingIntoCollections = enableGroupingIntoCollections;
  }


  public ServerConfiguration displaySpecialsWithinSeasons(@javax.annotation.Nullable Boolean displaySpecialsWithinSeasons) {
    this.displaySpecialsWithinSeasons = displaySpecialsWithinSeasons;
    return this;
  }

  /**
   * Get displaySpecialsWithinSeasons
   * @return displaySpecialsWithinSeasons
   */
  @javax.annotation.Nullable
  public Boolean getDisplaySpecialsWithinSeasons() {
    return displaySpecialsWithinSeasons;
  }

  public void setDisplaySpecialsWithinSeasons(@javax.annotation.Nullable Boolean displaySpecialsWithinSeasons) {
    this.displaySpecialsWithinSeasons = displaySpecialsWithinSeasons;
  }


  public ServerConfiguration codecsUsed(@javax.annotation.Nullable List<String> codecsUsed) {
    this.codecsUsed = codecsUsed;
    return this;
  }

  public ServerConfiguration addCodecsUsedItem(String codecsUsedItem) {
    if (this.codecsUsed == null) {
      this.codecsUsed = new ArrayList<>();
    }
    this.codecsUsed.add(codecsUsedItem);
    return this;
  }

  /**
   * Get codecsUsed
   * @return codecsUsed
   */
  @javax.annotation.Nullable
  public List<String> getCodecsUsed() {
    return codecsUsed;
  }

  public void setCodecsUsed(@javax.annotation.Nullable List<String> codecsUsed) {
    this.codecsUsed = codecsUsed;
  }


  public ServerConfiguration pluginRepositories(@javax.annotation.Nullable List<RepositoryInfo> pluginRepositories) {
    this.pluginRepositories = pluginRepositories;
    return this;
  }

  public ServerConfiguration addPluginRepositoriesItem(RepositoryInfo pluginRepositoriesItem) {
    if (this.pluginRepositories == null) {
      this.pluginRepositories = new ArrayList<>();
    }
    this.pluginRepositories.add(pluginRepositoriesItem);
    return this;
  }

  /**
   * Get pluginRepositories
   * @return pluginRepositories
   */
  @javax.annotation.Nullable
  public List<RepositoryInfo> getPluginRepositories() {
    return pluginRepositories;
  }

  public void setPluginRepositories(@javax.annotation.Nullable List<RepositoryInfo> pluginRepositories) {
    this.pluginRepositories = pluginRepositories;
  }


  public ServerConfiguration enableExternalContentInSuggestions(@javax.annotation.Nullable Boolean enableExternalContentInSuggestions) {
    this.enableExternalContentInSuggestions = enableExternalContentInSuggestions;
    return this;
  }

  /**
   * Get enableExternalContentInSuggestions
   * @return enableExternalContentInSuggestions
   */
  @javax.annotation.Nullable
  public Boolean getEnableExternalContentInSuggestions() {
    return enableExternalContentInSuggestions;
  }

  public void setEnableExternalContentInSuggestions(@javax.annotation.Nullable Boolean enableExternalContentInSuggestions) {
    this.enableExternalContentInSuggestions = enableExternalContentInSuggestions;
  }


  public ServerConfiguration imageExtractionTimeoutMs(@javax.annotation.Nullable Integer imageExtractionTimeoutMs) {
    this.imageExtractionTimeoutMs = imageExtractionTimeoutMs;
    return this;
  }

  /**
   * Get imageExtractionTimeoutMs
   * @return imageExtractionTimeoutMs
   */
  @javax.annotation.Nullable
  public Integer getImageExtractionTimeoutMs() {
    return imageExtractionTimeoutMs;
  }

  public void setImageExtractionTimeoutMs(@javax.annotation.Nullable Integer imageExtractionTimeoutMs) {
    this.imageExtractionTimeoutMs = imageExtractionTimeoutMs;
  }


  public ServerConfiguration pathSubstitutions(@javax.annotation.Nullable List<PathSubstitution> pathSubstitutions) {
    this.pathSubstitutions = pathSubstitutions;
    return this;
  }

  public ServerConfiguration addPathSubstitutionsItem(PathSubstitution pathSubstitutionsItem) {
    if (this.pathSubstitutions == null) {
      this.pathSubstitutions = new ArrayList<>();
    }
    this.pathSubstitutions.add(pathSubstitutionsItem);
    return this;
  }

  /**
   * Get pathSubstitutions
   * @return pathSubstitutions
   */
  @javax.annotation.Nullable
  public List<PathSubstitution> getPathSubstitutions() {
    return pathSubstitutions;
  }

  public void setPathSubstitutions(@javax.annotation.Nullable List<PathSubstitution> pathSubstitutions) {
    this.pathSubstitutions = pathSubstitutions;
  }


  public ServerConfiguration enableSlowResponseWarning(@javax.annotation.Nullable Boolean enableSlowResponseWarning) {
    this.enableSlowResponseWarning = enableSlowResponseWarning;
    return this;
  }

  /**
   * Gets or sets a value indicating whether slow server responses should be logged as a warning.
   * @return enableSlowResponseWarning
   */
  @javax.annotation.Nullable
  public Boolean getEnableSlowResponseWarning() {
    return enableSlowResponseWarning;
  }

  public void setEnableSlowResponseWarning(@javax.annotation.Nullable Boolean enableSlowResponseWarning) {
    this.enableSlowResponseWarning = enableSlowResponseWarning;
  }


  public ServerConfiguration slowResponseThresholdMs(@javax.annotation.Nullable Long slowResponseThresholdMs) {
    this.slowResponseThresholdMs = slowResponseThresholdMs;
    return this;
  }

  /**
   * Gets or sets the threshold for the slow response time warning in ms.
   * @return slowResponseThresholdMs
   */
  @javax.annotation.Nullable
  public Long getSlowResponseThresholdMs() {
    return slowResponseThresholdMs;
  }

  public void setSlowResponseThresholdMs(@javax.annotation.Nullable Long slowResponseThresholdMs) {
    this.slowResponseThresholdMs = slowResponseThresholdMs;
  }


  public ServerConfiguration corsHosts(@javax.annotation.Nullable List<String> corsHosts) {
    this.corsHosts = corsHosts;
    return this;
  }

  public ServerConfiguration addCorsHostsItem(String corsHostsItem) {
    if (this.corsHosts == null) {
      this.corsHosts = new ArrayList<>();
    }
    this.corsHosts.add(corsHostsItem);
    return this;
  }

  /**
   * Gets or sets the cors hosts.
   * @return corsHosts
   */
  @javax.annotation.Nullable
  public List<String> getCorsHosts() {
    return corsHosts;
  }

  public void setCorsHosts(@javax.annotation.Nullable List<String> corsHosts) {
    this.corsHosts = corsHosts;
  }


  public ServerConfiguration activityLogRetentionDays(@javax.annotation.Nullable Integer activityLogRetentionDays) {
    this.activityLogRetentionDays = activityLogRetentionDays;
    return this;
  }

  /**
   * Gets or sets the number of days we should retain activity logs.
   * @return activityLogRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getActivityLogRetentionDays() {
    return activityLogRetentionDays;
  }

  public void setActivityLogRetentionDays(@javax.annotation.Nullable Integer activityLogRetentionDays) {
    this.activityLogRetentionDays = activityLogRetentionDays;
  }


  public ServerConfiguration libraryScanFanoutConcurrency(@javax.annotation.Nullable Integer libraryScanFanoutConcurrency) {
    this.libraryScanFanoutConcurrency = libraryScanFanoutConcurrency;
    return this;
  }

  /**
   * Gets or sets the how the library scan fans out.
   * @return libraryScanFanoutConcurrency
   */
  @javax.annotation.Nullable
  public Integer getLibraryScanFanoutConcurrency() {
    return libraryScanFanoutConcurrency;
  }

  public void setLibraryScanFanoutConcurrency(@javax.annotation.Nullable Integer libraryScanFanoutConcurrency) {
    this.libraryScanFanoutConcurrency = libraryScanFanoutConcurrency;
  }


  public ServerConfiguration libraryMetadataRefreshConcurrency(@javax.annotation.Nullable Integer libraryMetadataRefreshConcurrency) {
    this.libraryMetadataRefreshConcurrency = libraryMetadataRefreshConcurrency;
    return this;
  }

  /**
   * Gets or sets the how many metadata refreshes can run concurrently.
   * @return libraryMetadataRefreshConcurrency
   */
  @javax.annotation.Nullable
  public Integer getLibraryMetadataRefreshConcurrency() {
    return libraryMetadataRefreshConcurrency;
  }

  public void setLibraryMetadataRefreshConcurrency(@javax.annotation.Nullable Integer libraryMetadataRefreshConcurrency) {
    this.libraryMetadataRefreshConcurrency = libraryMetadataRefreshConcurrency;
  }


  public ServerConfiguration removeOldPlugins(@javax.annotation.Nullable Boolean removeOldPlugins) {
    this.removeOldPlugins = removeOldPlugins;
    return this;
  }

  /**
   * Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.
   * @return removeOldPlugins
   */
  @javax.annotation.Nullable
  public Boolean getRemoveOldPlugins() {
    return removeOldPlugins;
  }

  public void setRemoveOldPlugins(@javax.annotation.Nullable Boolean removeOldPlugins) {
    this.removeOldPlugins = removeOldPlugins;
  }


  public ServerConfiguration allowClientLogUpload(@javax.annotation.Nullable Boolean allowClientLogUpload) {
    this.allowClientLogUpload = allowClientLogUpload;
    return this;
  }

  /**
   * Gets or sets a value indicating whether clients should be allowed to upload logs.
   * @return allowClientLogUpload
   */
  @javax.annotation.Nullable
  public Boolean getAllowClientLogUpload() {
    return allowClientLogUpload;
  }

  public void setAllowClientLogUpload(@javax.annotation.Nullable Boolean allowClientLogUpload) {
    this.allowClientLogUpload = allowClientLogUpload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerConfiguration serverConfiguration = (ServerConfiguration) o;
    return Objects.equals(this.logFileRetentionDays, serverConfiguration.logFileRetentionDays) &&
        Objects.equals(this.isStartupWizardCompleted, serverConfiguration.isStartupWizardCompleted) &&
        Objects.equals(this.cachePath, serverConfiguration.cachePath) &&
        Objects.equals(this.previousVersion, serverConfiguration.previousVersion) &&
        Objects.equals(this.previousVersionStr, serverConfiguration.previousVersionStr) &&
        Objects.equals(this.enableMetrics, serverConfiguration.enableMetrics) &&
        Objects.equals(this.enableNormalizedItemByNameIds, serverConfiguration.enableNormalizedItemByNameIds) &&
        Objects.equals(this.isPortAuthorized, serverConfiguration.isPortAuthorized) &&
        Objects.equals(this.quickConnectAvailable, serverConfiguration.quickConnectAvailable) &&
        Objects.equals(this.enableCaseSensitiveItemIds, serverConfiguration.enableCaseSensitiveItemIds) &&
        Objects.equals(this.disableLiveTvChannelUserDataName, serverConfiguration.disableLiveTvChannelUserDataName) &&
        Objects.equals(this.metadataPath, serverConfiguration.metadataPath) &&
        Objects.equals(this.metadataNetworkPath, serverConfiguration.metadataNetworkPath) &&
        Objects.equals(this.preferredMetadataLanguage, serverConfiguration.preferredMetadataLanguage) &&
        Objects.equals(this.metadataCountryCode, serverConfiguration.metadataCountryCode) &&
        Objects.equals(this.sortReplaceCharacters, serverConfiguration.sortReplaceCharacters) &&
        Objects.equals(this.sortRemoveCharacters, serverConfiguration.sortRemoveCharacters) &&
        Objects.equals(this.sortRemoveWords, serverConfiguration.sortRemoveWords) &&
        Objects.equals(this.minResumePct, serverConfiguration.minResumePct) &&
        Objects.equals(this.maxResumePct, serverConfiguration.maxResumePct) &&
        Objects.equals(this.minResumeDurationSeconds, serverConfiguration.minResumeDurationSeconds) &&
        Objects.equals(this.minAudiobookResume, serverConfiguration.minAudiobookResume) &&
        Objects.equals(this.maxAudiobookResume, serverConfiguration.maxAudiobookResume) &&
        Objects.equals(this.libraryMonitorDelay, serverConfiguration.libraryMonitorDelay) &&
        Objects.equals(this.imageSavingConvention, serverConfiguration.imageSavingConvention) &&
        Objects.equals(this.metadataOptions, serverConfiguration.metadataOptions) &&
        Objects.equals(this.skipDeserializationForBasicTypes, serverConfiguration.skipDeserializationForBasicTypes) &&
        Objects.equals(this.serverName, serverConfiguration.serverName) &&
        Objects.equals(this.uiCulture, serverConfiguration.uiCulture) &&
        Objects.equals(this.saveMetadataHidden, serverConfiguration.saveMetadataHidden) &&
        Objects.equals(this.contentTypes, serverConfiguration.contentTypes) &&
        Objects.equals(this.remoteClientBitrateLimit, serverConfiguration.remoteClientBitrateLimit) &&
        Objects.equals(this.enableFolderView, serverConfiguration.enableFolderView) &&
        Objects.equals(this.enableGroupingIntoCollections, serverConfiguration.enableGroupingIntoCollections) &&
        Objects.equals(this.displaySpecialsWithinSeasons, serverConfiguration.displaySpecialsWithinSeasons) &&
        Objects.equals(this.codecsUsed, serverConfiguration.codecsUsed) &&
        Objects.equals(this.pluginRepositories, serverConfiguration.pluginRepositories) &&
        Objects.equals(this.enableExternalContentInSuggestions, serverConfiguration.enableExternalContentInSuggestions) &&
        Objects.equals(this.imageExtractionTimeoutMs, serverConfiguration.imageExtractionTimeoutMs) &&
        Objects.equals(this.pathSubstitutions, serverConfiguration.pathSubstitutions) &&
        Objects.equals(this.enableSlowResponseWarning, serverConfiguration.enableSlowResponseWarning) &&
        Objects.equals(this.slowResponseThresholdMs, serverConfiguration.slowResponseThresholdMs) &&
        Objects.equals(this.corsHosts, serverConfiguration.corsHosts) &&
        Objects.equals(this.activityLogRetentionDays, serverConfiguration.activityLogRetentionDays) &&
        Objects.equals(this.libraryScanFanoutConcurrency, serverConfiguration.libraryScanFanoutConcurrency) &&
        Objects.equals(this.libraryMetadataRefreshConcurrency, serverConfiguration.libraryMetadataRefreshConcurrency) &&
        Objects.equals(this.removeOldPlugins, serverConfiguration.removeOldPlugins) &&
        Objects.equals(this.allowClientLogUpload, serverConfiguration.allowClientLogUpload);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(logFileRetentionDays, isStartupWizardCompleted, cachePath, previousVersion, previousVersionStr, enableMetrics, enableNormalizedItemByNameIds, isPortAuthorized, quickConnectAvailable, enableCaseSensitiveItemIds, disableLiveTvChannelUserDataName, metadataPath, metadataNetworkPath, preferredMetadataLanguage, metadataCountryCode, sortReplaceCharacters, sortRemoveCharacters, sortRemoveWords, minResumePct, maxResumePct, minResumeDurationSeconds, minAudiobookResume, maxAudiobookResume, libraryMonitorDelay, imageSavingConvention, metadataOptions, skipDeserializationForBasicTypes, serverName, uiCulture, saveMetadataHidden, contentTypes, remoteClientBitrateLimit, enableFolderView, enableGroupingIntoCollections, displaySpecialsWithinSeasons, codecsUsed, pluginRepositories, enableExternalContentInSuggestions, imageExtractionTimeoutMs, pathSubstitutions, enableSlowResponseWarning, slowResponseThresholdMs, corsHosts, activityLogRetentionDays, libraryScanFanoutConcurrency, libraryMetadataRefreshConcurrency, removeOldPlugins, allowClientLogUpload);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerConfiguration {\n");
    sb.append("    logFileRetentionDays: ").append(toIndentedString(logFileRetentionDays)).append("\n");
    sb.append("    isStartupWizardCompleted: ").append(toIndentedString(isStartupWizardCompleted)).append("\n");
    sb.append("    cachePath: ").append(toIndentedString(cachePath)).append("\n");
    sb.append("    previousVersion: ").append(toIndentedString(previousVersion)).append("\n");
    sb.append("    previousVersionStr: ").append(toIndentedString(previousVersionStr)).append("\n");
    sb.append("    enableMetrics: ").append(toIndentedString(enableMetrics)).append("\n");
    sb.append("    enableNormalizedItemByNameIds: ").append(toIndentedString(enableNormalizedItemByNameIds)).append("\n");
    sb.append("    isPortAuthorized: ").append(toIndentedString(isPortAuthorized)).append("\n");
    sb.append("    quickConnectAvailable: ").append(toIndentedString(quickConnectAvailable)).append("\n");
    sb.append("    enableCaseSensitiveItemIds: ").append(toIndentedString(enableCaseSensitiveItemIds)).append("\n");
    sb.append("    disableLiveTvChannelUserDataName: ").append(toIndentedString(disableLiveTvChannelUserDataName)).append("\n");
    sb.append("    metadataPath: ").append(toIndentedString(metadataPath)).append("\n");
    sb.append("    metadataNetworkPath: ").append(toIndentedString(metadataNetworkPath)).append("\n");
    sb.append("    preferredMetadataLanguage: ").append(toIndentedString(preferredMetadataLanguage)).append("\n");
    sb.append("    metadataCountryCode: ").append(toIndentedString(metadataCountryCode)).append("\n");
    sb.append("    sortReplaceCharacters: ").append(toIndentedString(sortReplaceCharacters)).append("\n");
    sb.append("    sortRemoveCharacters: ").append(toIndentedString(sortRemoveCharacters)).append("\n");
    sb.append("    sortRemoveWords: ").append(toIndentedString(sortRemoveWords)).append("\n");
    sb.append("    minResumePct: ").append(toIndentedString(minResumePct)).append("\n");
    sb.append("    maxResumePct: ").append(toIndentedString(maxResumePct)).append("\n");
    sb.append("    minResumeDurationSeconds: ").append(toIndentedString(minResumeDurationSeconds)).append("\n");
    sb.append("    minAudiobookResume: ").append(toIndentedString(minAudiobookResume)).append("\n");
    sb.append("    maxAudiobookResume: ").append(toIndentedString(maxAudiobookResume)).append("\n");
    sb.append("    libraryMonitorDelay: ").append(toIndentedString(libraryMonitorDelay)).append("\n");
    sb.append("    imageSavingConvention: ").append(toIndentedString(imageSavingConvention)).append("\n");
    sb.append("    metadataOptions: ").append(toIndentedString(metadataOptions)).append("\n");
    sb.append("    skipDeserializationForBasicTypes: ").append(toIndentedString(skipDeserializationForBasicTypes)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    uiCulture: ").append(toIndentedString(uiCulture)).append("\n");
    sb.append("    saveMetadataHidden: ").append(toIndentedString(saveMetadataHidden)).append("\n");
    sb.append("    contentTypes: ").append(toIndentedString(contentTypes)).append("\n");
    sb.append("    remoteClientBitrateLimit: ").append(toIndentedString(remoteClientBitrateLimit)).append("\n");
    sb.append("    enableFolderView: ").append(toIndentedString(enableFolderView)).append("\n");
    sb.append("    enableGroupingIntoCollections: ").append(toIndentedString(enableGroupingIntoCollections)).append("\n");
    sb.append("    displaySpecialsWithinSeasons: ").append(toIndentedString(displaySpecialsWithinSeasons)).append("\n");
    sb.append("    codecsUsed: ").append(toIndentedString(codecsUsed)).append("\n");
    sb.append("    pluginRepositories: ").append(toIndentedString(pluginRepositories)).append("\n");
    sb.append("    enableExternalContentInSuggestions: ").append(toIndentedString(enableExternalContentInSuggestions)).append("\n");
    sb.append("    imageExtractionTimeoutMs: ").append(toIndentedString(imageExtractionTimeoutMs)).append("\n");
    sb.append("    pathSubstitutions: ").append(toIndentedString(pathSubstitutions)).append("\n");
    sb.append("    enableSlowResponseWarning: ").append(toIndentedString(enableSlowResponseWarning)).append("\n");
    sb.append("    slowResponseThresholdMs: ").append(toIndentedString(slowResponseThresholdMs)).append("\n");
    sb.append("    corsHosts: ").append(toIndentedString(corsHosts)).append("\n");
    sb.append("    activityLogRetentionDays: ").append(toIndentedString(activityLogRetentionDays)).append("\n");
    sb.append("    libraryScanFanoutConcurrency: ").append(toIndentedString(libraryScanFanoutConcurrency)).append("\n");
    sb.append("    libraryMetadataRefreshConcurrency: ").append(toIndentedString(libraryMetadataRefreshConcurrency)).append("\n");
    sb.append("    removeOldPlugins: ").append(toIndentedString(removeOldPlugins)).append("\n");
    sb.append("    allowClientLogUpload: ").append(toIndentedString(allowClientLogUpload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LogFileRetentionDays");
    openapiFields.add("IsStartupWizardCompleted");
    openapiFields.add("CachePath");
    openapiFields.add("PreviousVersion");
    openapiFields.add("PreviousVersionStr");
    openapiFields.add("EnableMetrics");
    openapiFields.add("EnableNormalizedItemByNameIds");
    openapiFields.add("IsPortAuthorized");
    openapiFields.add("QuickConnectAvailable");
    openapiFields.add("EnableCaseSensitiveItemIds");
    openapiFields.add("DisableLiveTvChannelUserDataName");
    openapiFields.add("MetadataPath");
    openapiFields.add("MetadataNetworkPath");
    openapiFields.add("PreferredMetadataLanguage");
    openapiFields.add("MetadataCountryCode");
    openapiFields.add("SortReplaceCharacters");
    openapiFields.add("SortRemoveCharacters");
    openapiFields.add("SortRemoveWords");
    openapiFields.add("MinResumePct");
    openapiFields.add("MaxResumePct");
    openapiFields.add("MinResumeDurationSeconds");
    openapiFields.add("MinAudiobookResume");
    openapiFields.add("MaxAudiobookResume");
    openapiFields.add("LibraryMonitorDelay");
    openapiFields.add("ImageSavingConvention");
    openapiFields.add("MetadataOptions");
    openapiFields.add("SkipDeserializationForBasicTypes");
    openapiFields.add("ServerName");
    openapiFields.add("UICulture");
    openapiFields.add("SaveMetadataHidden");
    openapiFields.add("ContentTypes");
    openapiFields.add("RemoteClientBitrateLimit");
    openapiFields.add("EnableFolderView");
    openapiFields.add("EnableGroupingIntoCollections");
    openapiFields.add("DisplaySpecialsWithinSeasons");
    openapiFields.add("CodecsUsed");
    openapiFields.add("PluginRepositories");
    openapiFields.add("EnableExternalContentInSuggestions");
    openapiFields.add("ImageExtractionTimeoutMs");
    openapiFields.add("PathSubstitutions");
    openapiFields.add("EnableSlowResponseWarning");
    openapiFields.add("SlowResponseThresholdMs");
    openapiFields.add("CorsHosts");
    openapiFields.add("ActivityLogRetentionDays");
    openapiFields.add("LibraryScanFanoutConcurrency");
    openapiFields.add("LibraryMetadataRefreshConcurrency");
    openapiFields.add("RemoveOldPlugins");
    openapiFields.add("AllowClientLogUpload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerConfiguration is not found in the empty JSON string", ServerConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CachePath") != null && !jsonObj.get("CachePath").isJsonNull()) && !jsonObj.get("CachePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CachePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CachePath").toString()));
      }
      if ((jsonObj.get("PreviousVersion") != null && !jsonObj.get("PreviousVersion").isJsonNull()) && !jsonObj.get("PreviousVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreviousVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreviousVersion").toString()));
      }
      if ((jsonObj.get("PreviousVersionStr") != null && !jsonObj.get("PreviousVersionStr").isJsonNull()) && !jsonObj.get("PreviousVersionStr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreviousVersionStr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreviousVersionStr").toString()));
      }
      if ((jsonObj.get("MetadataPath") != null && !jsonObj.get("MetadataPath").isJsonNull()) && !jsonObj.get("MetadataPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataPath").toString()));
      }
      if ((jsonObj.get("MetadataNetworkPath") != null && !jsonObj.get("MetadataNetworkPath").isJsonNull()) && !jsonObj.get("MetadataNetworkPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataNetworkPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataNetworkPath").toString()));
      }
      if ((jsonObj.get("PreferredMetadataLanguage") != null && !jsonObj.get("PreferredMetadataLanguage").isJsonNull()) && !jsonObj.get("PreferredMetadataLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreferredMetadataLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreferredMetadataLanguage").toString()));
      }
      if ((jsonObj.get("MetadataCountryCode") != null && !jsonObj.get("MetadataCountryCode").isJsonNull()) && !jsonObj.get("MetadataCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataCountryCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SortReplaceCharacters") != null && !jsonObj.get("SortReplaceCharacters").isJsonNull() && !jsonObj.get("SortReplaceCharacters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortReplaceCharacters` to be an array in the JSON string but got `%s`", jsonObj.get("SortReplaceCharacters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SortRemoveCharacters") != null && !jsonObj.get("SortRemoveCharacters").isJsonNull() && !jsonObj.get("SortRemoveCharacters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortRemoveCharacters` to be an array in the JSON string but got `%s`", jsonObj.get("SortRemoveCharacters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SortRemoveWords") != null && !jsonObj.get("SortRemoveWords").isJsonNull() && !jsonObj.get("SortRemoveWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortRemoveWords` to be an array in the JSON string but got `%s`", jsonObj.get("SortRemoveWords").toString()));
      }
      // validate the optional field `ImageSavingConvention`
      if (jsonObj.get("ImageSavingConvention") != null && !jsonObj.get("ImageSavingConvention").isJsonNull()) {
        ImageSavingConvention.validateJsonElement(jsonObj.get("ImageSavingConvention"));
      }
      if (jsonObj.get("MetadataOptions") != null && !jsonObj.get("MetadataOptions").isJsonNull()) {
        JsonArray jsonArraymetadataOptions = jsonObj.getAsJsonArray("MetadataOptions");
        if (jsonArraymetadataOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MetadataOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MetadataOptions` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataOptions").toString()));
          }

          // validate the optional field `MetadataOptions` (array)
          for (int i = 0; i < jsonArraymetadataOptions.size(); i++) {
            MetadataOptions.validateJsonElement(jsonArraymetadataOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) && !jsonObj.get("ServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerName").toString()));
      }
      if ((jsonObj.get("UICulture") != null && !jsonObj.get("UICulture").isJsonNull()) && !jsonObj.get("UICulture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UICulture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UICulture").toString()));
      }
      if (jsonObj.get("ContentTypes") != null && !jsonObj.get("ContentTypes").isJsonNull()) {
        JsonArray jsonArraycontentTypes = jsonObj.getAsJsonArray("ContentTypes");
        if (jsonArraycontentTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContentTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("ContentTypes").toString()));
          }

          // validate the optional field `ContentTypes` (array)
          for (int i = 0; i < jsonArraycontentTypes.size(); i++) {
            NameValuePair.validateJsonElement(jsonArraycontentTypes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CodecsUsed") != null && !jsonObj.get("CodecsUsed").isJsonNull() && !jsonObj.get("CodecsUsed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodecsUsed` to be an array in the JSON string but got `%s`", jsonObj.get("CodecsUsed").toString()));
      }
      if (jsonObj.get("PluginRepositories") != null && !jsonObj.get("PluginRepositories").isJsonNull()) {
        JsonArray jsonArraypluginRepositories = jsonObj.getAsJsonArray("PluginRepositories");
        if (jsonArraypluginRepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PluginRepositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PluginRepositories` to be an array in the JSON string but got `%s`", jsonObj.get("PluginRepositories").toString()));
          }

          // validate the optional field `PluginRepositories` (array)
          for (int i = 0; i < jsonArraypluginRepositories.size(); i++) {
            RepositoryInfo.validateJsonElement(jsonArraypluginRepositories.get(i));
          };
        }
      }
      if (jsonObj.get("PathSubstitutions") != null && !jsonObj.get("PathSubstitutions").isJsonNull()) {
        JsonArray jsonArraypathSubstitutions = jsonObj.getAsJsonArray("PathSubstitutions");
        if (jsonArraypathSubstitutions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PathSubstitutions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PathSubstitutions` to be an array in the JSON string but got `%s`", jsonObj.get("PathSubstitutions").toString()));
          }

          // validate the optional field `PathSubstitutions` (array)
          for (int i = 0; i < jsonArraypathSubstitutions.size(); i++) {
            PathSubstitution.validateJsonElement(jsonArraypathSubstitutions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CorsHosts") != null && !jsonObj.get("CorsHosts").isJsonNull() && !jsonObj.get("CorsHosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CorsHosts` to be an array in the JSON string but got `%s`", jsonObj.get("CorsHosts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerConfiguration>() {
           @Override
           public void write(JsonWriter out, ServerConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerConfiguration
   * @throws IOException if the JSON string is invalid with respect to ServerConfiguration
   */
  public static ServerConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerConfiguration.class);
  }

  /**
   * Convert an instance of ServerConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

