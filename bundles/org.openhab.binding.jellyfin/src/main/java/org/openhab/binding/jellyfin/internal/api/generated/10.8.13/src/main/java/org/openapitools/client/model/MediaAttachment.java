/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class MediaAttachment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class MediaAttachment {
  public static final String SERIALIZED_NAME_CODEC = "Codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  @javax.annotation.Nullable
  private String codec;

  public static final String SERIALIZED_NAME_CODEC_TAG = "CodecTag";
  @SerializedName(SERIALIZED_NAME_CODEC_TAG)
  @javax.annotation.Nullable
  private String codecTag;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_INDEX = "Index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nullable
  private Integer index;

  public static final String SERIALIZED_NAME_FILE_NAME = "FileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  @javax.annotation.Nullable
  private String fileName;

  public static final String SERIALIZED_NAME_MIME_TYPE = "MimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  @javax.annotation.Nullable
  private String mimeType;

  public static final String SERIALIZED_NAME_DELIVERY_URL = "DeliveryUrl";
  @SerializedName(SERIALIZED_NAME_DELIVERY_URL)
  @javax.annotation.Nullable
  private String deliveryUrl;

  public MediaAttachment() {
  }

  public MediaAttachment codec(@javax.annotation.Nullable String codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Gets or sets the codec.
   * @return codec
   */
  @javax.annotation.Nullable
  public String getCodec() {
    return codec;
  }

  public void setCodec(@javax.annotation.Nullable String codec) {
    this.codec = codec;
  }


  public MediaAttachment codecTag(@javax.annotation.Nullable String codecTag) {
    this.codecTag = codecTag;
    return this;
  }

  /**
   * Gets or sets the codec tag.
   * @return codecTag
   */
  @javax.annotation.Nullable
  public String getCodecTag() {
    return codecTag;
  }

  public void setCodecTag(@javax.annotation.Nullable String codecTag) {
    this.codecTag = codecTag;
  }


  public MediaAttachment comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Gets or sets the comment.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public MediaAttachment index(@javax.annotation.Nullable Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Gets or sets the index.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nullable Integer index) {
    this.index = index;
  }


  public MediaAttachment fileName(@javax.annotation.Nullable String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Gets or sets the filename.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(@javax.annotation.Nullable String fileName) {
    this.fileName = fileName;
  }


  public MediaAttachment mimeType(@javax.annotation.Nullable String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Gets or sets the MIME type.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(@javax.annotation.Nullable String mimeType) {
    this.mimeType = mimeType;
  }


  public MediaAttachment deliveryUrl(@javax.annotation.Nullable String deliveryUrl) {
    this.deliveryUrl = deliveryUrl;
    return this;
  }

  /**
   * Gets or sets the delivery URL.
   * @return deliveryUrl
   */
  @javax.annotation.Nullable
  public String getDeliveryUrl() {
    return deliveryUrl;
  }

  public void setDeliveryUrl(@javax.annotation.Nullable String deliveryUrl) {
    this.deliveryUrl = deliveryUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaAttachment mediaAttachment = (MediaAttachment) o;
    return Objects.equals(this.codec, mediaAttachment.codec) &&
        Objects.equals(this.codecTag, mediaAttachment.codecTag) &&
        Objects.equals(this.comment, mediaAttachment.comment) &&
        Objects.equals(this.index, mediaAttachment.index) &&
        Objects.equals(this.fileName, mediaAttachment.fileName) &&
        Objects.equals(this.mimeType, mediaAttachment.mimeType) &&
        Objects.equals(this.deliveryUrl, mediaAttachment.deliveryUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(codec, codecTag, comment, index, fileName, mimeType, deliveryUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaAttachment {\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    codecTag: ").append(toIndentedString(codecTag)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    deliveryUrl: ").append(toIndentedString(deliveryUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Codec");
    openapiFields.add("CodecTag");
    openapiFields.add("Comment");
    openapiFields.add("Index");
    openapiFields.add("FileName");
    openapiFields.add("MimeType");
    openapiFields.add("DeliveryUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaAttachment is not found in the empty JSON string", MediaAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Codec") != null && !jsonObj.get("Codec").isJsonNull()) && !jsonObj.get("Codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Codec").toString()));
      }
      if ((jsonObj.get("CodecTag") != null && !jsonObj.get("CodecTag").isJsonNull()) && !jsonObj.get("CodecTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodecTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodecTag").toString()));
      }
      if ((jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) && !jsonObj.get("Comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comment").toString()));
      }
      if ((jsonObj.get("FileName") != null && !jsonObj.get("FileName").isJsonNull()) && !jsonObj.get("FileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileName").toString()));
      }
      if ((jsonObj.get("MimeType") != null && !jsonObj.get("MimeType").isJsonNull()) && !jsonObj.get("MimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MimeType").toString()));
      }
      if ((jsonObj.get("DeliveryUrl") != null && !jsonObj.get("DeliveryUrl").isJsonNull()) && !jsonObj.get("DeliveryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaAttachment>() {
           @Override
           public void write(JsonWriter out, MediaAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaAttachment
   * @throws IOException if the JSON string is invalid with respect to MediaAttachment
   */
  public static MediaAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaAttachment.class);
  }

  /**
   * Convert an instance of MediaAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

