/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class MediaAttachment.
 */
@JsonPropertyOrder({
  MediaAttachment.JSON_PROPERTY_CODEC,
  MediaAttachment.JSON_PROPERTY_CODEC_TAG,
  MediaAttachment.JSON_PROPERTY_COMMENT,
  MediaAttachment.JSON_PROPERTY_INDEX,
  MediaAttachment.JSON_PROPERTY_FILE_NAME,
  MediaAttachment.JSON_PROPERTY_MIME_TYPE,
  MediaAttachment.JSON_PROPERTY_DELIVERY_URL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class MediaAttachment {
  public static final String JSON_PROPERTY_CODEC = "Codec";
  private JsonNullable<String> codec = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CODEC_TAG = "CodecTag";
  private JsonNullable<String> codecTag = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_COMMENT = "Comment";
  private JsonNullable<String> comment = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INDEX = "Index";
  @javax.annotation.Nullable
  private Integer index;

  public static final String JSON_PROPERTY_FILE_NAME = "FileName";
  private JsonNullable<String> fileName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MIME_TYPE = "MimeType";
  private JsonNullable<String> mimeType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DELIVERY_URL = "DeliveryUrl";
  private JsonNullable<String> deliveryUrl = JsonNullable.<String>undefined();

  public MediaAttachment() { 
  }

  public MediaAttachment codec(@javax.annotation.Nullable String codec) {
    this.codec = JsonNullable.<String>of(codec);
    return this;
  }

  /**
   * Gets or sets the codec.
   * @return codec
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getCodec() {
        return codec.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCodec_JsonNullable() {
    return codec;
  }
  
  @JsonProperty(JSON_PROPERTY_CODEC)
  public void setCodec_JsonNullable(JsonNullable<String> codec) {
    this.codec = codec;
  }

  public void setCodec(@javax.annotation.Nullable String codec) {
    this.codec = JsonNullable.<String>of(codec);
  }


  public MediaAttachment codecTag(@javax.annotation.Nullable String codecTag) {
    this.codecTag = JsonNullable.<String>of(codecTag);
    return this;
  }

  /**
   * Gets or sets the codec tag.
   * @return codecTag
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getCodecTag() {
        return codecTag.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CODEC_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCodecTag_JsonNullable() {
    return codecTag;
  }
  
  @JsonProperty(JSON_PROPERTY_CODEC_TAG)
  public void setCodecTag_JsonNullable(JsonNullable<String> codecTag) {
    this.codecTag = codecTag;
  }

  public void setCodecTag(@javax.annotation.Nullable String codecTag) {
    this.codecTag = JsonNullable.<String>of(codecTag);
  }


  public MediaAttachment comment(@javax.annotation.Nullable String comment) {
    this.comment = JsonNullable.<String>of(comment);
    return this;
  }

  /**
   * Gets or sets the comment.
   * @return comment
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getComment() {
        return comment.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getComment_JsonNullable() {
    return comment;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMENT)
  public void setComment_JsonNullable(JsonNullable<String> comment) {
    this.comment = comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = JsonNullable.<String>of(comment);
  }


  public MediaAttachment index(@javax.annotation.Nullable Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Gets or sets the index.
   * @return index
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndex(@javax.annotation.Nullable Integer index) {
    this.index = index;
  }


  public MediaAttachment fileName(@javax.annotation.Nullable String fileName) {
    this.fileName = JsonNullable.<String>of(fileName);
    return this;
  }

  /**
   * Gets or sets the filename.
   * @return fileName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getFileName() {
        return fileName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFileName_JsonNullable() {
    return fileName;
  }
  
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  public void setFileName_JsonNullable(JsonNullable<String> fileName) {
    this.fileName = fileName;
  }

  public void setFileName(@javax.annotation.Nullable String fileName) {
    this.fileName = JsonNullable.<String>of(fileName);
  }


  public MediaAttachment mimeType(@javax.annotation.Nullable String mimeType) {
    this.mimeType = JsonNullable.<String>of(mimeType);
    return this;
  }

  /**
   * Gets or sets the MIME type.
   * @return mimeType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getMimeType() {
        return mimeType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMimeType_JsonNullable() {
    return mimeType;
  }
  
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  public void setMimeType_JsonNullable(JsonNullable<String> mimeType) {
    this.mimeType = mimeType;
  }

  public void setMimeType(@javax.annotation.Nullable String mimeType) {
    this.mimeType = JsonNullable.<String>of(mimeType);
  }


  public MediaAttachment deliveryUrl(@javax.annotation.Nullable String deliveryUrl) {
    this.deliveryUrl = JsonNullable.<String>of(deliveryUrl);
    return this;
  }

  /**
   * Gets or sets the delivery URL.
   * @return deliveryUrl
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDeliveryUrl() {
        return deliveryUrl.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DELIVERY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDeliveryUrl_JsonNullable() {
    return deliveryUrl;
  }
  
  @JsonProperty(JSON_PROPERTY_DELIVERY_URL)
  public void setDeliveryUrl_JsonNullable(JsonNullable<String> deliveryUrl) {
    this.deliveryUrl = deliveryUrl;
  }

  public void setDeliveryUrl(@javax.annotation.Nullable String deliveryUrl) {
    this.deliveryUrl = JsonNullable.<String>of(deliveryUrl);
  }


  /**
   * Return true if this MediaAttachment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaAttachment mediaAttachment = (MediaAttachment) o;
    return equalsNullable(this.codec, mediaAttachment.codec) &&
        equalsNullable(this.codecTag, mediaAttachment.codecTag) &&
        equalsNullable(this.comment, mediaAttachment.comment) &&
        Objects.equals(this.index, mediaAttachment.index) &&
        equalsNullable(this.fileName, mediaAttachment.fileName) &&
        equalsNullable(this.mimeType, mediaAttachment.mimeType) &&
        equalsNullable(this.deliveryUrl, mediaAttachment.deliveryUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(codec), hashCodeNullable(codecTag), hashCodeNullable(comment), index, hashCodeNullable(fileName), hashCodeNullable(mimeType), hashCodeNullable(deliveryUrl));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaAttachment {\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    codecTag: ").append(toIndentedString(codecTag)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    deliveryUrl: ").append(toIndentedString(deliveryUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Codec` to the URL query string
    if (getCodec() != null) {
      joiner.add(String.format("%sCodec%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCodec()))));
    }

    // add `CodecTag` to the URL query string
    if (getCodecTag() != null) {
      joiner.add(String.format("%sCodecTag%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCodecTag()))));
    }

    // add `Comment` to the URL query string
    if (getComment() != null) {
      joiner.add(String.format("%sComment%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getComment()))));
    }

    // add `Index` to the URL query string
    if (getIndex() != null) {
      joiner.add(String.format("%sIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIndex()))));
    }

    // add `FileName` to the URL query string
    if (getFileName() != null) {
      joiner.add(String.format("%sFileName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFileName()))));
    }

    // add `MimeType` to the URL query string
    if (getMimeType() != null) {
      joiner.add(String.format("%sMimeType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMimeType()))));
    }

    // add `DeliveryUrl` to the URL query string
    if (getDeliveryUrl() != null) {
      joiner.add(String.format("%sDeliveryUrl%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeliveryUrl()))));
    }

    return joiner.toString();
  }
}

