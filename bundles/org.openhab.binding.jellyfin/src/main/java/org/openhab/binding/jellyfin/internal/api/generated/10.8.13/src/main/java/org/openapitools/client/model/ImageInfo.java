/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.ImageType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Class ImageInfo.
 */
@JsonPropertyOrder({
  ImageInfo.JSON_PROPERTY_IMAGE_TYPE,
  ImageInfo.JSON_PROPERTY_IMAGE_INDEX,
  ImageInfo.JSON_PROPERTY_IMAGE_TAG,
  ImageInfo.JSON_PROPERTY_PATH,
  ImageInfo.JSON_PROPERTY_BLUR_HASH,
  ImageInfo.JSON_PROPERTY_HEIGHT,
  ImageInfo.JSON_PROPERTY_WIDTH,
  ImageInfo.JSON_PROPERTY_SIZE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ImageInfo {
  public static final String JSON_PROPERTY_IMAGE_TYPE = "ImageType";
  @javax.annotation.Nullable
  private ImageType imageType;

  public static final String JSON_PROPERTY_IMAGE_INDEX = "ImageIndex";
  private JsonNullable<Integer> imageIndex = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_IMAGE_TAG = "ImageTag";
  private JsonNullable<String> imageTag = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PATH = "Path";
  private JsonNullable<String> path = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BLUR_HASH = "BlurHash";
  private JsonNullable<String> blurHash = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_HEIGHT = "Height";
  private JsonNullable<Integer> height = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_WIDTH = "Width";
  private JsonNullable<Integer> width = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SIZE = "Size";
  @javax.annotation.Nullable
  private Long size;

  public ImageInfo() { 
  }

  public ImageInfo imageType(@javax.annotation.Nullable ImageType imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * Gets or sets the type of the image.
   * @return imageType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ImageType getImageType() {
    return imageType;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageType(@javax.annotation.Nullable ImageType imageType) {
    this.imageType = imageType;
  }


  public ImageInfo imageIndex(@javax.annotation.Nullable Integer imageIndex) {
    this.imageIndex = JsonNullable.<Integer>of(imageIndex);
    return this;
  }

  /**
   * Gets or sets the index of the image.
   * @return imageIndex
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getImageIndex() {
        return imageIndex.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMAGE_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getImageIndex_JsonNullable() {
    return imageIndex;
  }
  
  @JsonProperty(JSON_PROPERTY_IMAGE_INDEX)
  public void setImageIndex_JsonNullable(JsonNullable<Integer> imageIndex) {
    this.imageIndex = imageIndex;
  }

  public void setImageIndex(@javax.annotation.Nullable Integer imageIndex) {
    this.imageIndex = JsonNullable.<Integer>of(imageIndex);
  }


  public ImageInfo imageTag(@javax.annotation.Nullable String imageTag) {
    this.imageTag = JsonNullable.<String>of(imageTag);
    return this;
  }

  /**
   * Gets or sets the image tag.
   * @return imageTag
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getImageTag() {
        return imageTag.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IMAGE_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getImageTag_JsonNullable() {
    return imageTag;
  }
  
  @JsonProperty(JSON_PROPERTY_IMAGE_TAG)
  public void setImageTag_JsonNullable(JsonNullable<String> imageTag) {
    this.imageTag = imageTag;
  }

  public void setImageTag(@javax.annotation.Nullable String imageTag) {
    this.imageTag = JsonNullable.<String>of(imageTag);
  }


  public ImageInfo path(@javax.annotation.Nullable String path) {
    this.path = JsonNullable.<String>of(path);
    return this;
  }

  /**
   * Gets or sets the path.
   * @return path
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getPath() {
        return path.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPath_JsonNullable() {
    return path;
  }
  
  @JsonProperty(JSON_PROPERTY_PATH)
  public void setPath_JsonNullable(JsonNullable<String> path) {
    this.path = path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = JsonNullable.<String>of(path);
  }


  public ImageInfo blurHash(@javax.annotation.Nullable String blurHash) {
    this.blurHash = JsonNullable.<String>of(blurHash);
    return this;
  }

  /**
   * Gets or sets the blurhash.
   * @return blurHash
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getBlurHash() {
        return blurHash.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BLUR_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBlurHash_JsonNullable() {
    return blurHash;
  }
  
  @JsonProperty(JSON_PROPERTY_BLUR_HASH)
  public void setBlurHash_JsonNullable(JsonNullable<String> blurHash) {
    this.blurHash = blurHash;
  }

  public void setBlurHash(@javax.annotation.Nullable String blurHash) {
    this.blurHash = JsonNullable.<String>of(blurHash);
  }


  public ImageInfo height(@javax.annotation.Nullable Integer height) {
    this.height = JsonNullable.<Integer>of(height);
    return this;
  }

  /**
   * Gets or sets the height.
   * @return height
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getHeight() {
        return height.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getHeight_JsonNullable() {
    return height;
  }
  
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  public void setHeight_JsonNullable(JsonNullable<Integer> height) {
    this.height = height;
  }

  public void setHeight(@javax.annotation.Nullable Integer height) {
    this.height = JsonNullable.<Integer>of(height);
  }


  public ImageInfo width(@javax.annotation.Nullable Integer width) {
    this.width = JsonNullable.<Integer>of(width);
    return this;
  }

  /**
   * Gets or sets the width.
   * @return width
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getWidth() {
        return width.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getWidth_JsonNullable() {
    return width;
  }
  
  @JsonProperty(JSON_PROPERTY_WIDTH)
  public void setWidth_JsonNullable(JsonNullable<Integer> width) {
    this.width = width;
  }

  public void setWidth(@javax.annotation.Nullable Integer width) {
    this.width = JsonNullable.<Integer>of(width);
  }


  public ImageInfo size(@javax.annotation.Nullable Long size) {
    this.size = size;
    return this;
  }

  /**
   * Gets or sets the size.
   * @return size
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(@javax.annotation.Nullable Long size) {
    this.size = size;
  }


  /**
   * Return true if this ImageInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageInfo imageInfo = (ImageInfo) o;
    return Objects.equals(this.imageType, imageInfo.imageType) &&
        equalsNullable(this.imageIndex, imageInfo.imageIndex) &&
        equalsNullable(this.imageTag, imageInfo.imageTag) &&
        equalsNullable(this.path, imageInfo.path) &&
        equalsNullable(this.blurHash, imageInfo.blurHash) &&
        equalsNullable(this.height, imageInfo.height) &&
        equalsNullable(this.width, imageInfo.width) &&
        Objects.equals(this.size, imageInfo.size);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageType, hashCodeNullable(imageIndex), hashCodeNullable(imageTag), hashCodeNullable(path), hashCodeNullable(blurHash), hashCodeNullable(height), hashCodeNullable(width), size);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageInfo {\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    imageIndex: ").append(toIndentedString(imageIndex)).append("\n");
    sb.append("    imageTag: ").append(toIndentedString(imageTag)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    blurHash: ").append(toIndentedString(blurHash)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ImageType` to the URL query string
    if (getImageType() != null) {
      joiner.add(String.format("%sImageType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getImageType()))));
    }

    // add `ImageIndex` to the URL query string
    if (getImageIndex() != null) {
      joiner.add(String.format("%sImageIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getImageIndex()))));
    }

    // add `ImageTag` to the URL query string
    if (getImageTag() != null) {
      joiner.add(String.format("%sImageTag%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getImageTag()))));
    }

    // add `Path` to the URL query string
    if (getPath() != null) {
      joiner.add(String.format("%sPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPath()))));
    }

    // add `BlurHash` to the URL query string
    if (getBlurHash() != null) {
      joiner.add(String.format("%sBlurHash%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBlurHash()))));
    }

    // add `Height` to the URL query string
    if (getHeight() != null) {
      joiner.add(String.format("%sHeight%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHeight()))));
    }

    // add `Width` to the URL query string
    if (getWidth() != null) {
      joiner.add(String.format("%sWidth%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getWidth()))));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(String.format("%sSize%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSize()))));
    }

    return joiner.toString();
  }
}

