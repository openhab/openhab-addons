/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TaskCompletionStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class TaskExecutionInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class TaskResult {
  public static final String SERIALIZED_NAME_START_TIME_UTC = "StartTimeUtc";
  @SerializedName(SERIALIZED_NAME_START_TIME_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime startTimeUtc;

  public static final String SERIALIZED_NAME_END_TIME_UTC = "EndTimeUtc";
  @SerializedName(SERIALIZED_NAME_END_TIME_UTC)
  @javax.annotation.Nullable
  private OffsetDateTime endTimeUtc;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private TaskCompletionStatus status;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  @javax.annotation.Nullable
  private String errorMessage;

  public static final String SERIALIZED_NAME_LONG_ERROR_MESSAGE = "LongErrorMessage";
  @SerializedName(SERIALIZED_NAME_LONG_ERROR_MESSAGE)
  @javax.annotation.Nullable
  private String longErrorMessage;

  public TaskResult() {
  }

  public TaskResult startTimeUtc(@javax.annotation.Nullable OffsetDateTime startTimeUtc) {
    this.startTimeUtc = startTimeUtc;
    return this;
  }

  /**
   * Gets or sets the start time UTC.
   * @return startTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTimeUtc() {
    return startTimeUtc;
  }

  public void setStartTimeUtc(@javax.annotation.Nullable OffsetDateTime startTimeUtc) {
    this.startTimeUtc = startTimeUtc;
  }


  public TaskResult endTimeUtc(@javax.annotation.Nullable OffsetDateTime endTimeUtc) {
    this.endTimeUtc = endTimeUtc;
    return this;
  }

  /**
   * Gets or sets the end time UTC.
   * @return endTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTimeUtc() {
    return endTimeUtc;
  }

  public void setEndTimeUtc(@javax.annotation.Nullable OffsetDateTime endTimeUtc) {
    this.endTimeUtc = endTimeUtc;
  }


  public TaskResult status(@javax.annotation.Nullable TaskCompletionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets the status.
   * @return status
   */
  @javax.annotation.Nullable
  public TaskCompletionStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable TaskCompletionStatus status) {
    this.status = status;
  }


  public TaskResult name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TaskResult key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * Gets or sets the key.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public TaskResult id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TaskResult errorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Gets or sets the error message.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public TaskResult longErrorMessage(@javax.annotation.Nullable String longErrorMessage) {
    this.longErrorMessage = longErrorMessage;
    return this;
  }

  /**
   * Gets or sets the long error message.
   * @return longErrorMessage
   */
  @javax.annotation.Nullable
  public String getLongErrorMessage() {
    return longErrorMessage;
  }

  public void setLongErrorMessage(@javax.annotation.Nullable String longErrorMessage) {
    this.longErrorMessage = longErrorMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskResult taskResult = (TaskResult) o;
    return Objects.equals(this.startTimeUtc, taskResult.startTimeUtc) &&
        Objects.equals(this.endTimeUtc, taskResult.endTimeUtc) &&
        Objects.equals(this.status, taskResult.status) &&
        Objects.equals(this.name, taskResult.name) &&
        Objects.equals(this.key, taskResult.key) &&
        Objects.equals(this.id, taskResult.id) &&
        Objects.equals(this.errorMessage, taskResult.errorMessage) &&
        Objects.equals(this.longErrorMessage, taskResult.longErrorMessage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTimeUtc, endTimeUtc, status, name, key, id, errorMessage, longErrorMessage);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskResult {\n");
    sb.append("    startTimeUtc: ").append(toIndentedString(startTimeUtc)).append("\n");
    sb.append("    endTimeUtc: ").append(toIndentedString(endTimeUtc)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    longErrorMessage: ").append(toIndentedString(longErrorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartTimeUtc");
    openapiFields.add("EndTimeUtc");
    openapiFields.add("Status");
    openapiFields.add("Name");
    openapiFields.add("Key");
    openapiFields.add("Id");
    openapiFields.add("ErrorMessage");
    openapiFields.add("LongErrorMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskResult is not found in the empty JSON string", TaskResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        TaskCompletionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) && !jsonObj.get("ErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorMessage").toString()));
      }
      if ((jsonObj.get("LongErrorMessage") != null && !jsonObj.get("LongErrorMessage").isJsonNull()) && !jsonObj.get("LongErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LongErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LongErrorMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskResult>() {
           @Override
           public void write(JsonWriter out, TaskResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskResult
   * @throws IOException if the JSON string is invalid with respect to TaskResult
   */
  public static TaskResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskResult.class);
  }

  /**
   * Convert an instance of TaskResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

