/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.BaseItemKind;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.SortOrder;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:31.285278872Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class GenresApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public GenresApi() {
    this(Configuration.getDefaultApiClient());
  }

  public GenresApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets a genre, by name.
   * 
   * @param genreName The genre name. (required)
   * @param userId The user id. (optional)
   * @return BaseItemDto
   * @throws ApiException if fails to make API call
   */
  public BaseItemDto getGenre(String genreName, UUID userId) throws ApiException {
    ApiResponse<BaseItemDto> localVarResponse = getGenreWithHttpInfo(genreName, userId);
    return localVarResponse.getData();
  }

  /**
   * Gets a genre, by name.
   * 
   * @param genreName The genre name. (required)
   * @param userId The user id. (optional)
   * @return ApiResponse&lt;BaseItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDto> getGenreWithHttpInfo(String genreName, UUID userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGenreRequestBuilder(genreName, userId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGenre", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDto>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDto>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDto>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGenreRequestBuilder(String genreName, UUID userId) throws ApiException {
    // verify the required parameter 'genreName' is set
    if (genreName == null) {
      throw new ApiException(400, "Missing the required parameter 'genreName' when calling getGenre");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Genres/{genreName}"
        .replace("{genreName}", ApiClient.urlEncode(genreName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets all genres from a given item, folder, or the entire library.
   * 
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param searchTerm The search term. (optional)
   * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param excludeItemTypes Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited. (optional)
   * @param isFavorite Optional filter by items that are marked as favorite, or not. (optional)
   * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param userId User id. (optional)
   * @param nameStartsWithOrGreater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
   * @param nameStartsWith Optional filter by items whose name is sorted equally than a given input string. (optional)
   * @param nameLessThan Optional filter by items whose name is equally or lesser than a given input string. (optional)
   * @param sortBy Optional. Specify one or more sort orders, comma delimited. (optional)
   * @param sortOrder Sort Order - Ascending,Descending. (optional)
   * @param enableImages Optional, include image information in output. (optional, default to true)
   * @param enableTotalRecordCount Optional. Include total record count. (optional, default to true)
   * @return BaseItemDtoQueryResult
   * @throws ApiException if fails to make API call
   */
  public BaseItemDtoQueryResult getGenres(Integer startIndex, Integer limit, String searchTerm, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<BaseItemKind> includeItemTypes, Boolean isFavorite, Integer imageTypeLimit, List<ImageType> enableImageTypes, UUID userId, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<String> sortBy, List<SortOrder> sortOrder, Boolean enableImages, Boolean enableTotalRecordCount) throws ApiException {
    ApiResponse<BaseItemDtoQueryResult> localVarResponse = getGenresWithHttpInfo(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, sortBy, sortOrder, enableImages, enableTotalRecordCount);
    return localVarResponse.getData();
  }

  /**
   * Gets all genres from a given item, folder, or the entire library.
   * 
   * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
   * @param limit Optional. The maximum number of records to return. (optional)
   * @param searchTerm The search term. (optional)
   * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
   * @param fields Optional. Specify additional fields of information to return in the output. (optional)
   * @param excludeItemTypes Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited. (optional)
   * @param includeItemTypes Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited. (optional)
   * @param isFavorite Optional filter by items that are marked as favorite, or not. (optional)
   * @param imageTypeLimit Optional, the max number of images to return, per image type. (optional)
   * @param enableImageTypes Optional. The image types to include in the output. (optional)
   * @param userId User id. (optional)
   * @param nameStartsWithOrGreater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
   * @param nameStartsWith Optional filter by items whose name is sorted equally than a given input string. (optional)
   * @param nameLessThan Optional filter by items whose name is equally or lesser than a given input string. (optional)
   * @param sortBy Optional. Specify one or more sort orders, comma delimited. (optional)
   * @param sortOrder Sort Order - Ascending,Descending. (optional)
   * @param enableImages Optional, include image information in output. (optional, default to true)
   * @param enableTotalRecordCount Optional. Include total record count. (optional, default to true)
   * @return ApiResponse&lt;BaseItemDtoQueryResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BaseItemDtoQueryResult> getGenresWithHttpInfo(Integer startIndex, Integer limit, String searchTerm, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<BaseItemKind> includeItemTypes, Boolean isFavorite, Integer imageTypeLimit, List<ImageType> enableImageTypes, UUID userId, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<String> sortBy, List<SortOrder> sortOrder, Boolean enableImages, Boolean enableTotalRecordCount) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGenresRequestBuilder(startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, isFavorite, imageTypeLimit, enableImageTypes, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, sortBy, sortOrder, enableImages, enableTotalRecordCount);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGenres", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BaseItemDtoQueryResult>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BaseItemDtoQueryResult>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BaseItemDtoQueryResult>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGenresRequestBuilder(Integer startIndex, Integer limit, String searchTerm, UUID parentId, List<ItemFields> fields, List<BaseItemKind> excludeItemTypes, List<BaseItemKind> includeItemTypes, Boolean isFavorite, Integer imageTypeLimit, List<ImageType> enableImageTypes, UUID userId, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, List<String> sortBy, List<SortOrder> sortOrder, Boolean enableImages, Boolean enableTotalRecordCount) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Genres";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "startIndex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startIndex", startIndex));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "excludeItemTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "excludeItemTypes", excludeItemTypes));
    localVarQueryParameterBaseName = "includeItemTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "includeItemTypes", includeItemTypes));
    localVarQueryParameterBaseName = "isFavorite";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("isFavorite", isFavorite));
    localVarQueryParameterBaseName = "imageTypeLimit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("imageTypeLimit", imageTypeLimit));
    localVarQueryParameterBaseName = "enableImageTypes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "enableImageTypes", enableImageTypes));
    localVarQueryParameterBaseName = "userId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("userId", userId));
    localVarQueryParameterBaseName = "nameStartsWithOrGreater";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nameStartsWithOrGreater", nameStartsWithOrGreater));
    localVarQueryParameterBaseName = "nameStartsWith";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nameStartsWith", nameStartsWith));
    localVarQueryParameterBaseName = "nameLessThan";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nameLessThan", nameLessThan));
    localVarQueryParameterBaseName = "sortBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sortBy", sortBy));
    localVarQueryParameterBaseName = "sortOrder";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sortOrder", sortOrder));
    localVarQueryParameterBaseName = "enableImages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableImages", enableImages));
    localVarQueryParameterBaseName = "enableTotalRecordCount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enableTotalRecordCount", enableTotalRecordCount));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json, application/json; profile=CamelCase, application/json; profile=PascalCase");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
