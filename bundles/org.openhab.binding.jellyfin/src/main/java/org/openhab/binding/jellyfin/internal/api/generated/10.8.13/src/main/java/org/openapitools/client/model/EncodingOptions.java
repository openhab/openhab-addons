/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * EncodingOptions
 */
@JsonPropertyOrder({
  EncodingOptions.JSON_PROPERTY_ENCODING_THREAD_COUNT,
  EncodingOptions.JSON_PROPERTY_TRANSCODING_TEMP_PATH,
  EncodingOptions.JSON_PROPERTY_FALLBACK_FONT_PATH,
  EncodingOptions.JSON_PROPERTY_ENABLE_FALLBACK_FONT,
  EncodingOptions.JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST,
  EncodingOptions.JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE,
  EncodingOptions.JSON_PROPERTY_ENABLE_THROTTLING,
  EncodingOptions.JSON_PROPERTY_THROTTLE_DELAY_SECONDS,
  EncodingOptions.JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE,
  EncodingOptions.JSON_PROPERTY_ENCODER_APP_PATH,
  EncodingOptions.JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY,
  EncodingOptions.JSON_PROPERTY_VAAPI_DEVICE,
  EncodingOptions.JSON_PROPERTY_ENABLE_TONEMAPPING,
  EncodingOptions.JSON_PROPERTY_ENABLE_VPP_TONEMAPPING,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_ALGORITHM,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_MODE,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_RANGE,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_DESAT,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_PEAK,
  EncodingOptions.JSON_PROPERTY_TONEMAPPING_PARAM,
  EncodingOptions.JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS,
  EncodingOptions.JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST,
  EncodingOptions.JSON_PROPERTY_H264_CRF,
  EncodingOptions.JSON_PROPERTY_H265_CRF,
  EncodingOptions.JSON_PROPERTY_ENCODER_PRESET,
  EncodingOptions.JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE,
  EncodingOptions.JSON_PROPERTY_DEINTERLACE_METHOD,
  EncodingOptions.JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC,
  EncodingOptions.JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9,
  EncodingOptions.JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER,
  EncodingOptions.JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER,
  EncodingOptions.JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER,
  EncodingOptions.JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER,
  EncodingOptions.JSON_PROPERTY_ENABLE_HARDWARE_ENCODING,
  EncodingOptions.JSON_PROPERTY_ALLOW_HEVC_ENCODING,
  EncodingOptions.JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION,
  EncodingOptions.JSON_PROPERTY_HARDWARE_DECODING_CODECS,
  EncodingOptions.JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:40.061690683Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class EncodingOptions {
  public static final String JSON_PROPERTY_ENCODING_THREAD_COUNT = "EncodingThreadCount";
  @javax.annotation.Nullable
  private Integer encodingThreadCount;

  public static final String JSON_PROPERTY_TRANSCODING_TEMP_PATH = "TranscodingTempPath";
  private JsonNullable<String> transcodingTempPath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FALLBACK_FONT_PATH = "FallbackFontPath";
  private JsonNullable<String> fallbackFontPath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENABLE_FALLBACK_FONT = "EnableFallbackFont";
  @javax.annotation.Nullable
  private Boolean enableFallbackFont;

  public static final String JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST = "DownMixAudioBoost";
  @javax.annotation.Nullable
  private Double downMixAudioBoost;

  public static final String JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE = "MaxMuxingQueueSize";
  @javax.annotation.Nullable
  private Integer maxMuxingQueueSize;

  public static final String JSON_PROPERTY_ENABLE_THROTTLING = "EnableThrottling";
  @javax.annotation.Nullable
  private Boolean enableThrottling;

  public static final String JSON_PROPERTY_THROTTLE_DELAY_SECONDS = "ThrottleDelaySeconds";
  @javax.annotation.Nullable
  private Integer throttleDelaySeconds;

  public static final String JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE = "HardwareAccelerationType";
  private JsonNullable<String> hardwareAccelerationType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENCODER_APP_PATH = "EncoderAppPath";
  private JsonNullable<String> encoderAppPath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY = "EncoderAppPathDisplay";
  private JsonNullable<String> encoderAppPathDisplay = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VAAPI_DEVICE = "VaapiDevice";
  private JsonNullable<String> vaapiDevice = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENABLE_TONEMAPPING = "EnableTonemapping";
  @javax.annotation.Nullable
  private Boolean enableTonemapping;

  public static final String JSON_PROPERTY_ENABLE_VPP_TONEMAPPING = "EnableVppTonemapping";
  @javax.annotation.Nullable
  private Boolean enableVppTonemapping;

  public static final String JSON_PROPERTY_TONEMAPPING_ALGORITHM = "TonemappingAlgorithm";
  private JsonNullable<String> tonemappingAlgorithm = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TONEMAPPING_MODE = "TonemappingMode";
  private JsonNullable<String> tonemappingMode = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TONEMAPPING_RANGE = "TonemappingRange";
  private JsonNullable<String> tonemappingRange = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TONEMAPPING_DESAT = "TonemappingDesat";
  @javax.annotation.Nullable
  private Double tonemappingDesat;

  public static final String JSON_PROPERTY_TONEMAPPING_PEAK = "TonemappingPeak";
  @javax.annotation.Nullable
  private Double tonemappingPeak;

  public static final String JSON_PROPERTY_TONEMAPPING_PARAM = "TonemappingParam";
  @javax.annotation.Nullable
  private Double tonemappingParam;

  public static final String JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS = "VppTonemappingBrightness";
  @javax.annotation.Nullable
  private Double vppTonemappingBrightness;

  public static final String JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST = "VppTonemappingContrast";
  @javax.annotation.Nullable
  private Double vppTonemappingContrast;

  public static final String JSON_PROPERTY_H264_CRF = "H264Crf";
  @javax.annotation.Nullable
  private Integer h264Crf;

  public static final String JSON_PROPERTY_H265_CRF = "H265Crf";
  @javax.annotation.Nullable
  private Integer h265Crf;

  public static final String JSON_PROPERTY_ENCODER_PRESET = "EncoderPreset";
  private JsonNullable<String> encoderPreset = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE = "DeinterlaceDoubleRate";
  @javax.annotation.Nullable
  private Boolean deinterlaceDoubleRate;

  public static final String JSON_PROPERTY_DEINTERLACE_METHOD = "DeinterlaceMethod";
  private JsonNullable<String> deinterlaceMethod = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC = "EnableDecodingColorDepth10Hevc";
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth10Hevc;

  public static final String JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9 = "EnableDecodingColorDepth10Vp9";
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth10Vp9;

  public static final String JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER = "EnableEnhancedNvdecDecoder";
  @javax.annotation.Nullable
  private Boolean enableEnhancedNvdecDecoder;

  public static final String JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER = "PreferSystemNativeHwDecoder";
  @javax.annotation.Nullable
  private Boolean preferSystemNativeHwDecoder;

  public static final String JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER = "EnableIntelLowPowerH264HwEncoder";
  @javax.annotation.Nullable
  private Boolean enableIntelLowPowerH264HwEncoder;

  public static final String JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER = "EnableIntelLowPowerHevcHwEncoder";
  @javax.annotation.Nullable
  private Boolean enableIntelLowPowerHevcHwEncoder;

  public static final String JSON_PROPERTY_ENABLE_HARDWARE_ENCODING = "EnableHardwareEncoding";
  @javax.annotation.Nullable
  private Boolean enableHardwareEncoding;

  public static final String JSON_PROPERTY_ALLOW_HEVC_ENCODING = "AllowHevcEncoding";
  @javax.annotation.Nullable
  private Boolean allowHevcEncoding;

  public static final String JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION = "EnableSubtitleExtraction";
  @javax.annotation.Nullable
  private Boolean enableSubtitleExtraction;

  public static final String JSON_PROPERTY_HARDWARE_DECODING_CODECS = "HardwareDecodingCodecs";
  private JsonNullable<List<String>> hardwareDecodingCodecs = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS = "AllowOnDemandMetadataBasedKeyframeExtractionForExtensions";
  private JsonNullable<List<String>> allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>undefined();

  public EncodingOptions() { 
  }

  public EncodingOptions encodingThreadCount(@javax.annotation.Nullable Integer encodingThreadCount) {
    this.encodingThreadCount = encodingThreadCount;
    return this;
  }

  /**
   * Get encodingThreadCount
   * @return encodingThreadCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCODING_THREAD_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getEncodingThreadCount() {
    return encodingThreadCount;
  }


  @JsonProperty(JSON_PROPERTY_ENCODING_THREAD_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncodingThreadCount(@javax.annotation.Nullable Integer encodingThreadCount) {
    this.encodingThreadCount = encodingThreadCount;
  }


  public EncodingOptions transcodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = JsonNullable.<String>of(transcodingTempPath);
    return this;
  }

  /**
   * Get transcodingTempPath
   * @return transcodingTempPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTranscodingTempPath() {
        return transcodingTempPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSCODING_TEMP_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTranscodingTempPath_JsonNullable() {
    return transcodingTempPath;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSCODING_TEMP_PATH)
  public void setTranscodingTempPath_JsonNullable(JsonNullable<String> transcodingTempPath) {
    this.transcodingTempPath = transcodingTempPath;
  }

  public void setTranscodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = JsonNullable.<String>of(transcodingTempPath);
  }


  public EncodingOptions fallbackFontPath(@javax.annotation.Nullable String fallbackFontPath) {
    this.fallbackFontPath = JsonNullable.<String>of(fallbackFontPath);
    return this;
  }

  /**
   * Get fallbackFontPath
   * @return fallbackFontPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getFallbackFontPath() {
        return fallbackFontPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FALLBACK_FONT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFallbackFontPath_JsonNullable() {
    return fallbackFontPath;
  }
  
  @JsonProperty(JSON_PROPERTY_FALLBACK_FONT_PATH)
  public void setFallbackFontPath_JsonNullable(JsonNullable<String> fallbackFontPath) {
    this.fallbackFontPath = fallbackFontPath;
  }

  public void setFallbackFontPath(@javax.annotation.Nullable String fallbackFontPath) {
    this.fallbackFontPath = JsonNullable.<String>of(fallbackFontPath);
  }


  public EncodingOptions enableFallbackFont(@javax.annotation.Nullable Boolean enableFallbackFont) {
    this.enableFallbackFont = enableFallbackFont;
    return this;
  }

  /**
   * Get enableFallbackFont
   * @return enableFallbackFont
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_FALLBACK_FONT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableFallbackFont() {
    return enableFallbackFont;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_FALLBACK_FONT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableFallbackFont(@javax.annotation.Nullable Boolean enableFallbackFont) {
    this.enableFallbackFont = enableFallbackFont;
  }


  public EncodingOptions downMixAudioBoost(@javax.annotation.Nullable Double downMixAudioBoost) {
    this.downMixAudioBoost = downMixAudioBoost;
    return this;
  }

  /**
   * Get downMixAudioBoost
   * @return downMixAudioBoost
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getDownMixAudioBoost() {
    return downMixAudioBoost;
  }


  @JsonProperty(JSON_PROPERTY_DOWN_MIX_AUDIO_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownMixAudioBoost(@javax.annotation.Nullable Double downMixAudioBoost) {
    this.downMixAudioBoost = downMixAudioBoost;
  }


  public EncodingOptions maxMuxingQueueSize(@javax.annotation.Nullable Integer maxMuxingQueueSize) {
    this.maxMuxingQueueSize = maxMuxingQueueSize;
    return this;
  }

  /**
   * Get maxMuxingQueueSize
   * @return maxMuxingQueueSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMaxMuxingQueueSize() {
    return maxMuxingQueueSize;
  }


  @JsonProperty(JSON_PROPERTY_MAX_MUXING_QUEUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxMuxingQueueSize(@javax.annotation.Nullable Integer maxMuxingQueueSize) {
    this.maxMuxingQueueSize = maxMuxingQueueSize;
  }


  public EncodingOptions enableThrottling(@javax.annotation.Nullable Boolean enableThrottling) {
    this.enableThrottling = enableThrottling;
    return this;
  }

  /**
   * Get enableThrottling
   * @return enableThrottling
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_THROTTLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableThrottling() {
    return enableThrottling;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_THROTTLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableThrottling(@javax.annotation.Nullable Boolean enableThrottling) {
    this.enableThrottling = enableThrottling;
  }


  public EncodingOptions throttleDelaySeconds(@javax.annotation.Nullable Integer throttleDelaySeconds) {
    this.throttleDelaySeconds = throttleDelaySeconds;
    return this;
  }

  /**
   * Get throttleDelaySeconds
   * @return throttleDelaySeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THROTTLE_DELAY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getThrottleDelaySeconds() {
    return throttleDelaySeconds;
  }


  @JsonProperty(JSON_PROPERTY_THROTTLE_DELAY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrottleDelaySeconds(@javax.annotation.Nullable Integer throttleDelaySeconds) {
    this.throttleDelaySeconds = throttleDelaySeconds;
  }


  public EncodingOptions hardwareAccelerationType(@javax.annotation.Nullable String hardwareAccelerationType) {
    this.hardwareAccelerationType = JsonNullable.<String>of(hardwareAccelerationType);
    return this;
  }

  /**
   * Get hardwareAccelerationType
   * @return hardwareAccelerationType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getHardwareAccelerationType() {
        return hardwareAccelerationType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getHardwareAccelerationType_JsonNullable() {
    return hardwareAccelerationType;
  }
  
  @JsonProperty(JSON_PROPERTY_HARDWARE_ACCELERATION_TYPE)
  public void setHardwareAccelerationType_JsonNullable(JsonNullable<String> hardwareAccelerationType) {
    this.hardwareAccelerationType = hardwareAccelerationType;
  }

  public void setHardwareAccelerationType(@javax.annotation.Nullable String hardwareAccelerationType) {
    this.hardwareAccelerationType = JsonNullable.<String>of(hardwareAccelerationType);
  }


  public EncodingOptions encoderAppPath(@javax.annotation.Nullable String encoderAppPath) {
    this.encoderAppPath = JsonNullable.<String>of(encoderAppPath);
    return this;
  }

  /**
   * Gets or sets the FFmpeg path as set by the user via the UI.
   * @return encoderAppPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getEncoderAppPath() {
        return encoderAppPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEncoderAppPath_JsonNullable() {
    return encoderAppPath;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH)
  public void setEncoderAppPath_JsonNullable(JsonNullable<String> encoderAppPath) {
    this.encoderAppPath = encoderAppPath;
  }

  public void setEncoderAppPath(@javax.annotation.Nullable String encoderAppPath) {
    this.encoderAppPath = JsonNullable.<String>of(encoderAppPath);
  }


  public EncodingOptions encoderAppPathDisplay(@javax.annotation.Nullable String encoderAppPathDisplay) {
    this.encoderAppPathDisplay = JsonNullable.<String>of(encoderAppPathDisplay);
    return this;
  }

  /**
   * Gets or sets the current FFmpeg path being used by the system and displayed on the transcode page.
   * @return encoderAppPathDisplay
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getEncoderAppPathDisplay() {
        return encoderAppPathDisplay.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEncoderAppPathDisplay_JsonNullable() {
    return encoderAppPathDisplay;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_APP_PATH_DISPLAY)
  public void setEncoderAppPathDisplay_JsonNullable(JsonNullable<String> encoderAppPathDisplay) {
    this.encoderAppPathDisplay = encoderAppPathDisplay;
  }

  public void setEncoderAppPathDisplay(@javax.annotation.Nullable String encoderAppPathDisplay) {
    this.encoderAppPathDisplay = JsonNullable.<String>of(encoderAppPathDisplay);
  }


  public EncodingOptions vaapiDevice(@javax.annotation.Nullable String vaapiDevice) {
    this.vaapiDevice = JsonNullable.<String>of(vaapiDevice);
    return this;
  }

  /**
   * Get vaapiDevice
   * @return vaapiDevice
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getVaapiDevice() {
        return vaapiDevice.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VAAPI_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getVaapiDevice_JsonNullable() {
    return vaapiDevice;
  }
  
  @JsonProperty(JSON_PROPERTY_VAAPI_DEVICE)
  public void setVaapiDevice_JsonNullable(JsonNullable<String> vaapiDevice) {
    this.vaapiDevice = vaapiDevice;
  }

  public void setVaapiDevice(@javax.annotation.Nullable String vaapiDevice) {
    this.vaapiDevice = JsonNullable.<String>of(vaapiDevice);
  }


  public EncodingOptions enableTonemapping(@javax.annotation.Nullable Boolean enableTonemapping) {
    this.enableTonemapping = enableTonemapping;
    return this;
  }

  /**
   * Get enableTonemapping
   * @return enableTonemapping
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableTonemapping() {
    return enableTonemapping;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableTonemapping(@javax.annotation.Nullable Boolean enableTonemapping) {
    this.enableTonemapping = enableTonemapping;
  }


  public EncodingOptions enableVppTonemapping(@javax.annotation.Nullable Boolean enableVppTonemapping) {
    this.enableVppTonemapping = enableVppTonemapping;
    return this;
  }

  /**
   * Get enableVppTonemapping
   * @return enableVppTonemapping
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_VPP_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableVppTonemapping() {
    return enableVppTonemapping;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_VPP_TONEMAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableVppTonemapping(@javax.annotation.Nullable Boolean enableVppTonemapping) {
    this.enableVppTonemapping = enableVppTonemapping;
  }


  public EncodingOptions tonemappingAlgorithm(@javax.annotation.Nullable String tonemappingAlgorithm) {
    this.tonemappingAlgorithm = JsonNullable.<String>of(tonemappingAlgorithm);
    return this;
  }

  /**
   * Get tonemappingAlgorithm
   * @return tonemappingAlgorithm
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTonemappingAlgorithm() {
        return tonemappingAlgorithm.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TONEMAPPING_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTonemappingAlgorithm_JsonNullable() {
    return tonemappingAlgorithm;
  }
  
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_ALGORITHM)
  public void setTonemappingAlgorithm_JsonNullable(JsonNullable<String> tonemappingAlgorithm) {
    this.tonemappingAlgorithm = tonemappingAlgorithm;
  }

  public void setTonemappingAlgorithm(@javax.annotation.Nullable String tonemappingAlgorithm) {
    this.tonemappingAlgorithm = JsonNullable.<String>of(tonemappingAlgorithm);
  }


  public EncodingOptions tonemappingMode(@javax.annotation.Nullable String tonemappingMode) {
    this.tonemappingMode = JsonNullable.<String>of(tonemappingMode);
    return this;
  }

  /**
   * Get tonemappingMode
   * @return tonemappingMode
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTonemappingMode() {
        return tonemappingMode.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TONEMAPPING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTonemappingMode_JsonNullable() {
    return tonemappingMode;
  }
  
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_MODE)
  public void setTonemappingMode_JsonNullable(JsonNullable<String> tonemappingMode) {
    this.tonemappingMode = tonemappingMode;
  }

  public void setTonemappingMode(@javax.annotation.Nullable String tonemappingMode) {
    this.tonemappingMode = JsonNullable.<String>of(tonemappingMode);
  }


  public EncodingOptions tonemappingRange(@javax.annotation.Nullable String tonemappingRange) {
    this.tonemappingRange = JsonNullable.<String>of(tonemappingRange);
    return this;
  }

  /**
   * Get tonemappingRange
   * @return tonemappingRange
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTonemappingRange() {
        return tonemappingRange.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TONEMAPPING_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTonemappingRange_JsonNullable() {
    return tonemappingRange;
  }
  
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_RANGE)
  public void setTonemappingRange_JsonNullable(JsonNullable<String> tonemappingRange) {
    this.tonemappingRange = tonemappingRange;
  }

  public void setTonemappingRange(@javax.annotation.Nullable String tonemappingRange) {
    this.tonemappingRange = JsonNullable.<String>of(tonemappingRange);
  }


  public EncodingOptions tonemappingDesat(@javax.annotation.Nullable Double tonemappingDesat) {
    this.tonemappingDesat = tonemappingDesat;
    return this;
  }

  /**
   * Get tonemappingDesat
   * @return tonemappingDesat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_DESAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getTonemappingDesat() {
    return tonemappingDesat;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_DESAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingDesat(@javax.annotation.Nullable Double tonemappingDesat) {
    this.tonemappingDesat = tonemappingDesat;
  }


  public EncodingOptions tonemappingPeak(@javax.annotation.Nullable Double tonemappingPeak) {
    this.tonemappingPeak = tonemappingPeak;
    return this;
  }

  /**
   * Get tonemappingPeak
   * @return tonemappingPeak
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PEAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getTonemappingPeak() {
    return tonemappingPeak;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PEAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingPeak(@javax.annotation.Nullable Double tonemappingPeak) {
    this.tonemappingPeak = tonemappingPeak;
  }


  public EncodingOptions tonemappingParam(@javax.annotation.Nullable Double tonemappingParam) {
    this.tonemappingParam = tonemappingParam;
    return this;
  }

  /**
   * Get tonemappingParam
   * @return tonemappingParam
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PARAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getTonemappingParam() {
    return tonemappingParam;
  }


  @JsonProperty(JSON_PROPERTY_TONEMAPPING_PARAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTonemappingParam(@javax.annotation.Nullable Double tonemappingParam) {
    this.tonemappingParam = tonemappingParam;
  }


  public EncodingOptions vppTonemappingBrightness(@javax.annotation.Nullable Double vppTonemappingBrightness) {
    this.vppTonemappingBrightness = vppTonemappingBrightness;
    return this;
  }

  /**
   * Get vppTonemappingBrightness
   * @return vppTonemappingBrightness
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getVppTonemappingBrightness() {
    return vppTonemappingBrightness;
  }


  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_BRIGHTNESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVppTonemappingBrightness(@javax.annotation.Nullable Double vppTonemappingBrightness) {
    this.vppTonemappingBrightness = vppTonemappingBrightness;
  }


  public EncodingOptions vppTonemappingContrast(@javax.annotation.Nullable Double vppTonemappingContrast) {
    this.vppTonemappingContrast = vppTonemappingContrast;
    return this;
  }

  /**
   * Get vppTonemappingContrast
   * @return vppTonemappingContrast
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getVppTonemappingContrast() {
    return vppTonemappingContrast;
  }


  @JsonProperty(JSON_PROPERTY_VPP_TONEMAPPING_CONTRAST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVppTonemappingContrast(@javax.annotation.Nullable Double vppTonemappingContrast) {
    this.vppTonemappingContrast = vppTonemappingContrast;
  }


  public EncodingOptions h264Crf(@javax.annotation.Nullable Integer h264Crf) {
    this.h264Crf = h264Crf;
    return this;
  }

  /**
   * Get h264Crf
   * @return h264Crf
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_H264_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getH264Crf() {
    return h264Crf;
  }


  @JsonProperty(JSON_PROPERTY_H264_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setH264Crf(@javax.annotation.Nullable Integer h264Crf) {
    this.h264Crf = h264Crf;
  }


  public EncodingOptions h265Crf(@javax.annotation.Nullable Integer h265Crf) {
    this.h265Crf = h265Crf;
    return this;
  }

  /**
   * Get h265Crf
   * @return h265Crf
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_H265_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getH265Crf() {
    return h265Crf;
  }


  @JsonProperty(JSON_PROPERTY_H265_CRF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setH265Crf(@javax.annotation.Nullable Integer h265Crf) {
    this.h265Crf = h265Crf;
  }


  public EncodingOptions encoderPreset(@javax.annotation.Nullable String encoderPreset) {
    this.encoderPreset = JsonNullable.<String>of(encoderPreset);
    return this;
  }

  /**
   * Get encoderPreset
   * @return encoderPreset
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getEncoderPreset() {
        return encoderPreset.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENCODER_PRESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getEncoderPreset_JsonNullable() {
    return encoderPreset;
  }
  
  @JsonProperty(JSON_PROPERTY_ENCODER_PRESET)
  public void setEncoderPreset_JsonNullable(JsonNullable<String> encoderPreset) {
    this.encoderPreset = encoderPreset;
  }

  public void setEncoderPreset(@javax.annotation.Nullable String encoderPreset) {
    this.encoderPreset = JsonNullable.<String>of(encoderPreset);
  }


  public EncodingOptions deinterlaceDoubleRate(@javax.annotation.Nullable Boolean deinterlaceDoubleRate) {
    this.deinterlaceDoubleRate = deinterlaceDoubleRate;
    return this;
  }

  /**
   * Get deinterlaceDoubleRate
   * @return deinterlaceDoubleRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDeinterlaceDoubleRate() {
    return deinterlaceDoubleRate;
  }


  @JsonProperty(JSON_PROPERTY_DEINTERLACE_DOUBLE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeinterlaceDoubleRate(@javax.annotation.Nullable Boolean deinterlaceDoubleRate) {
    this.deinterlaceDoubleRate = deinterlaceDoubleRate;
  }


  public EncodingOptions deinterlaceMethod(@javax.annotation.Nullable String deinterlaceMethod) {
    this.deinterlaceMethod = JsonNullable.<String>of(deinterlaceMethod);
    return this;
  }

  /**
   * Get deinterlaceMethod
   * @return deinterlaceMethod
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDeinterlaceMethod() {
        return deinterlaceMethod.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEINTERLACE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDeinterlaceMethod_JsonNullable() {
    return deinterlaceMethod;
  }
  
  @JsonProperty(JSON_PROPERTY_DEINTERLACE_METHOD)
  public void setDeinterlaceMethod_JsonNullable(JsonNullable<String> deinterlaceMethod) {
    this.deinterlaceMethod = deinterlaceMethod;
  }

  public void setDeinterlaceMethod(@javax.annotation.Nullable String deinterlaceMethod) {
    this.deinterlaceMethod = JsonNullable.<String>of(deinterlaceMethod);
  }


  public EncodingOptions enableDecodingColorDepth10Hevc(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Hevc) {
    this.enableDecodingColorDepth10Hevc = enableDecodingColorDepth10Hevc;
    return this;
  }

  /**
   * Get enableDecodingColorDepth10Hevc
   * @return enableDecodingColorDepth10Hevc
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableDecodingColorDepth10Hevc() {
    return enableDecodingColorDepth10Hevc;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_HEVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDecodingColorDepth10Hevc(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Hevc) {
    this.enableDecodingColorDepth10Hevc = enableDecodingColorDepth10Hevc;
  }


  public EncodingOptions enableDecodingColorDepth10Vp9(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Vp9) {
    this.enableDecodingColorDepth10Vp9 = enableDecodingColorDepth10Vp9;
    return this;
  }

  /**
   * Get enableDecodingColorDepth10Vp9
   * @return enableDecodingColorDepth10Vp9
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableDecodingColorDepth10Vp9() {
    return enableDecodingColorDepth10Vp9;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DECODING_COLOR_DEPTH10_VP9)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDecodingColorDepth10Vp9(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Vp9) {
    this.enableDecodingColorDepth10Vp9 = enableDecodingColorDepth10Vp9;
  }


  public EncodingOptions enableEnhancedNvdecDecoder(@javax.annotation.Nullable Boolean enableEnhancedNvdecDecoder) {
    this.enableEnhancedNvdecDecoder = enableEnhancedNvdecDecoder;
    return this;
  }

  /**
   * Get enableEnhancedNvdecDecoder
   * @return enableEnhancedNvdecDecoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableEnhancedNvdecDecoder() {
    return enableEnhancedNvdecDecoder;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_ENHANCED_NVDEC_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableEnhancedNvdecDecoder(@javax.annotation.Nullable Boolean enableEnhancedNvdecDecoder) {
    this.enableEnhancedNvdecDecoder = enableEnhancedNvdecDecoder;
  }


  public EncodingOptions preferSystemNativeHwDecoder(@javax.annotation.Nullable Boolean preferSystemNativeHwDecoder) {
    this.preferSystemNativeHwDecoder = preferSystemNativeHwDecoder;
    return this;
  }

  /**
   * Get preferSystemNativeHwDecoder
   * @return preferSystemNativeHwDecoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPreferSystemNativeHwDecoder() {
    return preferSystemNativeHwDecoder;
  }


  @JsonProperty(JSON_PROPERTY_PREFER_SYSTEM_NATIVE_HW_DECODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreferSystemNativeHwDecoder(@javax.annotation.Nullable Boolean preferSystemNativeHwDecoder) {
    this.preferSystemNativeHwDecoder = preferSystemNativeHwDecoder;
  }


  public EncodingOptions enableIntelLowPowerH264HwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerH264HwEncoder) {
    this.enableIntelLowPowerH264HwEncoder = enableIntelLowPowerH264HwEncoder;
    return this;
  }

  /**
   * Get enableIntelLowPowerH264HwEncoder
   * @return enableIntelLowPowerH264HwEncoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIntelLowPowerH264HwEncoder() {
    return enableIntelLowPowerH264HwEncoder;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIntelLowPowerH264HwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerH264HwEncoder) {
    this.enableIntelLowPowerH264HwEncoder = enableIntelLowPowerH264HwEncoder;
  }


  public EncodingOptions enableIntelLowPowerHevcHwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerHevcHwEncoder) {
    this.enableIntelLowPowerHevcHwEncoder = enableIntelLowPowerHevcHwEncoder;
    return this;
  }

  /**
   * Get enableIntelLowPowerHevcHwEncoder
   * @return enableIntelLowPowerHevcHwEncoder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIntelLowPowerHevcHwEncoder() {
    return enableIntelLowPowerHevcHwEncoder;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIntelLowPowerHevcHwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerHevcHwEncoder) {
    this.enableIntelLowPowerHevcHwEncoder = enableIntelLowPowerHevcHwEncoder;
  }


  public EncodingOptions enableHardwareEncoding(@javax.annotation.Nullable Boolean enableHardwareEncoding) {
    this.enableHardwareEncoding = enableHardwareEncoding;
    return this;
  }

  /**
   * Get enableHardwareEncoding
   * @return enableHardwareEncoding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_HARDWARE_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableHardwareEncoding() {
    return enableHardwareEncoding;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_HARDWARE_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableHardwareEncoding(@javax.annotation.Nullable Boolean enableHardwareEncoding) {
    this.enableHardwareEncoding = enableHardwareEncoding;
  }


  public EncodingOptions allowHevcEncoding(@javax.annotation.Nullable Boolean allowHevcEncoding) {
    this.allowHevcEncoding = allowHevcEncoding;
    return this;
  }

  /**
   * Get allowHevcEncoding
   * @return allowHevcEncoding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_HEVC_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAllowHevcEncoding() {
    return allowHevcEncoding;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_HEVC_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowHevcEncoding(@javax.annotation.Nullable Boolean allowHevcEncoding) {
    this.allowHevcEncoding = allowHevcEncoding;
  }


  public EncodingOptions enableSubtitleExtraction(@javax.annotation.Nullable Boolean enableSubtitleExtraction) {
    this.enableSubtitleExtraction = enableSubtitleExtraction;
    return this;
  }

  /**
   * Get enableSubtitleExtraction
   * @return enableSubtitleExtraction
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableSubtitleExtraction() {
    return enableSubtitleExtraction;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SUBTITLE_EXTRACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSubtitleExtraction(@javax.annotation.Nullable Boolean enableSubtitleExtraction) {
    this.enableSubtitleExtraction = enableSubtitleExtraction;
  }


  public EncodingOptions hardwareDecodingCodecs(@javax.annotation.Nullable List<String> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = JsonNullable.<List<String>>of(hardwareDecodingCodecs);
    return this;
  }

  public EncodingOptions addHardwareDecodingCodecsItem(String hardwareDecodingCodecsItem) {
    if (this.hardwareDecodingCodecs == null || !this.hardwareDecodingCodecs.isPresent()) {
      this.hardwareDecodingCodecs = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.hardwareDecodingCodecs.get().add(hardwareDecodingCodecsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get hardwareDecodingCodecs
   * @return hardwareDecodingCodecs
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getHardwareDecodingCodecs() {
        return hardwareDecodingCodecs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HARDWARE_DECODING_CODECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getHardwareDecodingCodecs_JsonNullable() {
    return hardwareDecodingCodecs;
  }
  
  @JsonProperty(JSON_PROPERTY_HARDWARE_DECODING_CODECS)
  public void setHardwareDecodingCodecs_JsonNullable(JsonNullable<List<String>> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = hardwareDecodingCodecs;
  }

  public void setHardwareDecodingCodecs(@javax.annotation.Nullable List<String> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = JsonNullable.<List<String>>of(hardwareDecodingCodecs);
  }


  public EncodingOptions allowOnDemandMetadataBasedKeyframeExtractionForExtensions(@javax.annotation.Nullable List<String> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>of(allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
    return this;
  }

  public EncodingOptions addAllowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem(String allowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem) {
    if (this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions == null || !this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions.isPresent()) {
      this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions.get().add(allowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get allowOnDemandMetadataBasedKeyframeExtractionForExtensions
   * @return allowOnDemandMetadataBasedKeyframeExtractionForExtensions
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions() {
        return allowOnDemandMetadataBasedKeyframeExtractionForExtensions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions_JsonNullable() {
    return allowOnDemandMetadataBasedKeyframeExtractionForExtensions;
  }
  
  @JsonProperty(JSON_PROPERTY_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS)
  public void setAllowOnDemandMetadataBasedKeyframeExtractionForExtensions_JsonNullable(JsonNullable<List<String>> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = allowOnDemandMetadataBasedKeyframeExtractionForExtensions;
  }

  public void setAllowOnDemandMetadataBasedKeyframeExtractionForExtensions(@javax.annotation.Nullable List<String> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = JsonNullable.<List<String>>of(allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
  }


  /**
   * Return true if this EncodingOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncodingOptions encodingOptions = (EncodingOptions) o;
    return Objects.equals(this.encodingThreadCount, encodingOptions.encodingThreadCount) &&
        equalsNullable(this.transcodingTempPath, encodingOptions.transcodingTempPath) &&
        equalsNullable(this.fallbackFontPath, encodingOptions.fallbackFontPath) &&
        Objects.equals(this.enableFallbackFont, encodingOptions.enableFallbackFont) &&
        Objects.equals(this.downMixAudioBoost, encodingOptions.downMixAudioBoost) &&
        Objects.equals(this.maxMuxingQueueSize, encodingOptions.maxMuxingQueueSize) &&
        Objects.equals(this.enableThrottling, encodingOptions.enableThrottling) &&
        Objects.equals(this.throttleDelaySeconds, encodingOptions.throttleDelaySeconds) &&
        equalsNullable(this.hardwareAccelerationType, encodingOptions.hardwareAccelerationType) &&
        equalsNullable(this.encoderAppPath, encodingOptions.encoderAppPath) &&
        equalsNullable(this.encoderAppPathDisplay, encodingOptions.encoderAppPathDisplay) &&
        equalsNullable(this.vaapiDevice, encodingOptions.vaapiDevice) &&
        Objects.equals(this.enableTonemapping, encodingOptions.enableTonemapping) &&
        Objects.equals(this.enableVppTonemapping, encodingOptions.enableVppTonemapping) &&
        equalsNullable(this.tonemappingAlgorithm, encodingOptions.tonemappingAlgorithm) &&
        equalsNullable(this.tonemappingMode, encodingOptions.tonemappingMode) &&
        equalsNullable(this.tonemappingRange, encodingOptions.tonemappingRange) &&
        Objects.equals(this.tonemappingDesat, encodingOptions.tonemappingDesat) &&
        Objects.equals(this.tonemappingPeak, encodingOptions.tonemappingPeak) &&
        Objects.equals(this.tonemappingParam, encodingOptions.tonemappingParam) &&
        Objects.equals(this.vppTonemappingBrightness, encodingOptions.vppTonemappingBrightness) &&
        Objects.equals(this.vppTonemappingContrast, encodingOptions.vppTonemappingContrast) &&
        Objects.equals(this.h264Crf, encodingOptions.h264Crf) &&
        Objects.equals(this.h265Crf, encodingOptions.h265Crf) &&
        equalsNullable(this.encoderPreset, encodingOptions.encoderPreset) &&
        Objects.equals(this.deinterlaceDoubleRate, encodingOptions.deinterlaceDoubleRate) &&
        equalsNullable(this.deinterlaceMethod, encodingOptions.deinterlaceMethod) &&
        Objects.equals(this.enableDecodingColorDepth10Hevc, encodingOptions.enableDecodingColorDepth10Hevc) &&
        Objects.equals(this.enableDecodingColorDepth10Vp9, encodingOptions.enableDecodingColorDepth10Vp9) &&
        Objects.equals(this.enableEnhancedNvdecDecoder, encodingOptions.enableEnhancedNvdecDecoder) &&
        Objects.equals(this.preferSystemNativeHwDecoder, encodingOptions.preferSystemNativeHwDecoder) &&
        Objects.equals(this.enableIntelLowPowerH264HwEncoder, encodingOptions.enableIntelLowPowerH264HwEncoder) &&
        Objects.equals(this.enableIntelLowPowerHevcHwEncoder, encodingOptions.enableIntelLowPowerHevcHwEncoder) &&
        Objects.equals(this.enableHardwareEncoding, encodingOptions.enableHardwareEncoding) &&
        Objects.equals(this.allowHevcEncoding, encodingOptions.allowHevcEncoding) &&
        Objects.equals(this.enableSubtitleExtraction, encodingOptions.enableSubtitleExtraction) &&
        equalsNullable(this.hardwareDecodingCodecs, encodingOptions.hardwareDecodingCodecs) &&
        equalsNullable(this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions, encodingOptions.allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodingThreadCount, hashCodeNullable(transcodingTempPath), hashCodeNullable(fallbackFontPath), enableFallbackFont, downMixAudioBoost, maxMuxingQueueSize, enableThrottling, throttleDelaySeconds, hashCodeNullable(hardwareAccelerationType), hashCodeNullable(encoderAppPath), hashCodeNullable(encoderAppPathDisplay), hashCodeNullable(vaapiDevice), enableTonemapping, enableVppTonemapping, hashCodeNullable(tonemappingAlgorithm), hashCodeNullable(tonemappingMode), hashCodeNullable(tonemappingRange), tonemappingDesat, tonemappingPeak, tonemappingParam, vppTonemappingBrightness, vppTonemappingContrast, h264Crf, h265Crf, hashCodeNullable(encoderPreset), deinterlaceDoubleRate, hashCodeNullable(deinterlaceMethod), enableDecodingColorDepth10Hevc, enableDecodingColorDepth10Vp9, enableEnhancedNvdecDecoder, preferSystemNativeHwDecoder, enableIntelLowPowerH264HwEncoder, enableIntelLowPowerHevcHwEncoder, enableHardwareEncoding, allowHevcEncoding, enableSubtitleExtraction, hashCodeNullable(hardwareDecodingCodecs), hashCodeNullable(allowOnDemandMetadataBasedKeyframeExtractionForExtensions));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncodingOptions {\n");
    sb.append("    encodingThreadCount: ").append(toIndentedString(encodingThreadCount)).append("\n");
    sb.append("    transcodingTempPath: ").append(toIndentedString(transcodingTempPath)).append("\n");
    sb.append("    fallbackFontPath: ").append(toIndentedString(fallbackFontPath)).append("\n");
    sb.append("    enableFallbackFont: ").append(toIndentedString(enableFallbackFont)).append("\n");
    sb.append("    downMixAudioBoost: ").append(toIndentedString(downMixAudioBoost)).append("\n");
    sb.append("    maxMuxingQueueSize: ").append(toIndentedString(maxMuxingQueueSize)).append("\n");
    sb.append("    enableThrottling: ").append(toIndentedString(enableThrottling)).append("\n");
    sb.append("    throttleDelaySeconds: ").append(toIndentedString(throttleDelaySeconds)).append("\n");
    sb.append("    hardwareAccelerationType: ").append(toIndentedString(hardwareAccelerationType)).append("\n");
    sb.append("    encoderAppPath: ").append(toIndentedString(encoderAppPath)).append("\n");
    sb.append("    encoderAppPathDisplay: ").append(toIndentedString(encoderAppPathDisplay)).append("\n");
    sb.append("    vaapiDevice: ").append(toIndentedString(vaapiDevice)).append("\n");
    sb.append("    enableTonemapping: ").append(toIndentedString(enableTonemapping)).append("\n");
    sb.append("    enableVppTonemapping: ").append(toIndentedString(enableVppTonemapping)).append("\n");
    sb.append("    tonemappingAlgorithm: ").append(toIndentedString(tonemappingAlgorithm)).append("\n");
    sb.append("    tonemappingMode: ").append(toIndentedString(tonemappingMode)).append("\n");
    sb.append("    tonemappingRange: ").append(toIndentedString(tonemappingRange)).append("\n");
    sb.append("    tonemappingDesat: ").append(toIndentedString(tonemappingDesat)).append("\n");
    sb.append("    tonemappingPeak: ").append(toIndentedString(tonemappingPeak)).append("\n");
    sb.append("    tonemappingParam: ").append(toIndentedString(tonemappingParam)).append("\n");
    sb.append("    vppTonemappingBrightness: ").append(toIndentedString(vppTonemappingBrightness)).append("\n");
    sb.append("    vppTonemappingContrast: ").append(toIndentedString(vppTonemappingContrast)).append("\n");
    sb.append("    h264Crf: ").append(toIndentedString(h264Crf)).append("\n");
    sb.append("    h265Crf: ").append(toIndentedString(h265Crf)).append("\n");
    sb.append("    encoderPreset: ").append(toIndentedString(encoderPreset)).append("\n");
    sb.append("    deinterlaceDoubleRate: ").append(toIndentedString(deinterlaceDoubleRate)).append("\n");
    sb.append("    deinterlaceMethod: ").append(toIndentedString(deinterlaceMethod)).append("\n");
    sb.append("    enableDecodingColorDepth10Hevc: ").append(toIndentedString(enableDecodingColorDepth10Hevc)).append("\n");
    sb.append("    enableDecodingColorDepth10Vp9: ").append(toIndentedString(enableDecodingColorDepth10Vp9)).append("\n");
    sb.append("    enableEnhancedNvdecDecoder: ").append(toIndentedString(enableEnhancedNvdecDecoder)).append("\n");
    sb.append("    preferSystemNativeHwDecoder: ").append(toIndentedString(preferSystemNativeHwDecoder)).append("\n");
    sb.append("    enableIntelLowPowerH264HwEncoder: ").append(toIndentedString(enableIntelLowPowerH264HwEncoder)).append("\n");
    sb.append("    enableIntelLowPowerHevcHwEncoder: ").append(toIndentedString(enableIntelLowPowerHevcHwEncoder)).append("\n");
    sb.append("    enableHardwareEncoding: ").append(toIndentedString(enableHardwareEncoding)).append("\n");
    sb.append("    allowHevcEncoding: ").append(toIndentedString(allowHevcEncoding)).append("\n");
    sb.append("    enableSubtitleExtraction: ").append(toIndentedString(enableSubtitleExtraction)).append("\n");
    sb.append("    hardwareDecodingCodecs: ").append(toIndentedString(hardwareDecodingCodecs)).append("\n");
    sb.append("    allowOnDemandMetadataBasedKeyframeExtractionForExtensions: ").append(toIndentedString(allowOnDemandMetadataBasedKeyframeExtractionForExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `EncodingThreadCount` to the URL query string
    if (getEncodingThreadCount() != null) {
      joiner.add(String.format("%sEncodingThreadCount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncodingThreadCount()))));
    }

    // add `TranscodingTempPath` to the URL query string
    if (getTranscodingTempPath() != null) {
      joiner.add(String.format("%sTranscodingTempPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTranscodingTempPath()))));
    }

    // add `FallbackFontPath` to the URL query string
    if (getFallbackFontPath() != null) {
      joiner.add(String.format("%sFallbackFontPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFallbackFontPath()))));
    }

    // add `EnableFallbackFont` to the URL query string
    if (getEnableFallbackFont() != null) {
      joiner.add(String.format("%sEnableFallbackFont%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableFallbackFont()))));
    }

    // add `DownMixAudioBoost` to the URL query string
    if (getDownMixAudioBoost() != null) {
      joiner.add(String.format("%sDownMixAudioBoost%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDownMixAudioBoost()))));
    }

    // add `MaxMuxingQueueSize` to the URL query string
    if (getMaxMuxingQueueSize() != null) {
      joiner.add(String.format("%sMaxMuxingQueueSize%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxMuxingQueueSize()))));
    }

    // add `EnableThrottling` to the URL query string
    if (getEnableThrottling() != null) {
      joiner.add(String.format("%sEnableThrottling%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableThrottling()))));
    }

    // add `ThrottleDelaySeconds` to the URL query string
    if (getThrottleDelaySeconds() != null) {
      joiner.add(String.format("%sThrottleDelaySeconds%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getThrottleDelaySeconds()))));
    }

    // add `HardwareAccelerationType` to the URL query string
    if (getHardwareAccelerationType() != null) {
      joiner.add(String.format("%sHardwareAccelerationType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHardwareAccelerationType()))));
    }

    // add `EncoderAppPath` to the URL query string
    if (getEncoderAppPath() != null) {
      joiner.add(String.format("%sEncoderAppPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderAppPath()))));
    }

    // add `EncoderAppPathDisplay` to the URL query string
    if (getEncoderAppPathDisplay() != null) {
      joiner.add(String.format("%sEncoderAppPathDisplay%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderAppPathDisplay()))));
    }

    // add `VaapiDevice` to the URL query string
    if (getVaapiDevice() != null) {
      joiner.add(String.format("%sVaapiDevice%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVaapiDevice()))));
    }

    // add `EnableTonemapping` to the URL query string
    if (getEnableTonemapping() != null) {
      joiner.add(String.format("%sEnableTonemapping%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableTonemapping()))));
    }

    // add `EnableVppTonemapping` to the URL query string
    if (getEnableVppTonemapping() != null) {
      joiner.add(String.format("%sEnableVppTonemapping%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableVppTonemapping()))));
    }

    // add `TonemappingAlgorithm` to the URL query string
    if (getTonemappingAlgorithm() != null) {
      joiner.add(String.format("%sTonemappingAlgorithm%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingAlgorithm()))));
    }

    // add `TonemappingMode` to the URL query string
    if (getTonemappingMode() != null) {
      joiner.add(String.format("%sTonemappingMode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingMode()))));
    }

    // add `TonemappingRange` to the URL query string
    if (getTonemappingRange() != null) {
      joiner.add(String.format("%sTonemappingRange%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingRange()))));
    }

    // add `TonemappingDesat` to the URL query string
    if (getTonemappingDesat() != null) {
      joiner.add(String.format("%sTonemappingDesat%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingDesat()))));
    }

    // add `TonemappingPeak` to the URL query string
    if (getTonemappingPeak() != null) {
      joiner.add(String.format("%sTonemappingPeak%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingPeak()))));
    }

    // add `TonemappingParam` to the URL query string
    if (getTonemappingParam() != null) {
      joiner.add(String.format("%sTonemappingParam%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTonemappingParam()))));
    }

    // add `VppTonemappingBrightness` to the URL query string
    if (getVppTonemappingBrightness() != null) {
      joiner.add(String.format("%sVppTonemappingBrightness%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVppTonemappingBrightness()))));
    }

    // add `VppTonemappingContrast` to the URL query string
    if (getVppTonemappingContrast() != null) {
      joiner.add(String.format("%sVppTonemappingContrast%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVppTonemappingContrast()))));
    }

    // add `H264Crf` to the URL query string
    if (getH264Crf() != null) {
      joiner.add(String.format("%sH264Crf%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getH264Crf()))));
    }

    // add `H265Crf` to the URL query string
    if (getH265Crf() != null) {
      joiner.add(String.format("%sH265Crf%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getH265Crf()))));
    }

    // add `EncoderPreset` to the URL query string
    if (getEncoderPreset() != null) {
      joiner.add(String.format("%sEncoderPreset%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEncoderPreset()))));
    }

    // add `DeinterlaceDoubleRate` to the URL query string
    if (getDeinterlaceDoubleRate() != null) {
      joiner.add(String.format("%sDeinterlaceDoubleRate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeinterlaceDoubleRate()))));
    }

    // add `DeinterlaceMethod` to the URL query string
    if (getDeinterlaceMethod() != null) {
      joiner.add(String.format("%sDeinterlaceMethod%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeinterlaceMethod()))));
    }

    // add `EnableDecodingColorDepth10Hevc` to the URL query string
    if (getEnableDecodingColorDepth10Hevc() != null) {
      joiner.add(String.format("%sEnableDecodingColorDepth10Hevc%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDecodingColorDepth10Hevc()))));
    }

    // add `EnableDecodingColorDepth10Vp9` to the URL query string
    if (getEnableDecodingColorDepth10Vp9() != null) {
      joiner.add(String.format("%sEnableDecodingColorDepth10Vp9%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDecodingColorDepth10Vp9()))));
    }

    // add `EnableEnhancedNvdecDecoder` to the URL query string
    if (getEnableEnhancedNvdecDecoder() != null) {
      joiner.add(String.format("%sEnableEnhancedNvdecDecoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableEnhancedNvdecDecoder()))));
    }

    // add `PreferSystemNativeHwDecoder` to the URL query string
    if (getPreferSystemNativeHwDecoder() != null) {
      joiner.add(String.format("%sPreferSystemNativeHwDecoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPreferSystemNativeHwDecoder()))));
    }

    // add `EnableIntelLowPowerH264HwEncoder` to the URL query string
    if (getEnableIntelLowPowerH264HwEncoder() != null) {
      joiner.add(String.format("%sEnableIntelLowPowerH264HwEncoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIntelLowPowerH264HwEncoder()))));
    }

    // add `EnableIntelLowPowerHevcHwEncoder` to the URL query string
    if (getEnableIntelLowPowerHevcHwEncoder() != null) {
      joiner.add(String.format("%sEnableIntelLowPowerHevcHwEncoder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableIntelLowPowerHevcHwEncoder()))));
    }

    // add `EnableHardwareEncoding` to the URL query string
    if (getEnableHardwareEncoding() != null) {
      joiner.add(String.format("%sEnableHardwareEncoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableHardwareEncoding()))));
    }

    // add `AllowHevcEncoding` to the URL query string
    if (getAllowHevcEncoding() != null) {
      joiner.add(String.format("%sAllowHevcEncoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAllowHevcEncoding()))));
    }

    // add `EnableSubtitleExtraction` to the URL query string
    if (getEnableSubtitleExtraction() != null) {
      joiner.add(String.format("%sEnableSubtitleExtraction%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableSubtitleExtraction()))));
    }

    // add `HardwareDecodingCodecs` to the URL query string
    if (getHardwareDecodingCodecs() != null) {
      for (int i = 0; i < getHardwareDecodingCodecs().size(); i++) {
        joiner.add(String.format("%sHardwareDecodingCodecs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getHardwareDecodingCodecs().get(i)))));
      }
    }

    // add `AllowOnDemandMetadataBasedKeyframeExtractionForExtensions` to the URL query string
    if (getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions() != null) {
      for (int i = 0; i < getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions().size(); i++) {
        joiner.add(String.format("%sAllowOnDemandMetadataBasedKeyframeExtractionForExtensions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions().get(i)))));
      }
    }

    return joiner.toString();
  }
}

