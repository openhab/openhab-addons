/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EncodingOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class EncodingOptions {
  public static final String SERIALIZED_NAME_ENCODING_THREAD_COUNT = "EncodingThreadCount";
  @SerializedName(SERIALIZED_NAME_ENCODING_THREAD_COUNT)
  @javax.annotation.Nullable
  private Integer encodingThreadCount;

  public static final String SERIALIZED_NAME_TRANSCODING_TEMP_PATH = "TranscodingTempPath";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_TEMP_PATH)
  @javax.annotation.Nullable
  private String transcodingTempPath;

  public static final String SERIALIZED_NAME_FALLBACK_FONT_PATH = "FallbackFontPath";
  @SerializedName(SERIALIZED_NAME_FALLBACK_FONT_PATH)
  @javax.annotation.Nullable
  private String fallbackFontPath;

  public static final String SERIALIZED_NAME_ENABLE_FALLBACK_FONT = "EnableFallbackFont";
  @SerializedName(SERIALIZED_NAME_ENABLE_FALLBACK_FONT)
  @javax.annotation.Nullable
  private Boolean enableFallbackFont;

  public static final String SERIALIZED_NAME_DOWN_MIX_AUDIO_BOOST = "DownMixAudioBoost";
  @SerializedName(SERIALIZED_NAME_DOWN_MIX_AUDIO_BOOST)
  @javax.annotation.Nullable
  private Double downMixAudioBoost;

  public static final String SERIALIZED_NAME_MAX_MUXING_QUEUE_SIZE = "MaxMuxingQueueSize";
  @SerializedName(SERIALIZED_NAME_MAX_MUXING_QUEUE_SIZE)
  @javax.annotation.Nullable
  private Integer maxMuxingQueueSize;

  public static final String SERIALIZED_NAME_ENABLE_THROTTLING = "EnableThrottling";
  @SerializedName(SERIALIZED_NAME_ENABLE_THROTTLING)
  @javax.annotation.Nullable
  private Boolean enableThrottling;

  public static final String SERIALIZED_NAME_THROTTLE_DELAY_SECONDS = "ThrottleDelaySeconds";
  @SerializedName(SERIALIZED_NAME_THROTTLE_DELAY_SECONDS)
  @javax.annotation.Nullable
  private Integer throttleDelaySeconds;

  public static final String SERIALIZED_NAME_HARDWARE_ACCELERATION_TYPE = "HardwareAccelerationType";
  @SerializedName(SERIALIZED_NAME_HARDWARE_ACCELERATION_TYPE)
  @javax.annotation.Nullable
  private String hardwareAccelerationType;

  public static final String SERIALIZED_NAME_ENCODER_APP_PATH = "EncoderAppPath";
  @SerializedName(SERIALIZED_NAME_ENCODER_APP_PATH)
  @javax.annotation.Nullable
  private String encoderAppPath;

  public static final String SERIALIZED_NAME_ENCODER_APP_PATH_DISPLAY = "EncoderAppPathDisplay";
  @SerializedName(SERIALIZED_NAME_ENCODER_APP_PATH_DISPLAY)
  @javax.annotation.Nullable
  private String encoderAppPathDisplay;

  public static final String SERIALIZED_NAME_VAAPI_DEVICE = "VaapiDevice";
  @SerializedName(SERIALIZED_NAME_VAAPI_DEVICE)
  @javax.annotation.Nullable
  private String vaapiDevice;

  public static final String SERIALIZED_NAME_ENABLE_TONEMAPPING = "EnableTonemapping";
  @SerializedName(SERIALIZED_NAME_ENABLE_TONEMAPPING)
  @javax.annotation.Nullable
  private Boolean enableTonemapping;

  public static final String SERIALIZED_NAME_ENABLE_VPP_TONEMAPPING = "EnableVppTonemapping";
  @SerializedName(SERIALIZED_NAME_ENABLE_VPP_TONEMAPPING)
  @javax.annotation.Nullable
  private Boolean enableVppTonemapping;

  public static final String SERIALIZED_NAME_TONEMAPPING_ALGORITHM = "TonemappingAlgorithm";
  @SerializedName(SERIALIZED_NAME_TONEMAPPING_ALGORITHM)
  @javax.annotation.Nullable
  private String tonemappingAlgorithm;

  public static final String SERIALIZED_NAME_TONEMAPPING_MODE = "TonemappingMode";
  @SerializedName(SERIALIZED_NAME_TONEMAPPING_MODE)
  @javax.annotation.Nullable
  private String tonemappingMode;

  public static final String SERIALIZED_NAME_TONEMAPPING_RANGE = "TonemappingRange";
  @SerializedName(SERIALIZED_NAME_TONEMAPPING_RANGE)
  @javax.annotation.Nullable
  private String tonemappingRange;

  public static final String SERIALIZED_NAME_TONEMAPPING_DESAT = "TonemappingDesat";
  @SerializedName(SERIALIZED_NAME_TONEMAPPING_DESAT)
  @javax.annotation.Nullable
  private Double tonemappingDesat;

  public static final String SERIALIZED_NAME_TONEMAPPING_PEAK = "TonemappingPeak";
  @SerializedName(SERIALIZED_NAME_TONEMAPPING_PEAK)
  @javax.annotation.Nullable
  private Double tonemappingPeak;

  public static final String SERIALIZED_NAME_TONEMAPPING_PARAM = "TonemappingParam";
  @SerializedName(SERIALIZED_NAME_TONEMAPPING_PARAM)
  @javax.annotation.Nullable
  private Double tonemappingParam;

  public static final String SERIALIZED_NAME_VPP_TONEMAPPING_BRIGHTNESS = "VppTonemappingBrightness";
  @SerializedName(SERIALIZED_NAME_VPP_TONEMAPPING_BRIGHTNESS)
  @javax.annotation.Nullable
  private Double vppTonemappingBrightness;

  public static final String SERIALIZED_NAME_VPP_TONEMAPPING_CONTRAST = "VppTonemappingContrast";
  @SerializedName(SERIALIZED_NAME_VPP_TONEMAPPING_CONTRAST)
  @javax.annotation.Nullable
  private Double vppTonemappingContrast;

  public static final String SERIALIZED_NAME_H264_CRF = "H264Crf";
  @SerializedName(SERIALIZED_NAME_H264_CRF)
  @javax.annotation.Nullable
  private Integer h264Crf;

  public static final String SERIALIZED_NAME_H265_CRF = "H265Crf";
  @SerializedName(SERIALIZED_NAME_H265_CRF)
  @javax.annotation.Nullable
  private Integer h265Crf;

  public static final String SERIALIZED_NAME_ENCODER_PRESET = "EncoderPreset";
  @SerializedName(SERIALIZED_NAME_ENCODER_PRESET)
  @javax.annotation.Nullable
  private String encoderPreset;

  public static final String SERIALIZED_NAME_DEINTERLACE_DOUBLE_RATE = "DeinterlaceDoubleRate";
  @SerializedName(SERIALIZED_NAME_DEINTERLACE_DOUBLE_RATE)
  @javax.annotation.Nullable
  private Boolean deinterlaceDoubleRate;

  public static final String SERIALIZED_NAME_DEINTERLACE_METHOD = "DeinterlaceMethod";
  @SerializedName(SERIALIZED_NAME_DEINTERLACE_METHOD)
  @javax.annotation.Nullable
  private String deinterlaceMethod;

  public static final String SERIALIZED_NAME_ENABLE_DECODING_COLOR_DEPTH10_HEVC = "EnableDecodingColorDepth10Hevc";
  @SerializedName(SERIALIZED_NAME_ENABLE_DECODING_COLOR_DEPTH10_HEVC)
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth10Hevc;

  public static final String SERIALIZED_NAME_ENABLE_DECODING_COLOR_DEPTH10_VP9 = "EnableDecodingColorDepth10Vp9";
  @SerializedName(SERIALIZED_NAME_ENABLE_DECODING_COLOR_DEPTH10_VP9)
  @javax.annotation.Nullable
  private Boolean enableDecodingColorDepth10Vp9;

  public static final String SERIALIZED_NAME_ENABLE_ENHANCED_NVDEC_DECODER = "EnableEnhancedNvdecDecoder";
  @SerializedName(SERIALIZED_NAME_ENABLE_ENHANCED_NVDEC_DECODER)
  @javax.annotation.Nullable
  private Boolean enableEnhancedNvdecDecoder;

  public static final String SERIALIZED_NAME_PREFER_SYSTEM_NATIVE_HW_DECODER = "PreferSystemNativeHwDecoder";
  @SerializedName(SERIALIZED_NAME_PREFER_SYSTEM_NATIVE_HW_DECODER)
  @javax.annotation.Nullable
  private Boolean preferSystemNativeHwDecoder;

  public static final String SERIALIZED_NAME_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER = "EnableIntelLowPowerH264HwEncoder";
  @SerializedName(SERIALIZED_NAME_ENABLE_INTEL_LOW_POWER_H264_HW_ENCODER)
  @javax.annotation.Nullable
  private Boolean enableIntelLowPowerH264HwEncoder;

  public static final String SERIALIZED_NAME_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER = "EnableIntelLowPowerHevcHwEncoder";
  @SerializedName(SERIALIZED_NAME_ENABLE_INTEL_LOW_POWER_HEVC_HW_ENCODER)
  @javax.annotation.Nullable
  private Boolean enableIntelLowPowerHevcHwEncoder;

  public static final String SERIALIZED_NAME_ENABLE_HARDWARE_ENCODING = "EnableHardwareEncoding";
  @SerializedName(SERIALIZED_NAME_ENABLE_HARDWARE_ENCODING)
  @javax.annotation.Nullable
  private Boolean enableHardwareEncoding;

  public static final String SERIALIZED_NAME_ALLOW_HEVC_ENCODING = "AllowHevcEncoding";
  @SerializedName(SERIALIZED_NAME_ALLOW_HEVC_ENCODING)
  @javax.annotation.Nullable
  private Boolean allowHevcEncoding;

  public static final String SERIALIZED_NAME_ENABLE_SUBTITLE_EXTRACTION = "EnableSubtitleExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_SUBTITLE_EXTRACTION)
  @javax.annotation.Nullable
  private Boolean enableSubtitleExtraction;

  public static final String SERIALIZED_NAME_HARDWARE_DECODING_CODECS = "HardwareDecodingCodecs";
  @SerializedName(SERIALIZED_NAME_HARDWARE_DECODING_CODECS)
  @javax.annotation.Nullable
  private List<String> hardwareDecodingCodecs;

  public static final String SERIALIZED_NAME_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS = "AllowOnDemandMetadataBasedKeyframeExtractionForExtensions";
  @SerializedName(SERIALIZED_NAME_ALLOW_ON_DEMAND_METADATA_BASED_KEYFRAME_EXTRACTION_FOR_EXTENSIONS)
  @javax.annotation.Nullable
  private List<String> allowOnDemandMetadataBasedKeyframeExtractionForExtensions;

  public EncodingOptions() {
  }

  public EncodingOptions encodingThreadCount(@javax.annotation.Nullable Integer encodingThreadCount) {
    this.encodingThreadCount = encodingThreadCount;
    return this;
  }

  /**
   * Get encodingThreadCount
   * @return encodingThreadCount
   */
  @javax.annotation.Nullable
  public Integer getEncodingThreadCount() {
    return encodingThreadCount;
  }

  public void setEncodingThreadCount(@javax.annotation.Nullable Integer encodingThreadCount) {
    this.encodingThreadCount = encodingThreadCount;
  }


  public EncodingOptions transcodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = transcodingTempPath;
    return this;
  }

  /**
   * Get transcodingTempPath
   * @return transcodingTempPath
   */
  @javax.annotation.Nullable
  public String getTranscodingTempPath() {
    return transcodingTempPath;
  }

  public void setTranscodingTempPath(@javax.annotation.Nullable String transcodingTempPath) {
    this.transcodingTempPath = transcodingTempPath;
  }


  public EncodingOptions fallbackFontPath(@javax.annotation.Nullable String fallbackFontPath) {
    this.fallbackFontPath = fallbackFontPath;
    return this;
  }

  /**
   * Get fallbackFontPath
   * @return fallbackFontPath
   */
  @javax.annotation.Nullable
  public String getFallbackFontPath() {
    return fallbackFontPath;
  }

  public void setFallbackFontPath(@javax.annotation.Nullable String fallbackFontPath) {
    this.fallbackFontPath = fallbackFontPath;
  }


  public EncodingOptions enableFallbackFont(@javax.annotation.Nullable Boolean enableFallbackFont) {
    this.enableFallbackFont = enableFallbackFont;
    return this;
  }

  /**
   * Get enableFallbackFont
   * @return enableFallbackFont
   */
  @javax.annotation.Nullable
  public Boolean getEnableFallbackFont() {
    return enableFallbackFont;
  }

  public void setEnableFallbackFont(@javax.annotation.Nullable Boolean enableFallbackFont) {
    this.enableFallbackFont = enableFallbackFont;
  }


  public EncodingOptions downMixAudioBoost(@javax.annotation.Nullable Double downMixAudioBoost) {
    this.downMixAudioBoost = downMixAudioBoost;
    return this;
  }

  /**
   * Get downMixAudioBoost
   * @return downMixAudioBoost
   */
  @javax.annotation.Nullable
  public Double getDownMixAudioBoost() {
    return downMixAudioBoost;
  }

  public void setDownMixAudioBoost(@javax.annotation.Nullable Double downMixAudioBoost) {
    this.downMixAudioBoost = downMixAudioBoost;
  }


  public EncodingOptions maxMuxingQueueSize(@javax.annotation.Nullable Integer maxMuxingQueueSize) {
    this.maxMuxingQueueSize = maxMuxingQueueSize;
    return this;
  }

  /**
   * Get maxMuxingQueueSize
   * @return maxMuxingQueueSize
   */
  @javax.annotation.Nullable
  public Integer getMaxMuxingQueueSize() {
    return maxMuxingQueueSize;
  }

  public void setMaxMuxingQueueSize(@javax.annotation.Nullable Integer maxMuxingQueueSize) {
    this.maxMuxingQueueSize = maxMuxingQueueSize;
  }


  public EncodingOptions enableThrottling(@javax.annotation.Nullable Boolean enableThrottling) {
    this.enableThrottling = enableThrottling;
    return this;
  }

  /**
   * Get enableThrottling
   * @return enableThrottling
   */
  @javax.annotation.Nullable
  public Boolean getEnableThrottling() {
    return enableThrottling;
  }

  public void setEnableThrottling(@javax.annotation.Nullable Boolean enableThrottling) {
    this.enableThrottling = enableThrottling;
  }


  public EncodingOptions throttleDelaySeconds(@javax.annotation.Nullable Integer throttleDelaySeconds) {
    this.throttleDelaySeconds = throttleDelaySeconds;
    return this;
  }

  /**
   * Get throttleDelaySeconds
   * @return throttleDelaySeconds
   */
  @javax.annotation.Nullable
  public Integer getThrottleDelaySeconds() {
    return throttleDelaySeconds;
  }

  public void setThrottleDelaySeconds(@javax.annotation.Nullable Integer throttleDelaySeconds) {
    this.throttleDelaySeconds = throttleDelaySeconds;
  }


  public EncodingOptions hardwareAccelerationType(@javax.annotation.Nullable String hardwareAccelerationType) {
    this.hardwareAccelerationType = hardwareAccelerationType;
    return this;
  }

  /**
   * Get hardwareAccelerationType
   * @return hardwareAccelerationType
   */
  @javax.annotation.Nullable
  public String getHardwareAccelerationType() {
    return hardwareAccelerationType;
  }

  public void setHardwareAccelerationType(@javax.annotation.Nullable String hardwareAccelerationType) {
    this.hardwareAccelerationType = hardwareAccelerationType;
  }


  public EncodingOptions encoderAppPath(@javax.annotation.Nullable String encoderAppPath) {
    this.encoderAppPath = encoderAppPath;
    return this;
  }

  /**
   * Gets or sets the FFmpeg path as set by the user via the UI.
   * @return encoderAppPath
   */
  @javax.annotation.Nullable
  public String getEncoderAppPath() {
    return encoderAppPath;
  }

  public void setEncoderAppPath(@javax.annotation.Nullable String encoderAppPath) {
    this.encoderAppPath = encoderAppPath;
  }


  public EncodingOptions encoderAppPathDisplay(@javax.annotation.Nullable String encoderAppPathDisplay) {
    this.encoderAppPathDisplay = encoderAppPathDisplay;
    return this;
  }

  /**
   * Gets or sets the current FFmpeg path being used by the system and displayed on the transcode page.
   * @return encoderAppPathDisplay
   */
  @javax.annotation.Nullable
  public String getEncoderAppPathDisplay() {
    return encoderAppPathDisplay;
  }

  public void setEncoderAppPathDisplay(@javax.annotation.Nullable String encoderAppPathDisplay) {
    this.encoderAppPathDisplay = encoderAppPathDisplay;
  }


  public EncodingOptions vaapiDevice(@javax.annotation.Nullable String vaapiDevice) {
    this.vaapiDevice = vaapiDevice;
    return this;
  }

  /**
   * Get vaapiDevice
   * @return vaapiDevice
   */
  @javax.annotation.Nullable
  public String getVaapiDevice() {
    return vaapiDevice;
  }

  public void setVaapiDevice(@javax.annotation.Nullable String vaapiDevice) {
    this.vaapiDevice = vaapiDevice;
  }


  public EncodingOptions enableTonemapping(@javax.annotation.Nullable Boolean enableTonemapping) {
    this.enableTonemapping = enableTonemapping;
    return this;
  }

  /**
   * Get enableTonemapping
   * @return enableTonemapping
   */
  @javax.annotation.Nullable
  public Boolean getEnableTonemapping() {
    return enableTonemapping;
  }

  public void setEnableTonemapping(@javax.annotation.Nullable Boolean enableTonemapping) {
    this.enableTonemapping = enableTonemapping;
  }


  public EncodingOptions enableVppTonemapping(@javax.annotation.Nullable Boolean enableVppTonemapping) {
    this.enableVppTonemapping = enableVppTonemapping;
    return this;
  }

  /**
   * Get enableVppTonemapping
   * @return enableVppTonemapping
   */
  @javax.annotation.Nullable
  public Boolean getEnableVppTonemapping() {
    return enableVppTonemapping;
  }

  public void setEnableVppTonemapping(@javax.annotation.Nullable Boolean enableVppTonemapping) {
    this.enableVppTonemapping = enableVppTonemapping;
  }


  public EncodingOptions tonemappingAlgorithm(@javax.annotation.Nullable String tonemappingAlgorithm) {
    this.tonemappingAlgorithm = tonemappingAlgorithm;
    return this;
  }

  /**
   * Get tonemappingAlgorithm
   * @return tonemappingAlgorithm
   */
  @javax.annotation.Nullable
  public String getTonemappingAlgorithm() {
    return tonemappingAlgorithm;
  }

  public void setTonemappingAlgorithm(@javax.annotation.Nullable String tonemappingAlgorithm) {
    this.tonemappingAlgorithm = tonemappingAlgorithm;
  }


  public EncodingOptions tonemappingMode(@javax.annotation.Nullable String tonemappingMode) {
    this.tonemappingMode = tonemappingMode;
    return this;
  }

  /**
   * Get tonemappingMode
   * @return tonemappingMode
   */
  @javax.annotation.Nullable
  public String getTonemappingMode() {
    return tonemappingMode;
  }

  public void setTonemappingMode(@javax.annotation.Nullable String tonemappingMode) {
    this.tonemappingMode = tonemappingMode;
  }


  public EncodingOptions tonemappingRange(@javax.annotation.Nullable String tonemappingRange) {
    this.tonemappingRange = tonemappingRange;
    return this;
  }

  /**
   * Get tonemappingRange
   * @return tonemappingRange
   */
  @javax.annotation.Nullable
  public String getTonemappingRange() {
    return tonemappingRange;
  }

  public void setTonemappingRange(@javax.annotation.Nullable String tonemappingRange) {
    this.tonemappingRange = tonemappingRange;
  }


  public EncodingOptions tonemappingDesat(@javax.annotation.Nullable Double tonemappingDesat) {
    this.tonemappingDesat = tonemappingDesat;
    return this;
  }

  /**
   * Get tonemappingDesat
   * @return tonemappingDesat
   */
  @javax.annotation.Nullable
  public Double getTonemappingDesat() {
    return tonemappingDesat;
  }

  public void setTonemappingDesat(@javax.annotation.Nullable Double tonemappingDesat) {
    this.tonemappingDesat = tonemappingDesat;
  }


  public EncodingOptions tonemappingPeak(@javax.annotation.Nullable Double tonemappingPeak) {
    this.tonemappingPeak = tonemappingPeak;
    return this;
  }

  /**
   * Get tonemappingPeak
   * @return tonemappingPeak
   */
  @javax.annotation.Nullable
  public Double getTonemappingPeak() {
    return tonemappingPeak;
  }

  public void setTonemappingPeak(@javax.annotation.Nullable Double tonemappingPeak) {
    this.tonemappingPeak = tonemappingPeak;
  }


  public EncodingOptions tonemappingParam(@javax.annotation.Nullable Double tonemappingParam) {
    this.tonemappingParam = tonemappingParam;
    return this;
  }

  /**
   * Get tonemappingParam
   * @return tonemappingParam
   */
  @javax.annotation.Nullable
  public Double getTonemappingParam() {
    return tonemappingParam;
  }

  public void setTonemappingParam(@javax.annotation.Nullable Double tonemappingParam) {
    this.tonemappingParam = tonemappingParam;
  }


  public EncodingOptions vppTonemappingBrightness(@javax.annotation.Nullable Double vppTonemappingBrightness) {
    this.vppTonemappingBrightness = vppTonemappingBrightness;
    return this;
  }

  /**
   * Get vppTonemappingBrightness
   * @return vppTonemappingBrightness
   */
  @javax.annotation.Nullable
  public Double getVppTonemappingBrightness() {
    return vppTonemappingBrightness;
  }

  public void setVppTonemappingBrightness(@javax.annotation.Nullable Double vppTonemappingBrightness) {
    this.vppTonemappingBrightness = vppTonemappingBrightness;
  }


  public EncodingOptions vppTonemappingContrast(@javax.annotation.Nullable Double vppTonemappingContrast) {
    this.vppTonemappingContrast = vppTonemappingContrast;
    return this;
  }

  /**
   * Get vppTonemappingContrast
   * @return vppTonemappingContrast
   */
  @javax.annotation.Nullable
  public Double getVppTonemappingContrast() {
    return vppTonemappingContrast;
  }

  public void setVppTonemappingContrast(@javax.annotation.Nullable Double vppTonemappingContrast) {
    this.vppTonemappingContrast = vppTonemappingContrast;
  }


  public EncodingOptions h264Crf(@javax.annotation.Nullable Integer h264Crf) {
    this.h264Crf = h264Crf;
    return this;
  }

  /**
   * Get h264Crf
   * @return h264Crf
   */
  @javax.annotation.Nullable
  public Integer getH264Crf() {
    return h264Crf;
  }

  public void setH264Crf(@javax.annotation.Nullable Integer h264Crf) {
    this.h264Crf = h264Crf;
  }


  public EncodingOptions h265Crf(@javax.annotation.Nullable Integer h265Crf) {
    this.h265Crf = h265Crf;
    return this;
  }

  /**
   * Get h265Crf
   * @return h265Crf
   */
  @javax.annotation.Nullable
  public Integer getH265Crf() {
    return h265Crf;
  }

  public void setH265Crf(@javax.annotation.Nullable Integer h265Crf) {
    this.h265Crf = h265Crf;
  }


  public EncodingOptions encoderPreset(@javax.annotation.Nullable String encoderPreset) {
    this.encoderPreset = encoderPreset;
    return this;
  }

  /**
   * Get encoderPreset
   * @return encoderPreset
   */
  @javax.annotation.Nullable
  public String getEncoderPreset() {
    return encoderPreset;
  }

  public void setEncoderPreset(@javax.annotation.Nullable String encoderPreset) {
    this.encoderPreset = encoderPreset;
  }


  public EncodingOptions deinterlaceDoubleRate(@javax.annotation.Nullable Boolean deinterlaceDoubleRate) {
    this.deinterlaceDoubleRate = deinterlaceDoubleRate;
    return this;
  }

  /**
   * Get deinterlaceDoubleRate
   * @return deinterlaceDoubleRate
   */
  @javax.annotation.Nullable
  public Boolean getDeinterlaceDoubleRate() {
    return deinterlaceDoubleRate;
  }

  public void setDeinterlaceDoubleRate(@javax.annotation.Nullable Boolean deinterlaceDoubleRate) {
    this.deinterlaceDoubleRate = deinterlaceDoubleRate;
  }


  public EncodingOptions deinterlaceMethod(@javax.annotation.Nullable String deinterlaceMethod) {
    this.deinterlaceMethod = deinterlaceMethod;
    return this;
  }

  /**
   * Get deinterlaceMethod
   * @return deinterlaceMethod
   */
  @javax.annotation.Nullable
  public String getDeinterlaceMethod() {
    return deinterlaceMethod;
  }

  public void setDeinterlaceMethod(@javax.annotation.Nullable String deinterlaceMethod) {
    this.deinterlaceMethod = deinterlaceMethod;
  }


  public EncodingOptions enableDecodingColorDepth10Hevc(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Hevc) {
    this.enableDecodingColorDepth10Hevc = enableDecodingColorDepth10Hevc;
    return this;
  }

  /**
   * Get enableDecodingColorDepth10Hevc
   * @return enableDecodingColorDepth10Hevc
   */
  @javax.annotation.Nullable
  public Boolean getEnableDecodingColorDepth10Hevc() {
    return enableDecodingColorDepth10Hevc;
  }

  public void setEnableDecodingColorDepth10Hevc(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Hevc) {
    this.enableDecodingColorDepth10Hevc = enableDecodingColorDepth10Hevc;
  }


  public EncodingOptions enableDecodingColorDepth10Vp9(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Vp9) {
    this.enableDecodingColorDepth10Vp9 = enableDecodingColorDepth10Vp9;
    return this;
  }

  /**
   * Get enableDecodingColorDepth10Vp9
   * @return enableDecodingColorDepth10Vp9
   */
  @javax.annotation.Nullable
  public Boolean getEnableDecodingColorDepth10Vp9() {
    return enableDecodingColorDepth10Vp9;
  }

  public void setEnableDecodingColorDepth10Vp9(@javax.annotation.Nullable Boolean enableDecodingColorDepth10Vp9) {
    this.enableDecodingColorDepth10Vp9 = enableDecodingColorDepth10Vp9;
  }


  public EncodingOptions enableEnhancedNvdecDecoder(@javax.annotation.Nullable Boolean enableEnhancedNvdecDecoder) {
    this.enableEnhancedNvdecDecoder = enableEnhancedNvdecDecoder;
    return this;
  }

  /**
   * Get enableEnhancedNvdecDecoder
   * @return enableEnhancedNvdecDecoder
   */
  @javax.annotation.Nullable
  public Boolean getEnableEnhancedNvdecDecoder() {
    return enableEnhancedNvdecDecoder;
  }

  public void setEnableEnhancedNvdecDecoder(@javax.annotation.Nullable Boolean enableEnhancedNvdecDecoder) {
    this.enableEnhancedNvdecDecoder = enableEnhancedNvdecDecoder;
  }


  public EncodingOptions preferSystemNativeHwDecoder(@javax.annotation.Nullable Boolean preferSystemNativeHwDecoder) {
    this.preferSystemNativeHwDecoder = preferSystemNativeHwDecoder;
    return this;
  }

  /**
   * Get preferSystemNativeHwDecoder
   * @return preferSystemNativeHwDecoder
   */
  @javax.annotation.Nullable
  public Boolean getPreferSystemNativeHwDecoder() {
    return preferSystemNativeHwDecoder;
  }

  public void setPreferSystemNativeHwDecoder(@javax.annotation.Nullable Boolean preferSystemNativeHwDecoder) {
    this.preferSystemNativeHwDecoder = preferSystemNativeHwDecoder;
  }


  public EncodingOptions enableIntelLowPowerH264HwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerH264HwEncoder) {
    this.enableIntelLowPowerH264HwEncoder = enableIntelLowPowerH264HwEncoder;
    return this;
  }

  /**
   * Get enableIntelLowPowerH264HwEncoder
   * @return enableIntelLowPowerH264HwEncoder
   */
  @javax.annotation.Nullable
  public Boolean getEnableIntelLowPowerH264HwEncoder() {
    return enableIntelLowPowerH264HwEncoder;
  }

  public void setEnableIntelLowPowerH264HwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerH264HwEncoder) {
    this.enableIntelLowPowerH264HwEncoder = enableIntelLowPowerH264HwEncoder;
  }


  public EncodingOptions enableIntelLowPowerHevcHwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerHevcHwEncoder) {
    this.enableIntelLowPowerHevcHwEncoder = enableIntelLowPowerHevcHwEncoder;
    return this;
  }

  /**
   * Get enableIntelLowPowerHevcHwEncoder
   * @return enableIntelLowPowerHevcHwEncoder
   */
  @javax.annotation.Nullable
  public Boolean getEnableIntelLowPowerHevcHwEncoder() {
    return enableIntelLowPowerHevcHwEncoder;
  }

  public void setEnableIntelLowPowerHevcHwEncoder(@javax.annotation.Nullable Boolean enableIntelLowPowerHevcHwEncoder) {
    this.enableIntelLowPowerHevcHwEncoder = enableIntelLowPowerHevcHwEncoder;
  }


  public EncodingOptions enableHardwareEncoding(@javax.annotation.Nullable Boolean enableHardwareEncoding) {
    this.enableHardwareEncoding = enableHardwareEncoding;
    return this;
  }

  /**
   * Get enableHardwareEncoding
   * @return enableHardwareEncoding
   */
  @javax.annotation.Nullable
  public Boolean getEnableHardwareEncoding() {
    return enableHardwareEncoding;
  }

  public void setEnableHardwareEncoding(@javax.annotation.Nullable Boolean enableHardwareEncoding) {
    this.enableHardwareEncoding = enableHardwareEncoding;
  }


  public EncodingOptions allowHevcEncoding(@javax.annotation.Nullable Boolean allowHevcEncoding) {
    this.allowHevcEncoding = allowHevcEncoding;
    return this;
  }

  /**
   * Get allowHevcEncoding
   * @return allowHevcEncoding
   */
  @javax.annotation.Nullable
  public Boolean getAllowHevcEncoding() {
    return allowHevcEncoding;
  }

  public void setAllowHevcEncoding(@javax.annotation.Nullable Boolean allowHevcEncoding) {
    this.allowHevcEncoding = allowHevcEncoding;
  }


  public EncodingOptions enableSubtitleExtraction(@javax.annotation.Nullable Boolean enableSubtitleExtraction) {
    this.enableSubtitleExtraction = enableSubtitleExtraction;
    return this;
  }

  /**
   * Get enableSubtitleExtraction
   * @return enableSubtitleExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableSubtitleExtraction() {
    return enableSubtitleExtraction;
  }

  public void setEnableSubtitleExtraction(@javax.annotation.Nullable Boolean enableSubtitleExtraction) {
    this.enableSubtitleExtraction = enableSubtitleExtraction;
  }


  public EncodingOptions hardwareDecodingCodecs(@javax.annotation.Nullable List<String> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = hardwareDecodingCodecs;
    return this;
  }

  public EncodingOptions addHardwareDecodingCodecsItem(String hardwareDecodingCodecsItem) {
    if (this.hardwareDecodingCodecs == null) {
      this.hardwareDecodingCodecs = new ArrayList<>();
    }
    this.hardwareDecodingCodecs.add(hardwareDecodingCodecsItem);
    return this;
  }

  /**
   * Get hardwareDecodingCodecs
   * @return hardwareDecodingCodecs
   */
  @javax.annotation.Nullable
  public List<String> getHardwareDecodingCodecs() {
    return hardwareDecodingCodecs;
  }

  public void setHardwareDecodingCodecs(@javax.annotation.Nullable List<String> hardwareDecodingCodecs) {
    this.hardwareDecodingCodecs = hardwareDecodingCodecs;
  }


  public EncodingOptions allowOnDemandMetadataBasedKeyframeExtractionForExtensions(@javax.annotation.Nullable List<String> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = allowOnDemandMetadataBasedKeyframeExtractionForExtensions;
    return this;
  }

  public EncodingOptions addAllowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem(String allowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem) {
    if (this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions == null) {
      this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = new ArrayList<>();
    }
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions.add(allowOnDemandMetadataBasedKeyframeExtractionForExtensionsItem);
    return this;
  }

  /**
   * Get allowOnDemandMetadataBasedKeyframeExtractionForExtensions
   * @return allowOnDemandMetadataBasedKeyframeExtractionForExtensions
   */
  @javax.annotation.Nullable
  public List<String> getAllowOnDemandMetadataBasedKeyframeExtractionForExtensions() {
    return allowOnDemandMetadataBasedKeyframeExtractionForExtensions;
  }

  public void setAllowOnDemandMetadataBasedKeyframeExtractionForExtensions(@javax.annotation.Nullable List<String> allowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
    this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions = allowOnDemandMetadataBasedKeyframeExtractionForExtensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncodingOptions encodingOptions = (EncodingOptions) o;
    return Objects.equals(this.encodingThreadCount, encodingOptions.encodingThreadCount) &&
        Objects.equals(this.transcodingTempPath, encodingOptions.transcodingTempPath) &&
        Objects.equals(this.fallbackFontPath, encodingOptions.fallbackFontPath) &&
        Objects.equals(this.enableFallbackFont, encodingOptions.enableFallbackFont) &&
        Objects.equals(this.downMixAudioBoost, encodingOptions.downMixAudioBoost) &&
        Objects.equals(this.maxMuxingQueueSize, encodingOptions.maxMuxingQueueSize) &&
        Objects.equals(this.enableThrottling, encodingOptions.enableThrottling) &&
        Objects.equals(this.throttleDelaySeconds, encodingOptions.throttleDelaySeconds) &&
        Objects.equals(this.hardwareAccelerationType, encodingOptions.hardwareAccelerationType) &&
        Objects.equals(this.encoderAppPath, encodingOptions.encoderAppPath) &&
        Objects.equals(this.encoderAppPathDisplay, encodingOptions.encoderAppPathDisplay) &&
        Objects.equals(this.vaapiDevice, encodingOptions.vaapiDevice) &&
        Objects.equals(this.enableTonemapping, encodingOptions.enableTonemapping) &&
        Objects.equals(this.enableVppTonemapping, encodingOptions.enableVppTonemapping) &&
        Objects.equals(this.tonemappingAlgorithm, encodingOptions.tonemappingAlgorithm) &&
        Objects.equals(this.tonemappingMode, encodingOptions.tonemappingMode) &&
        Objects.equals(this.tonemappingRange, encodingOptions.tonemappingRange) &&
        Objects.equals(this.tonemappingDesat, encodingOptions.tonemappingDesat) &&
        Objects.equals(this.tonemappingPeak, encodingOptions.tonemappingPeak) &&
        Objects.equals(this.tonemappingParam, encodingOptions.tonemappingParam) &&
        Objects.equals(this.vppTonemappingBrightness, encodingOptions.vppTonemappingBrightness) &&
        Objects.equals(this.vppTonemappingContrast, encodingOptions.vppTonemappingContrast) &&
        Objects.equals(this.h264Crf, encodingOptions.h264Crf) &&
        Objects.equals(this.h265Crf, encodingOptions.h265Crf) &&
        Objects.equals(this.encoderPreset, encodingOptions.encoderPreset) &&
        Objects.equals(this.deinterlaceDoubleRate, encodingOptions.deinterlaceDoubleRate) &&
        Objects.equals(this.deinterlaceMethod, encodingOptions.deinterlaceMethod) &&
        Objects.equals(this.enableDecodingColorDepth10Hevc, encodingOptions.enableDecodingColorDepth10Hevc) &&
        Objects.equals(this.enableDecodingColorDepth10Vp9, encodingOptions.enableDecodingColorDepth10Vp9) &&
        Objects.equals(this.enableEnhancedNvdecDecoder, encodingOptions.enableEnhancedNvdecDecoder) &&
        Objects.equals(this.preferSystemNativeHwDecoder, encodingOptions.preferSystemNativeHwDecoder) &&
        Objects.equals(this.enableIntelLowPowerH264HwEncoder, encodingOptions.enableIntelLowPowerH264HwEncoder) &&
        Objects.equals(this.enableIntelLowPowerHevcHwEncoder, encodingOptions.enableIntelLowPowerHevcHwEncoder) &&
        Objects.equals(this.enableHardwareEncoding, encodingOptions.enableHardwareEncoding) &&
        Objects.equals(this.allowHevcEncoding, encodingOptions.allowHevcEncoding) &&
        Objects.equals(this.enableSubtitleExtraction, encodingOptions.enableSubtitleExtraction) &&
        Objects.equals(this.hardwareDecodingCodecs, encodingOptions.hardwareDecodingCodecs) &&
        Objects.equals(this.allowOnDemandMetadataBasedKeyframeExtractionForExtensions, encodingOptions.allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodingThreadCount, transcodingTempPath, fallbackFontPath, enableFallbackFont, downMixAudioBoost, maxMuxingQueueSize, enableThrottling, throttleDelaySeconds, hardwareAccelerationType, encoderAppPath, encoderAppPathDisplay, vaapiDevice, enableTonemapping, enableVppTonemapping, tonemappingAlgorithm, tonemappingMode, tonemappingRange, tonemappingDesat, tonemappingPeak, tonemappingParam, vppTonemappingBrightness, vppTonemappingContrast, h264Crf, h265Crf, encoderPreset, deinterlaceDoubleRate, deinterlaceMethod, enableDecodingColorDepth10Hevc, enableDecodingColorDepth10Vp9, enableEnhancedNvdecDecoder, preferSystemNativeHwDecoder, enableIntelLowPowerH264HwEncoder, enableIntelLowPowerHevcHwEncoder, enableHardwareEncoding, allowHevcEncoding, enableSubtitleExtraction, hardwareDecodingCodecs, allowOnDemandMetadataBasedKeyframeExtractionForExtensions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncodingOptions {\n");
    sb.append("    encodingThreadCount: ").append(toIndentedString(encodingThreadCount)).append("\n");
    sb.append("    transcodingTempPath: ").append(toIndentedString(transcodingTempPath)).append("\n");
    sb.append("    fallbackFontPath: ").append(toIndentedString(fallbackFontPath)).append("\n");
    sb.append("    enableFallbackFont: ").append(toIndentedString(enableFallbackFont)).append("\n");
    sb.append("    downMixAudioBoost: ").append(toIndentedString(downMixAudioBoost)).append("\n");
    sb.append("    maxMuxingQueueSize: ").append(toIndentedString(maxMuxingQueueSize)).append("\n");
    sb.append("    enableThrottling: ").append(toIndentedString(enableThrottling)).append("\n");
    sb.append("    throttleDelaySeconds: ").append(toIndentedString(throttleDelaySeconds)).append("\n");
    sb.append("    hardwareAccelerationType: ").append(toIndentedString(hardwareAccelerationType)).append("\n");
    sb.append("    encoderAppPath: ").append(toIndentedString(encoderAppPath)).append("\n");
    sb.append("    encoderAppPathDisplay: ").append(toIndentedString(encoderAppPathDisplay)).append("\n");
    sb.append("    vaapiDevice: ").append(toIndentedString(vaapiDevice)).append("\n");
    sb.append("    enableTonemapping: ").append(toIndentedString(enableTonemapping)).append("\n");
    sb.append("    enableVppTonemapping: ").append(toIndentedString(enableVppTonemapping)).append("\n");
    sb.append("    tonemappingAlgorithm: ").append(toIndentedString(tonemappingAlgorithm)).append("\n");
    sb.append("    tonemappingMode: ").append(toIndentedString(tonemappingMode)).append("\n");
    sb.append("    tonemappingRange: ").append(toIndentedString(tonemappingRange)).append("\n");
    sb.append("    tonemappingDesat: ").append(toIndentedString(tonemappingDesat)).append("\n");
    sb.append("    tonemappingPeak: ").append(toIndentedString(tonemappingPeak)).append("\n");
    sb.append("    tonemappingParam: ").append(toIndentedString(tonemappingParam)).append("\n");
    sb.append("    vppTonemappingBrightness: ").append(toIndentedString(vppTonemappingBrightness)).append("\n");
    sb.append("    vppTonemappingContrast: ").append(toIndentedString(vppTonemappingContrast)).append("\n");
    sb.append("    h264Crf: ").append(toIndentedString(h264Crf)).append("\n");
    sb.append("    h265Crf: ").append(toIndentedString(h265Crf)).append("\n");
    sb.append("    encoderPreset: ").append(toIndentedString(encoderPreset)).append("\n");
    sb.append("    deinterlaceDoubleRate: ").append(toIndentedString(deinterlaceDoubleRate)).append("\n");
    sb.append("    deinterlaceMethod: ").append(toIndentedString(deinterlaceMethod)).append("\n");
    sb.append("    enableDecodingColorDepth10Hevc: ").append(toIndentedString(enableDecodingColorDepth10Hevc)).append("\n");
    sb.append("    enableDecodingColorDepth10Vp9: ").append(toIndentedString(enableDecodingColorDepth10Vp9)).append("\n");
    sb.append("    enableEnhancedNvdecDecoder: ").append(toIndentedString(enableEnhancedNvdecDecoder)).append("\n");
    sb.append("    preferSystemNativeHwDecoder: ").append(toIndentedString(preferSystemNativeHwDecoder)).append("\n");
    sb.append("    enableIntelLowPowerH264HwEncoder: ").append(toIndentedString(enableIntelLowPowerH264HwEncoder)).append("\n");
    sb.append("    enableIntelLowPowerHevcHwEncoder: ").append(toIndentedString(enableIntelLowPowerHevcHwEncoder)).append("\n");
    sb.append("    enableHardwareEncoding: ").append(toIndentedString(enableHardwareEncoding)).append("\n");
    sb.append("    allowHevcEncoding: ").append(toIndentedString(allowHevcEncoding)).append("\n");
    sb.append("    enableSubtitleExtraction: ").append(toIndentedString(enableSubtitleExtraction)).append("\n");
    sb.append("    hardwareDecodingCodecs: ").append(toIndentedString(hardwareDecodingCodecs)).append("\n");
    sb.append("    allowOnDemandMetadataBasedKeyframeExtractionForExtensions: ").append(toIndentedString(allowOnDemandMetadataBasedKeyframeExtractionForExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EncodingThreadCount");
    openapiFields.add("TranscodingTempPath");
    openapiFields.add("FallbackFontPath");
    openapiFields.add("EnableFallbackFont");
    openapiFields.add("DownMixAudioBoost");
    openapiFields.add("MaxMuxingQueueSize");
    openapiFields.add("EnableThrottling");
    openapiFields.add("ThrottleDelaySeconds");
    openapiFields.add("HardwareAccelerationType");
    openapiFields.add("EncoderAppPath");
    openapiFields.add("EncoderAppPathDisplay");
    openapiFields.add("VaapiDevice");
    openapiFields.add("EnableTonemapping");
    openapiFields.add("EnableVppTonemapping");
    openapiFields.add("TonemappingAlgorithm");
    openapiFields.add("TonemappingMode");
    openapiFields.add("TonemappingRange");
    openapiFields.add("TonemappingDesat");
    openapiFields.add("TonemappingPeak");
    openapiFields.add("TonemappingParam");
    openapiFields.add("VppTonemappingBrightness");
    openapiFields.add("VppTonemappingContrast");
    openapiFields.add("H264Crf");
    openapiFields.add("H265Crf");
    openapiFields.add("EncoderPreset");
    openapiFields.add("DeinterlaceDoubleRate");
    openapiFields.add("DeinterlaceMethod");
    openapiFields.add("EnableDecodingColorDepth10Hevc");
    openapiFields.add("EnableDecodingColorDepth10Vp9");
    openapiFields.add("EnableEnhancedNvdecDecoder");
    openapiFields.add("PreferSystemNativeHwDecoder");
    openapiFields.add("EnableIntelLowPowerH264HwEncoder");
    openapiFields.add("EnableIntelLowPowerHevcHwEncoder");
    openapiFields.add("EnableHardwareEncoding");
    openapiFields.add("AllowHevcEncoding");
    openapiFields.add("EnableSubtitleExtraction");
    openapiFields.add("HardwareDecodingCodecs");
    openapiFields.add("AllowOnDemandMetadataBasedKeyframeExtractionForExtensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncodingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncodingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncodingOptions is not found in the empty JSON string", EncodingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncodingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncodingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TranscodingTempPath") != null && !jsonObj.get("TranscodingTempPath").isJsonNull()) && !jsonObj.get("TranscodingTempPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TranscodingTempPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TranscodingTempPath").toString()));
      }
      if ((jsonObj.get("FallbackFontPath") != null && !jsonObj.get("FallbackFontPath").isJsonNull()) && !jsonObj.get("FallbackFontPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FallbackFontPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FallbackFontPath").toString()));
      }
      if ((jsonObj.get("HardwareAccelerationType") != null && !jsonObj.get("HardwareAccelerationType").isJsonNull()) && !jsonObj.get("HardwareAccelerationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HardwareAccelerationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HardwareAccelerationType").toString()));
      }
      if ((jsonObj.get("EncoderAppPath") != null && !jsonObj.get("EncoderAppPath").isJsonNull()) && !jsonObj.get("EncoderAppPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EncoderAppPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EncoderAppPath").toString()));
      }
      if ((jsonObj.get("EncoderAppPathDisplay") != null && !jsonObj.get("EncoderAppPathDisplay").isJsonNull()) && !jsonObj.get("EncoderAppPathDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EncoderAppPathDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EncoderAppPathDisplay").toString()));
      }
      if ((jsonObj.get("VaapiDevice") != null && !jsonObj.get("VaapiDevice").isJsonNull()) && !jsonObj.get("VaapiDevice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VaapiDevice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VaapiDevice").toString()));
      }
      if ((jsonObj.get("TonemappingAlgorithm") != null && !jsonObj.get("TonemappingAlgorithm").isJsonNull()) && !jsonObj.get("TonemappingAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TonemappingAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TonemappingAlgorithm").toString()));
      }
      if ((jsonObj.get("TonemappingMode") != null && !jsonObj.get("TonemappingMode").isJsonNull()) && !jsonObj.get("TonemappingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TonemappingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TonemappingMode").toString()));
      }
      if ((jsonObj.get("TonemappingRange") != null && !jsonObj.get("TonemappingRange").isJsonNull()) && !jsonObj.get("TonemappingRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TonemappingRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TonemappingRange").toString()));
      }
      if ((jsonObj.get("EncoderPreset") != null && !jsonObj.get("EncoderPreset").isJsonNull()) && !jsonObj.get("EncoderPreset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EncoderPreset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EncoderPreset").toString()));
      }
      if ((jsonObj.get("DeinterlaceMethod") != null && !jsonObj.get("DeinterlaceMethod").isJsonNull()) && !jsonObj.get("DeinterlaceMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeinterlaceMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeinterlaceMethod").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("HardwareDecodingCodecs") != null && !jsonObj.get("HardwareDecodingCodecs").isJsonNull() && !jsonObj.get("HardwareDecodingCodecs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `HardwareDecodingCodecs` to be an array in the JSON string but got `%s`", jsonObj.get("HardwareDecodingCodecs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AllowOnDemandMetadataBasedKeyframeExtractionForExtensions") != null && !jsonObj.get("AllowOnDemandMetadataBasedKeyframeExtractionForExtensions").isJsonNull() && !jsonObj.get("AllowOnDemandMetadataBasedKeyframeExtractionForExtensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AllowOnDemandMetadataBasedKeyframeExtractionForExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("AllowOnDemandMetadataBasedKeyframeExtractionForExtensions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncodingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncodingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncodingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncodingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<EncodingOptions>() {
           @Override
           public void write(JsonWriter out, EncodingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncodingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncodingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncodingOptions
   * @throws IOException if the JSON string is invalid with respect to EncodingOptions
   */
  public static EncodingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncodingOptions.class);
  }

  /**
   * Convert an instance of EncodingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

