/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.CodecProfile;
import org.openapitools.client.model.ContainerProfile;
import org.openapitools.client.model.DirectPlayProfile;
import org.openapitools.client.model.SubtitleProfile;
import org.openapitools.client.model.TranscodingProfile;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.  &lt;br /&gt;  Specifically, it defines the supported &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles\&quot;&gt;containers&lt;/see&gt; and  &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles\&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)  the device is able to direct play (without transcoding or remuxing),  as well as which &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles\&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&#39;t.
 */
@JsonPropertyOrder({
  DeviceProfile.JSON_PROPERTY_NAME,
  DeviceProfile.JSON_PROPERTY_ID,
  DeviceProfile.JSON_PROPERTY_MAX_STREAMING_BITRATE,
  DeviceProfile.JSON_PROPERTY_MAX_STATIC_BITRATE,
  DeviceProfile.JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE,
  DeviceProfile.JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE,
  DeviceProfile.JSON_PROPERTY_DIRECT_PLAY_PROFILES,
  DeviceProfile.JSON_PROPERTY_TRANSCODING_PROFILES,
  DeviceProfile.JSON_PROPERTY_CONTAINER_PROFILES,
  DeviceProfile.JSON_PROPERTY_CODEC_PROFILES,
  DeviceProfile.JSON_PROPERTY_SUBTITLE_PROFILES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class DeviceProfile {
  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ID = "Id";
  private JsonNullable<UUID> id = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_MAX_STREAMING_BITRATE = "MaxStreamingBitrate";
  private JsonNullable<Integer> maxStreamingBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_STATIC_BITRATE = "MaxStaticBitrate";
  private JsonNullable<Integer> maxStaticBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE = "MusicStreamingTranscodingBitrate";
  private JsonNullable<Integer> musicStreamingTranscodingBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE = "MaxStaticMusicBitrate";
  private JsonNullable<Integer> maxStaticMusicBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DIRECT_PLAY_PROFILES = "DirectPlayProfiles";
  @javax.annotation.Nullable
  private List<DirectPlayProfile> directPlayProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_TRANSCODING_PROFILES = "TranscodingProfiles";
  @javax.annotation.Nullable
  private List<TranscodingProfile> transcodingProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTAINER_PROFILES = "ContainerProfiles";
  @javax.annotation.Nullable
  private List<ContainerProfile> containerProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_CODEC_PROFILES = "CodecProfiles";
  @javax.annotation.Nullable
  private List<CodecProfile> codecProfiles = new ArrayList<>();

  public static final String JSON_PROPERTY_SUBTITLE_PROFILES = "SubtitleProfiles";
  @javax.annotation.Nullable
  private List<SubtitleProfile> subtitleProfiles = new ArrayList<>();

  public DeviceProfile() { 
  }

  public DeviceProfile name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Gets or sets the name of this device profile. User profiles must have a unique name.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public DeviceProfile id(@javax.annotation.Nullable UUID id) {
    this.id = JsonNullable.<UUID>of(id);
    return this;
  }

  /**
   * Gets or sets the unique internal identifier.
   * @return id
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<UUID> id) {
    this.id = id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = JsonNullable.<UUID>of(id);
  }


  public DeviceProfile maxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = JsonNullable.<Integer>of(maxStreamingBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for all streamed content.
   * @return maxStreamingBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxStreamingBitrate() {
        return maxStreamingBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_STREAMING_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxStreamingBitrate_JsonNullable() {
    return maxStreamingBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_STREAMING_BITRATE)
  public void setMaxStreamingBitrate_JsonNullable(JsonNullable<Integer> maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
  }

  public void setMaxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = JsonNullable.<Integer>of(maxStreamingBitrate);
  }


  public DeviceProfile maxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = JsonNullable.<Integer>of(maxStaticBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed content (&#x3D; direct played files).
   * @return maxStaticBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxStaticBitrate() {
        return maxStaticBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_STATIC_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxStaticBitrate_JsonNullable() {
    return maxStaticBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_STATIC_BITRATE)
  public void setMaxStaticBitrate_JsonNullable(JsonNullable<Integer> maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
  }

  public void setMaxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = JsonNullable.<Integer>of(maxStaticBitrate);
  }


  public DeviceProfile musicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = JsonNullable.<Integer>of(musicStreamingTranscodingBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for transcoded music streams.
   * @return musicStreamingTranscodingBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMusicStreamingTranscodingBitrate() {
        return musicStreamingTranscodingBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMusicStreamingTranscodingBitrate_JsonNullable() {
    return musicStreamingTranscodingBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MUSIC_STREAMING_TRANSCODING_BITRATE)
  public void setMusicStreamingTranscodingBitrate_JsonNullable(JsonNullable<Integer> musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
  }

  public void setMusicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = JsonNullable.<Integer>of(musicStreamingTranscodingBitrate);
  }


  public DeviceProfile maxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = JsonNullable.<Integer>of(maxStaticMusicBitrate);
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed (&#x3D; direct played) music files.
   * @return maxStaticMusicBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxStaticMusicBitrate() {
        return maxStaticMusicBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxStaticMusicBitrate_JsonNullable() {
    return maxStaticMusicBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_STATIC_MUSIC_BITRATE)
  public void setMaxStaticMusicBitrate_JsonNullable(JsonNullable<Integer> maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
  }

  public void setMaxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = JsonNullable.<Integer>of(maxStaticMusicBitrate);
  }


  public DeviceProfile directPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
    return this;
  }

  public DeviceProfile addDirectPlayProfilesItem(DirectPlayProfile directPlayProfilesItem) {
    if (this.directPlayProfiles == null) {
      this.directPlayProfiles = new ArrayList<>();
    }
    this.directPlayProfiles.add(directPlayProfilesItem);
    return this;
  }

  /**
   * Gets or sets the direct play profiles.
   * @return directPlayProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_PLAY_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<DirectPlayProfile> getDirectPlayProfiles() {
    return directPlayProfiles;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_PLAY_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
  }


  public DeviceProfile transcodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
    return this;
  }

  public DeviceProfile addTranscodingProfilesItem(TranscodingProfile transcodingProfilesItem) {
    if (this.transcodingProfiles == null) {
      this.transcodingProfiles = new ArrayList<>();
    }
    this.transcodingProfiles.add(transcodingProfilesItem);
    return this;
  }

  /**
   * Gets or sets the transcoding profiles.
   * @return transcodingProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSCODING_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<TranscodingProfile> getTranscodingProfiles() {
    return transcodingProfiles;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCODING_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
  }


  public DeviceProfile containerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
    return this;
  }

  public DeviceProfile addContainerProfilesItem(ContainerProfile containerProfilesItem) {
    if (this.containerProfiles == null) {
      this.containerProfiles = new ArrayList<>();
    }
    this.containerProfiles.add(containerProfilesItem);
    return this;
  }

  /**
   * Gets or sets the container profiles. Failing to meet these optional conditions causes transcoding to occur.
   * @return containerProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINER_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ContainerProfile> getContainerProfiles() {
    return containerProfiles;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
  }


  public DeviceProfile codecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
    return this;
  }

  public DeviceProfile addCodecProfilesItem(CodecProfile codecProfilesItem) {
    if (this.codecProfiles == null) {
      this.codecProfiles = new ArrayList<>();
    }
    this.codecProfiles.add(codecProfilesItem);
    return this;
  }

  /**
   * Gets or sets the codec profiles.
   * @return codecProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODEC_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<CodecProfile> getCodecProfiles() {
    return codecProfiles;
  }


  @JsonProperty(JSON_PROPERTY_CODEC_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
  }


  public DeviceProfile subtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
    return this;
  }

  public DeviceProfile addSubtitleProfilesItem(SubtitleProfile subtitleProfilesItem) {
    if (this.subtitleProfiles == null) {
      this.subtitleProfiles = new ArrayList<>();
    }
    this.subtitleProfiles.add(subtitleProfilesItem);
    return this;
  }

  /**
   * Gets or sets the subtitle profiles.
   * @return subtitleProfiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTITLE_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<SubtitleProfile> getSubtitleProfiles() {
    return subtitleProfiles;
  }


  @JsonProperty(JSON_PROPERTY_SUBTITLE_PROFILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
  }


  /**
   * Return true if this DeviceProfile object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceProfile deviceProfile = (DeviceProfile) o;
    return equalsNullable(this.name, deviceProfile.name) &&
        equalsNullable(this.id, deviceProfile.id) &&
        equalsNullable(this.maxStreamingBitrate, deviceProfile.maxStreamingBitrate) &&
        equalsNullable(this.maxStaticBitrate, deviceProfile.maxStaticBitrate) &&
        equalsNullable(this.musicStreamingTranscodingBitrate, deviceProfile.musicStreamingTranscodingBitrate) &&
        equalsNullable(this.maxStaticMusicBitrate, deviceProfile.maxStaticMusicBitrate) &&
        Objects.equals(this.directPlayProfiles, deviceProfile.directPlayProfiles) &&
        Objects.equals(this.transcodingProfiles, deviceProfile.transcodingProfiles) &&
        Objects.equals(this.containerProfiles, deviceProfile.containerProfiles) &&
        Objects.equals(this.codecProfiles, deviceProfile.codecProfiles) &&
        Objects.equals(this.subtitleProfiles, deviceProfile.subtitleProfiles);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(id), hashCodeNullable(maxStreamingBitrate), hashCodeNullable(maxStaticBitrate), hashCodeNullable(musicStreamingTranscodingBitrate), hashCodeNullable(maxStaticMusicBitrate), directPlayProfiles, transcodingProfiles, containerProfiles, codecProfiles, subtitleProfiles);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceProfile {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxStreamingBitrate: ").append(toIndentedString(maxStreamingBitrate)).append("\n");
    sb.append("    maxStaticBitrate: ").append(toIndentedString(maxStaticBitrate)).append("\n");
    sb.append("    musicStreamingTranscodingBitrate: ").append(toIndentedString(musicStreamingTranscodingBitrate)).append("\n");
    sb.append("    maxStaticMusicBitrate: ").append(toIndentedString(maxStaticMusicBitrate)).append("\n");
    sb.append("    directPlayProfiles: ").append(toIndentedString(directPlayProfiles)).append("\n");
    sb.append("    transcodingProfiles: ").append(toIndentedString(transcodingProfiles)).append("\n");
    sb.append("    containerProfiles: ").append(toIndentedString(containerProfiles)).append("\n");
    sb.append("    codecProfiles: ").append(toIndentedString(codecProfiles)).append("\n");
    sb.append("    subtitleProfiles: ").append(toIndentedString(subtitleProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `MaxStreamingBitrate` to the URL query string
    if (getMaxStreamingBitrate() != null) {
      joiner.add(String.format("%sMaxStreamingBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxStreamingBitrate()))));
    }

    // add `MaxStaticBitrate` to the URL query string
    if (getMaxStaticBitrate() != null) {
      joiner.add(String.format("%sMaxStaticBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxStaticBitrate()))));
    }

    // add `MusicStreamingTranscodingBitrate` to the URL query string
    if (getMusicStreamingTranscodingBitrate() != null) {
      joiner.add(String.format("%sMusicStreamingTranscodingBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMusicStreamingTranscodingBitrate()))));
    }

    // add `MaxStaticMusicBitrate` to the URL query string
    if (getMaxStaticMusicBitrate() != null) {
      joiner.add(String.format("%sMaxStaticMusicBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxStaticMusicBitrate()))));
    }

    // add `DirectPlayProfiles` to the URL query string
    if (getDirectPlayProfiles() != null) {
      for (int i = 0; i < getDirectPlayProfiles().size(); i++) {
        if (getDirectPlayProfiles().get(i) != null) {
          joiner.add(getDirectPlayProfiles().get(i).toUrlQueryString(String.format("%sDirectPlayProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `TranscodingProfiles` to the URL query string
    if (getTranscodingProfiles() != null) {
      for (int i = 0; i < getTranscodingProfiles().size(); i++) {
        if (getTranscodingProfiles().get(i) != null) {
          joiner.add(getTranscodingProfiles().get(i).toUrlQueryString(String.format("%sTranscodingProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `ContainerProfiles` to the URL query string
    if (getContainerProfiles() != null) {
      for (int i = 0; i < getContainerProfiles().size(); i++) {
        if (getContainerProfiles().get(i) != null) {
          joiner.add(getContainerProfiles().get(i).toUrlQueryString(String.format("%sContainerProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `CodecProfiles` to the URL query string
    if (getCodecProfiles() != null) {
      for (int i = 0; i < getCodecProfiles().size(); i++) {
        if (getCodecProfiles().get(i) != null) {
          joiner.add(getCodecProfiles().get(i).toUrlQueryString(String.format("%sCodecProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `SubtitleProfiles` to the URL query string
    if (getSubtitleProfiles() != null) {
      for (int i = 0; i < getSubtitleProfiles().size(); i++) {
        if (getSubtitleProfiles().get(i) != null) {
          joiner.add(getSubtitleProfiles().get(i).toUrlQueryString(String.format("%sSubtitleProfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

