/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.CodecProfile;
import org.openapitools.client.model.ContainerProfile;
import org.openapitools.client.model.DirectPlayProfile;
import org.openapitools.client.model.SubtitleProfile;
import org.openapitools.client.model.TranscodingProfile;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.  &lt;br /&gt;  Specifically, it defines the supported &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles\&quot;&gt;containers&lt;/see&gt; and  &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles\&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)  the device is able to direct play (without transcoding or remuxing),  as well as which &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles\&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&#39;t.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class DeviceProfile {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_MAX_STREAMING_BITRATE = "MaxStreamingBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STREAMING_BITRATE)
  @javax.annotation.Nullable
  private Integer maxStreamingBitrate;

  public static final String SERIALIZED_NAME_MAX_STATIC_BITRATE = "MaxStaticBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STATIC_BITRATE)
  @javax.annotation.Nullable
  private Integer maxStaticBitrate;

  public static final String SERIALIZED_NAME_MUSIC_STREAMING_TRANSCODING_BITRATE = "MusicStreamingTranscodingBitrate";
  @SerializedName(SERIALIZED_NAME_MUSIC_STREAMING_TRANSCODING_BITRATE)
  @javax.annotation.Nullable
  private Integer musicStreamingTranscodingBitrate;

  public static final String SERIALIZED_NAME_MAX_STATIC_MUSIC_BITRATE = "MaxStaticMusicBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STATIC_MUSIC_BITRATE)
  @javax.annotation.Nullable
  private Integer maxStaticMusicBitrate;

  public static final String SERIALIZED_NAME_DIRECT_PLAY_PROFILES = "DirectPlayProfiles";
  @SerializedName(SERIALIZED_NAME_DIRECT_PLAY_PROFILES)
  @javax.annotation.Nullable
  private List<DirectPlayProfile> directPlayProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSCODING_PROFILES = "TranscodingProfiles";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_PROFILES)
  @javax.annotation.Nullable
  private List<TranscodingProfile> transcodingProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER_PROFILES = "ContainerProfiles";
  @SerializedName(SERIALIZED_NAME_CONTAINER_PROFILES)
  @javax.annotation.Nullable
  private List<ContainerProfile> containerProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODEC_PROFILES = "CodecProfiles";
  @SerializedName(SERIALIZED_NAME_CODEC_PROFILES)
  @javax.annotation.Nullable
  private List<CodecProfile> codecProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBTITLE_PROFILES = "SubtitleProfiles";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_PROFILES)
  @javax.annotation.Nullable
  private List<SubtitleProfile> subtitleProfiles = new ArrayList<>();

  public DeviceProfile() {
  }

  public DeviceProfile name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name of this device profile. User profiles must have a unique name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public DeviceProfile id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the unique internal identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public DeviceProfile maxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for all streamed content.
   * @return maxStreamingBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStreamingBitrate() {
    return maxStreamingBitrate;
  }

  public void setMaxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
  }


  public DeviceProfile maxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed content (&#x3D; direct played files).
   * @return maxStaticBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStaticBitrate() {
    return maxStaticBitrate;
  }

  public void setMaxStaticBitrate(@javax.annotation.Nullable Integer maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
  }


  public DeviceProfile musicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for transcoded music streams.
   * @return musicStreamingTranscodingBitrate
   */
  @javax.annotation.Nullable
  public Integer getMusicStreamingTranscodingBitrate() {
    return musicStreamingTranscodingBitrate;
  }

  public void setMusicStreamingTranscodingBitrate(@javax.annotation.Nullable Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
  }


  public DeviceProfile maxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
    return this;
  }

  /**
   * Gets or sets the maximum allowed bitrate for statically streamed (&#x3D; direct played) music files.
   * @return maxStaticMusicBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStaticMusicBitrate() {
    return maxStaticMusicBitrate;
  }

  public void setMaxStaticMusicBitrate(@javax.annotation.Nullable Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
  }


  public DeviceProfile directPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
    return this;
  }

  public DeviceProfile addDirectPlayProfilesItem(DirectPlayProfile directPlayProfilesItem) {
    if (this.directPlayProfiles == null) {
      this.directPlayProfiles = new ArrayList<>();
    }
    this.directPlayProfiles.add(directPlayProfilesItem);
    return this;
  }

  /**
   * Gets or sets the direct play profiles.
   * @return directPlayProfiles
   */
  @javax.annotation.Nullable
  public List<DirectPlayProfile> getDirectPlayProfiles() {
    return directPlayProfiles;
  }

  public void setDirectPlayProfiles(@javax.annotation.Nullable List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
  }


  public DeviceProfile transcodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
    return this;
  }

  public DeviceProfile addTranscodingProfilesItem(TranscodingProfile transcodingProfilesItem) {
    if (this.transcodingProfiles == null) {
      this.transcodingProfiles = new ArrayList<>();
    }
    this.transcodingProfiles.add(transcodingProfilesItem);
    return this;
  }

  /**
   * Gets or sets the transcoding profiles.
   * @return transcodingProfiles
   */
  @javax.annotation.Nullable
  public List<TranscodingProfile> getTranscodingProfiles() {
    return transcodingProfiles;
  }

  public void setTranscodingProfiles(@javax.annotation.Nullable List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
  }


  public DeviceProfile containerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
    return this;
  }

  public DeviceProfile addContainerProfilesItem(ContainerProfile containerProfilesItem) {
    if (this.containerProfiles == null) {
      this.containerProfiles = new ArrayList<>();
    }
    this.containerProfiles.add(containerProfilesItem);
    return this;
  }

  /**
   * Gets or sets the container profiles. Failing to meet these optional conditions causes transcoding to occur.
   * @return containerProfiles
   */
  @javax.annotation.Nullable
  public List<ContainerProfile> getContainerProfiles() {
    return containerProfiles;
  }

  public void setContainerProfiles(@javax.annotation.Nullable List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
  }


  public DeviceProfile codecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
    return this;
  }

  public DeviceProfile addCodecProfilesItem(CodecProfile codecProfilesItem) {
    if (this.codecProfiles == null) {
      this.codecProfiles = new ArrayList<>();
    }
    this.codecProfiles.add(codecProfilesItem);
    return this;
  }

  /**
   * Gets or sets the codec profiles.
   * @return codecProfiles
   */
  @javax.annotation.Nullable
  public List<CodecProfile> getCodecProfiles() {
    return codecProfiles;
  }

  public void setCodecProfiles(@javax.annotation.Nullable List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
  }


  public DeviceProfile subtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
    return this;
  }

  public DeviceProfile addSubtitleProfilesItem(SubtitleProfile subtitleProfilesItem) {
    if (this.subtitleProfiles == null) {
      this.subtitleProfiles = new ArrayList<>();
    }
    this.subtitleProfiles.add(subtitleProfilesItem);
    return this;
  }

  /**
   * Gets or sets the subtitle profiles.
   * @return subtitleProfiles
   */
  @javax.annotation.Nullable
  public List<SubtitleProfile> getSubtitleProfiles() {
    return subtitleProfiles;
  }

  public void setSubtitleProfiles(@javax.annotation.Nullable List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceProfile deviceProfile = (DeviceProfile) o;
    return Objects.equals(this.name, deviceProfile.name) &&
        Objects.equals(this.id, deviceProfile.id) &&
        Objects.equals(this.maxStreamingBitrate, deviceProfile.maxStreamingBitrate) &&
        Objects.equals(this.maxStaticBitrate, deviceProfile.maxStaticBitrate) &&
        Objects.equals(this.musicStreamingTranscodingBitrate, deviceProfile.musicStreamingTranscodingBitrate) &&
        Objects.equals(this.maxStaticMusicBitrate, deviceProfile.maxStaticMusicBitrate) &&
        Objects.equals(this.directPlayProfiles, deviceProfile.directPlayProfiles) &&
        Objects.equals(this.transcodingProfiles, deviceProfile.transcodingProfiles) &&
        Objects.equals(this.containerProfiles, deviceProfile.containerProfiles) &&
        Objects.equals(this.codecProfiles, deviceProfile.codecProfiles) &&
        Objects.equals(this.subtitleProfiles, deviceProfile.subtitleProfiles);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, maxStreamingBitrate, maxStaticBitrate, musicStreamingTranscodingBitrate, maxStaticMusicBitrate, directPlayProfiles, transcodingProfiles, containerProfiles, codecProfiles, subtitleProfiles);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceProfile {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxStreamingBitrate: ").append(toIndentedString(maxStreamingBitrate)).append("\n");
    sb.append("    maxStaticBitrate: ").append(toIndentedString(maxStaticBitrate)).append("\n");
    sb.append("    musicStreamingTranscodingBitrate: ").append(toIndentedString(musicStreamingTranscodingBitrate)).append("\n");
    sb.append("    maxStaticMusicBitrate: ").append(toIndentedString(maxStaticMusicBitrate)).append("\n");
    sb.append("    directPlayProfiles: ").append(toIndentedString(directPlayProfiles)).append("\n");
    sb.append("    transcodingProfiles: ").append(toIndentedString(transcodingProfiles)).append("\n");
    sb.append("    containerProfiles: ").append(toIndentedString(containerProfiles)).append("\n");
    sb.append("    codecProfiles: ").append(toIndentedString(codecProfiles)).append("\n");
    sb.append("    subtitleProfiles: ").append(toIndentedString(subtitleProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Id");
    openapiFields.add("MaxStreamingBitrate");
    openapiFields.add("MaxStaticBitrate");
    openapiFields.add("MusicStreamingTranscodingBitrate");
    openapiFields.add("MaxStaticMusicBitrate");
    openapiFields.add("DirectPlayProfiles");
    openapiFields.add("TranscodingProfiles");
    openapiFields.add("ContainerProfiles");
    openapiFields.add("CodecProfiles");
    openapiFields.add("SubtitleProfiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceProfile is not found in the empty JSON string", DeviceProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (jsonObj.get("DirectPlayProfiles") != null && !jsonObj.get("DirectPlayProfiles").isJsonNull()) {
        JsonArray jsonArraydirectPlayProfiles = jsonObj.getAsJsonArray("DirectPlayProfiles");
        if (jsonArraydirectPlayProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DirectPlayProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DirectPlayProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("DirectPlayProfiles").toString()));
          }

          // validate the optional field `DirectPlayProfiles` (array)
          for (int i = 0; i < jsonArraydirectPlayProfiles.size(); i++) {
            DirectPlayProfile.validateJsonElement(jsonArraydirectPlayProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("TranscodingProfiles") != null && !jsonObj.get("TranscodingProfiles").isJsonNull()) {
        JsonArray jsonArraytranscodingProfiles = jsonObj.getAsJsonArray("TranscodingProfiles");
        if (jsonArraytranscodingProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TranscodingProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TranscodingProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("TranscodingProfiles").toString()));
          }

          // validate the optional field `TranscodingProfiles` (array)
          for (int i = 0; i < jsonArraytranscodingProfiles.size(); i++) {
            TranscodingProfile.validateJsonElement(jsonArraytranscodingProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("ContainerProfiles") != null && !jsonObj.get("ContainerProfiles").isJsonNull()) {
        JsonArray jsonArraycontainerProfiles = jsonObj.getAsJsonArray("ContainerProfiles");
        if (jsonArraycontainerProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContainerProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContainerProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("ContainerProfiles").toString()));
          }

          // validate the optional field `ContainerProfiles` (array)
          for (int i = 0; i < jsonArraycontainerProfiles.size(); i++) {
            ContainerProfile.validateJsonElement(jsonArraycontainerProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("CodecProfiles") != null && !jsonObj.get("CodecProfiles").isJsonNull()) {
        JsonArray jsonArraycodecProfiles = jsonObj.getAsJsonArray("CodecProfiles");
        if (jsonArraycodecProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CodecProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CodecProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("CodecProfiles").toString()));
          }

          // validate the optional field `CodecProfiles` (array)
          for (int i = 0; i < jsonArraycodecProfiles.size(); i++) {
            CodecProfile.validateJsonElement(jsonArraycodecProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("SubtitleProfiles") != null && !jsonObj.get("SubtitleProfiles").isJsonNull()) {
        JsonArray jsonArraysubtitleProfiles = jsonObj.getAsJsonArray("SubtitleProfiles");
        if (jsonArraysubtitleProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SubtitleProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SubtitleProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleProfiles").toString()));
          }

          // validate the optional field `SubtitleProfiles` (array)
          for (int i = 0; i < jsonArraysubtitleProfiles.size(); i++) {
            SubtitleProfile.validateJsonElement(jsonArraysubtitleProfiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceProfile>() {
           @Override
           public void write(JsonWriter out, DeviceProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceProfile
   * @throws IOException if the JSON string is invalid with respect to DeviceProfile
   */
  public static DeviceProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceProfile.class);
  }

  /**
   * Convert an instance of DeviceProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

