/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PlaylistUserPermissions;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Update existing playlist dto. Fields set to &#x60;null&#x60; will not be updated and keep their current values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class UpdatePlaylistDto {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_IDS = "Ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  @javax.annotation.Nullable
  private List<UUID> ids;

  public static final String SERIALIZED_NAME_USERS = "Users";
  @SerializedName(SERIALIZED_NAME_USERS)
  @javax.annotation.Nullable
  private List<PlaylistUserPermissions> users;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "IsPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  @javax.annotation.Nullable
  private Boolean isPublic;

  public UpdatePlaylistDto() {
  }

  public UpdatePlaylistDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name of the new playlist.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public UpdatePlaylistDto ids(@javax.annotation.Nullable List<UUID> ids) {
    this.ids = ids;
    return this;
  }

  public UpdatePlaylistDto addIdsItem(UUID idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

  /**
   * Gets or sets item ids of the playlist.
   * @return ids
   */
  @javax.annotation.Nullable
  public List<UUID> getIds() {
    return ids;
  }

  public void setIds(@javax.annotation.Nullable List<UUID> ids) {
    this.ids = ids;
  }


  public UpdatePlaylistDto users(@javax.annotation.Nullable List<PlaylistUserPermissions> users) {
    this.users = users;
    return this;
  }

  public UpdatePlaylistDto addUsersItem(PlaylistUserPermissions usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Gets or sets the playlist users.
   * @return users
   */
  @javax.annotation.Nullable
  public List<PlaylistUserPermissions> getUsers() {
    return users;
  }

  public void setUsers(@javax.annotation.Nullable List<PlaylistUserPermissions> users) {
    this.users = users;
  }


  public UpdatePlaylistDto isPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the playlist is public.
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = isPublic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePlaylistDto updatePlaylistDto = (UpdatePlaylistDto) o;
    return Objects.equals(this.name, updatePlaylistDto.name) &&
        Objects.equals(this.ids, updatePlaylistDto.ids) &&
        Objects.equals(this.users, updatePlaylistDto.users) &&
        Objects.equals(this.isPublic, updatePlaylistDto.isPublic);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, ids, users, isPublic);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePlaylistDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Ids");
    openapiFields.add("Users");
    openapiFields.add("IsPublic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePlaylistDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePlaylistDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePlaylistDto is not found in the empty JSON string", UpdatePlaylistDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePlaylistDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePlaylistDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Ids") != null && !jsonObj.get("Ids").isJsonNull() && !jsonObj.get("Ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ids` to be an array in the JSON string but got `%s`", jsonObj.get("Ids").toString()));
      }
      if (jsonObj.get("Users") != null && !jsonObj.get("Users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("Users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Users` to be an array in the JSON string but got `%s`", jsonObj.get("Users").toString()));
          }

          // validate the optional field `Users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            PlaylistUserPermissions.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePlaylistDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePlaylistDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePlaylistDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePlaylistDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePlaylistDto>() {
           @Override
           public void write(JsonWriter out, UpdatePlaylistDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePlaylistDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePlaylistDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePlaylistDto
   * @throws IOException if the JSON string is invalid with respect to UpdatePlaylistDto
   */
  public static UpdatePlaylistDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePlaylistDto.class);
  }

  /**
   * Convert an instance of UpdatePlaylistDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

