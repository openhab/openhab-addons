/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.DeviceProfile;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Plabyback info dto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class PlaybackInfoDto {
  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private UUID userId;

  public static final String SERIALIZED_NAME_MAX_STREAMING_BITRATE = "MaxStreamingBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STREAMING_BITRATE)
  @javax.annotation.Nullable
  private Integer maxStreamingBitrate;

  public static final String SERIALIZED_NAME_START_TIME_TICKS = "StartTimeTicks";
  @SerializedName(SERIALIZED_NAME_START_TIME_TICKS)
  @javax.annotation.Nullable
  private Long startTimeTicks;

  public static final String SERIALIZED_NAME_AUDIO_STREAM_INDEX = "AudioStreamIndex";
  @SerializedName(SERIALIZED_NAME_AUDIO_STREAM_INDEX)
  @javax.annotation.Nullable
  private Integer audioStreamIndex;

  public static final String SERIALIZED_NAME_SUBTITLE_STREAM_INDEX = "SubtitleStreamIndex";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_STREAM_INDEX)
  @javax.annotation.Nullable
  private Integer subtitleStreamIndex;

  public static final String SERIALIZED_NAME_MAX_AUDIO_CHANNELS = "MaxAudioChannels";
  @SerializedName(SERIALIZED_NAME_MAX_AUDIO_CHANNELS)
  @javax.annotation.Nullable
  private Integer maxAudioChannels;

  public static final String SERIALIZED_NAME_MEDIA_SOURCE_ID = "MediaSourceId";
  @SerializedName(SERIALIZED_NAME_MEDIA_SOURCE_ID)
  @javax.annotation.Nullable
  private String mediaSourceId;

  public static final String SERIALIZED_NAME_LIVE_STREAM_ID = "LiveStreamId";
  @SerializedName(SERIALIZED_NAME_LIVE_STREAM_ID)
  @javax.annotation.Nullable
  private String liveStreamId;

  public static final String SERIALIZED_NAME_DEVICE_PROFILE = "DeviceProfile";
  @SerializedName(SERIALIZED_NAME_DEVICE_PROFILE)
  @javax.annotation.Nullable
  private DeviceProfile deviceProfile;

  public static final String SERIALIZED_NAME_ENABLE_DIRECT_PLAY = "EnableDirectPlay";
  @SerializedName(SERIALIZED_NAME_ENABLE_DIRECT_PLAY)
  @javax.annotation.Nullable
  private Boolean enableDirectPlay;

  public static final String SERIALIZED_NAME_ENABLE_DIRECT_STREAM = "EnableDirectStream";
  @SerializedName(SERIALIZED_NAME_ENABLE_DIRECT_STREAM)
  @javax.annotation.Nullable
  private Boolean enableDirectStream;

  public static final String SERIALIZED_NAME_ENABLE_TRANSCODING = "EnableTranscoding";
  @SerializedName(SERIALIZED_NAME_ENABLE_TRANSCODING)
  @javax.annotation.Nullable
  private Boolean enableTranscoding;

  public static final String SERIALIZED_NAME_ALLOW_VIDEO_STREAM_COPY = "AllowVideoStreamCopy";
  @SerializedName(SERIALIZED_NAME_ALLOW_VIDEO_STREAM_COPY)
  @javax.annotation.Nullable
  private Boolean allowVideoStreamCopy;

  public static final String SERIALIZED_NAME_ALLOW_AUDIO_STREAM_COPY = "AllowAudioStreamCopy";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUDIO_STREAM_COPY)
  @javax.annotation.Nullable
  private Boolean allowAudioStreamCopy;

  public static final String SERIALIZED_NAME_AUTO_OPEN_LIVE_STREAM = "AutoOpenLiveStream";
  @SerializedName(SERIALIZED_NAME_AUTO_OPEN_LIVE_STREAM)
  @javax.annotation.Nullable
  private Boolean autoOpenLiveStream;

  public static final String SERIALIZED_NAME_ALWAYS_BURN_IN_SUBTITLE_WHEN_TRANSCODING = "AlwaysBurnInSubtitleWhenTranscoding";
  @SerializedName(SERIALIZED_NAME_ALWAYS_BURN_IN_SUBTITLE_WHEN_TRANSCODING)
  @javax.annotation.Nullable
  private Boolean alwaysBurnInSubtitleWhenTranscoding;

  public PlaybackInfoDto() {
  }

  public PlaybackInfoDto userId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Gets or sets the playback userId.
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
  }


  public PlaybackInfoDto maxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
    return this;
  }

  /**
   * Gets or sets the max streaming bitrate.
   * @return maxStreamingBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStreamingBitrate() {
    return maxStreamingBitrate;
  }

  public void setMaxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
  }


  public PlaybackInfoDto startTimeTicks(@javax.annotation.Nullable Long startTimeTicks) {
    this.startTimeTicks = startTimeTicks;
    return this;
  }

  /**
   * Gets or sets the start time in ticks.
   * @return startTimeTicks
   */
  @javax.annotation.Nullable
  public Long getStartTimeTicks() {
    return startTimeTicks;
  }

  public void setStartTimeTicks(@javax.annotation.Nullable Long startTimeTicks) {
    this.startTimeTicks = startTimeTicks;
  }


  public PlaybackInfoDto audioStreamIndex(@javax.annotation.Nullable Integer audioStreamIndex) {
    this.audioStreamIndex = audioStreamIndex;
    return this;
  }

  /**
   * Gets or sets the audio stream index.
   * @return audioStreamIndex
   */
  @javax.annotation.Nullable
  public Integer getAudioStreamIndex() {
    return audioStreamIndex;
  }

  public void setAudioStreamIndex(@javax.annotation.Nullable Integer audioStreamIndex) {
    this.audioStreamIndex = audioStreamIndex;
  }


  public PlaybackInfoDto subtitleStreamIndex(@javax.annotation.Nullable Integer subtitleStreamIndex) {
    this.subtitleStreamIndex = subtitleStreamIndex;
    return this;
  }

  /**
   * Gets or sets the subtitle stream index.
   * @return subtitleStreamIndex
   */
  @javax.annotation.Nullable
  public Integer getSubtitleStreamIndex() {
    return subtitleStreamIndex;
  }

  public void setSubtitleStreamIndex(@javax.annotation.Nullable Integer subtitleStreamIndex) {
    this.subtitleStreamIndex = subtitleStreamIndex;
  }


  public PlaybackInfoDto maxAudioChannels(@javax.annotation.Nullable Integer maxAudioChannels) {
    this.maxAudioChannels = maxAudioChannels;
    return this;
  }

  /**
   * Gets or sets the max audio channels.
   * @return maxAudioChannels
   */
  @javax.annotation.Nullable
  public Integer getMaxAudioChannels() {
    return maxAudioChannels;
  }

  public void setMaxAudioChannels(@javax.annotation.Nullable Integer maxAudioChannels) {
    this.maxAudioChannels = maxAudioChannels;
  }


  public PlaybackInfoDto mediaSourceId(@javax.annotation.Nullable String mediaSourceId) {
    this.mediaSourceId = mediaSourceId;
    return this;
  }

  /**
   * Gets or sets the media source id.
   * @return mediaSourceId
   */
  @javax.annotation.Nullable
  public String getMediaSourceId() {
    return mediaSourceId;
  }

  public void setMediaSourceId(@javax.annotation.Nullable String mediaSourceId) {
    this.mediaSourceId = mediaSourceId;
  }


  public PlaybackInfoDto liveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = liveStreamId;
    return this;
  }

  /**
   * Gets or sets the live stream id.
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  public String getLiveStreamId() {
    return liveStreamId;
  }

  public void setLiveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = liveStreamId;
  }


  public PlaybackInfoDto deviceProfile(@javax.annotation.Nullable DeviceProfile deviceProfile) {
    this.deviceProfile = deviceProfile;
    return this;
  }

  /**
   * Gets or sets the device profile.
   * @return deviceProfile
   */
  @javax.annotation.Nullable
  public DeviceProfile getDeviceProfile() {
    return deviceProfile;
  }

  public void setDeviceProfile(@javax.annotation.Nullable DeviceProfile deviceProfile) {
    this.deviceProfile = deviceProfile;
  }


  public PlaybackInfoDto enableDirectPlay(@javax.annotation.Nullable Boolean enableDirectPlay) {
    this.enableDirectPlay = enableDirectPlay;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable direct play.
   * @return enableDirectPlay
   */
  @javax.annotation.Nullable
  public Boolean getEnableDirectPlay() {
    return enableDirectPlay;
  }

  public void setEnableDirectPlay(@javax.annotation.Nullable Boolean enableDirectPlay) {
    this.enableDirectPlay = enableDirectPlay;
  }


  public PlaybackInfoDto enableDirectStream(@javax.annotation.Nullable Boolean enableDirectStream) {
    this.enableDirectStream = enableDirectStream;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable direct stream.
   * @return enableDirectStream
   */
  @javax.annotation.Nullable
  public Boolean getEnableDirectStream() {
    return enableDirectStream;
  }

  public void setEnableDirectStream(@javax.annotation.Nullable Boolean enableDirectStream) {
    this.enableDirectStream = enableDirectStream;
  }


  public PlaybackInfoDto enableTranscoding(@javax.annotation.Nullable Boolean enableTranscoding) {
    this.enableTranscoding = enableTranscoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable transcoding.
   * @return enableTranscoding
   */
  @javax.annotation.Nullable
  public Boolean getEnableTranscoding() {
    return enableTranscoding;
  }

  public void setEnableTranscoding(@javax.annotation.Nullable Boolean enableTranscoding) {
    this.enableTranscoding = enableTranscoding;
  }


  public PlaybackInfoDto allowVideoStreamCopy(@javax.annotation.Nullable Boolean allowVideoStreamCopy) {
    this.allowVideoStreamCopy = allowVideoStreamCopy;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable video stream copy.
   * @return allowVideoStreamCopy
   */
  @javax.annotation.Nullable
  public Boolean getAllowVideoStreamCopy() {
    return allowVideoStreamCopy;
  }

  public void setAllowVideoStreamCopy(@javax.annotation.Nullable Boolean allowVideoStreamCopy) {
    this.allowVideoStreamCopy = allowVideoStreamCopy;
  }


  public PlaybackInfoDto allowAudioStreamCopy(@javax.annotation.Nullable Boolean allowAudioStreamCopy) {
    this.allowAudioStreamCopy = allowAudioStreamCopy;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to allow audio stream copy.
   * @return allowAudioStreamCopy
   */
  @javax.annotation.Nullable
  public Boolean getAllowAudioStreamCopy() {
    return allowAudioStreamCopy;
  }

  public void setAllowAudioStreamCopy(@javax.annotation.Nullable Boolean allowAudioStreamCopy) {
    this.allowAudioStreamCopy = allowAudioStreamCopy;
  }


  public PlaybackInfoDto autoOpenLiveStream(@javax.annotation.Nullable Boolean autoOpenLiveStream) {
    this.autoOpenLiveStream = autoOpenLiveStream;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to auto open the live stream.
   * @return autoOpenLiveStream
   */
  @javax.annotation.Nullable
  public Boolean getAutoOpenLiveStream() {
    return autoOpenLiveStream;
  }

  public void setAutoOpenLiveStream(@javax.annotation.Nullable Boolean autoOpenLiveStream) {
    this.autoOpenLiveStream = autoOpenLiveStream;
  }


  public PlaybackInfoDto alwaysBurnInSubtitleWhenTranscoding(@javax.annotation.Nullable Boolean alwaysBurnInSubtitleWhenTranscoding) {
    this.alwaysBurnInSubtitleWhenTranscoding = alwaysBurnInSubtitleWhenTranscoding;
    return this;
  }

  /**
   * Gets or sets a value indicating whether always burn in subtitles when transcoding.
   * @return alwaysBurnInSubtitleWhenTranscoding
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysBurnInSubtitleWhenTranscoding() {
    return alwaysBurnInSubtitleWhenTranscoding;
  }

  public void setAlwaysBurnInSubtitleWhenTranscoding(@javax.annotation.Nullable Boolean alwaysBurnInSubtitleWhenTranscoding) {
    this.alwaysBurnInSubtitleWhenTranscoding = alwaysBurnInSubtitleWhenTranscoding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaybackInfoDto playbackInfoDto = (PlaybackInfoDto) o;
    return Objects.equals(this.userId, playbackInfoDto.userId) &&
        Objects.equals(this.maxStreamingBitrate, playbackInfoDto.maxStreamingBitrate) &&
        Objects.equals(this.startTimeTicks, playbackInfoDto.startTimeTicks) &&
        Objects.equals(this.audioStreamIndex, playbackInfoDto.audioStreamIndex) &&
        Objects.equals(this.subtitleStreamIndex, playbackInfoDto.subtitleStreamIndex) &&
        Objects.equals(this.maxAudioChannels, playbackInfoDto.maxAudioChannels) &&
        Objects.equals(this.mediaSourceId, playbackInfoDto.mediaSourceId) &&
        Objects.equals(this.liveStreamId, playbackInfoDto.liveStreamId) &&
        Objects.equals(this.deviceProfile, playbackInfoDto.deviceProfile) &&
        Objects.equals(this.enableDirectPlay, playbackInfoDto.enableDirectPlay) &&
        Objects.equals(this.enableDirectStream, playbackInfoDto.enableDirectStream) &&
        Objects.equals(this.enableTranscoding, playbackInfoDto.enableTranscoding) &&
        Objects.equals(this.allowVideoStreamCopy, playbackInfoDto.allowVideoStreamCopy) &&
        Objects.equals(this.allowAudioStreamCopy, playbackInfoDto.allowAudioStreamCopy) &&
        Objects.equals(this.autoOpenLiveStream, playbackInfoDto.autoOpenLiveStream) &&
        Objects.equals(this.alwaysBurnInSubtitleWhenTranscoding, playbackInfoDto.alwaysBurnInSubtitleWhenTranscoding);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, deviceProfile, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, autoOpenLiveStream, alwaysBurnInSubtitleWhenTranscoding);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaybackInfoDto {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    maxStreamingBitrate: ").append(toIndentedString(maxStreamingBitrate)).append("\n");
    sb.append("    startTimeTicks: ").append(toIndentedString(startTimeTicks)).append("\n");
    sb.append("    audioStreamIndex: ").append(toIndentedString(audioStreamIndex)).append("\n");
    sb.append("    subtitleStreamIndex: ").append(toIndentedString(subtitleStreamIndex)).append("\n");
    sb.append("    maxAudioChannels: ").append(toIndentedString(maxAudioChannels)).append("\n");
    sb.append("    mediaSourceId: ").append(toIndentedString(mediaSourceId)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    deviceProfile: ").append(toIndentedString(deviceProfile)).append("\n");
    sb.append("    enableDirectPlay: ").append(toIndentedString(enableDirectPlay)).append("\n");
    sb.append("    enableDirectStream: ").append(toIndentedString(enableDirectStream)).append("\n");
    sb.append("    enableTranscoding: ").append(toIndentedString(enableTranscoding)).append("\n");
    sb.append("    allowVideoStreamCopy: ").append(toIndentedString(allowVideoStreamCopy)).append("\n");
    sb.append("    allowAudioStreamCopy: ").append(toIndentedString(allowAudioStreamCopy)).append("\n");
    sb.append("    autoOpenLiveStream: ").append(toIndentedString(autoOpenLiveStream)).append("\n");
    sb.append("    alwaysBurnInSubtitleWhenTranscoding: ").append(toIndentedString(alwaysBurnInSubtitleWhenTranscoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UserId");
    openapiFields.add("MaxStreamingBitrate");
    openapiFields.add("StartTimeTicks");
    openapiFields.add("AudioStreamIndex");
    openapiFields.add("SubtitleStreamIndex");
    openapiFields.add("MaxAudioChannels");
    openapiFields.add("MediaSourceId");
    openapiFields.add("LiveStreamId");
    openapiFields.add("DeviceProfile");
    openapiFields.add("EnableDirectPlay");
    openapiFields.add("EnableDirectStream");
    openapiFields.add("EnableTranscoding");
    openapiFields.add("AllowVideoStreamCopy");
    openapiFields.add("AllowAudioStreamCopy");
    openapiFields.add("AutoOpenLiveStream");
    openapiFields.add("AlwaysBurnInSubtitleWhenTranscoding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaybackInfoDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaybackInfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaybackInfoDto is not found in the empty JSON string", PlaybackInfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaybackInfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaybackInfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
      if ((jsonObj.get("MediaSourceId") != null && !jsonObj.get("MediaSourceId").isJsonNull()) && !jsonObj.get("MediaSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MediaSourceId").toString()));
      }
      if ((jsonObj.get("LiveStreamId") != null && !jsonObj.get("LiveStreamId").isJsonNull()) && !jsonObj.get("LiveStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveStreamId").toString()));
      }
      // validate the optional field `DeviceProfile`
      if (jsonObj.get("DeviceProfile") != null && !jsonObj.get("DeviceProfile").isJsonNull()) {
        DeviceProfile.validateJsonElement(jsonObj.get("DeviceProfile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaybackInfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaybackInfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaybackInfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaybackInfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaybackInfoDto>() {
           @Override
           public void write(JsonWriter out, PlaybackInfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaybackInfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaybackInfoDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaybackInfoDto
   * @throws IOException if the JSON string is invalid with respect to PlaybackInfoDto
   */
  public static PlaybackInfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaybackInfoDto.class);
  }

  /**
   * Convert an instance of PlaybackInfoDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

