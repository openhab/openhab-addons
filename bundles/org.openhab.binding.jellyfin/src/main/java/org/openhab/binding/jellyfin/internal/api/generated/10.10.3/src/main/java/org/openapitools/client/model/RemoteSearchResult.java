/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RemoteSearchResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class RemoteSearchResult {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER_IDS = "ProviderIds";
  @SerializedName(SERIALIZED_NAME_PROVIDER_IDS)
  @javax.annotation.Nullable
  private Map<String, String> providerIds;

  public static final String SERIALIZED_NAME_PRODUCTION_YEAR = "ProductionYear";
  @SerializedName(SERIALIZED_NAME_PRODUCTION_YEAR)
  @javax.annotation.Nullable
  private Integer productionYear;

  public static final String SERIALIZED_NAME_INDEX_NUMBER = "IndexNumber";
  @SerializedName(SERIALIZED_NAME_INDEX_NUMBER)
  @javax.annotation.Nullable
  private Integer indexNumber;

  public static final String SERIALIZED_NAME_INDEX_NUMBER_END = "IndexNumberEnd";
  @SerializedName(SERIALIZED_NAME_INDEX_NUMBER_END)
  @javax.annotation.Nullable
  private Integer indexNumberEnd;

  public static final String SERIALIZED_NAME_PARENT_INDEX_NUMBER = "ParentIndexNumber";
  @SerializedName(SERIALIZED_NAME_PARENT_INDEX_NUMBER)
  @javax.annotation.Nullable
  private Integer parentIndexNumber;

  public static final String SERIALIZED_NAME_PREMIERE_DATE = "PremiereDate";
  @SerializedName(SERIALIZED_NAME_PREMIERE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime premiereDate;

  public static final String SERIALIZED_NAME_IMAGE_URL = "ImageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  @javax.annotation.Nullable
  private String imageUrl;

  public static final String SERIALIZED_NAME_SEARCH_PROVIDER_NAME = "SearchProviderName";
  @SerializedName(SERIALIZED_NAME_SEARCH_PROVIDER_NAME)
  @javax.annotation.Nullable
  private String searchProviderName;

  public static final String SERIALIZED_NAME_OVERVIEW = "Overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  @javax.annotation.Nullable
  private String overview;

  public static final String SERIALIZED_NAME_ALBUM_ARTIST = "AlbumArtist";
  @SerializedName(SERIALIZED_NAME_ALBUM_ARTIST)
  @javax.annotation.Nullable
  private RemoteSearchResult albumArtist;

  public static final String SERIALIZED_NAME_ARTISTS = "Artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  @javax.annotation.Nullable
  private List<RemoteSearchResult> artists;

  public RemoteSearchResult() {
  }

  public RemoteSearchResult name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public RemoteSearchResult providerIds(@javax.annotation.Nullable Map<String, String> providerIds) {
    this.providerIds = providerIds;
    return this;
  }

  public RemoteSearchResult putProviderIdsItem(String key, String providerIdsItem) {
    if (this.providerIds == null) {
      this.providerIds = new HashMap<>();
    }
    this.providerIds.put(key, providerIdsItem);
    return this;
  }

  /**
   * Gets or sets the provider ids.
   * @return providerIds
   */
  @javax.annotation.Nullable
  public Map<String, String> getProviderIds() {
    return providerIds;
  }

  public void setProviderIds(@javax.annotation.Nullable Map<String, String> providerIds) {
    this.providerIds = providerIds;
  }


  public RemoteSearchResult productionYear(@javax.annotation.Nullable Integer productionYear) {
    this.productionYear = productionYear;
    return this;
  }

  /**
   * Gets or sets the year.
   * @return productionYear
   */
  @javax.annotation.Nullable
  public Integer getProductionYear() {
    return productionYear;
  }

  public void setProductionYear(@javax.annotation.Nullable Integer productionYear) {
    this.productionYear = productionYear;
  }


  public RemoteSearchResult indexNumber(@javax.annotation.Nullable Integer indexNumber) {
    this.indexNumber = indexNumber;
    return this;
  }

  /**
   * Get indexNumber
   * @return indexNumber
   */
  @javax.annotation.Nullable
  public Integer getIndexNumber() {
    return indexNumber;
  }

  public void setIndexNumber(@javax.annotation.Nullable Integer indexNumber) {
    this.indexNumber = indexNumber;
  }


  public RemoteSearchResult indexNumberEnd(@javax.annotation.Nullable Integer indexNumberEnd) {
    this.indexNumberEnd = indexNumberEnd;
    return this;
  }

  /**
   * Get indexNumberEnd
   * @return indexNumberEnd
   */
  @javax.annotation.Nullable
  public Integer getIndexNumberEnd() {
    return indexNumberEnd;
  }

  public void setIndexNumberEnd(@javax.annotation.Nullable Integer indexNumberEnd) {
    this.indexNumberEnd = indexNumberEnd;
  }


  public RemoteSearchResult parentIndexNumber(@javax.annotation.Nullable Integer parentIndexNumber) {
    this.parentIndexNumber = parentIndexNumber;
    return this;
  }

  /**
   * Get parentIndexNumber
   * @return parentIndexNumber
   */
  @javax.annotation.Nullable
  public Integer getParentIndexNumber() {
    return parentIndexNumber;
  }

  public void setParentIndexNumber(@javax.annotation.Nullable Integer parentIndexNumber) {
    this.parentIndexNumber = parentIndexNumber;
  }


  public RemoteSearchResult premiereDate(@javax.annotation.Nullable OffsetDateTime premiereDate) {
    this.premiereDate = premiereDate;
    return this;
  }

  /**
   * Get premiereDate
   * @return premiereDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPremiereDate() {
    return premiereDate;
  }

  public void setPremiereDate(@javax.annotation.Nullable OffsetDateTime premiereDate) {
    this.premiereDate = premiereDate;
  }


  public RemoteSearchResult imageUrl(@javax.annotation.Nullable String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(@javax.annotation.Nullable String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public RemoteSearchResult searchProviderName(@javax.annotation.Nullable String searchProviderName) {
    this.searchProviderName = searchProviderName;
    return this;
  }

  /**
   * Get searchProviderName
   * @return searchProviderName
   */
  @javax.annotation.Nullable
  public String getSearchProviderName() {
    return searchProviderName;
  }

  public void setSearchProviderName(@javax.annotation.Nullable String searchProviderName) {
    this.searchProviderName = searchProviderName;
  }


  public RemoteSearchResult overview(@javax.annotation.Nullable String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Get overview
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(@javax.annotation.Nullable String overview) {
    this.overview = overview;
  }


  public RemoteSearchResult albumArtist(@javax.annotation.Nullable RemoteSearchResult albumArtist) {
    this.albumArtist = albumArtist;
    return this;
  }

  /**
   * Get albumArtist
   * @return albumArtist
   */
  @javax.annotation.Nullable
  public RemoteSearchResult getAlbumArtist() {
    return albumArtist;
  }

  public void setAlbumArtist(@javax.annotation.Nullable RemoteSearchResult albumArtist) {
    this.albumArtist = albumArtist;
  }


  public RemoteSearchResult artists(@javax.annotation.Nullable List<RemoteSearchResult> artists) {
    this.artists = artists;
    return this;
  }

  public RemoteSearchResult addArtistsItem(RemoteSearchResult artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<RemoteSearchResult> getArtists() {
    return artists;
  }

  public void setArtists(@javax.annotation.Nullable List<RemoteSearchResult> artists) {
    this.artists = artists;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteSearchResult remoteSearchResult = (RemoteSearchResult) o;
    return Objects.equals(this.name, remoteSearchResult.name) &&
        Objects.equals(this.providerIds, remoteSearchResult.providerIds) &&
        Objects.equals(this.productionYear, remoteSearchResult.productionYear) &&
        Objects.equals(this.indexNumber, remoteSearchResult.indexNumber) &&
        Objects.equals(this.indexNumberEnd, remoteSearchResult.indexNumberEnd) &&
        Objects.equals(this.parentIndexNumber, remoteSearchResult.parentIndexNumber) &&
        Objects.equals(this.premiereDate, remoteSearchResult.premiereDate) &&
        Objects.equals(this.imageUrl, remoteSearchResult.imageUrl) &&
        Objects.equals(this.searchProviderName, remoteSearchResult.searchProviderName) &&
        Objects.equals(this.overview, remoteSearchResult.overview) &&
        Objects.equals(this.albumArtist, remoteSearchResult.albumArtist) &&
        Objects.equals(this.artists, remoteSearchResult.artists);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, providerIds, productionYear, indexNumber, indexNumberEnd, parentIndexNumber, premiereDate, imageUrl, searchProviderName, overview, albumArtist, artists);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteSearchResult {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerIds: ").append(toIndentedString(providerIds)).append("\n");
    sb.append("    productionYear: ").append(toIndentedString(productionYear)).append("\n");
    sb.append("    indexNumber: ").append(toIndentedString(indexNumber)).append("\n");
    sb.append("    indexNumberEnd: ").append(toIndentedString(indexNumberEnd)).append("\n");
    sb.append("    parentIndexNumber: ").append(toIndentedString(parentIndexNumber)).append("\n");
    sb.append("    premiereDate: ").append(toIndentedString(premiereDate)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    searchProviderName: ").append(toIndentedString(searchProviderName)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    albumArtist: ").append(toIndentedString(albumArtist)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("ProviderIds");
    openapiFields.add("ProductionYear");
    openapiFields.add("IndexNumber");
    openapiFields.add("IndexNumberEnd");
    openapiFields.add("ParentIndexNumber");
    openapiFields.add("PremiereDate");
    openapiFields.add("ImageUrl");
    openapiFields.add("SearchProviderName");
    openapiFields.add("Overview");
    openapiFields.add("AlbumArtist");
    openapiFields.add("Artists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteSearchResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteSearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteSearchResult is not found in the empty JSON string", RemoteSearchResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteSearchResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteSearchResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ImageUrl") != null && !jsonObj.get("ImageUrl").isJsonNull()) && !jsonObj.get("ImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageUrl").toString()));
      }
      if ((jsonObj.get("SearchProviderName") != null && !jsonObj.get("SearchProviderName").isJsonNull()) && !jsonObj.get("SearchProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchProviderName").toString()));
      }
      if ((jsonObj.get("Overview") != null && !jsonObj.get("Overview").isJsonNull()) && !jsonObj.get("Overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Overview").toString()));
      }
      // validate the optional field `AlbumArtist`
      if (jsonObj.get("AlbumArtist") != null && !jsonObj.get("AlbumArtist").isJsonNull()) {
        RemoteSearchResult.validateJsonElement(jsonObj.get("AlbumArtist"));
      }
      if (jsonObj.get("Artists") != null && !jsonObj.get("Artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("Artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Artists` to be an array in the JSON string but got `%s`", jsonObj.get("Artists").toString()));
          }

          // validate the optional field `Artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            RemoteSearchResult.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteSearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteSearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteSearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteSearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteSearchResult>() {
           @Override
           public void write(JsonWriter out, RemoteSearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteSearchResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteSearchResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteSearchResult
   * @throws IOException if the JSON string is invalid with respect to RemoteSearchResult
   */
  public static RemoteSearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteSearchResult.class);
  }

  /**
   * Convert an instance of RemoteSearchResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

