/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DeviceProfile;
import org.openapitools.client.model.MediaProtocol;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Open live stream dto.
 */
@JsonPropertyOrder({
  OpenLiveStreamDto.JSON_PROPERTY_OPEN_TOKEN,
  OpenLiveStreamDto.JSON_PROPERTY_USER_ID,
  OpenLiveStreamDto.JSON_PROPERTY_PLAY_SESSION_ID,
  OpenLiveStreamDto.JSON_PROPERTY_MAX_STREAMING_BITRATE,
  OpenLiveStreamDto.JSON_PROPERTY_START_TIME_TICKS,
  OpenLiveStreamDto.JSON_PROPERTY_AUDIO_STREAM_INDEX,
  OpenLiveStreamDto.JSON_PROPERTY_SUBTITLE_STREAM_INDEX,
  OpenLiveStreamDto.JSON_PROPERTY_MAX_AUDIO_CHANNELS,
  OpenLiveStreamDto.JSON_PROPERTY_ITEM_ID,
  OpenLiveStreamDto.JSON_PROPERTY_ENABLE_DIRECT_PLAY,
  OpenLiveStreamDto.JSON_PROPERTY_ENABLE_DIRECT_STREAM,
  OpenLiveStreamDto.JSON_PROPERTY_ALWAYS_BURN_IN_SUBTITLE_WHEN_TRANSCODING,
  OpenLiveStreamDto.JSON_PROPERTY_DEVICE_PROFILE,
  OpenLiveStreamDto.JSON_PROPERTY_DIRECT_PLAY_PROTOCOLS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:58.939457991Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class OpenLiveStreamDto {
  public static final String JSON_PROPERTY_OPEN_TOKEN = "OpenToken";
  private JsonNullable<String> openToken = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_USER_ID = "UserId";
  private JsonNullable<UUID> userId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_PLAY_SESSION_ID = "PlaySessionId";
  private JsonNullable<String> playSessionId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MAX_STREAMING_BITRATE = "MaxStreamingBitrate";
  private JsonNullable<Integer> maxStreamingBitrate = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_START_TIME_TICKS = "StartTimeTicks";
  private JsonNullable<Long> startTimeTicks = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_AUDIO_STREAM_INDEX = "AudioStreamIndex";
  private JsonNullable<Integer> audioStreamIndex = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SUBTITLE_STREAM_INDEX = "SubtitleStreamIndex";
  private JsonNullable<Integer> subtitleStreamIndex = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_AUDIO_CHANNELS = "MaxAudioChannels";
  private JsonNullable<Integer> maxAudioChannels = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_ITEM_ID = "ItemId";
  private JsonNullable<UUID> itemId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_ENABLE_DIRECT_PLAY = "EnableDirectPlay";
  private JsonNullable<Boolean> enableDirectPlay = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_ENABLE_DIRECT_STREAM = "EnableDirectStream";
  private JsonNullable<Boolean> enableDirectStream = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_ALWAYS_BURN_IN_SUBTITLE_WHEN_TRANSCODING = "AlwaysBurnInSubtitleWhenTranscoding";
  private JsonNullable<Boolean> alwaysBurnInSubtitleWhenTranscoding = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_DEVICE_PROFILE = "DeviceProfile";
  private JsonNullable<DeviceProfile> deviceProfile = JsonNullable.<DeviceProfile>undefined();

  public static final String JSON_PROPERTY_DIRECT_PLAY_PROTOCOLS = "DirectPlayProtocols";
  @javax.annotation.Nullable
  private List<MediaProtocol> directPlayProtocols = new ArrayList<>();

  public OpenLiveStreamDto() { 
  }

  public OpenLiveStreamDto openToken(@javax.annotation.Nullable String openToken) {
    this.openToken = JsonNullable.<String>of(openToken);
    return this;
  }

  /**
   * Gets or sets the open token.
   * @return openToken
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getOpenToken() {
        return openToken.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OPEN_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOpenToken_JsonNullable() {
    return openToken;
  }
  
  @JsonProperty(JSON_PROPERTY_OPEN_TOKEN)
  public void setOpenToken_JsonNullable(JsonNullable<String> openToken) {
    this.openToken = openToken;
  }

  public void setOpenToken(@javax.annotation.Nullable String openToken) {
    this.openToken = JsonNullable.<String>of(openToken);
  }


  public OpenLiveStreamDto userId(@javax.annotation.Nullable UUID userId) {
    this.userId = JsonNullable.<UUID>of(userId);
    return this;
  }

  /**
   * Gets or sets the user id.
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getUserId() {
        return userId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getUserId_JsonNullable() {
    return userId;
  }
  
  @JsonProperty(JSON_PROPERTY_USER_ID)
  public void setUserId_JsonNullable(JsonNullable<UUID> userId) {
    this.userId = userId;
  }

  public void setUserId(@javax.annotation.Nullable UUID userId) {
    this.userId = JsonNullable.<UUID>of(userId);
  }


  public OpenLiveStreamDto playSessionId(@javax.annotation.Nullable String playSessionId) {
    this.playSessionId = JsonNullable.<String>of(playSessionId);
    return this;
  }

  /**
   * Gets or sets the play session id.
   * @return playSessionId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getPlaySessionId() {
        return playSessionId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PLAY_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPlaySessionId_JsonNullable() {
    return playSessionId;
  }
  
  @JsonProperty(JSON_PROPERTY_PLAY_SESSION_ID)
  public void setPlaySessionId_JsonNullable(JsonNullable<String> playSessionId) {
    this.playSessionId = playSessionId;
  }

  public void setPlaySessionId(@javax.annotation.Nullable String playSessionId) {
    this.playSessionId = JsonNullable.<String>of(playSessionId);
  }


  public OpenLiveStreamDto maxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = JsonNullable.<Integer>of(maxStreamingBitrate);
    return this;
  }

  /**
   * Gets or sets the max streaming bitrate.
   * @return maxStreamingBitrate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxStreamingBitrate() {
        return maxStreamingBitrate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_STREAMING_BITRATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxStreamingBitrate_JsonNullable() {
    return maxStreamingBitrate;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_STREAMING_BITRATE)
  public void setMaxStreamingBitrate_JsonNullable(JsonNullable<Integer> maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
  }

  public void setMaxStreamingBitrate(@javax.annotation.Nullable Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = JsonNullable.<Integer>of(maxStreamingBitrate);
  }


  public OpenLiveStreamDto startTimeTicks(@javax.annotation.Nullable Long startTimeTicks) {
    this.startTimeTicks = JsonNullable.<Long>of(startTimeTicks);
    return this;
  }

  /**
   * Gets or sets the start time in ticks.
   * @return startTimeTicks
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getStartTimeTicks() {
        return startTimeTicks.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_START_TIME_TICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getStartTimeTicks_JsonNullable() {
    return startTimeTicks;
  }
  
  @JsonProperty(JSON_PROPERTY_START_TIME_TICKS)
  public void setStartTimeTicks_JsonNullable(JsonNullable<Long> startTimeTicks) {
    this.startTimeTicks = startTimeTicks;
  }

  public void setStartTimeTicks(@javax.annotation.Nullable Long startTimeTicks) {
    this.startTimeTicks = JsonNullable.<Long>of(startTimeTicks);
  }


  public OpenLiveStreamDto audioStreamIndex(@javax.annotation.Nullable Integer audioStreamIndex) {
    this.audioStreamIndex = JsonNullable.<Integer>of(audioStreamIndex);
    return this;
  }

  /**
   * Gets or sets the audio stream index.
   * @return audioStreamIndex
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getAudioStreamIndex() {
        return audioStreamIndex.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_STREAM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAudioStreamIndex_JsonNullable() {
    return audioStreamIndex;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_STREAM_INDEX)
  public void setAudioStreamIndex_JsonNullable(JsonNullable<Integer> audioStreamIndex) {
    this.audioStreamIndex = audioStreamIndex;
  }

  public void setAudioStreamIndex(@javax.annotation.Nullable Integer audioStreamIndex) {
    this.audioStreamIndex = JsonNullable.<Integer>of(audioStreamIndex);
  }


  public OpenLiveStreamDto subtitleStreamIndex(@javax.annotation.Nullable Integer subtitleStreamIndex) {
    this.subtitleStreamIndex = JsonNullable.<Integer>of(subtitleStreamIndex);
    return this;
  }

  /**
   * Gets or sets the subtitle stream index.
   * @return subtitleStreamIndex
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getSubtitleStreamIndex() {
        return subtitleStreamIndex.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUBTITLE_STREAM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getSubtitleStreamIndex_JsonNullable() {
    return subtitleStreamIndex;
  }
  
  @JsonProperty(JSON_PROPERTY_SUBTITLE_STREAM_INDEX)
  public void setSubtitleStreamIndex_JsonNullable(JsonNullable<Integer> subtitleStreamIndex) {
    this.subtitleStreamIndex = subtitleStreamIndex;
  }

  public void setSubtitleStreamIndex(@javax.annotation.Nullable Integer subtitleStreamIndex) {
    this.subtitleStreamIndex = JsonNullable.<Integer>of(subtitleStreamIndex);
  }


  public OpenLiveStreamDto maxAudioChannels(@javax.annotation.Nullable Integer maxAudioChannels) {
    this.maxAudioChannels = JsonNullable.<Integer>of(maxAudioChannels);
    return this;
  }

  /**
   * Gets or sets the max audio channels.
   * @return maxAudioChannels
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxAudioChannels() {
        return maxAudioChannels.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_AUDIO_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxAudioChannels_JsonNullable() {
    return maxAudioChannels;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_AUDIO_CHANNELS)
  public void setMaxAudioChannels_JsonNullable(JsonNullable<Integer> maxAudioChannels) {
    this.maxAudioChannels = maxAudioChannels;
  }

  public void setMaxAudioChannels(@javax.annotation.Nullable Integer maxAudioChannels) {
    this.maxAudioChannels = JsonNullable.<Integer>of(maxAudioChannels);
  }


  public OpenLiveStreamDto itemId(@javax.annotation.Nullable UUID itemId) {
    this.itemId = JsonNullable.<UUID>of(itemId);
    return this;
  }

  /**
   * Gets or sets the item id.
   * @return itemId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getItemId() {
        return itemId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getItemId_JsonNullable() {
    return itemId;
  }
  
  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  public void setItemId_JsonNullable(JsonNullable<UUID> itemId) {
    this.itemId = itemId;
  }

  public void setItemId(@javax.annotation.Nullable UUID itemId) {
    this.itemId = JsonNullable.<UUID>of(itemId);
  }


  public OpenLiveStreamDto enableDirectPlay(@javax.annotation.Nullable Boolean enableDirectPlay) {
    this.enableDirectPlay = JsonNullable.<Boolean>of(enableDirectPlay);
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable direct play.
   * @return enableDirectPlay
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getEnableDirectPlay() {
        return enableDirectPlay.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENABLE_DIRECT_PLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getEnableDirectPlay_JsonNullable() {
    return enableDirectPlay;
  }
  
  @JsonProperty(JSON_PROPERTY_ENABLE_DIRECT_PLAY)
  public void setEnableDirectPlay_JsonNullable(JsonNullable<Boolean> enableDirectPlay) {
    this.enableDirectPlay = enableDirectPlay;
  }

  public void setEnableDirectPlay(@javax.annotation.Nullable Boolean enableDirectPlay) {
    this.enableDirectPlay = JsonNullable.<Boolean>of(enableDirectPlay);
  }


  public OpenLiveStreamDto enableDirectStream(@javax.annotation.Nullable Boolean enableDirectStream) {
    this.enableDirectStream = JsonNullable.<Boolean>of(enableDirectStream);
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enale direct stream.
   * @return enableDirectStream
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getEnableDirectStream() {
        return enableDirectStream.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENABLE_DIRECT_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getEnableDirectStream_JsonNullable() {
    return enableDirectStream;
  }
  
  @JsonProperty(JSON_PROPERTY_ENABLE_DIRECT_STREAM)
  public void setEnableDirectStream_JsonNullable(JsonNullable<Boolean> enableDirectStream) {
    this.enableDirectStream = enableDirectStream;
  }

  public void setEnableDirectStream(@javax.annotation.Nullable Boolean enableDirectStream) {
    this.enableDirectStream = JsonNullable.<Boolean>of(enableDirectStream);
  }


  public OpenLiveStreamDto alwaysBurnInSubtitleWhenTranscoding(@javax.annotation.Nullable Boolean alwaysBurnInSubtitleWhenTranscoding) {
    this.alwaysBurnInSubtitleWhenTranscoding = JsonNullable.<Boolean>of(alwaysBurnInSubtitleWhenTranscoding);
    return this;
  }

  /**
   * Gets or sets a value indicating whether always burn in subtitles when transcoding.
   * @return alwaysBurnInSubtitleWhenTranscoding
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getAlwaysBurnInSubtitleWhenTranscoding() {
        return alwaysBurnInSubtitleWhenTranscoding.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALWAYS_BURN_IN_SUBTITLE_WHEN_TRANSCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getAlwaysBurnInSubtitleWhenTranscoding_JsonNullable() {
    return alwaysBurnInSubtitleWhenTranscoding;
  }
  
  @JsonProperty(JSON_PROPERTY_ALWAYS_BURN_IN_SUBTITLE_WHEN_TRANSCODING)
  public void setAlwaysBurnInSubtitleWhenTranscoding_JsonNullable(JsonNullable<Boolean> alwaysBurnInSubtitleWhenTranscoding) {
    this.alwaysBurnInSubtitleWhenTranscoding = alwaysBurnInSubtitleWhenTranscoding;
  }

  public void setAlwaysBurnInSubtitleWhenTranscoding(@javax.annotation.Nullable Boolean alwaysBurnInSubtitleWhenTranscoding) {
    this.alwaysBurnInSubtitleWhenTranscoding = JsonNullable.<Boolean>of(alwaysBurnInSubtitleWhenTranscoding);
  }


  public OpenLiveStreamDto deviceProfile(@javax.annotation.Nullable DeviceProfile deviceProfile) {
    this.deviceProfile = JsonNullable.<DeviceProfile>of(deviceProfile);
    return this;
  }

  /**
   * Gets or sets the device profile.
   * @return deviceProfile
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public DeviceProfile getDeviceProfile() {
        return deviceProfile.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEVICE_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DeviceProfile> getDeviceProfile_JsonNullable() {
    return deviceProfile;
  }
  
  @JsonProperty(JSON_PROPERTY_DEVICE_PROFILE)
  public void setDeviceProfile_JsonNullable(JsonNullable<DeviceProfile> deviceProfile) {
    this.deviceProfile = deviceProfile;
  }

  public void setDeviceProfile(@javax.annotation.Nullable DeviceProfile deviceProfile) {
    this.deviceProfile = JsonNullable.<DeviceProfile>of(deviceProfile);
  }


  public OpenLiveStreamDto directPlayProtocols(@javax.annotation.Nullable List<MediaProtocol> directPlayProtocols) {
    this.directPlayProtocols = directPlayProtocols;
    return this;
  }

  public OpenLiveStreamDto addDirectPlayProtocolsItem(MediaProtocol directPlayProtocolsItem) {
    if (this.directPlayProtocols == null) {
      this.directPlayProtocols = new ArrayList<>();
    }
    this.directPlayProtocols.add(directPlayProtocolsItem);
    return this;
  }

  /**
   * Gets or sets the device play protocols.
   * @return directPlayProtocols
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_PLAY_PROTOCOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<MediaProtocol> getDirectPlayProtocols() {
    return directPlayProtocols;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_PLAY_PROTOCOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectPlayProtocols(@javax.annotation.Nullable List<MediaProtocol> directPlayProtocols) {
    this.directPlayProtocols = directPlayProtocols;
  }


  /**
   * Return true if this OpenLiveStreamDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenLiveStreamDto openLiveStreamDto = (OpenLiveStreamDto) o;
    return equalsNullable(this.openToken, openLiveStreamDto.openToken) &&
        equalsNullable(this.userId, openLiveStreamDto.userId) &&
        equalsNullable(this.playSessionId, openLiveStreamDto.playSessionId) &&
        equalsNullable(this.maxStreamingBitrate, openLiveStreamDto.maxStreamingBitrate) &&
        equalsNullable(this.startTimeTicks, openLiveStreamDto.startTimeTicks) &&
        equalsNullable(this.audioStreamIndex, openLiveStreamDto.audioStreamIndex) &&
        equalsNullable(this.subtitleStreamIndex, openLiveStreamDto.subtitleStreamIndex) &&
        equalsNullable(this.maxAudioChannels, openLiveStreamDto.maxAudioChannels) &&
        equalsNullable(this.itemId, openLiveStreamDto.itemId) &&
        equalsNullable(this.enableDirectPlay, openLiveStreamDto.enableDirectPlay) &&
        equalsNullable(this.enableDirectStream, openLiveStreamDto.enableDirectStream) &&
        equalsNullable(this.alwaysBurnInSubtitleWhenTranscoding, openLiveStreamDto.alwaysBurnInSubtitleWhenTranscoding) &&
        equalsNullable(this.deviceProfile, openLiveStreamDto.deviceProfile) &&
        Objects.equals(this.directPlayProtocols, openLiveStreamDto.directPlayProtocols);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(openToken), hashCodeNullable(userId), hashCodeNullable(playSessionId), hashCodeNullable(maxStreamingBitrate), hashCodeNullable(startTimeTicks), hashCodeNullable(audioStreamIndex), hashCodeNullable(subtitleStreamIndex), hashCodeNullable(maxAudioChannels), hashCodeNullable(itemId), hashCodeNullable(enableDirectPlay), hashCodeNullable(enableDirectStream), hashCodeNullable(alwaysBurnInSubtitleWhenTranscoding), hashCodeNullable(deviceProfile), directPlayProtocols);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenLiveStreamDto {\n");
    sb.append("    openToken: ").append(toIndentedString(openToken)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    playSessionId: ").append(toIndentedString(playSessionId)).append("\n");
    sb.append("    maxStreamingBitrate: ").append(toIndentedString(maxStreamingBitrate)).append("\n");
    sb.append("    startTimeTicks: ").append(toIndentedString(startTimeTicks)).append("\n");
    sb.append("    audioStreamIndex: ").append(toIndentedString(audioStreamIndex)).append("\n");
    sb.append("    subtitleStreamIndex: ").append(toIndentedString(subtitleStreamIndex)).append("\n");
    sb.append("    maxAudioChannels: ").append(toIndentedString(maxAudioChannels)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    enableDirectPlay: ").append(toIndentedString(enableDirectPlay)).append("\n");
    sb.append("    enableDirectStream: ").append(toIndentedString(enableDirectStream)).append("\n");
    sb.append("    alwaysBurnInSubtitleWhenTranscoding: ").append(toIndentedString(alwaysBurnInSubtitleWhenTranscoding)).append("\n");
    sb.append("    deviceProfile: ").append(toIndentedString(deviceProfile)).append("\n");
    sb.append("    directPlayProtocols: ").append(toIndentedString(directPlayProtocols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `OpenToken` to the URL query string
    if (getOpenToken() != null) {
      joiner.add(String.format("%sOpenToken%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOpenToken()))));
    }

    // add `UserId` to the URL query string
    if (getUserId() != null) {
      joiner.add(String.format("%sUserId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUserId()))));
    }

    // add `PlaySessionId` to the URL query string
    if (getPlaySessionId() != null) {
      joiner.add(String.format("%sPlaySessionId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPlaySessionId()))));
    }

    // add `MaxStreamingBitrate` to the URL query string
    if (getMaxStreamingBitrate() != null) {
      joiner.add(String.format("%sMaxStreamingBitrate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxStreamingBitrate()))));
    }

    // add `StartTimeTicks` to the URL query string
    if (getStartTimeTicks() != null) {
      joiner.add(String.format("%sStartTimeTicks%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getStartTimeTicks()))));
    }

    // add `AudioStreamIndex` to the URL query string
    if (getAudioStreamIndex() != null) {
      joiner.add(String.format("%sAudioStreamIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAudioStreamIndex()))));
    }

    // add `SubtitleStreamIndex` to the URL query string
    if (getSubtitleStreamIndex() != null) {
      joiner.add(String.format("%sSubtitleStreamIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSubtitleStreamIndex()))));
    }

    // add `MaxAudioChannels` to the URL query string
    if (getMaxAudioChannels() != null) {
      joiner.add(String.format("%sMaxAudioChannels%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxAudioChannels()))));
    }

    // add `ItemId` to the URL query string
    if (getItemId() != null) {
      joiner.add(String.format("%sItemId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getItemId()))));
    }

    // add `EnableDirectPlay` to the URL query string
    if (getEnableDirectPlay() != null) {
      joiner.add(String.format("%sEnableDirectPlay%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDirectPlay()))));
    }

    // add `EnableDirectStream` to the URL query string
    if (getEnableDirectStream() != null) {
      joiner.add(String.format("%sEnableDirectStream%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEnableDirectStream()))));
    }

    // add `AlwaysBurnInSubtitleWhenTranscoding` to the URL query string
    if (getAlwaysBurnInSubtitleWhenTranscoding() != null) {
      joiner.add(String.format("%sAlwaysBurnInSubtitleWhenTranscoding%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAlwaysBurnInSubtitleWhenTranscoding()))));
    }

    // add `DeviceProfile` to the URL query string
    if (getDeviceProfile() != null) {
      joiner.add(getDeviceProfile().toUrlQueryString(prefix + "DeviceProfile" + suffix));
    }

    // add `DirectPlayProtocols` to the URL query string
    if (getDirectPlayProtocols() != null) {
      for (int i = 0; i < getDirectPlayProtocols().size(); i++) {
        if (getDirectPlayProtocols().get(i) != null) {
          joiner.add(String.format("%sDirectPlayProtocols%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getDirectPlayProtocols().get(i)))));
        }
      }
    }

    return joiner.toString();
  }
}

