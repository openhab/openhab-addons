/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ActivityLogEntryMessage;
import org.openapitools.client.model.ForceKeepAliveMessage;
import org.openapitools.client.model.GeneralCommandMessage;
import org.openapitools.client.model.LibraryChangedMessage;
import org.openapitools.client.model.OutboundKeepAliveMessage;
import org.openapitools.client.model.PlayMessage;
import org.openapitools.client.model.PlaystateMessage;
import org.openapitools.client.model.PluginInstallationCancelledMessage;
import org.openapitools.client.model.PluginInstallationCompletedMessage;
import org.openapitools.client.model.PluginInstallationFailedMessage;
import org.openapitools.client.model.PluginInstallingMessage;
import org.openapitools.client.model.PluginUninstalledMessage;
import org.openapitools.client.model.RefreshProgressMessage;
import org.openapitools.client.model.RestartRequiredMessage;
import org.openapitools.client.model.ScheduledTaskEndedMessage;
import org.openapitools.client.model.ScheduledTasksInfoMessage;
import org.openapitools.client.model.SeriesTimerCancelledMessage;
import org.openapitools.client.model.SeriesTimerCreatedMessage;
import org.openapitools.client.model.ServerRestartingMessage;
import org.openapitools.client.model.ServerShuttingDownMessage;
import org.openapitools.client.model.SessionMessageType;
import org.openapitools.client.model.SessionsMessage;
import org.openapitools.client.model.SyncPlayCommandMessage;
import org.openapitools.client.model.SyncPlayGroupUpdateCommandMessage;
import org.openapitools.client.model.TimerCancelledMessage;
import org.openapitools.client.model.TimerCreatedMessage;
import org.openapitools.client.model.UserDataChangedMessage;
import org.openapitools.client.model.UserDeletedMessage;
import org.openapitools.client.model.UserDto;
import org.openapitools.client.model.UserUpdatedMessage;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class OutboundWebSocketMessage extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(OutboundWebSocketMessage.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OutboundWebSocketMessage.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OutboundWebSocketMessage' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ActivityLogEntryMessage> adapterActivityLogEntryMessage = gson.getDelegateAdapter(this, TypeToken.get(ActivityLogEntryMessage.class));
            final TypeAdapter<ForceKeepAliveMessage> adapterForceKeepAliveMessage = gson.getDelegateAdapter(this, TypeToken.get(ForceKeepAliveMessage.class));
            final TypeAdapter<GeneralCommandMessage> adapterGeneralCommandMessage = gson.getDelegateAdapter(this, TypeToken.get(GeneralCommandMessage.class));
            final TypeAdapter<LibraryChangedMessage> adapterLibraryChangedMessage = gson.getDelegateAdapter(this, TypeToken.get(LibraryChangedMessage.class));
            final TypeAdapter<OutboundKeepAliveMessage> adapterOutboundKeepAliveMessage = gson.getDelegateAdapter(this, TypeToken.get(OutboundKeepAliveMessage.class));
            final TypeAdapter<PlayMessage> adapterPlayMessage = gson.getDelegateAdapter(this, TypeToken.get(PlayMessage.class));
            final TypeAdapter<PlaystateMessage> adapterPlaystateMessage = gson.getDelegateAdapter(this, TypeToken.get(PlaystateMessage.class));
            final TypeAdapter<PluginInstallationCancelledMessage> adapterPluginInstallationCancelledMessage = gson.getDelegateAdapter(this, TypeToken.get(PluginInstallationCancelledMessage.class));
            final TypeAdapter<PluginInstallationCompletedMessage> adapterPluginInstallationCompletedMessage = gson.getDelegateAdapter(this, TypeToken.get(PluginInstallationCompletedMessage.class));
            final TypeAdapter<PluginInstallationFailedMessage> adapterPluginInstallationFailedMessage = gson.getDelegateAdapter(this, TypeToken.get(PluginInstallationFailedMessage.class));
            final TypeAdapter<PluginInstallingMessage> adapterPluginInstallingMessage = gson.getDelegateAdapter(this, TypeToken.get(PluginInstallingMessage.class));
            final TypeAdapter<PluginUninstalledMessage> adapterPluginUninstalledMessage = gson.getDelegateAdapter(this, TypeToken.get(PluginUninstalledMessage.class));
            final TypeAdapter<RefreshProgressMessage> adapterRefreshProgressMessage = gson.getDelegateAdapter(this, TypeToken.get(RefreshProgressMessage.class));
            final TypeAdapter<RestartRequiredMessage> adapterRestartRequiredMessage = gson.getDelegateAdapter(this, TypeToken.get(RestartRequiredMessage.class));
            final TypeAdapter<ScheduledTaskEndedMessage> adapterScheduledTaskEndedMessage = gson.getDelegateAdapter(this, TypeToken.get(ScheduledTaskEndedMessage.class));
            final TypeAdapter<ScheduledTasksInfoMessage> adapterScheduledTasksInfoMessage = gson.getDelegateAdapter(this, TypeToken.get(ScheduledTasksInfoMessage.class));
            final TypeAdapter<SeriesTimerCancelledMessage> adapterSeriesTimerCancelledMessage = gson.getDelegateAdapter(this, TypeToken.get(SeriesTimerCancelledMessage.class));
            final TypeAdapter<SeriesTimerCreatedMessage> adapterSeriesTimerCreatedMessage = gson.getDelegateAdapter(this, TypeToken.get(SeriesTimerCreatedMessage.class));
            final TypeAdapter<ServerRestartingMessage> adapterServerRestartingMessage = gson.getDelegateAdapter(this, TypeToken.get(ServerRestartingMessage.class));
            final TypeAdapter<ServerShuttingDownMessage> adapterServerShuttingDownMessage = gson.getDelegateAdapter(this, TypeToken.get(ServerShuttingDownMessage.class));
            final TypeAdapter<SessionsMessage> adapterSessionsMessage = gson.getDelegateAdapter(this, TypeToken.get(SessionsMessage.class));
            final TypeAdapter<SyncPlayCommandMessage> adapterSyncPlayCommandMessage = gson.getDelegateAdapter(this, TypeToken.get(SyncPlayCommandMessage.class));
            final TypeAdapter<SyncPlayGroupUpdateCommandMessage> adapterSyncPlayGroupUpdateCommandMessage = gson.getDelegateAdapter(this, TypeToken.get(SyncPlayGroupUpdateCommandMessage.class));
            final TypeAdapter<TimerCancelledMessage> adapterTimerCancelledMessage = gson.getDelegateAdapter(this, TypeToken.get(TimerCancelledMessage.class));
            final TypeAdapter<TimerCreatedMessage> adapterTimerCreatedMessage = gson.getDelegateAdapter(this, TypeToken.get(TimerCreatedMessage.class));
            final TypeAdapter<UserDataChangedMessage> adapterUserDataChangedMessage = gson.getDelegateAdapter(this, TypeToken.get(UserDataChangedMessage.class));
            final TypeAdapter<UserDeletedMessage> adapterUserDeletedMessage = gson.getDelegateAdapter(this, TypeToken.get(UserDeletedMessage.class));
            final TypeAdapter<UserUpdatedMessage> adapterUserUpdatedMessage = gson.getDelegateAdapter(this, TypeToken.get(UserUpdatedMessage.class));

            return (TypeAdapter<T>) new TypeAdapter<OutboundWebSocketMessage>() {
                @Override
                public void write(JsonWriter out, OutboundWebSocketMessage value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ActivityLogEntryMessage`
                    if (value.getActualInstance() instanceof ActivityLogEntryMessage) {
                        JsonElement element = adapterActivityLogEntryMessage.toJsonTree((ActivityLogEntryMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ForceKeepAliveMessage`
                    if (value.getActualInstance() instanceof ForceKeepAliveMessage) {
                        JsonElement element = adapterForceKeepAliveMessage.toJsonTree((ForceKeepAliveMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GeneralCommandMessage`
                    if (value.getActualInstance() instanceof GeneralCommandMessage) {
                        JsonElement element = adapterGeneralCommandMessage.toJsonTree((GeneralCommandMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LibraryChangedMessage`
                    if (value.getActualInstance() instanceof LibraryChangedMessage) {
                        JsonElement element = adapterLibraryChangedMessage.toJsonTree((LibraryChangedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OutboundKeepAliveMessage`
                    if (value.getActualInstance() instanceof OutboundKeepAliveMessage) {
                        JsonElement element = adapterOutboundKeepAliveMessage.toJsonTree((OutboundKeepAliveMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PlayMessage`
                    if (value.getActualInstance() instanceof PlayMessage) {
                        JsonElement element = adapterPlayMessage.toJsonTree((PlayMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PlaystateMessage`
                    if (value.getActualInstance() instanceof PlaystateMessage) {
                        JsonElement element = adapterPlaystateMessage.toJsonTree((PlaystateMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PluginInstallationCancelledMessage`
                    if (value.getActualInstance() instanceof PluginInstallationCancelledMessage) {
                        JsonElement element = adapterPluginInstallationCancelledMessage.toJsonTree((PluginInstallationCancelledMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PluginInstallationCompletedMessage`
                    if (value.getActualInstance() instanceof PluginInstallationCompletedMessage) {
                        JsonElement element = adapterPluginInstallationCompletedMessage.toJsonTree((PluginInstallationCompletedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PluginInstallationFailedMessage`
                    if (value.getActualInstance() instanceof PluginInstallationFailedMessage) {
                        JsonElement element = adapterPluginInstallationFailedMessage.toJsonTree((PluginInstallationFailedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PluginInstallingMessage`
                    if (value.getActualInstance() instanceof PluginInstallingMessage) {
                        JsonElement element = adapterPluginInstallingMessage.toJsonTree((PluginInstallingMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PluginUninstalledMessage`
                    if (value.getActualInstance() instanceof PluginUninstalledMessage) {
                        JsonElement element = adapterPluginUninstalledMessage.toJsonTree((PluginUninstalledMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RefreshProgressMessage`
                    if (value.getActualInstance() instanceof RefreshProgressMessage) {
                        JsonElement element = adapterRefreshProgressMessage.toJsonTree((RefreshProgressMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RestartRequiredMessage`
                    if (value.getActualInstance() instanceof RestartRequiredMessage) {
                        JsonElement element = adapterRestartRequiredMessage.toJsonTree((RestartRequiredMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ScheduledTaskEndedMessage`
                    if (value.getActualInstance() instanceof ScheduledTaskEndedMessage) {
                        JsonElement element = adapterScheduledTaskEndedMessage.toJsonTree((ScheduledTaskEndedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ScheduledTasksInfoMessage`
                    if (value.getActualInstance() instanceof ScheduledTasksInfoMessage) {
                        JsonElement element = adapterScheduledTasksInfoMessage.toJsonTree((ScheduledTasksInfoMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SeriesTimerCancelledMessage`
                    if (value.getActualInstance() instanceof SeriesTimerCancelledMessage) {
                        JsonElement element = adapterSeriesTimerCancelledMessage.toJsonTree((SeriesTimerCancelledMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SeriesTimerCreatedMessage`
                    if (value.getActualInstance() instanceof SeriesTimerCreatedMessage) {
                        JsonElement element = adapterSeriesTimerCreatedMessage.toJsonTree((SeriesTimerCreatedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ServerRestartingMessage`
                    if (value.getActualInstance() instanceof ServerRestartingMessage) {
                        JsonElement element = adapterServerRestartingMessage.toJsonTree((ServerRestartingMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ServerShuttingDownMessage`
                    if (value.getActualInstance() instanceof ServerShuttingDownMessage) {
                        JsonElement element = adapterServerShuttingDownMessage.toJsonTree((ServerShuttingDownMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SessionsMessage`
                    if (value.getActualInstance() instanceof SessionsMessage) {
                        JsonElement element = adapterSessionsMessage.toJsonTree((SessionsMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SyncPlayCommandMessage`
                    if (value.getActualInstance() instanceof SyncPlayCommandMessage) {
                        JsonElement element = adapterSyncPlayCommandMessage.toJsonTree((SyncPlayCommandMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SyncPlayGroupUpdateCommandMessage`
                    if (value.getActualInstance() instanceof SyncPlayGroupUpdateCommandMessage) {
                        JsonElement element = adapterSyncPlayGroupUpdateCommandMessage.toJsonTree((SyncPlayGroupUpdateCommandMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimerCancelledMessage`
                    if (value.getActualInstance() instanceof TimerCancelledMessage) {
                        JsonElement element = adapterTimerCancelledMessage.toJsonTree((TimerCancelledMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimerCreatedMessage`
                    if (value.getActualInstance() instanceof TimerCreatedMessage) {
                        JsonElement element = adapterTimerCreatedMessage.toJsonTree((TimerCreatedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserDataChangedMessage`
                    if (value.getActualInstance() instanceof UserDataChangedMessage) {
                        JsonElement element = adapterUserDataChangedMessage.toJsonTree((UserDataChangedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserDeletedMessage`
                    if (value.getActualInstance() instanceof UserDeletedMessage) {
                        JsonElement element = adapterUserDeletedMessage.toJsonTree((UserDeletedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUpdatedMessage`
                    if (value.getActualInstance() instanceof UserUpdatedMessage) {
                        JsonElement element = adapterUserUpdatedMessage.toJsonTree((UserUpdatedMessage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ActivityLogEntryMessage, ForceKeepAliveMessage, GeneralCommandMessage, LibraryChangedMessage, OutboundKeepAliveMessage, PlayMessage, PlaystateMessage, PluginInstallationCancelledMessage, PluginInstallationCompletedMessage, PluginInstallationFailedMessage, PluginInstallingMessage, PluginUninstalledMessage, RefreshProgressMessage, RestartRequiredMessage, ScheduledTaskEndedMessage, ScheduledTasksInfoMessage, SeriesTimerCancelledMessage, SeriesTimerCreatedMessage, ServerRestartingMessage, ServerShuttingDownMessage, SessionsMessage, SyncPlayCommandMessage, SyncPlayGroupUpdateCommandMessage, TimerCancelledMessage, TimerCreatedMessage, UserDataChangedMessage, UserDeletedMessage, UserUpdatedMessage");
                }

                @Override
                public OutboundWebSocketMessage read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ActivityLogEntryMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ActivityLogEntryMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterActivityLogEntryMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ActivityLogEntryMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ActivityLogEntryMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ActivityLogEntryMessage'", e);
                    }
                    // deserialize ForceKeepAliveMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ForceKeepAliveMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterForceKeepAliveMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ForceKeepAliveMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ForceKeepAliveMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ForceKeepAliveMessage'", e);
                    }
                    // deserialize GeneralCommandMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeneralCommandMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeneralCommandMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeneralCommandMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeneralCommandMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeneralCommandMessage'", e);
                    }
                    // deserialize LibraryChangedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LibraryChangedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterLibraryChangedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LibraryChangedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LibraryChangedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LibraryChangedMessage'", e);
                    }
                    // deserialize OutboundKeepAliveMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OutboundKeepAliveMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterOutboundKeepAliveMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OutboundKeepAliveMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OutboundKeepAliveMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OutboundKeepAliveMessage'", e);
                    }
                    // deserialize PlayMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PlayMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterPlayMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PlayMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PlayMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PlayMessage'", e);
                    }
                    // deserialize PlaystateMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PlaystateMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterPlaystateMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PlaystateMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PlaystateMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PlaystateMessage'", e);
                    }
                    // deserialize PluginInstallationCancelledMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PluginInstallationCancelledMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterPluginInstallationCancelledMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PluginInstallationCancelledMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PluginInstallationCancelledMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PluginInstallationCancelledMessage'", e);
                    }
                    // deserialize PluginInstallationCompletedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PluginInstallationCompletedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterPluginInstallationCompletedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PluginInstallationCompletedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PluginInstallationCompletedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PluginInstallationCompletedMessage'", e);
                    }
                    // deserialize PluginInstallationFailedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PluginInstallationFailedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterPluginInstallationFailedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PluginInstallationFailedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PluginInstallationFailedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PluginInstallationFailedMessage'", e);
                    }
                    // deserialize PluginInstallingMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PluginInstallingMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterPluginInstallingMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PluginInstallingMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PluginInstallingMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PluginInstallingMessage'", e);
                    }
                    // deserialize PluginUninstalledMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PluginUninstalledMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterPluginUninstalledMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PluginUninstalledMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PluginUninstalledMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PluginUninstalledMessage'", e);
                    }
                    // deserialize RefreshProgressMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RefreshProgressMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterRefreshProgressMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RefreshProgressMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RefreshProgressMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RefreshProgressMessage'", e);
                    }
                    // deserialize RestartRequiredMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RestartRequiredMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterRestartRequiredMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RestartRequiredMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RestartRequiredMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RestartRequiredMessage'", e);
                    }
                    // deserialize ScheduledTaskEndedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ScheduledTaskEndedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterScheduledTaskEndedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ScheduledTaskEndedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ScheduledTaskEndedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ScheduledTaskEndedMessage'", e);
                    }
                    // deserialize ScheduledTasksInfoMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ScheduledTasksInfoMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterScheduledTasksInfoMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ScheduledTasksInfoMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ScheduledTasksInfoMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ScheduledTasksInfoMessage'", e);
                    }
                    // deserialize SeriesTimerCancelledMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SeriesTimerCancelledMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterSeriesTimerCancelledMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SeriesTimerCancelledMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SeriesTimerCancelledMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SeriesTimerCancelledMessage'", e);
                    }
                    // deserialize SeriesTimerCreatedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SeriesTimerCreatedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterSeriesTimerCreatedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SeriesTimerCreatedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SeriesTimerCreatedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SeriesTimerCreatedMessage'", e);
                    }
                    // deserialize ServerRestartingMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ServerRestartingMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterServerRestartingMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ServerRestartingMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ServerRestartingMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ServerRestartingMessage'", e);
                    }
                    // deserialize ServerShuttingDownMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ServerShuttingDownMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterServerShuttingDownMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ServerShuttingDownMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ServerShuttingDownMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ServerShuttingDownMessage'", e);
                    }
                    // deserialize SessionsMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SessionsMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterSessionsMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SessionsMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SessionsMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SessionsMessage'", e);
                    }
                    // deserialize SyncPlayCommandMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SyncPlayCommandMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterSyncPlayCommandMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SyncPlayCommandMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SyncPlayCommandMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SyncPlayCommandMessage'", e);
                    }
                    // deserialize SyncPlayGroupUpdateCommandMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SyncPlayGroupUpdateCommandMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterSyncPlayGroupUpdateCommandMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SyncPlayGroupUpdateCommandMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SyncPlayGroupUpdateCommandMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SyncPlayGroupUpdateCommandMessage'", e);
                    }
                    // deserialize TimerCancelledMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimerCancelledMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimerCancelledMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TimerCancelledMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimerCancelledMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimerCancelledMessage'", e);
                    }
                    // deserialize TimerCreatedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimerCreatedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimerCreatedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TimerCreatedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimerCreatedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimerCreatedMessage'", e);
                    }
                    // deserialize UserDataChangedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserDataChangedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserDataChangedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserDataChangedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserDataChangedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserDataChangedMessage'", e);
                    }
                    // deserialize UserDeletedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserDeletedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserDeletedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserDeletedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserDeletedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserDeletedMessage'", e);
                    }
                    // deserialize UserUpdatedMessage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUpdatedMessage.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUpdatedMessage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUpdatedMessage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUpdatedMessage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUpdatedMessage'", e);
                    }

                    if (match == 1) {
                        OutboundWebSocketMessage ret = new OutboundWebSocketMessage();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for OutboundWebSocketMessage: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public OutboundWebSocketMessage() {
        super("oneOf", Boolean.FALSE);
    }

    public OutboundWebSocketMessage(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ActivityLogEntryMessage", ActivityLogEntryMessage.class);
        schemas.put("ForceKeepAliveMessage", ForceKeepAliveMessage.class);
        schemas.put("GeneralCommandMessage", GeneralCommandMessage.class);
        schemas.put("LibraryChangedMessage", LibraryChangedMessage.class);
        schemas.put("OutboundKeepAliveMessage", OutboundKeepAliveMessage.class);
        schemas.put("PlayMessage", PlayMessage.class);
        schemas.put("PlaystateMessage", PlaystateMessage.class);
        schemas.put("PluginInstallationCancelledMessage", PluginInstallationCancelledMessage.class);
        schemas.put("PluginInstallationCompletedMessage", PluginInstallationCompletedMessage.class);
        schemas.put("PluginInstallationFailedMessage", PluginInstallationFailedMessage.class);
        schemas.put("PluginInstallingMessage", PluginInstallingMessage.class);
        schemas.put("PluginUninstalledMessage", PluginUninstalledMessage.class);
        schemas.put("RefreshProgressMessage", RefreshProgressMessage.class);
        schemas.put("RestartRequiredMessage", RestartRequiredMessage.class);
        schemas.put("ScheduledTaskEndedMessage", ScheduledTaskEndedMessage.class);
        schemas.put("ScheduledTasksInfoMessage", ScheduledTasksInfoMessage.class);
        schemas.put("SeriesTimerCancelledMessage", SeriesTimerCancelledMessage.class);
        schemas.put("SeriesTimerCreatedMessage", SeriesTimerCreatedMessage.class);
        schemas.put("ServerRestartingMessage", ServerRestartingMessage.class);
        schemas.put("ServerShuttingDownMessage", ServerShuttingDownMessage.class);
        schemas.put("SessionsMessage", SessionsMessage.class);
        schemas.put("SyncPlayCommandMessage", SyncPlayCommandMessage.class);
        schemas.put("SyncPlayGroupUpdateCommandMessage", SyncPlayGroupUpdateCommandMessage.class);
        schemas.put("TimerCancelledMessage", TimerCancelledMessage.class);
        schemas.put("TimerCreatedMessage", TimerCreatedMessage.class);
        schemas.put("UserDataChangedMessage", UserDataChangedMessage.class);
        schemas.put("UserDeletedMessage", UserDeletedMessage.class);
        schemas.put("UserUpdatedMessage", UserUpdatedMessage.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return OutboundWebSocketMessage.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ActivityLogEntryMessage, ForceKeepAliveMessage, GeneralCommandMessage, LibraryChangedMessage, OutboundKeepAliveMessage, PlayMessage, PlaystateMessage, PluginInstallationCancelledMessage, PluginInstallationCompletedMessage, PluginInstallationFailedMessage, PluginInstallingMessage, PluginUninstalledMessage, RefreshProgressMessage, RestartRequiredMessage, ScheduledTaskEndedMessage, ScheduledTasksInfoMessage, SeriesTimerCancelledMessage, SeriesTimerCreatedMessage, ServerRestartingMessage, ServerShuttingDownMessage, SessionsMessage, SyncPlayCommandMessage, SyncPlayGroupUpdateCommandMessage, TimerCancelledMessage, TimerCreatedMessage, UserDataChangedMessage, UserDeletedMessage, UserUpdatedMessage
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ActivityLogEntryMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ForceKeepAliveMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GeneralCommandMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LibraryChangedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OutboundKeepAliveMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PlayMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PlaystateMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PluginInstallationCancelledMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PluginInstallationCompletedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PluginInstallationFailedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PluginInstallingMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PluginUninstalledMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RefreshProgressMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RestartRequiredMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ScheduledTaskEndedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ScheduledTasksInfoMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SeriesTimerCancelledMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SeriesTimerCreatedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ServerRestartingMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ServerShuttingDownMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SessionsMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SyncPlayCommandMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SyncPlayGroupUpdateCommandMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimerCancelledMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimerCreatedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserDataChangedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserDeletedMessage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUpdatedMessage) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ActivityLogEntryMessage, ForceKeepAliveMessage, GeneralCommandMessage, LibraryChangedMessage, OutboundKeepAliveMessage, PlayMessage, PlaystateMessage, PluginInstallationCancelledMessage, PluginInstallationCompletedMessage, PluginInstallationFailedMessage, PluginInstallingMessage, PluginUninstalledMessage, RefreshProgressMessage, RestartRequiredMessage, ScheduledTaskEndedMessage, ScheduledTasksInfoMessage, SeriesTimerCancelledMessage, SeriesTimerCreatedMessage, ServerRestartingMessage, ServerShuttingDownMessage, SessionsMessage, SyncPlayCommandMessage, SyncPlayGroupUpdateCommandMessage, TimerCancelledMessage, TimerCreatedMessage, UserDataChangedMessage, UserDeletedMessage, UserUpdatedMessage");
    }

    /**
     * Get the actual instance, which can be the following:
     * ActivityLogEntryMessage, ForceKeepAliveMessage, GeneralCommandMessage, LibraryChangedMessage, OutboundKeepAliveMessage, PlayMessage, PlaystateMessage, PluginInstallationCancelledMessage, PluginInstallationCompletedMessage, PluginInstallationFailedMessage, PluginInstallingMessage, PluginUninstalledMessage, RefreshProgressMessage, RestartRequiredMessage, ScheduledTaskEndedMessage, ScheduledTasksInfoMessage, SeriesTimerCancelledMessage, SeriesTimerCreatedMessage, ServerRestartingMessage, ServerShuttingDownMessage, SessionsMessage, SyncPlayCommandMessage, SyncPlayGroupUpdateCommandMessage, TimerCancelledMessage, TimerCreatedMessage, UserDataChangedMessage, UserDeletedMessage, UserUpdatedMessage
     *
     * @return The actual instance (ActivityLogEntryMessage, ForceKeepAliveMessage, GeneralCommandMessage, LibraryChangedMessage, OutboundKeepAliveMessage, PlayMessage, PlaystateMessage, PluginInstallationCancelledMessage, PluginInstallationCompletedMessage, PluginInstallationFailedMessage, PluginInstallingMessage, PluginUninstalledMessage, RefreshProgressMessage, RestartRequiredMessage, ScheduledTaskEndedMessage, ScheduledTasksInfoMessage, SeriesTimerCancelledMessage, SeriesTimerCreatedMessage, ServerRestartingMessage, ServerShuttingDownMessage, SessionsMessage, SyncPlayCommandMessage, SyncPlayGroupUpdateCommandMessage, TimerCancelledMessage, TimerCreatedMessage, UserDataChangedMessage, UserDeletedMessage, UserUpdatedMessage)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ActivityLogEntryMessage`. If the actual instance is not `ActivityLogEntryMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ActivityLogEntryMessage`
     * @throws ClassCastException if the instance is not `ActivityLogEntryMessage`
     */
    public ActivityLogEntryMessage getActivityLogEntryMessage() throws ClassCastException {
        return (ActivityLogEntryMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ForceKeepAliveMessage`. If the actual instance is not `ForceKeepAliveMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ForceKeepAliveMessage`
     * @throws ClassCastException if the instance is not `ForceKeepAliveMessage`
     */
    public ForceKeepAliveMessage getForceKeepAliveMessage() throws ClassCastException {
        return (ForceKeepAliveMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeneralCommandMessage`. If the actual instance is not `GeneralCommandMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeneralCommandMessage`
     * @throws ClassCastException if the instance is not `GeneralCommandMessage`
     */
    public GeneralCommandMessage getGeneralCommandMessage() throws ClassCastException {
        return (GeneralCommandMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LibraryChangedMessage`. If the actual instance is not `LibraryChangedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LibraryChangedMessage`
     * @throws ClassCastException if the instance is not `LibraryChangedMessage`
     */
    public LibraryChangedMessage getLibraryChangedMessage() throws ClassCastException {
        return (LibraryChangedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OutboundKeepAliveMessage`. If the actual instance is not `OutboundKeepAliveMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OutboundKeepAliveMessage`
     * @throws ClassCastException if the instance is not `OutboundKeepAliveMessage`
     */
    public OutboundKeepAliveMessage getOutboundKeepAliveMessage() throws ClassCastException {
        return (OutboundKeepAliveMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PlayMessage`. If the actual instance is not `PlayMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PlayMessage`
     * @throws ClassCastException if the instance is not `PlayMessage`
     */
    public PlayMessage getPlayMessage() throws ClassCastException {
        return (PlayMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PlaystateMessage`. If the actual instance is not `PlaystateMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PlaystateMessage`
     * @throws ClassCastException if the instance is not `PlaystateMessage`
     */
    public PlaystateMessage getPlaystateMessage() throws ClassCastException {
        return (PlaystateMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PluginInstallationCancelledMessage`. If the actual instance is not `PluginInstallationCancelledMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PluginInstallationCancelledMessage`
     * @throws ClassCastException if the instance is not `PluginInstallationCancelledMessage`
     */
    public PluginInstallationCancelledMessage getPluginInstallationCancelledMessage() throws ClassCastException {
        return (PluginInstallationCancelledMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PluginInstallationCompletedMessage`. If the actual instance is not `PluginInstallationCompletedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PluginInstallationCompletedMessage`
     * @throws ClassCastException if the instance is not `PluginInstallationCompletedMessage`
     */
    public PluginInstallationCompletedMessage getPluginInstallationCompletedMessage() throws ClassCastException {
        return (PluginInstallationCompletedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PluginInstallationFailedMessage`. If the actual instance is not `PluginInstallationFailedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PluginInstallationFailedMessage`
     * @throws ClassCastException if the instance is not `PluginInstallationFailedMessage`
     */
    public PluginInstallationFailedMessage getPluginInstallationFailedMessage() throws ClassCastException {
        return (PluginInstallationFailedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PluginInstallingMessage`. If the actual instance is not `PluginInstallingMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PluginInstallingMessage`
     * @throws ClassCastException if the instance is not `PluginInstallingMessage`
     */
    public PluginInstallingMessage getPluginInstallingMessage() throws ClassCastException {
        return (PluginInstallingMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PluginUninstalledMessage`. If the actual instance is not `PluginUninstalledMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PluginUninstalledMessage`
     * @throws ClassCastException if the instance is not `PluginUninstalledMessage`
     */
    public PluginUninstalledMessage getPluginUninstalledMessage() throws ClassCastException {
        return (PluginUninstalledMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RefreshProgressMessage`. If the actual instance is not `RefreshProgressMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RefreshProgressMessage`
     * @throws ClassCastException if the instance is not `RefreshProgressMessage`
     */
    public RefreshProgressMessage getRefreshProgressMessage() throws ClassCastException {
        return (RefreshProgressMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RestartRequiredMessage`. If the actual instance is not `RestartRequiredMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RestartRequiredMessage`
     * @throws ClassCastException if the instance is not `RestartRequiredMessage`
     */
    public RestartRequiredMessage getRestartRequiredMessage() throws ClassCastException {
        return (RestartRequiredMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ScheduledTaskEndedMessage`. If the actual instance is not `ScheduledTaskEndedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScheduledTaskEndedMessage`
     * @throws ClassCastException if the instance is not `ScheduledTaskEndedMessage`
     */
    public ScheduledTaskEndedMessage getScheduledTaskEndedMessage() throws ClassCastException {
        return (ScheduledTaskEndedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ScheduledTasksInfoMessage`. If the actual instance is not `ScheduledTasksInfoMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScheduledTasksInfoMessage`
     * @throws ClassCastException if the instance is not `ScheduledTasksInfoMessage`
     */
    public ScheduledTasksInfoMessage getScheduledTasksInfoMessage() throws ClassCastException {
        return (ScheduledTasksInfoMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SeriesTimerCancelledMessage`. If the actual instance is not `SeriesTimerCancelledMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SeriesTimerCancelledMessage`
     * @throws ClassCastException if the instance is not `SeriesTimerCancelledMessage`
     */
    public SeriesTimerCancelledMessage getSeriesTimerCancelledMessage() throws ClassCastException {
        return (SeriesTimerCancelledMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SeriesTimerCreatedMessage`. If the actual instance is not `SeriesTimerCreatedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SeriesTimerCreatedMessage`
     * @throws ClassCastException if the instance is not `SeriesTimerCreatedMessage`
     */
    public SeriesTimerCreatedMessage getSeriesTimerCreatedMessage() throws ClassCastException {
        return (SeriesTimerCreatedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ServerRestartingMessage`. If the actual instance is not `ServerRestartingMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ServerRestartingMessage`
     * @throws ClassCastException if the instance is not `ServerRestartingMessage`
     */
    public ServerRestartingMessage getServerRestartingMessage() throws ClassCastException {
        return (ServerRestartingMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ServerShuttingDownMessage`. If the actual instance is not `ServerShuttingDownMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ServerShuttingDownMessage`
     * @throws ClassCastException if the instance is not `ServerShuttingDownMessage`
     */
    public ServerShuttingDownMessage getServerShuttingDownMessage() throws ClassCastException {
        return (ServerShuttingDownMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SessionsMessage`. If the actual instance is not `SessionsMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SessionsMessage`
     * @throws ClassCastException if the instance is not `SessionsMessage`
     */
    public SessionsMessage getSessionsMessage() throws ClassCastException {
        return (SessionsMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SyncPlayCommandMessage`. If the actual instance is not `SyncPlayCommandMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SyncPlayCommandMessage`
     * @throws ClassCastException if the instance is not `SyncPlayCommandMessage`
     */
    public SyncPlayCommandMessage getSyncPlayCommandMessage() throws ClassCastException {
        return (SyncPlayCommandMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SyncPlayGroupUpdateCommandMessage`. If the actual instance is not `SyncPlayGroupUpdateCommandMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SyncPlayGroupUpdateCommandMessage`
     * @throws ClassCastException if the instance is not `SyncPlayGroupUpdateCommandMessage`
     */
    public SyncPlayGroupUpdateCommandMessage getSyncPlayGroupUpdateCommandMessage() throws ClassCastException {
        return (SyncPlayGroupUpdateCommandMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TimerCancelledMessage`. If the actual instance is not `TimerCancelledMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimerCancelledMessage`
     * @throws ClassCastException if the instance is not `TimerCancelledMessage`
     */
    public TimerCancelledMessage getTimerCancelledMessage() throws ClassCastException {
        return (TimerCancelledMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TimerCreatedMessage`. If the actual instance is not `TimerCreatedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimerCreatedMessage`
     * @throws ClassCastException if the instance is not `TimerCreatedMessage`
     */
    public TimerCreatedMessage getTimerCreatedMessage() throws ClassCastException {
        return (TimerCreatedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UserDataChangedMessage`. If the actual instance is not `UserDataChangedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserDataChangedMessage`
     * @throws ClassCastException if the instance is not `UserDataChangedMessage`
     */
    public UserDataChangedMessage getUserDataChangedMessage() throws ClassCastException {
        return (UserDataChangedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UserDeletedMessage`. If the actual instance is not `UserDeletedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserDeletedMessage`
     * @throws ClassCastException if the instance is not `UserDeletedMessage`
     */
    public UserDeletedMessage getUserDeletedMessage() throws ClassCastException {
        return (UserDeletedMessage)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UserUpdatedMessage`. If the actual instance is not `UserUpdatedMessage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUpdatedMessage`
     * @throws ClassCastException if the instance is not `UserUpdatedMessage`
     */
    public UserUpdatedMessage getUserUpdatedMessage() throws ClassCastException {
        return (UserUpdatedMessage)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OutboundWebSocketMessage
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ActivityLogEntryMessage
        try {
            ActivityLogEntryMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ActivityLogEntryMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ForceKeepAliveMessage
        try {
            ForceKeepAliveMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ForceKeepAliveMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GeneralCommandMessage
        try {
            GeneralCommandMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeneralCommandMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LibraryChangedMessage
        try {
            LibraryChangedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LibraryChangedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OutboundKeepAliveMessage
        try {
            OutboundKeepAliveMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OutboundKeepAliveMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PlayMessage
        try {
            PlayMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PlayMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PlaystateMessage
        try {
            PlaystateMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PlaystateMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PluginInstallationCancelledMessage
        try {
            PluginInstallationCancelledMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PluginInstallationCancelledMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PluginInstallationCompletedMessage
        try {
            PluginInstallationCompletedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PluginInstallationCompletedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PluginInstallationFailedMessage
        try {
            PluginInstallationFailedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PluginInstallationFailedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PluginInstallingMessage
        try {
            PluginInstallingMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PluginInstallingMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PluginUninstalledMessage
        try {
            PluginUninstalledMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PluginUninstalledMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RefreshProgressMessage
        try {
            RefreshProgressMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RefreshProgressMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RestartRequiredMessage
        try {
            RestartRequiredMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RestartRequiredMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ScheduledTaskEndedMessage
        try {
            ScheduledTaskEndedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ScheduledTaskEndedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ScheduledTasksInfoMessage
        try {
            ScheduledTasksInfoMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ScheduledTasksInfoMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SeriesTimerCancelledMessage
        try {
            SeriesTimerCancelledMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SeriesTimerCancelledMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SeriesTimerCreatedMessage
        try {
            SeriesTimerCreatedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SeriesTimerCreatedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ServerRestartingMessage
        try {
            ServerRestartingMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ServerRestartingMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ServerShuttingDownMessage
        try {
            ServerShuttingDownMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ServerShuttingDownMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SessionsMessage
        try {
            SessionsMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SessionsMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SyncPlayCommandMessage
        try {
            SyncPlayCommandMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SyncPlayCommandMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SyncPlayGroupUpdateCommandMessage
        try {
            SyncPlayGroupUpdateCommandMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SyncPlayGroupUpdateCommandMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimerCancelledMessage
        try {
            TimerCancelledMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimerCancelledMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimerCreatedMessage
        try {
            TimerCreatedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimerCreatedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserDataChangedMessage
        try {
            UserDataChangedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserDataChangedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserDeletedMessage
        try {
            UserDeletedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserDeletedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUpdatedMessage
        try {
            UserUpdatedMessage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUpdatedMessage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for OutboundWebSocketMessage with oneOf schemas: ActivityLogEntryMessage, ForceKeepAliveMessage, GeneralCommandMessage, LibraryChangedMessage, OutboundKeepAliveMessage, PlayMessage, PlaystateMessage, PluginInstallationCancelledMessage, PluginInstallationCompletedMessage, PluginInstallationFailedMessage, PluginInstallingMessage, PluginUninstalledMessage, RefreshProgressMessage, RestartRequiredMessage, ScheduledTaskEndedMessage, ScheduledTasksInfoMessage, SeriesTimerCancelledMessage, SeriesTimerCreatedMessage, ServerRestartingMessage, ServerShuttingDownMessage, SessionsMessage, SyncPlayCommandMessage, SyncPlayGroupUpdateCommandMessage, TimerCancelledMessage, TimerCreatedMessage, UserDataChangedMessage, UserDeletedMessage, UserUpdatedMessage. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of OutboundWebSocketMessage given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OutboundWebSocketMessage
     * @throws IOException if the JSON string is invalid with respect to OutboundWebSocketMessage
     */
    public static OutboundWebSocketMessage fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OutboundWebSocketMessage.class);
    }

    /**
     * Convert an instance of OutboundWebSocketMessage to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

