/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmbeddedSubtitleOptions;
import org.openapitools.client.model.MediaPathInfo;
import org.openapitools.client.model.TypeOptions;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LibraryOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class LibraryOptions {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENABLE_PHOTOS = "EnablePhotos";
  @SerializedName(SERIALIZED_NAME_ENABLE_PHOTOS)
  @javax.annotation.Nullable
  private Boolean enablePhotos;

  public static final String SERIALIZED_NAME_ENABLE_REALTIME_MONITOR = "EnableRealtimeMonitor";
  @SerializedName(SERIALIZED_NAME_ENABLE_REALTIME_MONITOR)
  @javax.annotation.Nullable
  private Boolean enableRealtimeMonitor;

  public static final String SERIALIZED_NAME_ENABLE_L_U_F_S_SCAN = "EnableLUFSScan";
  @SerializedName(SERIALIZED_NAME_ENABLE_L_U_F_S_SCAN)
  @javax.annotation.Nullable
  private Boolean enableLUFSScan;

  public static final String SERIALIZED_NAME_ENABLE_CHAPTER_IMAGE_EXTRACTION = "EnableChapterImageExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_CHAPTER_IMAGE_EXTRACTION)
  @javax.annotation.Nullable
  private Boolean enableChapterImageExtraction;

  public static final String SERIALIZED_NAME_EXTRACT_CHAPTER_IMAGES_DURING_LIBRARY_SCAN = "ExtractChapterImagesDuringLibraryScan";
  @SerializedName(SERIALIZED_NAME_EXTRACT_CHAPTER_IMAGES_DURING_LIBRARY_SCAN)
  @javax.annotation.Nullable
  private Boolean extractChapterImagesDuringLibraryScan;

  public static final String SERIALIZED_NAME_ENABLE_TRICKPLAY_IMAGE_EXTRACTION = "EnableTrickplayImageExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_TRICKPLAY_IMAGE_EXTRACTION)
  @javax.annotation.Nullable
  private Boolean enableTrickplayImageExtraction;

  public static final String SERIALIZED_NAME_EXTRACT_TRICKPLAY_IMAGES_DURING_LIBRARY_SCAN = "ExtractTrickplayImagesDuringLibraryScan";
  @SerializedName(SERIALIZED_NAME_EXTRACT_TRICKPLAY_IMAGES_DURING_LIBRARY_SCAN)
  @javax.annotation.Nullable
  private Boolean extractTrickplayImagesDuringLibraryScan;

  public static final String SERIALIZED_NAME_PATH_INFOS = "PathInfos";
  @SerializedName(SERIALIZED_NAME_PATH_INFOS)
  @javax.annotation.Nullable
  private List<MediaPathInfo> pathInfos = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAVE_LOCAL_METADATA = "SaveLocalMetadata";
  @SerializedName(SERIALIZED_NAME_SAVE_LOCAL_METADATA)
  @javax.annotation.Nullable
  private Boolean saveLocalMetadata;

  public static final String SERIALIZED_NAME_ENABLE_INTERNET_PROVIDERS = "EnableInternetProviders";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ENABLE_INTERNET_PROVIDERS)
  @javax.annotation.Nullable
  private Boolean enableInternetProviders;

  public static final String SERIALIZED_NAME_ENABLE_AUTOMATIC_SERIES_GROUPING = "EnableAutomaticSeriesGrouping";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTOMATIC_SERIES_GROUPING)
  @javax.annotation.Nullable
  private Boolean enableAutomaticSeriesGrouping;

  public static final String SERIALIZED_NAME_ENABLE_EMBEDDED_TITLES = "EnableEmbeddedTitles";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMBEDDED_TITLES)
  @javax.annotation.Nullable
  private Boolean enableEmbeddedTitles;

  public static final String SERIALIZED_NAME_ENABLE_EMBEDDED_EXTRAS_TITLES = "EnableEmbeddedExtrasTitles";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMBEDDED_EXTRAS_TITLES)
  @javax.annotation.Nullable
  private Boolean enableEmbeddedExtrasTitles;

  public static final String SERIALIZED_NAME_ENABLE_EMBEDDED_EPISODE_INFOS = "EnableEmbeddedEpisodeInfos";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMBEDDED_EPISODE_INFOS)
  @javax.annotation.Nullable
  private Boolean enableEmbeddedEpisodeInfos;

  public static final String SERIALIZED_NAME_AUTOMATIC_REFRESH_INTERVAL_DAYS = "AutomaticRefreshIntervalDays";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_REFRESH_INTERVAL_DAYS)
  @javax.annotation.Nullable
  private Integer automaticRefreshIntervalDays;

  public static final String SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE = "PreferredMetadataLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE)
  @javax.annotation.Nullable
  private String preferredMetadataLanguage;

  public static final String SERIALIZED_NAME_METADATA_COUNTRY_CODE = "MetadataCountryCode";
  @SerializedName(SERIALIZED_NAME_METADATA_COUNTRY_CODE)
  @javax.annotation.Nullable
  private String metadataCountryCode;

  public static final String SERIALIZED_NAME_SEASON_ZERO_DISPLAY_NAME = "SeasonZeroDisplayName";
  @SerializedName(SERIALIZED_NAME_SEASON_ZERO_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String seasonZeroDisplayName;

  public static final String SERIALIZED_NAME_METADATA_SAVERS = "MetadataSavers";
  @SerializedName(SERIALIZED_NAME_METADATA_SAVERS)
  @javax.annotation.Nullable
  private List<String> metadataSavers;

  public static final String SERIALIZED_NAME_DISABLED_LOCAL_METADATA_READERS = "DisabledLocalMetadataReaders";
  @SerializedName(SERIALIZED_NAME_DISABLED_LOCAL_METADATA_READERS)
  @javax.annotation.Nullable
  private List<String> disabledLocalMetadataReaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCAL_METADATA_READER_ORDER = "LocalMetadataReaderOrder";
  @SerializedName(SERIALIZED_NAME_LOCAL_METADATA_READER_ORDER)
  @javax.annotation.Nullable
  private List<String> localMetadataReaderOrder;

  public static final String SERIALIZED_NAME_DISABLED_SUBTITLE_FETCHERS = "DisabledSubtitleFetchers";
  @SerializedName(SERIALIZED_NAME_DISABLED_SUBTITLE_FETCHERS)
  @javax.annotation.Nullable
  private List<String> disabledSubtitleFetchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBTITLE_FETCHER_ORDER = "SubtitleFetcherOrder";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_FETCHER_ORDER)
  @javax.annotation.Nullable
  private List<String> subtitleFetcherOrder = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED_MEDIA_SEGMENT_PROVIDERS = "DisabledMediaSegmentProviders";
  @SerializedName(SERIALIZED_NAME_DISABLED_MEDIA_SEGMENT_PROVIDERS)
  @javax.annotation.Nullable
  private List<String> disabledMediaSegmentProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_SEGMENT_PROVIDE_ORDER = "MediaSegmentProvideOrder";
  @SerializedName(SERIALIZED_NAME_MEDIA_SEGMENT_PROVIDE_ORDER)
  @javax.annotation.Nullable
  private List<String> mediaSegmentProvideOrder = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_SUBTITLES_IF_EMBEDDED_SUBTITLES_PRESENT = "SkipSubtitlesIfEmbeddedSubtitlesPresent";
  @SerializedName(SERIALIZED_NAME_SKIP_SUBTITLES_IF_EMBEDDED_SUBTITLES_PRESENT)
  @javax.annotation.Nullable
  private Boolean skipSubtitlesIfEmbeddedSubtitlesPresent;

  public static final String SERIALIZED_NAME_SKIP_SUBTITLES_IF_AUDIO_TRACK_MATCHES = "SkipSubtitlesIfAudioTrackMatches";
  @SerializedName(SERIALIZED_NAME_SKIP_SUBTITLES_IF_AUDIO_TRACK_MATCHES)
  @javax.annotation.Nullable
  private Boolean skipSubtitlesIfAudioTrackMatches;

  public static final String SERIALIZED_NAME_SUBTITLE_DOWNLOAD_LANGUAGES = "SubtitleDownloadLanguages";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_DOWNLOAD_LANGUAGES)
  @javax.annotation.Nullable
  private List<String> subtitleDownloadLanguages;

  public static final String SERIALIZED_NAME_REQUIRE_PERFECT_SUBTITLE_MATCH = "RequirePerfectSubtitleMatch";
  @SerializedName(SERIALIZED_NAME_REQUIRE_PERFECT_SUBTITLE_MATCH)
  @javax.annotation.Nullable
  private Boolean requirePerfectSubtitleMatch;

  public static final String SERIALIZED_NAME_SAVE_SUBTITLES_WITH_MEDIA = "SaveSubtitlesWithMedia";
  @SerializedName(SERIALIZED_NAME_SAVE_SUBTITLES_WITH_MEDIA)
  @javax.annotation.Nullable
  private Boolean saveSubtitlesWithMedia;

  public static final String SERIALIZED_NAME_SAVE_LYRICS_WITH_MEDIA = "SaveLyricsWithMedia";
  @SerializedName(SERIALIZED_NAME_SAVE_LYRICS_WITH_MEDIA)
  @javax.annotation.Nullable
  private Boolean saveLyricsWithMedia = false;

  public static final String SERIALIZED_NAME_SAVE_TRICKPLAY_WITH_MEDIA = "SaveTrickplayWithMedia";
  @SerializedName(SERIALIZED_NAME_SAVE_TRICKPLAY_WITH_MEDIA)
  @javax.annotation.Nullable
  private Boolean saveTrickplayWithMedia = false;

  public static final String SERIALIZED_NAME_DISABLED_LYRIC_FETCHERS = "DisabledLyricFetchers";
  @SerializedName(SERIALIZED_NAME_DISABLED_LYRIC_FETCHERS)
  @javax.annotation.Nullable
  private List<String> disabledLyricFetchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LYRIC_FETCHER_ORDER = "LyricFetcherOrder";
  @SerializedName(SERIALIZED_NAME_LYRIC_FETCHER_ORDER)
  @javax.annotation.Nullable
  private List<String> lyricFetcherOrder = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFER_NONSTANDARD_ARTISTS_TAG = "PreferNonstandardArtistsTag";
  @SerializedName(SERIALIZED_NAME_PREFER_NONSTANDARD_ARTISTS_TAG)
  @javax.annotation.Nullable
  private Boolean preferNonstandardArtistsTag = false;

  public static final String SERIALIZED_NAME_USE_CUSTOM_TAG_DELIMITERS = "UseCustomTagDelimiters";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_TAG_DELIMITERS)
  @javax.annotation.Nullable
  private Boolean useCustomTagDelimiters = false;

  public static final String SERIALIZED_NAME_CUSTOM_TAG_DELIMITERS = "CustomTagDelimiters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TAG_DELIMITERS)
  @javax.annotation.Nullable
  private List<String> customTagDelimiters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIMITER_WHITELIST = "DelimiterWhitelist";
  @SerializedName(SERIALIZED_NAME_DELIMITER_WHITELIST)
  @javax.annotation.Nullable
  private List<String> delimiterWhitelist = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTOMATICALLY_ADD_TO_COLLECTION = "AutomaticallyAddToCollection";
  @SerializedName(SERIALIZED_NAME_AUTOMATICALLY_ADD_TO_COLLECTION)
  @javax.annotation.Nullable
  private Boolean automaticallyAddToCollection;

  public static final String SERIALIZED_NAME_ALLOW_EMBEDDED_SUBTITLES = "AllowEmbeddedSubtitles";
  @SerializedName(SERIALIZED_NAME_ALLOW_EMBEDDED_SUBTITLES)
  @javax.annotation.Nullable
  private EmbeddedSubtitleOptions allowEmbeddedSubtitles;

  public static final String SERIALIZED_NAME_TYPE_OPTIONS = "TypeOptions";
  @SerializedName(SERIALIZED_NAME_TYPE_OPTIONS)
  @javax.annotation.Nullable
  private List<TypeOptions> typeOptions = new ArrayList<>();

  public LibraryOptions() {
  }

  public LibraryOptions enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public LibraryOptions enablePhotos(@javax.annotation.Nullable Boolean enablePhotos) {
    this.enablePhotos = enablePhotos;
    return this;
  }

  /**
   * Get enablePhotos
   * @return enablePhotos
   */
  @javax.annotation.Nullable
  public Boolean getEnablePhotos() {
    return enablePhotos;
  }

  public void setEnablePhotos(@javax.annotation.Nullable Boolean enablePhotos) {
    this.enablePhotos = enablePhotos;
  }


  public LibraryOptions enableRealtimeMonitor(@javax.annotation.Nullable Boolean enableRealtimeMonitor) {
    this.enableRealtimeMonitor = enableRealtimeMonitor;
    return this;
  }

  /**
   * Get enableRealtimeMonitor
   * @return enableRealtimeMonitor
   */
  @javax.annotation.Nullable
  public Boolean getEnableRealtimeMonitor() {
    return enableRealtimeMonitor;
  }

  public void setEnableRealtimeMonitor(@javax.annotation.Nullable Boolean enableRealtimeMonitor) {
    this.enableRealtimeMonitor = enableRealtimeMonitor;
  }


  public LibraryOptions enableLUFSScan(@javax.annotation.Nullable Boolean enableLUFSScan) {
    this.enableLUFSScan = enableLUFSScan;
    return this;
  }

  /**
   * Get enableLUFSScan
   * @return enableLUFSScan
   */
  @javax.annotation.Nullable
  public Boolean getEnableLUFSScan() {
    return enableLUFSScan;
  }

  public void setEnableLUFSScan(@javax.annotation.Nullable Boolean enableLUFSScan) {
    this.enableLUFSScan = enableLUFSScan;
  }


  public LibraryOptions enableChapterImageExtraction(@javax.annotation.Nullable Boolean enableChapterImageExtraction) {
    this.enableChapterImageExtraction = enableChapterImageExtraction;
    return this;
  }

  /**
   * Get enableChapterImageExtraction
   * @return enableChapterImageExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableChapterImageExtraction() {
    return enableChapterImageExtraction;
  }

  public void setEnableChapterImageExtraction(@javax.annotation.Nullable Boolean enableChapterImageExtraction) {
    this.enableChapterImageExtraction = enableChapterImageExtraction;
  }


  public LibraryOptions extractChapterImagesDuringLibraryScan(@javax.annotation.Nullable Boolean extractChapterImagesDuringLibraryScan) {
    this.extractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan;
    return this;
  }

  /**
   * Get extractChapterImagesDuringLibraryScan
   * @return extractChapterImagesDuringLibraryScan
   */
  @javax.annotation.Nullable
  public Boolean getExtractChapterImagesDuringLibraryScan() {
    return extractChapterImagesDuringLibraryScan;
  }

  public void setExtractChapterImagesDuringLibraryScan(@javax.annotation.Nullable Boolean extractChapterImagesDuringLibraryScan) {
    this.extractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan;
  }


  public LibraryOptions enableTrickplayImageExtraction(@javax.annotation.Nullable Boolean enableTrickplayImageExtraction) {
    this.enableTrickplayImageExtraction = enableTrickplayImageExtraction;
    return this;
  }

  /**
   * Get enableTrickplayImageExtraction
   * @return enableTrickplayImageExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableTrickplayImageExtraction() {
    return enableTrickplayImageExtraction;
  }

  public void setEnableTrickplayImageExtraction(@javax.annotation.Nullable Boolean enableTrickplayImageExtraction) {
    this.enableTrickplayImageExtraction = enableTrickplayImageExtraction;
  }


  public LibraryOptions extractTrickplayImagesDuringLibraryScan(@javax.annotation.Nullable Boolean extractTrickplayImagesDuringLibraryScan) {
    this.extractTrickplayImagesDuringLibraryScan = extractTrickplayImagesDuringLibraryScan;
    return this;
  }

  /**
   * Get extractTrickplayImagesDuringLibraryScan
   * @return extractTrickplayImagesDuringLibraryScan
   */
  @javax.annotation.Nullable
  public Boolean getExtractTrickplayImagesDuringLibraryScan() {
    return extractTrickplayImagesDuringLibraryScan;
  }

  public void setExtractTrickplayImagesDuringLibraryScan(@javax.annotation.Nullable Boolean extractTrickplayImagesDuringLibraryScan) {
    this.extractTrickplayImagesDuringLibraryScan = extractTrickplayImagesDuringLibraryScan;
  }


  public LibraryOptions pathInfos(@javax.annotation.Nullable List<MediaPathInfo> pathInfos) {
    this.pathInfos = pathInfos;
    return this;
  }

  public LibraryOptions addPathInfosItem(MediaPathInfo pathInfosItem) {
    if (this.pathInfos == null) {
      this.pathInfos = new ArrayList<>();
    }
    this.pathInfos.add(pathInfosItem);
    return this;
  }

  /**
   * Get pathInfos
   * @return pathInfos
   */
  @javax.annotation.Nullable
  public List<MediaPathInfo> getPathInfos() {
    return pathInfos;
  }

  public void setPathInfos(@javax.annotation.Nullable List<MediaPathInfo> pathInfos) {
    this.pathInfos = pathInfos;
  }


  public LibraryOptions saveLocalMetadata(@javax.annotation.Nullable Boolean saveLocalMetadata) {
    this.saveLocalMetadata = saveLocalMetadata;
    return this;
  }

  /**
   * Get saveLocalMetadata
   * @return saveLocalMetadata
   */
  @javax.annotation.Nullable
  public Boolean getSaveLocalMetadata() {
    return saveLocalMetadata;
  }

  public void setSaveLocalMetadata(@javax.annotation.Nullable Boolean saveLocalMetadata) {
    this.saveLocalMetadata = saveLocalMetadata;
  }


  @Deprecated
  public LibraryOptions enableInternetProviders(@javax.annotation.Nullable Boolean enableInternetProviders) {
    this.enableInternetProviders = enableInternetProviders;
    return this;
  }

  /**
   * Get enableInternetProviders
   * @return enableInternetProviders
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getEnableInternetProviders() {
    return enableInternetProviders;
  }

  @Deprecated
  public void setEnableInternetProviders(@javax.annotation.Nullable Boolean enableInternetProviders) {
    this.enableInternetProviders = enableInternetProviders;
  }


  public LibraryOptions enableAutomaticSeriesGrouping(@javax.annotation.Nullable Boolean enableAutomaticSeriesGrouping) {
    this.enableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping;
    return this;
  }

  /**
   * Get enableAutomaticSeriesGrouping
   * @return enableAutomaticSeriesGrouping
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutomaticSeriesGrouping() {
    return enableAutomaticSeriesGrouping;
  }

  public void setEnableAutomaticSeriesGrouping(@javax.annotation.Nullable Boolean enableAutomaticSeriesGrouping) {
    this.enableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping;
  }


  public LibraryOptions enableEmbeddedTitles(@javax.annotation.Nullable Boolean enableEmbeddedTitles) {
    this.enableEmbeddedTitles = enableEmbeddedTitles;
    return this;
  }

  /**
   * Get enableEmbeddedTitles
   * @return enableEmbeddedTitles
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmbeddedTitles() {
    return enableEmbeddedTitles;
  }

  public void setEnableEmbeddedTitles(@javax.annotation.Nullable Boolean enableEmbeddedTitles) {
    this.enableEmbeddedTitles = enableEmbeddedTitles;
  }


  public LibraryOptions enableEmbeddedExtrasTitles(@javax.annotation.Nullable Boolean enableEmbeddedExtrasTitles) {
    this.enableEmbeddedExtrasTitles = enableEmbeddedExtrasTitles;
    return this;
  }

  /**
   * Get enableEmbeddedExtrasTitles
   * @return enableEmbeddedExtrasTitles
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmbeddedExtrasTitles() {
    return enableEmbeddedExtrasTitles;
  }

  public void setEnableEmbeddedExtrasTitles(@javax.annotation.Nullable Boolean enableEmbeddedExtrasTitles) {
    this.enableEmbeddedExtrasTitles = enableEmbeddedExtrasTitles;
  }


  public LibraryOptions enableEmbeddedEpisodeInfos(@javax.annotation.Nullable Boolean enableEmbeddedEpisodeInfos) {
    this.enableEmbeddedEpisodeInfos = enableEmbeddedEpisodeInfos;
    return this;
  }

  /**
   * Get enableEmbeddedEpisodeInfos
   * @return enableEmbeddedEpisodeInfos
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmbeddedEpisodeInfos() {
    return enableEmbeddedEpisodeInfos;
  }

  public void setEnableEmbeddedEpisodeInfos(@javax.annotation.Nullable Boolean enableEmbeddedEpisodeInfos) {
    this.enableEmbeddedEpisodeInfos = enableEmbeddedEpisodeInfos;
  }


  public LibraryOptions automaticRefreshIntervalDays(@javax.annotation.Nullable Integer automaticRefreshIntervalDays) {
    this.automaticRefreshIntervalDays = automaticRefreshIntervalDays;
    return this;
  }

  /**
   * Get automaticRefreshIntervalDays
   * @return automaticRefreshIntervalDays
   */
  @javax.annotation.Nullable
  public Integer getAutomaticRefreshIntervalDays() {
    return automaticRefreshIntervalDays;
  }

  public void setAutomaticRefreshIntervalDays(@javax.annotation.Nullable Integer automaticRefreshIntervalDays) {
    this.automaticRefreshIntervalDays = automaticRefreshIntervalDays;
  }


  public LibraryOptions preferredMetadataLanguage(@javax.annotation.Nullable String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
    return this;
  }

  /**
   * Gets or sets the preferred metadata language.
   * @return preferredMetadataLanguage
   */
  @javax.annotation.Nullable
  public String getPreferredMetadataLanguage() {
    return preferredMetadataLanguage;
  }

  public void setPreferredMetadataLanguage(@javax.annotation.Nullable String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
  }


  public LibraryOptions metadataCountryCode(@javax.annotation.Nullable String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
    return this;
  }

  /**
   * Gets or sets the metadata country code.
   * @return metadataCountryCode
   */
  @javax.annotation.Nullable
  public String getMetadataCountryCode() {
    return metadataCountryCode;
  }

  public void setMetadataCountryCode(@javax.annotation.Nullable String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
  }


  public LibraryOptions seasonZeroDisplayName(@javax.annotation.Nullable String seasonZeroDisplayName) {
    this.seasonZeroDisplayName = seasonZeroDisplayName;
    return this;
  }

  /**
   * Get seasonZeroDisplayName
   * @return seasonZeroDisplayName
   */
  @javax.annotation.Nullable
  public String getSeasonZeroDisplayName() {
    return seasonZeroDisplayName;
  }

  public void setSeasonZeroDisplayName(@javax.annotation.Nullable String seasonZeroDisplayName) {
    this.seasonZeroDisplayName = seasonZeroDisplayName;
  }


  public LibraryOptions metadataSavers(@javax.annotation.Nullable List<String> metadataSavers) {
    this.metadataSavers = metadataSavers;
    return this;
  }

  public LibraryOptions addMetadataSaversItem(String metadataSaversItem) {
    if (this.metadataSavers == null) {
      this.metadataSavers = new ArrayList<>();
    }
    this.metadataSavers.add(metadataSaversItem);
    return this;
  }

  /**
   * Get metadataSavers
   * @return metadataSavers
   */
  @javax.annotation.Nullable
  public List<String> getMetadataSavers() {
    return metadataSavers;
  }

  public void setMetadataSavers(@javax.annotation.Nullable List<String> metadataSavers) {
    this.metadataSavers = metadataSavers;
  }


  public LibraryOptions disabledLocalMetadataReaders(@javax.annotation.Nullable List<String> disabledLocalMetadataReaders) {
    this.disabledLocalMetadataReaders = disabledLocalMetadataReaders;
    return this;
  }

  public LibraryOptions addDisabledLocalMetadataReadersItem(String disabledLocalMetadataReadersItem) {
    if (this.disabledLocalMetadataReaders == null) {
      this.disabledLocalMetadataReaders = new ArrayList<>();
    }
    this.disabledLocalMetadataReaders.add(disabledLocalMetadataReadersItem);
    return this;
  }

  /**
   * Get disabledLocalMetadataReaders
   * @return disabledLocalMetadataReaders
   */
  @javax.annotation.Nullable
  public List<String> getDisabledLocalMetadataReaders() {
    return disabledLocalMetadataReaders;
  }

  public void setDisabledLocalMetadataReaders(@javax.annotation.Nullable List<String> disabledLocalMetadataReaders) {
    this.disabledLocalMetadataReaders = disabledLocalMetadataReaders;
  }


  public LibraryOptions localMetadataReaderOrder(@javax.annotation.Nullable List<String> localMetadataReaderOrder) {
    this.localMetadataReaderOrder = localMetadataReaderOrder;
    return this;
  }

  public LibraryOptions addLocalMetadataReaderOrderItem(String localMetadataReaderOrderItem) {
    if (this.localMetadataReaderOrder == null) {
      this.localMetadataReaderOrder = new ArrayList<>();
    }
    this.localMetadataReaderOrder.add(localMetadataReaderOrderItem);
    return this;
  }

  /**
   * Get localMetadataReaderOrder
   * @return localMetadataReaderOrder
   */
  @javax.annotation.Nullable
  public List<String> getLocalMetadataReaderOrder() {
    return localMetadataReaderOrder;
  }

  public void setLocalMetadataReaderOrder(@javax.annotation.Nullable List<String> localMetadataReaderOrder) {
    this.localMetadataReaderOrder = localMetadataReaderOrder;
  }


  public LibraryOptions disabledSubtitleFetchers(@javax.annotation.Nullable List<String> disabledSubtitleFetchers) {
    this.disabledSubtitleFetchers = disabledSubtitleFetchers;
    return this;
  }

  public LibraryOptions addDisabledSubtitleFetchersItem(String disabledSubtitleFetchersItem) {
    if (this.disabledSubtitleFetchers == null) {
      this.disabledSubtitleFetchers = new ArrayList<>();
    }
    this.disabledSubtitleFetchers.add(disabledSubtitleFetchersItem);
    return this;
  }

  /**
   * Get disabledSubtitleFetchers
   * @return disabledSubtitleFetchers
   */
  @javax.annotation.Nullable
  public List<String> getDisabledSubtitleFetchers() {
    return disabledSubtitleFetchers;
  }

  public void setDisabledSubtitleFetchers(@javax.annotation.Nullable List<String> disabledSubtitleFetchers) {
    this.disabledSubtitleFetchers = disabledSubtitleFetchers;
  }


  public LibraryOptions subtitleFetcherOrder(@javax.annotation.Nullable List<String> subtitleFetcherOrder) {
    this.subtitleFetcherOrder = subtitleFetcherOrder;
    return this;
  }

  public LibraryOptions addSubtitleFetcherOrderItem(String subtitleFetcherOrderItem) {
    if (this.subtitleFetcherOrder == null) {
      this.subtitleFetcherOrder = new ArrayList<>();
    }
    this.subtitleFetcherOrder.add(subtitleFetcherOrderItem);
    return this;
  }

  /**
   * Get subtitleFetcherOrder
   * @return subtitleFetcherOrder
   */
  @javax.annotation.Nullable
  public List<String> getSubtitleFetcherOrder() {
    return subtitleFetcherOrder;
  }

  public void setSubtitleFetcherOrder(@javax.annotation.Nullable List<String> subtitleFetcherOrder) {
    this.subtitleFetcherOrder = subtitleFetcherOrder;
  }


  public LibraryOptions disabledMediaSegmentProviders(@javax.annotation.Nullable List<String> disabledMediaSegmentProviders) {
    this.disabledMediaSegmentProviders = disabledMediaSegmentProviders;
    return this;
  }

  public LibraryOptions addDisabledMediaSegmentProvidersItem(String disabledMediaSegmentProvidersItem) {
    if (this.disabledMediaSegmentProviders == null) {
      this.disabledMediaSegmentProviders = new ArrayList<>();
    }
    this.disabledMediaSegmentProviders.add(disabledMediaSegmentProvidersItem);
    return this;
  }

  /**
   * Get disabledMediaSegmentProviders
   * @return disabledMediaSegmentProviders
   */
  @javax.annotation.Nullable
  public List<String> getDisabledMediaSegmentProviders() {
    return disabledMediaSegmentProviders;
  }

  public void setDisabledMediaSegmentProviders(@javax.annotation.Nullable List<String> disabledMediaSegmentProviders) {
    this.disabledMediaSegmentProviders = disabledMediaSegmentProviders;
  }


  public LibraryOptions mediaSegmentProvideOrder(@javax.annotation.Nullable List<String> mediaSegmentProvideOrder) {
    this.mediaSegmentProvideOrder = mediaSegmentProvideOrder;
    return this;
  }

  public LibraryOptions addMediaSegmentProvideOrderItem(String mediaSegmentProvideOrderItem) {
    if (this.mediaSegmentProvideOrder == null) {
      this.mediaSegmentProvideOrder = new ArrayList<>();
    }
    this.mediaSegmentProvideOrder.add(mediaSegmentProvideOrderItem);
    return this;
  }

  /**
   * Get mediaSegmentProvideOrder
   * @return mediaSegmentProvideOrder
   */
  @javax.annotation.Nullable
  public List<String> getMediaSegmentProvideOrder() {
    return mediaSegmentProvideOrder;
  }

  public void setMediaSegmentProvideOrder(@javax.annotation.Nullable List<String> mediaSegmentProvideOrder) {
    this.mediaSegmentProvideOrder = mediaSegmentProvideOrder;
  }


  public LibraryOptions skipSubtitlesIfEmbeddedSubtitlesPresent(@javax.annotation.Nullable Boolean skipSubtitlesIfEmbeddedSubtitlesPresent) {
    this.skipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent;
    return this;
  }

  /**
   * Get skipSubtitlesIfEmbeddedSubtitlesPresent
   * @return skipSubtitlesIfEmbeddedSubtitlesPresent
   */
  @javax.annotation.Nullable
  public Boolean getSkipSubtitlesIfEmbeddedSubtitlesPresent() {
    return skipSubtitlesIfEmbeddedSubtitlesPresent;
  }

  public void setSkipSubtitlesIfEmbeddedSubtitlesPresent(@javax.annotation.Nullable Boolean skipSubtitlesIfEmbeddedSubtitlesPresent) {
    this.skipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent;
  }


  public LibraryOptions skipSubtitlesIfAudioTrackMatches(@javax.annotation.Nullable Boolean skipSubtitlesIfAudioTrackMatches) {
    this.skipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches;
    return this;
  }

  /**
   * Get skipSubtitlesIfAudioTrackMatches
   * @return skipSubtitlesIfAudioTrackMatches
   */
  @javax.annotation.Nullable
  public Boolean getSkipSubtitlesIfAudioTrackMatches() {
    return skipSubtitlesIfAudioTrackMatches;
  }

  public void setSkipSubtitlesIfAudioTrackMatches(@javax.annotation.Nullable Boolean skipSubtitlesIfAudioTrackMatches) {
    this.skipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches;
  }


  public LibraryOptions subtitleDownloadLanguages(@javax.annotation.Nullable List<String> subtitleDownloadLanguages) {
    this.subtitleDownloadLanguages = subtitleDownloadLanguages;
    return this;
  }

  public LibraryOptions addSubtitleDownloadLanguagesItem(String subtitleDownloadLanguagesItem) {
    if (this.subtitleDownloadLanguages == null) {
      this.subtitleDownloadLanguages = new ArrayList<>();
    }
    this.subtitleDownloadLanguages.add(subtitleDownloadLanguagesItem);
    return this;
  }

  /**
   * Get subtitleDownloadLanguages
   * @return subtitleDownloadLanguages
   */
  @javax.annotation.Nullable
  public List<String> getSubtitleDownloadLanguages() {
    return subtitleDownloadLanguages;
  }

  public void setSubtitleDownloadLanguages(@javax.annotation.Nullable List<String> subtitleDownloadLanguages) {
    this.subtitleDownloadLanguages = subtitleDownloadLanguages;
  }


  public LibraryOptions requirePerfectSubtitleMatch(@javax.annotation.Nullable Boolean requirePerfectSubtitleMatch) {
    this.requirePerfectSubtitleMatch = requirePerfectSubtitleMatch;
    return this;
  }

  /**
   * Get requirePerfectSubtitleMatch
   * @return requirePerfectSubtitleMatch
   */
  @javax.annotation.Nullable
  public Boolean getRequirePerfectSubtitleMatch() {
    return requirePerfectSubtitleMatch;
  }

  public void setRequirePerfectSubtitleMatch(@javax.annotation.Nullable Boolean requirePerfectSubtitleMatch) {
    this.requirePerfectSubtitleMatch = requirePerfectSubtitleMatch;
  }


  public LibraryOptions saveSubtitlesWithMedia(@javax.annotation.Nullable Boolean saveSubtitlesWithMedia) {
    this.saveSubtitlesWithMedia = saveSubtitlesWithMedia;
    return this;
  }

  /**
   * Get saveSubtitlesWithMedia
   * @return saveSubtitlesWithMedia
   */
  @javax.annotation.Nullable
  public Boolean getSaveSubtitlesWithMedia() {
    return saveSubtitlesWithMedia;
  }

  public void setSaveSubtitlesWithMedia(@javax.annotation.Nullable Boolean saveSubtitlesWithMedia) {
    this.saveSubtitlesWithMedia = saveSubtitlesWithMedia;
  }


  public LibraryOptions saveLyricsWithMedia(@javax.annotation.Nullable Boolean saveLyricsWithMedia) {
    this.saveLyricsWithMedia = saveLyricsWithMedia;
    return this;
  }

  /**
   * Get saveLyricsWithMedia
   * @return saveLyricsWithMedia
   */
  @javax.annotation.Nullable
  public Boolean getSaveLyricsWithMedia() {
    return saveLyricsWithMedia;
  }

  public void setSaveLyricsWithMedia(@javax.annotation.Nullable Boolean saveLyricsWithMedia) {
    this.saveLyricsWithMedia = saveLyricsWithMedia;
  }


  public LibraryOptions saveTrickplayWithMedia(@javax.annotation.Nullable Boolean saveTrickplayWithMedia) {
    this.saveTrickplayWithMedia = saveTrickplayWithMedia;
    return this;
  }

  /**
   * Get saveTrickplayWithMedia
   * @return saveTrickplayWithMedia
   */
  @javax.annotation.Nullable
  public Boolean getSaveTrickplayWithMedia() {
    return saveTrickplayWithMedia;
  }

  public void setSaveTrickplayWithMedia(@javax.annotation.Nullable Boolean saveTrickplayWithMedia) {
    this.saveTrickplayWithMedia = saveTrickplayWithMedia;
  }


  public LibraryOptions disabledLyricFetchers(@javax.annotation.Nullable List<String> disabledLyricFetchers) {
    this.disabledLyricFetchers = disabledLyricFetchers;
    return this;
  }

  public LibraryOptions addDisabledLyricFetchersItem(String disabledLyricFetchersItem) {
    if (this.disabledLyricFetchers == null) {
      this.disabledLyricFetchers = new ArrayList<>();
    }
    this.disabledLyricFetchers.add(disabledLyricFetchersItem);
    return this;
  }

  /**
   * Get disabledLyricFetchers
   * @return disabledLyricFetchers
   */
  @javax.annotation.Nullable
  public List<String> getDisabledLyricFetchers() {
    return disabledLyricFetchers;
  }

  public void setDisabledLyricFetchers(@javax.annotation.Nullable List<String> disabledLyricFetchers) {
    this.disabledLyricFetchers = disabledLyricFetchers;
  }


  public LibraryOptions lyricFetcherOrder(@javax.annotation.Nullable List<String> lyricFetcherOrder) {
    this.lyricFetcherOrder = lyricFetcherOrder;
    return this;
  }

  public LibraryOptions addLyricFetcherOrderItem(String lyricFetcherOrderItem) {
    if (this.lyricFetcherOrder == null) {
      this.lyricFetcherOrder = new ArrayList<>();
    }
    this.lyricFetcherOrder.add(lyricFetcherOrderItem);
    return this;
  }

  /**
   * Get lyricFetcherOrder
   * @return lyricFetcherOrder
   */
  @javax.annotation.Nullable
  public List<String> getLyricFetcherOrder() {
    return lyricFetcherOrder;
  }

  public void setLyricFetcherOrder(@javax.annotation.Nullable List<String> lyricFetcherOrder) {
    this.lyricFetcherOrder = lyricFetcherOrder;
  }


  public LibraryOptions preferNonstandardArtistsTag(@javax.annotation.Nullable Boolean preferNonstandardArtistsTag) {
    this.preferNonstandardArtistsTag = preferNonstandardArtistsTag;
    return this;
  }

  /**
   * Get preferNonstandardArtistsTag
   * @return preferNonstandardArtistsTag
   */
  @javax.annotation.Nullable
  public Boolean getPreferNonstandardArtistsTag() {
    return preferNonstandardArtistsTag;
  }

  public void setPreferNonstandardArtistsTag(@javax.annotation.Nullable Boolean preferNonstandardArtistsTag) {
    this.preferNonstandardArtistsTag = preferNonstandardArtistsTag;
  }


  public LibraryOptions useCustomTagDelimiters(@javax.annotation.Nullable Boolean useCustomTagDelimiters) {
    this.useCustomTagDelimiters = useCustomTagDelimiters;
    return this;
  }

  /**
   * Get useCustomTagDelimiters
   * @return useCustomTagDelimiters
   */
  @javax.annotation.Nullable
  public Boolean getUseCustomTagDelimiters() {
    return useCustomTagDelimiters;
  }

  public void setUseCustomTagDelimiters(@javax.annotation.Nullable Boolean useCustomTagDelimiters) {
    this.useCustomTagDelimiters = useCustomTagDelimiters;
  }


  public LibraryOptions customTagDelimiters(@javax.annotation.Nullable List<String> customTagDelimiters) {
    this.customTagDelimiters = customTagDelimiters;
    return this;
  }

  public LibraryOptions addCustomTagDelimitersItem(String customTagDelimitersItem) {
    if (this.customTagDelimiters == null) {
      this.customTagDelimiters = new ArrayList<>();
    }
    this.customTagDelimiters.add(customTagDelimitersItem);
    return this;
  }

  /**
   * Get customTagDelimiters
   * @return customTagDelimiters
   */
  @javax.annotation.Nullable
  public List<String> getCustomTagDelimiters() {
    return customTagDelimiters;
  }

  public void setCustomTagDelimiters(@javax.annotation.Nullable List<String> customTagDelimiters) {
    this.customTagDelimiters = customTagDelimiters;
  }


  public LibraryOptions delimiterWhitelist(@javax.annotation.Nullable List<String> delimiterWhitelist) {
    this.delimiterWhitelist = delimiterWhitelist;
    return this;
  }

  public LibraryOptions addDelimiterWhitelistItem(String delimiterWhitelistItem) {
    if (this.delimiterWhitelist == null) {
      this.delimiterWhitelist = new ArrayList<>();
    }
    this.delimiterWhitelist.add(delimiterWhitelistItem);
    return this;
  }

  /**
   * Get delimiterWhitelist
   * @return delimiterWhitelist
   */
  @javax.annotation.Nullable
  public List<String> getDelimiterWhitelist() {
    return delimiterWhitelist;
  }

  public void setDelimiterWhitelist(@javax.annotation.Nullable List<String> delimiterWhitelist) {
    this.delimiterWhitelist = delimiterWhitelist;
  }


  public LibraryOptions automaticallyAddToCollection(@javax.annotation.Nullable Boolean automaticallyAddToCollection) {
    this.automaticallyAddToCollection = automaticallyAddToCollection;
    return this;
  }

  /**
   * Get automaticallyAddToCollection
   * @return automaticallyAddToCollection
   */
  @javax.annotation.Nullable
  public Boolean getAutomaticallyAddToCollection() {
    return automaticallyAddToCollection;
  }

  public void setAutomaticallyAddToCollection(@javax.annotation.Nullable Boolean automaticallyAddToCollection) {
    this.automaticallyAddToCollection = automaticallyAddToCollection;
  }


  public LibraryOptions allowEmbeddedSubtitles(@javax.annotation.Nullable EmbeddedSubtitleOptions allowEmbeddedSubtitles) {
    this.allowEmbeddedSubtitles = allowEmbeddedSubtitles;
    return this;
  }

  /**
   * An enum representing the options to disable embedded subs.
   * @return allowEmbeddedSubtitles
   */
  @javax.annotation.Nullable
  public EmbeddedSubtitleOptions getAllowEmbeddedSubtitles() {
    return allowEmbeddedSubtitles;
  }

  public void setAllowEmbeddedSubtitles(@javax.annotation.Nullable EmbeddedSubtitleOptions allowEmbeddedSubtitles) {
    this.allowEmbeddedSubtitles = allowEmbeddedSubtitles;
  }


  public LibraryOptions typeOptions(@javax.annotation.Nullable List<TypeOptions> typeOptions) {
    this.typeOptions = typeOptions;
    return this;
  }

  public LibraryOptions addTypeOptionsItem(TypeOptions typeOptionsItem) {
    if (this.typeOptions == null) {
      this.typeOptions = new ArrayList<>();
    }
    this.typeOptions.add(typeOptionsItem);
    return this;
  }

  /**
   * Get typeOptions
   * @return typeOptions
   */
  @javax.annotation.Nullable
  public List<TypeOptions> getTypeOptions() {
    return typeOptions;
  }

  public void setTypeOptions(@javax.annotation.Nullable List<TypeOptions> typeOptions) {
    this.typeOptions = typeOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryOptions libraryOptions = (LibraryOptions) o;
    return Objects.equals(this.enabled, libraryOptions.enabled) &&
        Objects.equals(this.enablePhotos, libraryOptions.enablePhotos) &&
        Objects.equals(this.enableRealtimeMonitor, libraryOptions.enableRealtimeMonitor) &&
        Objects.equals(this.enableLUFSScan, libraryOptions.enableLUFSScan) &&
        Objects.equals(this.enableChapterImageExtraction, libraryOptions.enableChapterImageExtraction) &&
        Objects.equals(this.extractChapterImagesDuringLibraryScan, libraryOptions.extractChapterImagesDuringLibraryScan) &&
        Objects.equals(this.enableTrickplayImageExtraction, libraryOptions.enableTrickplayImageExtraction) &&
        Objects.equals(this.extractTrickplayImagesDuringLibraryScan, libraryOptions.extractTrickplayImagesDuringLibraryScan) &&
        Objects.equals(this.pathInfos, libraryOptions.pathInfos) &&
        Objects.equals(this.saveLocalMetadata, libraryOptions.saveLocalMetadata) &&
        Objects.equals(this.enableInternetProviders, libraryOptions.enableInternetProviders) &&
        Objects.equals(this.enableAutomaticSeriesGrouping, libraryOptions.enableAutomaticSeriesGrouping) &&
        Objects.equals(this.enableEmbeddedTitles, libraryOptions.enableEmbeddedTitles) &&
        Objects.equals(this.enableEmbeddedExtrasTitles, libraryOptions.enableEmbeddedExtrasTitles) &&
        Objects.equals(this.enableEmbeddedEpisodeInfos, libraryOptions.enableEmbeddedEpisodeInfos) &&
        Objects.equals(this.automaticRefreshIntervalDays, libraryOptions.automaticRefreshIntervalDays) &&
        Objects.equals(this.preferredMetadataLanguage, libraryOptions.preferredMetadataLanguage) &&
        Objects.equals(this.metadataCountryCode, libraryOptions.metadataCountryCode) &&
        Objects.equals(this.seasonZeroDisplayName, libraryOptions.seasonZeroDisplayName) &&
        Objects.equals(this.metadataSavers, libraryOptions.metadataSavers) &&
        Objects.equals(this.disabledLocalMetadataReaders, libraryOptions.disabledLocalMetadataReaders) &&
        Objects.equals(this.localMetadataReaderOrder, libraryOptions.localMetadataReaderOrder) &&
        Objects.equals(this.disabledSubtitleFetchers, libraryOptions.disabledSubtitleFetchers) &&
        Objects.equals(this.subtitleFetcherOrder, libraryOptions.subtitleFetcherOrder) &&
        Objects.equals(this.disabledMediaSegmentProviders, libraryOptions.disabledMediaSegmentProviders) &&
        Objects.equals(this.mediaSegmentProvideOrder, libraryOptions.mediaSegmentProvideOrder) &&
        Objects.equals(this.skipSubtitlesIfEmbeddedSubtitlesPresent, libraryOptions.skipSubtitlesIfEmbeddedSubtitlesPresent) &&
        Objects.equals(this.skipSubtitlesIfAudioTrackMatches, libraryOptions.skipSubtitlesIfAudioTrackMatches) &&
        Objects.equals(this.subtitleDownloadLanguages, libraryOptions.subtitleDownloadLanguages) &&
        Objects.equals(this.requirePerfectSubtitleMatch, libraryOptions.requirePerfectSubtitleMatch) &&
        Objects.equals(this.saveSubtitlesWithMedia, libraryOptions.saveSubtitlesWithMedia) &&
        Objects.equals(this.saveLyricsWithMedia, libraryOptions.saveLyricsWithMedia) &&
        Objects.equals(this.saveTrickplayWithMedia, libraryOptions.saveTrickplayWithMedia) &&
        Objects.equals(this.disabledLyricFetchers, libraryOptions.disabledLyricFetchers) &&
        Objects.equals(this.lyricFetcherOrder, libraryOptions.lyricFetcherOrder) &&
        Objects.equals(this.preferNonstandardArtistsTag, libraryOptions.preferNonstandardArtistsTag) &&
        Objects.equals(this.useCustomTagDelimiters, libraryOptions.useCustomTagDelimiters) &&
        Objects.equals(this.customTagDelimiters, libraryOptions.customTagDelimiters) &&
        Objects.equals(this.delimiterWhitelist, libraryOptions.delimiterWhitelist) &&
        Objects.equals(this.automaticallyAddToCollection, libraryOptions.automaticallyAddToCollection) &&
        Objects.equals(this.allowEmbeddedSubtitles, libraryOptions.allowEmbeddedSubtitles) &&
        Objects.equals(this.typeOptions, libraryOptions.typeOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, enablePhotos, enableRealtimeMonitor, enableLUFSScan, enableChapterImageExtraction, extractChapterImagesDuringLibraryScan, enableTrickplayImageExtraction, extractTrickplayImagesDuringLibraryScan, pathInfos, saveLocalMetadata, enableInternetProviders, enableAutomaticSeriesGrouping, enableEmbeddedTitles, enableEmbeddedExtrasTitles, enableEmbeddedEpisodeInfos, automaticRefreshIntervalDays, preferredMetadataLanguage, metadataCountryCode, seasonZeroDisplayName, metadataSavers, disabledLocalMetadataReaders, localMetadataReaderOrder, disabledSubtitleFetchers, subtitleFetcherOrder, disabledMediaSegmentProviders, mediaSegmentProvideOrder, skipSubtitlesIfEmbeddedSubtitlesPresent, skipSubtitlesIfAudioTrackMatches, subtitleDownloadLanguages, requirePerfectSubtitleMatch, saveSubtitlesWithMedia, saveLyricsWithMedia, saveTrickplayWithMedia, disabledLyricFetchers, lyricFetcherOrder, preferNonstandardArtistsTag, useCustomTagDelimiters, customTagDelimiters, delimiterWhitelist, automaticallyAddToCollection, allowEmbeddedSubtitles, typeOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryOptions {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enablePhotos: ").append(toIndentedString(enablePhotos)).append("\n");
    sb.append("    enableRealtimeMonitor: ").append(toIndentedString(enableRealtimeMonitor)).append("\n");
    sb.append("    enableLUFSScan: ").append(toIndentedString(enableLUFSScan)).append("\n");
    sb.append("    enableChapterImageExtraction: ").append(toIndentedString(enableChapterImageExtraction)).append("\n");
    sb.append("    extractChapterImagesDuringLibraryScan: ").append(toIndentedString(extractChapterImagesDuringLibraryScan)).append("\n");
    sb.append("    enableTrickplayImageExtraction: ").append(toIndentedString(enableTrickplayImageExtraction)).append("\n");
    sb.append("    extractTrickplayImagesDuringLibraryScan: ").append(toIndentedString(extractTrickplayImagesDuringLibraryScan)).append("\n");
    sb.append("    pathInfos: ").append(toIndentedString(pathInfos)).append("\n");
    sb.append("    saveLocalMetadata: ").append(toIndentedString(saveLocalMetadata)).append("\n");
    sb.append("    enableInternetProviders: ").append(toIndentedString(enableInternetProviders)).append("\n");
    sb.append("    enableAutomaticSeriesGrouping: ").append(toIndentedString(enableAutomaticSeriesGrouping)).append("\n");
    sb.append("    enableEmbeddedTitles: ").append(toIndentedString(enableEmbeddedTitles)).append("\n");
    sb.append("    enableEmbeddedExtrasTitles: ").append(toIndentedString(enableEmbeddedExtrasTitles)).append("\n");
    sb.append("    enableEmbeddedEpisodeInfos: ").append(toIndentedString(enableEmbeddedEpisodeInfos)).append("\n");
    sb.append("    automaticRefreshIntervalDays: ").append(toIndentedString(automaticRefreshIntervalDays)).append("\n");
    sb.append("    preferredMetadataLanguage: ").append(toIndentedString(preferredMetadataLanguage)).append("\n");
    sb.append("    metadataCountryCode: ").append(toIndentedString(metadataCountryCode)).append("\n");
    sb.append("    seasonZeroDisplayName: ").append(toIndentedString(seasonZeroDisplayName)).append("\n");
    sb.append("    metadataSavers: ").append(toIndentedString(metadataSavers)).append("\n");
    sb.append("    disabledLocalMetadataReaders: ").append(toIndentedString(disabledLocalMetadataReaders)).append("\n");
    sb.append("    localMetadataReaderOrder: ").append(toIndentedString(localMetadataReaderOrder)).append("\n");
    sb.append("    disabledSubtitleFetchers: ").append(toIndentedString(disabledSubtitleFetchers)).append("\n");
    sb.append("    subtitleFetcherOrder: ").append(toIndentedString(subtitleFetcherOrder)).append("\n");
    sb.append("    disabledMediaSegmentProviders: ").append(toIndentedString(disabledMediaSegmentProviders)).append("\n");
    sb.append("    mediaSegmentProvideOrder: ").append(toIndentedString(mediaSegmentProvideOrder)).append("\n");
    sb.append("    skipSubtitlesIfEmbeddedSubtitlesPresent: ").append(toIndentedString(skipSubtitlesIfEmbeddedSubtitlesPresent)).append("\n");
    sb.append("    skipSubtitlesIfAudioTrackMatches: ").append(toIndentedString(skipSubtitlesIfAudioTrackMatches)).append("\n");
    sb.append("    subtitleDownloadLanguages: ").append(toIndentedString(subtitleDownloadLanguages)).append("\n");
    sb.append("    requirePerfectSubtitleMatch: ").append(toIndentedString(requirePerfectSubtitleMatch)).append("\n");
    sb.append("    saveSubtitlesWithMedia: ").append(toIndentedString(saveSubtitlesWithMedia)).append("\n");
    sb.append("    saveLyricsWithMedia: ").append(toIndentedString(saveLyricsWithMedia)).append("\n");
    sb.append("    saveTrickplayWithMedia: ").append(toIndentedString(saveTrickplayWithMedia)).append("\n");
    sb.append("    disabledLyricFetchers: ").append(toIndentedString(disabledLyricFetchers)).append("\n");
    sb.append("    lyricFetcherOrder: ").append(toIndentedString(lyricFetcherOrder)).append("\n");
    sb.append("    preferNonstandardArtistsTag: ").append(toIndentedString(preferNonstandardArtistsTag)).append("\n");
    sb.append("    useCustomTagDelimiters: ").append(toIndentedString(useCustomTagDelimiters)).append("\n");
    sb.append("    customTagDelimiters: ").append(toIndentedString(customTagDelimiters)).append("\n");
    sb.append("    delimiterWhitelist: ").append(toIndentedString(delimiterWhitelist)).append("\n");
    sb.append("    automaticallyAddToCollection: ").append(toIndentedString(automaticallyAddToCollection)).append("\n");
    sb.append("    allowEmbeddedSubtitles: ").append(toIndentedString(allowEmbeddedSubtitles)).append("\n");
    sb.append("    typeOptions: ").append(toIndentedString(typeOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("EnablePhotos");
    openapiFields.add("EnableRealtimeMonitor");
    openapiFields.add("EnableLUFSScan");
    openapiFields.add("EnableChapterImageExtraction");
    openapiFields.add("ExtractChapterImagesDuringLibraryScan");
    openapiFields.add("EnableTrickplayImageExtraction");
    openapiFields.add("ExtractTrickplayImagesDuringLibraryScan");
    openapiFields.add("PathInfos");
    openapiFields.add("SaveLocalMetadata");
    openapiFields.add("EnableInternetProviders");
    openapiFields.add("EnableAutomaticSeriesGrouping");
    openapiFields.add("EnableEmbeddedTitles");
    openapiFields.add("EnableEmbeddedExtrasTitles");
    openapiFields.add("EnableEmbeddedEpisodeInfos");
    openapiFields.add("AutomaticRefreshIntervalDays");
    openapiFields.add("PreferredMetadataLanguage");
    openapiFields.add("MetadataCountryCode");
    openapiFields.add("SeasonZeroDisplayName");
    openapiFields.add("MetadataSavers");
    openapiFields.add("DisabledLocalMetadataReaders");
    openapiFields.add("LocalMetadataReaderOrder");
    openapiFields.add("DisabledSubtitleFetchers");
    openapiFields.add("SubtitleFetcherOrder");
    openapiFields.add("DisabledMediaSegmentProviders");
    openapiFields.add("MediaSegmentProvideOrder");
    openapiFields.add("SkipSubtitlesIfEmbeddedSubtitlesPresent");
    openapiFields.add("SkipSubtitlesIfAudioTrackMatches");
    openapiFields.add("SubtitleDownloadLanguages");
    openapiFields.add("RequirePerfectSubtitleMatch");
    openapiFields.add("SaveSubtitlesWithMedia");
    openapiFields.add("SaveLyricsWithMedia");
    openapiFields.add("SaveTrickplayWithMedia");
    openapiFields.add("DisabledLyricFetchers");
    openapiFields.add("LyricFetcherOrder");
    openapiFields.add("PreferNonstandardArtistsTag");
    openapiFields.add("UseCustomTagDelimiters");
    openapiFields.add("CustomTagDelimiters");
    openapiFields.add("DelimiterWhitelist");
    openapiFields.add("AutomaticallyAddToCollection");
    openapiFields.add("AllowEmbeddedSubtitles");
    openapiFields.add("TypeOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LibraryOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LibraryOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryOptions is not found in the empty JSON string", LibraryOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LibraryOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("PathInfos") != null && !jsonObj.get("PathInfos").isJsonNull()) {
        JsonArray jsonArraypathInfos = jsonObj.getAsJsonArray("PathInfos");
        if (jsonArraypathInfos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PathInfos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PathInfos` to be an array in the JSON string but got `%s`", jsonObj.get("PathInfos").toString()));
          }

          // validate the optional field `PathInfos` (array)
          for (int i = 0; i < jsonArraypathInfos.size(); i++) {
            MediaPathInfo.validateJsonElement(jsonArraypathInfos.get(i));
          };
        }
      }
      if ((jsonObj.get("PreferredMetadataLanguage") != null && !jsonObj.get("PreferredMetadataLanguage").isJsonNull()) && !jsonObj.get("PreferredMetadataLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreferredMetadataLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreferredMetadataLanguage").toString()));
      }
      if ((jsonObj.get("MetadataCountryCode") != null && !jsonObj.get("MetadataCountryCode").isJsonNull()) && !jsonObj.get("MetadataCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataCountryCode").toString()));
      }
      if ((jsonObj.get("SeasonZeroDisplayName") != null && !jsonObj.get("SeasonZeroDisplayName").isJsonNull()) && !jsonObj.get("SeasonZeroDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SeasonZeroDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SeasonZeroDisplayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MetadataSavers") != null && !jsonObj.get("MetadataSavers").isJsonNull() && !jsonObj.get("MetadataSavers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataSavers` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataSavers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledLocalMetadataReaders") != null && !jsonObj.get("DisabledLocalMetadataReaders").isJsonNull() && !jsonObj.get("DisabledLocalMetadataReaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledLocalMetadataReaders` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledLocalMetadataReaders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LocalMetadataReaderOrder") != null && !jsonObj.get("LocalMetadataReaderOrder").isJsonNull() && !jsonObj.get("LocalMetadataReaderOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalMetadataReaderOrder` to be an array in the JSON string but got `%s`", jsonObj.get("LocalMetadataReaderOrder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledSubtitleFetchers") != null && !jsonObj.get("DisabledSubtitleFetchers").isJsonNull() && !jsonObj.get("DisabledSubtitleFetchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledSubtitleFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledSubtitleFetchers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SubtitleFetcherOrder") != null && !jsonObj.get("SubtitleFetcherOrder").isJsonNull() && !jsonObj.get("SubtitleFetcherOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubtitleFetcherOrder` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleFetcherOrder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledMediaSegmentProviders") != null && !jsonObj.get("DisabledMediaSegmentProviders").isJsonNull() && !jsonObj.get("DisabledMediaSegmentProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledMediaSegmentProviders` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledMediaSegmentProviders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MediaSegmentProvideOrder") != null && !jsonObj.get("MediaSegmentProvideOrder").isJsonNull() && !jsonObj.get("MediaSegmentProvideOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaSegmentProvideOrder` to be an array in the JSON string but got `%s`", jsonObj.get("MediaSegmentProvideOrder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SubtitleDownloadLanguages") != null && !jsonObj.get("SubtitleDownloadLanguages").isJsonNull() && !jsonObj.get("SubtitleDownloadLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubtitleDownloadLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleDownloadLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledLyricFetchers") != null && !jsonObj.get("DisabledLyricFetchers").isJsonNull() && !jsonObj.get("DisabledLyricFetchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledLyricFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledLyricFetchers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LyricFetcherOrder") != null && !jsonObj.get("LyricFetcherOrder").isJsonNull() && !jsonObj.get("LyricFetcherOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LyricFetcherOrder` to be an array in the JSON string but got `%s`", jsonObj.get("LyricFetcherOrder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CustomTagDelimiters") != null && !jsonObj.get("CustomTagDelimiters").isJsonNull() && !jsonObj.get("CustomTagDelimiters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomTagDelimiters` to be an array in the JSON string but got `%s`", jsonObj.get("CustomTagDelimiters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DelimiterWhitelist") != null && !jsonObj.get("DelimiterWhitelist").isJsonNull() && !jsonObj.get("DelimiterWhitelist").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DelimiterWhitelist` to be an array in the JSON string but got `%s`", jsonObj.get("DelimiterWhitelist").toString()));
      }
      // validate the optional field `AllowEmbeddedSubtitles`
      if (jsonObj.get("AllowEmbeddedSubtitles") != null && !jsonObj.get("AllowEmbeddedSubtitles").isJsonNull()) {
        EmbeddedSubtitleOptions.validateJsonElement(jsonObj.get("AllowEmbeddedSubtitles"));
      }
      if (jsonObj.get("TypeOptions") != null && !jsonObj.get("TypeOptions").isJsonNull()) {
        JsonArray jsonArraytypeOptions = jsonObj.getAsJsonArray("TypeOptions");
        if (jsonArraytypeOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TypeOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TypeOptions` to be an array in the JSON string but got `%s`", jsonObj.get("TypeOptions").toString()));
          }

          // validate the optional field `TypeOptions` (array)
          for (int i = 0; i < jsonArraytypeOptions.size(); i++) {
            TypeOptions.validateJsonElement(jsonArraytypeOptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryOptions>() {
           @Override
           public void write(JsonWriter out, LibraryOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LibraryOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LibraryOptions
   * @throws IOException if the JSON string is invalid with respect to LibraryOptions
   */
  public static LibraryOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryOptions.class);
  }

  /**
   * Convert an instance of LibraryOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

