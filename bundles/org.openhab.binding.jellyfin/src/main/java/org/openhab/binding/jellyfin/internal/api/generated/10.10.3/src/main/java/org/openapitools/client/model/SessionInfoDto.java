/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.ClientCapabilitiesDto;
import org.openapitools.client.model.GeneralCommandType;
import org.openapitools.client.model.MediaType;
import org.openapitools.client.model.PlayerStateInfo;
import org.openapitools.client.model.QueueItem;
import org.openapitools.client.model.SessionUserInfo;
import org.openapitools.client.model.TranscodingInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Session info DTO.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class SessionInfoDto {
  public static final String SERIALIZED_NAME_PLAY_STATE = "PlayState";
  @SerializedName(SERIALIZED_NAME_PLAY_STATE)
  @javax.annotation.Nullable
  private PlayerStateInfo playState;

  public static final String SERIALIZED_NAME_ADDITIONAL_USERS = "AdditionalUsers";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_USERS)
  @javax.annotation.Nullable
  private List<SessionUserInfo> additionalUsers;

  public static final String SERIALIZED_NAME_CAPABILITIES = "Capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  @javax.annotation.Nullable
  private ClientCapabilitiesDto capabilities;

  public static final String SERIALIZED_NAME_REMOTE_END_POINT = "RemoteEndPoint";
  @SerializedName(SERIALIZED_NAME_REMOTE_END_POINT)
  @javax.annotation.Nullable
  private String remoteEndPoint;

  public static final String SERIALIZED_NAME_PLAYABLE_MEDIA_TYPES = "PlayableMediaTypes";
  @SerializedName(SERIALIZED_NAME_PLAYABLE_MEDIA_TYPES)
  @javax.annotation.Nullable
  private List<MediaType> playableMediaTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private UUID userId;

  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nullable
  private String userName;

  public static final String SERIALIZED_NAME_CLIENT = "Client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  @javax.annotation.Nullable
  private String client;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_DATE = "LastActivityDate";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime lastActivityDate;

  public static final String SERIALIZED_NAME_LAST_PLAYBACK_CHECK_IN = "LastPlaybackCheckIn";
  @SerializedName(SERIALIZED_NAME_LAST_PLAYBACK_CHECK_IN)
  @javax.annotation.Nullable
  private OffsetDateTime lastPlaybackCheckIn;

  public static final String SERIALIZED_NAME_LAST_PAUSED_DATE = "LastPausedDate";
  @SerializedName(SERIALIZED_NAME_LAST_PAUSED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime lastPausedDate;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  @javax.annotation.Nullable
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "DeviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  @javax.annotation.Nullable
  private String deviceType;

  public static final String SERIALIZED_NAME_NOW_PLAYING_ITEM = "NowPlayingItem";
  @SerializedName(SERIALIZED_NAME_NOW_PLAYING_ITEM)
  @javax.annotation.Nullable
  private BaseItemDto nowPlayingItem;

  public static final String SERIALIZED_NAME_NOW_VIEWING_ITEM = "NowViewingItem";
  @SerializedName(SERIALIZED_NAME_NOW_VIEWING_ITEM)
  @javax.annotation.Nullable
  private BaseItemDto nowViewingItem;

  public static final String SERIALIZED_NAME_DEVICE_ID = "DeviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  @javax.annotation.Nullable
  private String deviceId;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION = "ApplicationVersion";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION)
  @javax.annotation.Nullable
  private String applicationVersion;

  public static final String SERIALIZED_NAME_TRANSCODING_INFO = "TranscodingInfo";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_INFO)
  @javax.annotation.Nullable
  private TranscodingInfo transcodingInfo;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "IsActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  @javax.annotation.Nullable
  private Boolean isActive;

  public static final String SERIALIZED_NAME_SUPPORTS_MEDIA_CONTROL = "SupportsMediaControl";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MEDIA_CONTROL)
  @javax.annotation.Nullable
  private Boolean supportsMediaControl;

  public static final String SERIALIZED_NAME_SUPPORTS_REMOTE_CONTROL = "SupportsRemoteControl";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_REMOTE_CONTROL)
  @javax.annotation.Nullable
  private Boolean supportsRemoteControl;

  public static final String SERIALIZED_NAME_NOW_PLAYING_QUEUE = "NowPlayingQueue";
  @SerializedName(SERIALIZED_NAME_NOW_PLAYING_QUEUE)
  @javax.annotation.Nullable
  private List<QueueItem> nowPlayingQueue;

  public static final String SERIALIZED_NAME_NOW_PLAYING_QUEUE_FULL_ITEMS = "NowPlayingQueueFullItems";
  @SerializedName(SERIALIZED_NAME_NOW_PLAYING_QUEUE_FULL_ITEMS)
  @javax.annotation.Nullable
  private List<BaseItemDto> nowPlayingQueueFullItems;

  public static final String SERIALIZED_NAME_HAS_CUSTOM_DEVICE_NAME = "HasCustomDeviceName";
  @SerializedName(SERIALIZED_NAME_HAS_CUSTOM_DEVICE_NAME)
  @javax.annotation.Nullable
  private Boolean hasCustomDeviceName;

  public static final String SERIALIZED_NAME_PLAYLIST_ITEM_ID = "PlaylistItemId";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_ITEM_ID)
  @javax.annotation.Nullable
  private String playlistItemId;

  public static final String SERIALIZED_NAME_SERVER_ID = "ServerId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  @javax.annotation.Nullable
  private String serverId;

  public static final String SERIALIZED_NAME_USER_PRIMARY_IMAGE_TAG = "UserPrimaryImageTag";
  @SerializedName(SERIALIZED_NAME_USER_PRIMARY_IMAGE_TAG)
  @javax.annotation.Nullable
  private String userPrimaryImageTag;

  public static final String SERIALIZED_NAME_SUPPORTED_COMMANDS = "SupportedCommands";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_COMMANDS)
  @javax.annotation.Nullable
  private List<GeneralCommandType> supportedCommands = new ArrayList<>();

  public SessionInfoDto() {
  }

  public SessionInfoDto playState(@javax.annotation.Nullable PlayerStateInfo playState) {
    this.playState = playState;
    return this;
  }

  /**
   * Gets or sets the play state.
   * @return playState
   */
  @javax.annotation.Nullable
  public PlayerStateInfo getPlayState() {
    return playState;
  }

  public void setPlayState(@javax.annotation.Nullable PlayerStateInfo playState) {
    this.playState = playState;
  }


  public SessionInfoDto additionalUsers(@javax.annotation.Nullable List<SessionUserInfo> additionalUsers) {
    this.additionalUsers = additionalUsers;
    return this;
  }

  public SessionInfoDto addAdditionalUsersItem(SessionUserInfo additionalUsersItem) {
    if (this.additionalUsers == null) {
      this.additionalUsers = new ArrayList<>();
    }
    this.additionalUsers.add(additionalUsersItem);
    return this;
  }

  /**
   * Gets or sets the additional users.
   * @return additionalUsers
   */
  @javax.annotation.Nullable
  public List<SessionUserInfo> getAdditionalUsers() {
    return additionalUsers;
  }

  public void setAdditionalUsers(@javax.annotation.Nullable List<SessionUserInfo> additionalUsers) {
    this.additionalUsers = additionalUsers;
  }


  public SessionInfoDto capabilities(@javax.annotation.Nullable ClientCapabilitiesDto capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Gets or sets the client capabilities.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public ClientCapabilitiesDto getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(@javax.annotation.Nullable ClientCapabilitiesDto capabilities) {
    this.capabilities = capabilities;
  }


  public SessionInfoDto remoteEndPoint(@javax.annotation.Nullable String remoteEndPoint) {
    this.remoteEndPoint = remoteEndPoint;
    return this;
  }

  /**
   * Gets or sets the remote end point.
   * @return remoteEndPoint
   */
  @javax.annotation.Nullable
  public String getRemoteEndPoint() {
    return remoteEndPoint;
  }

  public void setRemoteEndPoint(@javax.annotation.Nullable String remoteEndPoint) {
    this.remoteEndPoint = remoteEndPoint;
  }


  public SessionInfoDto playableMediaTypes(@javax.annotation.Nullable List<MediaType> playableMediaTypes) {
    this.playableMediaTypes = playableMediaTypes;
    return this;
  }

  public SessionInfoDto addPlayableMediaTypesItem(MediaType playableMediaTypesItem) {
    if (this.playableMediaTypes == null) {
      this.playableMediaTypes = new ArrayList<>();
    }
    this.playableMediaTypes.add(playableMediaTypesItem);
    return this;
  }

  /**
   * Gets or sets the playable media types.
   * @return playableMediaTypes
   */
  @javax.annotation.Nullable
  public List<MediaType> getPlayableMediaTypes() {
    return playableMediaTypes;
  }

  public void setPlayableMediaTypes(@javax.annotation.Nullable List<MediaType> playableMediaTypes) {
    this.playableMediaTypes = playableMediaTypes;
  }


  public SessionInfoDto id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public SessionInfoDto userId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Gets or sets the user id.
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
  }


  public SessionInfoDto userName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Gets or sets the username.
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
  }


  public SessionInfoDto client(@javax.annotation.Nullable String client) {
    this.client = client;
    return this;
  }

  /**
   * Gets or sets the type of the client.
   * @return client
   */
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(@javax.annotation.Nullable String client) {
    this.client = client;
  }


  public SessionInfoDto lastActivityDate(@javax.annotation.Nullable OffsetDateTime lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
    return this;
  }

  /**
   * Gets or sets the last activity date.
   * @return lastActivityDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastActivityDate() {
    return lastActivityDate;
  }

  public void setLastActivityDate(@javax.annotation.Nullable OffsetDateTime lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
  }


  public SessionInfoDto lastPlaybackCheckIn(@javax.annotation.Nullable OffsetDateTime lastPlaybackCheckIn) {
    this.lastPlaybackCheckIn = lastPlaybackCheckIn;
    return this;
  }

  /**
   * Gets or sets the last playback check in.
   * @return lastPlaybackCheckIn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPlaybackCheckIn() {
    return lastPlaybackCheckIn;
  }

  public void setLastPlaybackCheckIn(@javax.annotation.Nullable OffsetDateTime lastPlaybackCheckIn) {
    this.lastPlaybackCheckIn = lastPlaybackCheckIn;
  }


  public SessionInfoDto lastPausedDate(@javax.annotation.Nullable OffsetDateTime lastPausedDate) {
    this.lastPausedDate = lastPausedDate;
    return this;
  }

  /**
   * Gets or sets the last paused date.
   * @return lastPausedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPausedDate() {
    return lastPausedDate;
  }

  public void setLastPausedDate(@javax.annotation.Nullable OffsetDateTime lastPausedDate) {
    this.lastPausedDate = lastPausedDate;
  }


  public SessionInfoDto deviceName(@javax.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Gets or sets the name of the device.
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(@javax.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
  }


  public SessionInfoDto deviceType(@javax.annotation.Nullable String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Gets or sets the type of the device.
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(@javax.annotation.Nullable String deviceType) {
    this.deviceType = deviceType;
  }


  public SessionInfoDto nowPlayingItem(@javax.annotation.Nullable BaseItemDto nowPlayingItem) {
    this.nowPlayingItem = nowPlayingItem;
    return this;
  }

  /**
   * Gets or sets the now playing item.
   * @return nowPlayingItem
   */
  @javax.annotation.Nullable
  public BaseItemDto getNowPlayingItem() {
    return nowPlayingItem;
  }

  public void setNowPlayingItem(@javax.annotation.Nullable BaseItemDto nowPlayingItem) {
    this.nowPlayingItem = nowPlayingItem;
  }


  public SessionInfoDto nowViewingItem(@javax.annotation.Nullable BaseItemDto nowViewingItem) {
    this.nowViewingItem = nowViewingItem;
    return this;
  }

  /**
   * Gets or sets the now viewing item.
   * @return nowViewingItem
   */
  @javax.annotation.Nullable
  public BaseItemDto getNowViewingItem() {
    return nowViewingItem;
  }

  public void setNowViewingItem(@javax.annotation.Nullable BaseItemDto nowViewingItem) {
    this.nowViewingItem = nowViewingItem;
  }


  public SessionInfoDto deviceId(@javax.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Gets or sets the device id.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(@javax.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
  }


  public SessionInfoDto applicationVersion(@javax.annotation.Nullable String applicationVersion) {
    this.applicationVersion = applicationVersion;
    return this;
  }

  /**
   * Gets or sets the application version.
   * @return applicationVersion
   */
  @javax.annotation.Nullable
  public String getApplicationVersion() {
    return applicationVersion;
  }

  public void setApplicationVersion(@javax.annotation.Nullable String applicationVersion) {
    this.applicationVersion = applicationVersion;
  }


  public SessionInfoDto transcodingInfo(@javax.annotation.Nullable TranscodingInfo transcodingInfo) {
    this.transcodingInfo = transcodingInfo;
    return this;
  }

  /**
   * Gets or sets the transcoding info.
   * @return transcodingInfo
   */
  @javax.annotation.Nullable
  public TranscodingInfo getTranscodingInfo() {
    return transcodingInfo;
  }

  public void setTranscodingInfo(@javax.annotation.Nullable TranscodingInfo transcodingInfo) {
    this.transcodingInfo = transcodingInfo;
  }


  public SessionInfoDto isActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this session is active.
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
  }


  public SessionInfoDto supportsMediaControl(@javax.annotation.Nullable Boolean supportsMediaControl) {
    this.supportsMediaControl = supportsMediaControl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the session supports media control.
   * @return supportsMediaControl
   */
  @javax.annotation.Nullable
  public Boolean getSupportsMediaControl() {
    return supportsMediaControl;
  }

  public void setSupportsMediaControl(@javax.annotation.Nullable Boolean supportsMediaControl) {
    this.supportsMediaControl = supportsMediaControl;
  }


  public SessionInfoDto supportsRemoteControl(@javax.annotation.Nullable Boolean supportsRemoteControl) {
    this.supportsRemoteControl = supportsRemoteControl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the session supports remote control.
   * @return supportsRemoteControl
   */
  @javax.annotation.Nullable
  public Boolean getSupportsRemoteControl() {
    return supportsRemoteControl;
  }

  public void setSupportsRemoteControl(@javax.annotation.Nullable Boolean supportsRemoteControl) {
    this.supportsRemoteControl = supportsRemoteControl;
  }


  public SessionInfoDto nowPlayingQueue(@javax.annotation.Nullable List<QueueItem> nowPlayingQueue) {
    this.nowPlayingQueue = nowPlayingQueue;
    return this;
  }

  public SessionInfoDto addNowPlayingQueueItem(QueueItem nowPlayingQueueItem) {
    if (this.nowPlayingQueue == null) {
      this.nowPlayingQueue = new ArrayList<>();
    }
    this.nowPlayingQueue.add(nowPlayingQueueItem);
    return this;
  }

  /**
   * Gets or sets the now playing queue.
   * @return nowPlayingQueue
   */
  @javax.annotation.Nullable
  public List<QueueItem> getNowPlayingQueue() {
    return nowPlayingQueue;
  }

  public void setNowPlayingQueue(@javax.annotation.Nullable List<QueueItem> nowPlayingQueue) {
    this.nowPlayingQueue = nowPlayingQueue;
  }


  public SessionInfoDto nowPlayingQueueFullItems(@javax.annotation.Nullable List<BaseItemDto> nowPlayingQueueFullItems) {
    this.nowPlayingQueueFullItems = nowPlayingQueueFullItems;
    return this;
  }

  public SessionInfoDto addNowPlayingQueueFullItemsItem(BaseItemDto nowPlayingQueueFullItemsItem) {
    if (this.nowPlayingQueueFullItems == null) {
      this.nowPlayingQueueFullItems = new ArrayList<>();
    }
    this.nowPlayingQueueFullItems.add(nowPlayingQueueFullItemsItem);
    return this;
  }

  /**
   * Gets or sets the now playing queue full items.
   * @return nowPlayingQueueFullItems
   */
  @javax.annotation.Nullable
  public List<BaseItemDto> getNowPlayingQueueFullItems() {
    return nowPlayingQueueFullItems;
  }

  public void setNowPlayingQueueFullItems(@javax.annotation.Nullable List<BaseItemDto> nowPlayingQueueFullItems) {
    this.nowPlayingQueueFullItems = nowPlayingQueueFullItems;
  }


  public SessionInfoDto hasCustomDeviceName(@javax.annotation.Nullable Boolean hasCustomDeviceName) {
    this.hasCustomDeviceName = hasCustomDeviceName;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the session has a custom device name.
   * @return hasCustomDeviceName
   */
  @javax.annotation.Nullable
  public Boolean getHasCustomDeviceName() {
    return hasCustomDeviceName;
  }

  public void setHasCustomDeviceName(@javax.annotation.Nullable Boolean hasCustomDeviceName) {
    this.hasCustomDeviceName = hasCustomDeviceName;
  }


  public SessionInfoDto playlistItemId(@javax.annotation.Nullable String playlistItemId) {
    this.playlistItemId = playlistItemId;
    return this;
  }

  /**
   * Gets or sets the playlist item id.
   * @return playlistItemId
   */
  @javax.annotation.Nullable
  public String getPlaylistItemId() {
    return playlistItemId;
  }

  public void setPlaylistItemId(@javax.annotation.Nullable String playlistItemId) {
    this.playlistItemId = playlistItemId;
  }


  public SessionInfoDto serverId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Gets or sets the server id.
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
  }


  public SessionInfoDto userPrimaryImageTag(@javax.annotation.Nullable String userPrimaryImageTag) {
    this.userPrimaryImageTag = userPrimaryImageTag;
    return this;
  }

  /**
   * Gets or sets the user primary image tag.
   * @return userPrimaryImageTag
   */
  @javax.annotation.Nullable
  public String getUserPrimaryImageTag() {
    return userPrimaryImageTag;
  }

  public void setUserPrimaryImageTag(@javax.annotation.Nullable String userPrimaryImageTag) {
    this.userPrimaryImageTag = userPrimaryImageTag;
  }


  public SessionInfoDto supportedCommands(@javax.annotation.Nullable List<GeneralCommandType> supportedCommands) {
    this.supportedCommands = supportedCommands;
    return this;
  }

  public SessionInfoDto addSupportedCommandsItem(GeneralCommandType supportedCommandsItem) {
    if (this.supportedCommands == null) {
      this.supportedCommands = new ArrayList<>();
    }
    this.supportedCommands.add(supportedCommandsItem);
    return this;
  }

  /**
   * Gets or sets the supported commands.
   * @return supportedCommands
   */
  @javax.annotation.Nullable
  public List<GeneralCommandType> getSupportedCommands() {
    return supportedCommands;
  }

  public void setSupportedCommands(@javax.annotation.Nullable List<GeneralCommandType> supportedCommands) {
    this.supportedCommands = supportedCommands;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionInfoDto sessionInfoDto = (SessionInfoDto) o;
    return Objects.equals(this.playState, sessionInfoDto.playState) &&
        Objects.equals(this.additionalUsers, sessionInfoDto.additionalUsers) &&
        Objects.equals(this.capabilities, sessionInfoDto.capabilities) &&
        Objects.equals(this.remoteEndPoint, sessionInfoDto.remoteEndPoint) &&
        Objects.equals(this.playableMediaTypes, sessionInfoDto.playableMediaTypes) &&
        Objects.equals(this.id, sessionInfoDto.id) &&
        Objects.equals(this.userId, sessionInfoDto.userId) &&
        Objects.equals(this.userName, sessionInfoDto.userName) &&
        Objects.equals(this.client, sessionInfoDto.client) &&
        Objects.equals(this.lastActivityDate, sessionInfoDto.lastActivityDate) &&
        Objects.equals(this.lastPlaybackCheckIn, sessionInfoDto.lastPlaybackCheckIn) &&
        Objects.equals(this.lastPausedDate, sessionInfoDto.lastPausedDate) &&
        Objects.equals(this.deviceName, sessionInfoDto.deviceName) &&
        Objects.equals(this.deviceType, sessionInfoDto.deviceType) &&
        Objects.equals(this.nowPlayingItem, sessionInfoDto.nowPlayingItem) &&
        Objects.equals(this.nowViewingItem, sessionInfoDto.nowViewingItem) &&
        Objects.equals(this.deviceId, sessionInfoDto.deviceId) &&
        Objects.equals(this.applicationVersion, sessionInfoDto.applicationVersion) &&
        Objects.equals(this.transcodingInfo, sessionInfoDto.transcodingInfo) &&
        Objects.equals(this.isActive, sessionInfoDto.isActive) &&
        Objects.equals(this.supportsMediaControl, sessionInfoDto.supportsMediaControl) &&
        Objects.equals(this.supportsRemoteControl, sessionInfoDto.supportsRemoteControl) &&
        Objects.equals(this.nowPlayingQueue, sessionInfoDto.nowPlayingQueue) &&
        Objects.equals(this.nowPlayingQueueFullItems, sessionInfoDto.nowPlayingQueueFullItems) &&
        Objects.equals(this.hasCustomDeviceName, sessionInfoDto.hasCustomDeviceName) &&
        Objects.equals(this.playlistItemId, sessionInfoDto.playlistItemId) &&
        Objects.equals(this.serverId, sessionInfoDto.serverId) &&
        Objects.equals(this.userPrimaryImageTag, sessionInfoDto.userPrimaryImageTag) &&
        Objects.equals(this.supportedCommands, sessionInfoDto.supportedCommands);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(playState, additionalUsers, capabilities, remoteEndPoint, playableMediaTypes, id, userId, userName, client, lastActivityDate, lastPlaybackCheckIn, lastPausedDate, deviceName, deviceType, nowPlayingItem, nowViewingItem, deviceId, applicationVersion, transcodingInfo, isActive, supportsMediaControl, supportsRemoteControl, nowPlayingQueue, nowPlayingQueueFullItems, hasCustomDeviceName, playlistItemId, serverId, userPrimaryImageTag, supportedCommands);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionInfoDto {\n");
    sb.append("    playState: ").append(toIndentedString(playState)).append("\n");
    sb.append("    additionalUsers: ").append(toIndentedString(additionalUsers)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    remoteEndPoint: ").append(toIndentedString(remoteEndPoint)).append("\n");
    sb.append("    playableMediaTypes: ").append(toIndentedString(playableMediaTypes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    lastActivityDate: ").append(toIndentedString(lastActivityDate)).append("\n");
    sb.append("    lastPlaybackCheckIn: ").append(toIndentedString(lastPlaybackCheckIn)).append("\n");
    sb.append("    lastPausedDate: ").append(toIndentedString(lastPausedDate)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    nowPlayingItem: ").append(toIndentedString(nowPlayingItem)).append("\n");
    sb.append("    nowViewingItem: ").append(toIndentedString(nowViewingItem)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    applicationVersion: ").append(toIndentedString(applicationVersion)).append("\n");
    sb.append("    transcodingInfo: ").append(toIndentedString(transcodingInfo)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    supportsMediaControl: ").append(toIndentedString(supportsMediaControl)).append("\n");
    sb.append("    supportsRemoteControl: ").append(toIndentedString(supportsRemoteControl)).append("\n");
    sb.append("    nowPlayingQueue: ").append(toIndentedString(nowPlayingQueue)).append("\n");
    sb.append("    nowPlayingQueueFullItems: ").append(toIndentedString(nowPlayingQueueFullItems)).append("\n");
    sb.append("    hasCustomDeviceName: ").append(toIndentedString(hasCustomDeviceName)).append("\n");
    sb.append("    playlistItemId: ").append(toIndentedString(playlistItemId)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    userPrimaryImageTag: ").append(toIndentedString(userPrimaryImageTag)).append("\n");
    sb.append("    supportedCommands: ").append(toIndentedString(supportedCommands)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlayState");
    openapiFields.add("AdditionalUsers");
    openapiFields.add("Capabilities");
    openapiFields.add("RemoteEndPoint");
    openapiFields.add("PlayableMediaTypes");
    openapiFields.add("Id");
    openapiFields.add("UserId");
    openapiFields.add("UserName");
    openapiFields.add("Client");
    openapiFields.add("LastActivityDate");
    openapiFields.add("LastPlaybackCheckIn");
    openapiFields.add("LastPausedDate");
    openapiFields.add("DeviceName");
    openapiFields.add("DeviceType");
    openapiFields.add("NowPlayingItem");
    openapiFields.add("NowViewingItem");
    openapiFields.add("DeviceId");
    openapiFields.add("ApplicationVersion");
    openapiFields.add("TranscodingInfo");
    openapiFields.add("IsActive");
    openapiFields.add("SupportsMediaControl");
    openapiFields.add("SupportsRemoteControl");
    openapiFields.add("NowPlayingQueue");
    openapiFields.add("NowPlayingQueueFullItems");
    openapiFields.add("HasCustomDeviceName");
    openapiFields.add("PlaylistItemId");
    openapiFields.add("ServerId");
    openapiFields.add("UserPrimaryImageTag");
    openapiFields.add("SupportedCommands");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionInfoDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionInfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionInfoDto is not found in the empty JSON string", SessionInfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionInfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionInfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PlayState`
      if (jsonObj.get("PlayState") != null && !jsonObj.get("PlayState").isJsonNull()) {
        PlayerStateInfo.validateJsonElement(jsonObj.get("PlayState"));
      }
      if (jsonObj.get("AdditionalUsers") != null && !jsonObj.get("AdditionalUsers").isJsonNull()) {
        JsonArray jsonArrayadditionalUsers = jsonObj.getAsJsonArray("AdditionalUsers");
        if (jsonArrayadditionalUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AdditionalUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AdditionalUsers` to be an array in the JSON string but got `%s`", jsonObj.get("AdditionalUsers").toString()));
          }

          // validate the optional field `AdditionalUsers` (array)
          for (int i = 0; i < jsonArrayadditionalUsers.size(); i++) {
            SessionUserInfo.validateJsonElement(jsonArrayadditionalUsers.get(i));
          };
        }
      }
      // validate the optional field `Capabilities`
      if (jsonObj.get("Capabilities") != null && !jsonObj.get("Capabilities").isJsonNull()) {
        ClientCapabilitiesDto.validateJsonElement(jsonObj.get("Capabilities"));
      }
      if ((jsonObj.get("RemoteEndPoint") != null && !jsonObj.get("RemoteEndPoint").isJsonNull()) && !jsonObj.get("RemoteEndPoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RemoteEndPoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RemoteEndPoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PlayableMediaTypes") != null && !jsonObj.get("PlayableMediaTypes").isJsonNull() && !jsonObj.get("PlayableMediaTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayableMediaTypes` to be an array in the JSON string but got `%s`", jsonObj.get("PlayableMediaTypes").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
      if ((jsonObj.get("UserName") != null && !jsonObj.get("UserName").isJsonNull()) && !jsonObj.get("UserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserName").toString()));
      }
      if ((jsonObj.get("Client") != null && !jsonObj.get("Client").isJsonNull()) && !jsonObj.get("Client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Client").toString()));
      }
      if ((jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) && !jsonObj.get("DeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceName").toString()));
      }
      if ((jsonObj.get("DeviceType") != null && !jsonObj.get("DeviceType").isJsonNull()) && !jsonObj.get("DeviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceType").toString()));
      }
      // validate the optional field `NowPlayingItem`
      if (jsonObj.get("NowPlayingItem") != null && !jsonObj.get("NowPlayingItem").isJsonNull()) {
        BaseItemDto.validateJsonElement(jsonObj.get("NowPlayingItem"));
      }
      // validate the optional field `NowViewingItem`
      if (jsonObj.get("NowViewingItem") != null && !jsonObj.get("NowViewingItem").isJsonNull()) {
        BaseItemDto.validateJsonElement(jsonObj.get("NowViewingItem"));
      }
      if ((jsonObj.get("DeviceId") != null && !jsonObj.get("DeviceId").isJsonNull()) && !jsonObj.get("DeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceId").toString()));
      }
      if ((jsonObj.get("ApplicationVersion") != null && !jsonObj.get("ApplicationVersion").isJsonNull()) && !jsonObj.get("ApplicationVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationVersion").toString()));
      }
      // validate the optional field `TranscodingInfo`
      if (jsonObj.get("TranscodingInfo") != null && !jsonObj.get("TranscodingInfo").isJsonNull()) {
        TranscodingInfo.validateJsonElement(jsonObj.get("TranscodingInfo"));
      }
      if (jsonObj.get("NowPlayingQueue") != null && !jsonObj.get("NowPlayingQueue").isJsonNull()) {
        JsonArray jsonArraynowPlayingQueue = jsonObj.getAsJsonArray("NowPlayingQueue");
        if (jsonArraynowPlayingQueue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NowPlayingQueue").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NowPlayingQueue` to be an array in the JSON string but got `%s`", jsonObj.get("NowPlayingQueue").toString()));
          }

          // validate the optional field `NowPlayingQueue` (array)
          for (int i = 0; i < jsonArraynowPlayingQueue.size(); i++) {
            QueueItem.validateJsonElement(jsonArraynowPlayingQueue.get(i));
          };
        }
      }
      if (jsonObj.get("NowPlayingQueueFullItems") != null && !jsonObj.get("NowPlayingQueueFullItems").isJsonNull()) {
        JsonArray jsonArraynowPlayingQueueFullItems = jsonObj.getAsJsonArray("NowPlayingQueueFullItems");
        if (jsonArraynowPlayingQueueFullItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NowPlayingQueueFullItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NowPlayingQueueFullItems` to be an array in the JSON string but got `%s`", jsonObj.get("NowPlayingQueueFullItems").toString()));
          }

          // validate the optional field `NowPlayingQueueFullItems` (array)
          for (int i = 0; i < jsonArraynowPlayingQueueFullItems.size(); i++) {
            BaseItemDto.validateJsonElement(jsonArraynowPlayingQueueFullItems.get(i));
          };
        }
      }
      if ((jsonObj.get("PlaylistItemId") != null && !jsonObj.get("PlaylistItemId").isJsonNull()) && !jsonObj.get("PlaylistItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaylistItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaylistItemId").toString()));
      }
      if ((jsonObj.get("ServerId") != null && !jsonObj.get("ServerId").isJsonNull()) && !jsonObj.get("ServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerId").toString()));
      }
      if ((jsonObj.get("UserPrimaryImageTag") != null && !jsonObj.get("UserPrimaryImageTag").isJsonNull()) && !jsonObj.get("UserPrimaryImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserPrimaryImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserPrimaryImageTag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SupportedCommands") != null && !jsonObj.get("SupportedCommands").isJsonNull() && !jsonObj.get("SupportedCommands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedCommands` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedCommands").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionInfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionInfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionInfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionInfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionInfoDto>() {
           @Override
           public void write(JsonWriter out, SessionInfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionInfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionInfoDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionInfoDto
   * @throws IOException if the JSON string is invalid with respect to SessionInfoDto
   */
  public static SessionInfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionInfoDto.class);
  }

  /**
   * Convert an instance of SessionInfoDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

