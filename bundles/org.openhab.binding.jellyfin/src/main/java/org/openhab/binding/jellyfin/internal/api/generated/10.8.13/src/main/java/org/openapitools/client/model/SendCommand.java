/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SendCommandType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class SendCommand.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:44.334408221+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class SendCommand {
  public static final String SERIALIZED_NAME_GROUP_ID = "GroupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  @javax.annotation.Nullable
  private UUID groupId;

  public static final String SERIALIZED_NAME_PLAYLIST_ITEM_ID = "PlaylistItemId";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_ITEM_ID)
  @javax.annotation.Nullable
  private UUID playlistItemId;

  public static final String SERIALIZED_NAME_WHEN = "When";
  @SerializedName(SERIALIZED_NAME_WHEN)
  @javax.annotation.Nullable
  private OffsetDateTime when;

  public static final String SERIALIZED_NAME_POSITION_TICKS = "PositionTicks";
  @SerializedName(SERIALIZED_NAME_POSITION_TICKS)
  @javax.annotation.Nullable
  private Long positionTicks;

  public static final String SERIALIZED_NAME_COMMAND = "Command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  @javax.annotation.Nullable
  private SendCommandType command;

  public static final String SERIALIZED_NAME_EMITTED_AT = "EmittedAt";
  @SerializedName(SERIALIZED_NAME_EMITTED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime emittedAt;

  public SendCommand() {
  }

  public SendCommand groupId(@javax.annotation.Nullable UUID groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Gets the group identifier.
   * @return groupId
   */
  @javax.annotation.Nullable
  public UUID getGroupId() {
    return groupId;
  }

  public void setGroupId(@javax.annotation.Nullable UUID groupId) {
    this.groupId = groupId;
  }


  public SendCommand playlistItemId(@javax.annotation.Nullable UUID playlistItemId) {
    this.playlistItemId = playlistItemId;
    return this;
  }

  /**
   * Gets the playlist identifier of the playing item.
   * @return playlistItemId
   */
  @javax.annotation.Nullable
  public UUID getPlaylistItemId() {
    return playlistItemId;
  }

  public void setPlaylistItemId(@javax.annotation.Nullable UUID playlistItemId) {
    this.playlistItemId = playlistItemId;
  }


  public SendCommand when(@javax.annotation.Nullable OffsetDateTime when) {
    this.when = when;
    return this;
  }

  /**
   * Gets or sets the UTC time when to execute the command.
   * @return when
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWhen() {
    return when;
  }

  public void setWhen(@javax.annotation.Nullable OffsetDateTime when) {
    this.when = when;
  }


  public SendCommand positionTicks(@javax.annotation.Nullable Long positionTicks) {
    this.positionTicks = positionTicks;
    return this;
  }

  /**
   * Gets the position ticks.
   * @return positionTicks
   */
  @javax.annotation.Nullable
  public Long getPositionTicks() {
    return positionTicks;
  }

  public void setPositionTicks(@javax.annotation.Nullable Long positionTicks) {
    this.positionTicks = positionTicks;
  }


  public SendCommand command(@javax.annotation.Nullable SendCommandType command) {
    this.command = command;
    return this;
  }

  /**
   * Gets the command.
   * @return command
   */
  @javax.annotation.Nullable
  public SendCommandType getCommand() {
    return command;
  }

  public void setCommand(@javax.annotation.Nullable SendCommandType command) {
    this.command = command;
  }


  public SendCommand emittedAt(@javax.annotation.Nullable OffsetDateTime emittedAt) {
    this.emittedAt = emittedAt;
    return this;
  }

  /**
   * Gets the UTC time when this command has been emitted.
   * @return emittedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEmittedAt() {
    return emittedAt;
  }

  public void setEmittedAt(@javax.annotation.Nullable OffsetDateTime emittedAt) {
    this.emittedAt = emittedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendCommand sendCommand = (SendCommand) o;
    return Objects.equals(this.groupId, sendCommand.groupId) &&
        Objects.equals(this.playlistItemId, sendCommand.playlistItemId) &&
        Objects.equals(this.when, sendCommand.when) &&
        Objects.equals(this.positionTicks, sendCommand.positionTicks) &&
        Objects.equals(this.command, sendCommand.command) &&
        Objects.equals(this.emittedAt, sendCommand.emittedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, playlistItemId, when, positionTicks, command, emittedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendCommand {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    playlistItemId: ").append(toIndentedString(playlistItemId)).append("\n");
    sb.append("    when: ").append(toIndentedString(when)).append("\n");
    sb.append("    positionTicks: ").append(toIndentedString(positionTicks)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    emittedAt: ").append(toIndentedString(emittedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GroupId");
    openapiFields.add("PlaylistItemId");
    openapiFields.add("When");
    openapiFields.add("PositionTicks");
    openapiFields.add("Command");
    openapiFields.add("EmittedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendCommand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendCommand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendCommand is not found in the empty JSON string", SendCommand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendCommand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendCommand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("GroupId") != null && !jsonObj.get("GroupId").isJsonNull()) && !jsonObj.get("GroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupId").toString()));
      }
      if ((jsonObj.get("PlaylistItemId") != null && !jsonObj.get("PlaylistItemId").isJsonNull()) && !jsonObj.get("PlaylistItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaylistItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaylistItemId").toString()));
      }
      // validate the optional field `Command`
      if (jsonObj.get("Command") != null && !jsonObj.get("Command").isJsonNull()) {
        SendCommandType.validateJsonElement(jsonObj.get("Command"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendCommand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendCommand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendCommand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendCommand.class));

       return (TypeAdapter<T>) new TypeAdapter<SendCommand>() {
           @Override
           public void write(JsonWriter out, SendCommand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendCommand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendCommand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendCommand
   * @throws IOException if the JSON string is invalid with respect to SendCommand
   */
  public static SendCommand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendCommand.class);
  }

  /**
   * Convert an instance of SendCommand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

