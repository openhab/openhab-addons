/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * Defines the MediaBrowser.Common.Plugins.IPlugin.
 */
@JsonPropertyOrder({
  IPlugin.JSON_PROPERTY_NAME,
  IPlugin.JSON_PROPERTY_DESCRIPTION,
  IPlugin.JSON_PROPERTY_ID,
  IPlugin.JSON_PROPERTY_VERSION,
  IPlugin.JSON_PROPERTY_ASSEMBLY_FILE_PATH,
  IPlugin.JSON_PROPERTY_CAN_UNINSTALL,
  IPlugin.JSON_PROPERTY_DATA_FOLDER_PATH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:48.410245241Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class IPlugin {
  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "Description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ID = "Id";
  @javax.annotation.Nullable
  private UUID id;

  public static final String JSON_PROPERTY_VERSION = "Version";
  private JsonNullable<String> version = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ASSEMBLY_FILE_PATH = "AssemblyFilePath";
  private JsonNullable<String> assemblyFilePath = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CAN_UNINSTALL = "CanUninstall";
  @javax.annotation.Nullable
  private Boolean canUninstall;

  public static final String JSON_PROPERTY_DATA_FOLDER_PATH = "DataFolderPath";
  private JsonNullable<String> dataFolderPath = JsonNullable.<String>undefined();

  public IPlugin() { 
  }

  @JsonCreator
  public IPlugin(
    @JsonProperty(JSON_PROPERTY_NAME) String name, 
    @JsonProperty(JSON_PROPERTY_DESCRIPTION) String description, 
    @JsonProperty(JSON_PROPERTY_ID) UUID id, 
    @JsonProperty(JSON_PROPERTY_VERSION) String version, 
    @JsonProperty(JSON_PROPERTY_ASSEMBLY_FILE_PATH) String assemblyFilePath, 
    @JsonProperty(JSON_PROPERTY_CAN_UNINSTALL) Boolean canUninstall, 
    @JsonProperty(JSON_PROPERTY_DATA_FOLDER_PATH) String dataFolderPath
  ) {
  this();
    this.name = name == null ? JsonNullable.<String>undefined() : JsonNullable.of(name);
    this.description = description == null ? JsonNullable.<String>undefined() : JsonNullable.of(description);
    this.id = id;
    this.version = version == null ? JsonNullable.<String>undefined() : JsonNullable.of(version);
    this.assemblyFilePath = assemblyFilePath == null ? JsonNullable.<String>undefined() : JsonNullable.of(assemblyFilePath);
    this.canUninstall = canUninstall;
    this.dataFolderPath = dataFolderPath == null ? JsonNullable.<String>undefined() : JsonNullable.of(dataFolderPath);
  }

  /**
   * Gets the name of the plugin.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
    
    if (name == null) {
      name = JsonNullable.<String>undefined();
    }
    return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  private void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }



  /**
   * Gets the Description.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDescription() {
    
    if (description == null) {
      description = JsonNullable.<String>undefined();
    }
    return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  private void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }



  /**
   * Gets the unique id.
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }




  /**
   * Gets the plugin version.
   * @return version
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getVersion() {
    
    if (version == null) {
      version = JsonNullable.<String>undefined();
    }
    return version.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getVersion_JsonNullable() {
    return version;
  }
  
  @JsonProperty(JSON_PROPERTY_VERSION)
  private void setVersion_JsonNullable(JsonNullable<String> version) {
    this.version = version;
  }



  /**
   * Gets the path to the assembly file.
   * @return assemblyFilePath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getAssemblyFilePath() {
    
    if (assemblyFilePath == null) {
      assemblyFilePath = JsonNullable.<String>undefined();
    }
    return assemblyFilePath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ASSEMBLY_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getAssemblyFilePath_JsonNullable() {
    return assemblyFilePath;
  }
  
  @JsonProperty(JSON_PROPERTY_ASSEMBLY_FILE_PATH)
  private void setAssemblyFilePath_JsonNullable(JsonNullable<String> assemblyFilePath) {
    this.assemblyFilePath = assemblyFilePath;
  }



  /**
   * Gets a value indicating whether the plugin can be uninstalled.
   * @return canUninstall
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_UNINSTALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCanUninstall() {
    return canUninstall;
  }




  /**
   * Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
   * @return dataFolderPath
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDataFolderPath() {
    
    if (dataFolderPath == null) {
      dataFolderPath = JsonNullable.<String>undefined();
    }
    return dataFolderPath.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATA_FOLDER_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDataFolderPath_JsonNullable() {
    return dataFolderPath;
  }
  
  @JsonProperty(JSON_PROPERTY_DATA_FOLDER_PATH)
  private void setDataFolderPath_JsonNullable(JsonNullable<String> dataFolderPath) {
    this.dataFolderPath = dataFolderPath;
  }



  /**
   * Return true if this IPlugin object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPlugin iplugin = (IPlugin) o;
    return equalsNullable(this.name, iplugin.name) &&
        equalsNullable(this.description, iplugin.description) &&
        Objects.equals(this.id, iplugin.id) &&
        equalsNullable(this.version, iplugin.version) &&
        equalsNullable(this.assemblyFilePath, iplugin.assemblyFilePath) &&
        Objects.equals(this.canUninstall, iplugin.canUninstall) &&
        equalsNullable(this.dataFolderPath, iplugin.dataFolderPath);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(description), id, hashCodeNullable(version), hashCodeNullable(assemblyFilePath), canUninstall, hashCodeNullable(dataFolderPath));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPlugin {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    assemblyFilePath: ").append(toIndentedString(assemblyFilePath)).append("\n");
    sb.append("    canUninstall: ").append(toIndentedString(canUninstall)).append("\n");
    sb.append("    dataFolderPath: ").append(toIndentedString(dataFolderPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sDescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `Version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sVersion%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVersion()))));
    }

    // add `AssemblyFilePath` to the URL query string
    if (getAssemblyFilePath() != null) {
      joiner.add(String.format("%sAssemblyFilePath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAssemblyFilePath()))));
    }

    // add `CanUninstall` to the URL query string
    if (getCanUninstall() != null) {
      joiner.add(String.format("%sCanUninstall%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCanUninstall()))));
    }

    // add `DataFolderPath` to the URL query string
    if (getDataFolderPath() != null) {
      joiner.add(String.format("%sDataFolderPath%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDataFolderPath()))));
    }

    return joiner.toString();
  }
}

