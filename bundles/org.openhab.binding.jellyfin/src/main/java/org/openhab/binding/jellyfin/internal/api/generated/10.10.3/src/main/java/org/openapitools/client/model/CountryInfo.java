/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class CountryInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class CountryInfo {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_TWO_LETTER_I_S_O_REGION_NAME = "TwoLetterISORegionName";
  @SerializedName(SERIALIZED_NAME_TWO_LETTER_I_S_O_REGION_NAME)
  @javax.annotation.Nullable
  private String twoLetterISORegionName;

  public static final String SERIALIZED_NAME_THREE_LETTER_I_S_O_REGION_NAME = "ThreeLetterISORegionName";
  @SerializedName(SERIALIZED_NAME_THREE_LETTER_I_S_O_REGION_NAME)
  @javax.annotation.Nullable
  private String threeLetterISORegionName;

  public CountryInfo() {
  }

  public CountryInfo name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public CountryInfo displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Gets or sets the display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public CountryInfo twoLetterISORegionName(@javax.annotation.Nullable String twoLetterISORegionName) {
    this.twoLetterISORegionName = twoLetterISORegionName;
    return this;
  }

  /**
   * Gets or sets the name of the two letter ISO region.
   * @return twoLetterISORegionName
   */
  @javax.annotation.Nullable
  public String getTwoLetterISORegionName() {
    return twoLetterISORegionName;
  }

  public void setTwoLetterISORegionName(@javax.annotation.Nullable String twoLetterISORegionName) {
    this.twoLetterISORegionName = twoLetterISORegionName;
  }


  public CountryInfo threeLetterISORegionName(@javax.annotation.Nullable String threeLetterISORegionName) {
    this.threeLetterISORegionName = threeLetterISORegionName;
    return this;
  }

  /**
   * Gets or sets the name of the three letter ISO region.
   * @return threeLetterISORegionName
   */
  @javax.annotation.Nullable
  public String getThreeLetterISORegionName() {
    return threeLetterISORegionName;
  }

  public void setThreeLetterISORegionName(@javax.annotation.Nullable String threeLetterISORegionName) {
    this.threeLetterISORegionName = threeLetterISORegionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountryInfo countryInfo = (CountryInfo) o;
    return Objects.equals(this.name, countryInfo.name) &&
        Objects.equals(this.displayName, countryInfo.displayName) &&
        Objects.equals(this.twoLetterISORegionName, countryInfo.twoLetterISORegionName) &&
        Objects.equals(this.threeLetterISORegionName, countryInfo.threeLetterISORegionName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, twoLetterISORegionName, threeLetterISORegionName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountryInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    twoLetterISORegionName: ").append(toIndentedString(twoLetterISORegionName)).append("\n");
    sb.append("    threeLetterISORegionName: ").append(toIndentedString(threeLetterISORegionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("DisplayName");
    openapiFields.add("TwoLetterISORegionName");
    openapiFields.add("ThreeLetterISORegionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountryInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountryInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountryInfo is not found in the empty JSON string", CountryInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountryInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountryInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("TwoLetterISORegionName") != null && !jsonObj.get("TwoLetterISORegionName").isJsonNull()) && !jsonObj.get("TwoLetterISORegionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TwoLetterISORegionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TwoLetterISORegionName").toString()));
      }
      if ((jsonObj.get("ThreeLetterISORegionName") != null && !jsonObj.get("ThreeLetterISORegionName").isJsonNull()) && !jsonObj.get("ThreeLetterISORegionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThreeLetterISORegionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThreeLetterISORegionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountryInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountryInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountryInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountryInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CountryInfo>() {
           @Override
           public void write(JsonWriter out, CountryInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountryInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountryInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountryInfo
   * @throws IOException if the JSON string is invalid with respect to CountryInfo
   */
  public static CountryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountryInfo.class);
  }

  /**
   * Convert an instance of CountryInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

