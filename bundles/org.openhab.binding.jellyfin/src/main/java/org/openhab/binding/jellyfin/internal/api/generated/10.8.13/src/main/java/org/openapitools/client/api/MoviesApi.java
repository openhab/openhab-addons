/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.RecommendationDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MoviesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MoviesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MoviesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMovieRecommendations
     * @param userId Optional. Filter by user id, and attach user data. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. The fields to return. (optional)
     * @param categoryLimit The max number of categories to return. (optional, default to 5)
     * @param itemLimit The max number of items to return per category. (optional, default to 8)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Movie recommendations returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMovieRecommendationsCall(UUID userId, UUID parentId, List<ItemFields> fields, Integer categoryLimit, Integer itemLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Movies/Recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (categoryLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryLimit", categoryLimit));
        }

        if (itemLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemLimit", itemLimit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMovieRecommendationsValidateBeforeCall(UUID userId, UUID parentId, List<ItemFields> fields, Integer categoryLimit, Integer itemLimit, final ApiCallback _callback) throws ApiException {
        return getMovieRecommendationsCall(userId, parentId, fields, categoryLimit, itemLimit, _callback);

    }

    /**
     * Gets movie recommendations.
     * 
     * @param userId Optional. Filter by user id, and attach user data. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. The fields to return. (optional)
     * @param categoryLimit The max number of categories to return. (optional, default to 5)
     * @param itemLimit The max number of items to return per category. (optional, default to 8)
     * @return List&lt;RecommendationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Movie recommendations returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public List<RecommendationDto> getMovieRecommendations(UUID userId, UUID parentId, List<ItemFields> fields, Integer categoryLimit, Integer itemLimit) throws ApiException {
        ApiResponse<List<RecommendationDto>> localVarResp = getMovieRecommendationsWithHttpInfo(userId, parentId, fields, categoryLimit, itemLimit);
        return localVarResp.getData();
    }

    /**
     * Gets movie recommendations.
     * 
     * @param userId Optional. Filter by user id, and attach user data. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. The fields to return. (optional)
     * @param categoryLimit The max number of categories to return. (optional, default to 5)
     * @param itemLimit The max number of items to return per category. (optional, default to 8)
     * @return ApiResponse&lt;List&lt;RecommendationDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Movie recommendations returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecommendationDto>> getMovieRecommendationsWithHttpInfo(UUID userId, UUID parentId, List<ItemFields> fields, Integer categoryLimit, Integer itemLimit) throws ApiException {
        okhttp3.Call localVarCall = getMovieRecommendationsValidateBeforeCall(userId, parentId, fields, categoryLimit, itemLimit, null);
        Type localVarReturnType = new TypeToken<List<RecommendationDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets movie recommendations. (asynchronously)
     * 
     * @param userId Optional. Filter by user id, and attach user data. (optional)
     * @param parentId Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param fields Optional. The fields to return. (optional)
     * @param categoryLimit The max number of categories to return. (optional, default to 5)
     * @param itemLimit The max number of items to return per category. (optional, default to 8)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Movie recommendations returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMovieRecommendationsAsync(UUID userId, UUID parentId, List<ItemFields> fields, Integer categoryLimit, Integer itemLimit, final ApiCallback<List<RecommendationDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMovieRecommendationsValidateBeforeCall(userId, parentId, fields, categoryLimit, itemLimit, _callback);
        Type localVarReturnType = new TypeToken<List<RecommendationDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
