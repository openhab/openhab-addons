/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The different kinds of messages that are used in the WebSocket api.
 */
@JsonAdapter(SessionMessageType.Adapter.class)
public enum SessionMessageType {
  
  FORCE_KEEP_ALIVE("ForceKeepAlive"),
  
  GENERAL_COMMAND("GeneralCommand"),
  
  USER_DATA_CHANGED("UserDataChanged"),
  
  SESSIONS("Sessions"),
  
  PLAY("Play"),
  
  SYNC_PLAY_COMMAND("SyncPlayCommand"),
  
  SYNC_PLAY_GROUP_UPDATE("SyncPlayGroupUpdate"),
  
  PLAYSTATE("Playstate"),
  
  RESTART_REQUIRED("RestartRequired"),
  
  SERVER_SHUTTING_DOWN("ServerShuttingDown"),
  
  SERVER_RESTARTING("ServerRestarting"),
  
  LIBRARY_CHANGED("LibraryChanged"),
  
  USER_DELETED("UserDeleted"),
  
  USER_UPDATED("UserUpdated"),
  
  SERIES_TIMER_CREATED("SeriesTimerCreated"),
  
  TIMER_CREATED("TimerCreated"),
  
  SERIES_TIMER_CANCELLED("SeriesTimerCancelled"),
  
  TIMER_CANCELLED("TimerCancelled"),
  
  REFRESH_PROGRESS("RefreshProgress"),
  
  SCHEDULED_TASK_ENDED("ScheduledTaskEnded"),
  
  PACKAGE_INSTALLATION_CANCELLED("PackageInstallationCancelled"),
  
  PACKAGE_INSTALLATION_FAILED("PackageInstallationFailed"),
  
  PACKAGE_INSTALLATION_COMPLETED("PackageInstallationCompleted"),
  
  PACKAGE_INSTALLING("PackageInstalling"),
  
  PACKAGE_UNINSTALLED("PackageUninstalled"),
  
  ACTIVITY_LOG_ENTRY("ActivityLogEntry"),
  
  SCHEDULED_TASKS_INFO("ScheduledTasksInfo"),
  
  ACTIVITY_LOG_ENTRY_START("ActivityLogEntryStart"),
  
  ACTIVITY_LOG_ENTRY_STOP("ActivityLogEntryStop"),
  
  SESSIONS_START("SessionsStart"),
  
  SESSIONS_STOP("SessionsStop"),
  
  SCHEDULED_TASKS_INFO_START("ScheduledTasksInfoStart"),
  
  SCHEDULED_TASKS_INFO_STOP("ScheduledTasksInfoStop"),
  
  KEEP_ALIVE("KeepAlive");

  private String value;

  SessionMessageType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SessionMessageType fromValue(String value) {
    for (SessionMessageType b : SessionMessageType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<SessionMessageType> {
    @Override
    public void write(final JsonWriter jsonWriter, final SessionMessageType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public SessionMessageType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return SessionMessageType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    SessionMessageType.fromValue(value);
  }
}

