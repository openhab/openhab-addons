/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RemoteImageInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class RemoteImageResult.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class RemoteImageResult {
  public static final String SERIALIZED_NAME_IMAGES = "Images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  @javax.annotation.Nullable
  private List<RemoteImageInfo> images;

  public static final String SERIALIZED_NAME_TOTAL_RECORD_COUNT = "TotalRecordCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORD_COUNT)
  @javax.annotation.Nullable
  private Integer totalRecordCount;

  public static final String SERIALIZED_NAME_PROVIDERS = "Providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  @javax.annotation.Nullable
  private List<String> providers;

  public RemoteImageResult() {
  }

  public RemoteImageResult images(@javax.annotation.Nullable List<RemoteImageInfo> images) {
    this.images = images;
    return this;
  }

  public RemoteImageResult addImagesItem(RemoteImageInfo imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Gets or sets the images.
   * @return images
   */
  @javax.annotation.Nullable
  public List<RemoteImageInfo> getImages() {
    return images;
  }

  public void setImages(@javax.annotation.Nullable List<RemoteImageInfo> images) {
    this.images = images;
  }


  public RemoteImageResult totalRecordCount(@javax.annotation.Nullable Integer totalRecordCount) {
    this.totalRecordCount = totalRecordCount;
    return this;
  }

  /**
   * Gets or sets the total record count.
   * @return totalRecordCount
   */
  @javax.annotation.Nullable
  public Integer getTotalRecordCount() {
    return totalRecordCount;
  }

  public void setTotalRecordCount(@javax.annotation.Nullable Integer totalRecordCount) {
    this.totalRecordCount = totalRecordCount;
  }


  public RemoteImageResult providers(@javax.annotation.Nullable List<String> providers) {
    this.providers = providers;
    return this;
  }

  public RemoteImageResult addProvidersItem(String providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * Gets or sets the providers.
   * @return providers
   */
  @javax.annotation.Nullable
  public List<String> getProviders() {
    return providers;
  }

  public void setProviders(@javax.annotation.Nullable List<String> providers) {
    this.providers = providers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteImageResult remoteImageResult = (RemoteImageResult) o;
    return Objects.equals(this.images, remoteImageResult.images) &&
        Objects.equals(this.totalRecordCount, remoteImageResult.totalRecordCount) &&
        Objects.equals(this.providers, remoteImageResult.providers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(images, totalRecordCount, providers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteImageResult {\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    totalRecordCount: ").append(toIndentedString(totalRecordCount)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Images");
    openapiFields.add("TotalRecordCount");
    openapiFields.add("Providers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteImageResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteImageResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteImageResult is not found in the empty JSON string", RemoteImageResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteImageResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteImageResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Images") != null && !jsonObj.get("Images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("Images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Images` to be an array in the JSON string but got `%s`", jsonObj.get("Images").toString()));
          }

          // validate the optional field `Images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            RemoteImageInfo.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Providers") != null && !jsonObj.get("Providers").isJsonNull() && !jsonObj.get("Providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Providers` to be an array in the JSON string but got `%s`", jsonObj.get("Providers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteImageResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteImageResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteImageResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteImageResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteImageResult>() {
           @Override
           public void write(JsonWriter out, RemoteImageResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteImageResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteImageResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteImageResult
   * @throws IOException if the JSON string is invalid with respect to RemoteImageResult
   */
  public static RemoteImageResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteImageResult.class);
  }

  /**
   * Convert an instance of RemoteImageResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

