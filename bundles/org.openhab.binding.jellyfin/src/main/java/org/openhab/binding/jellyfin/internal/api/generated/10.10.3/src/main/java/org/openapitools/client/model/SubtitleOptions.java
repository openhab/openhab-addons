/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * SubtitleOptions
 */
@JsonPropertyOrder({
  SubtitleOptions.JSON_PROPERTY_SKIP_IF_EMBEDDED_SUBTITLES_PRESENT,
  SubtitleOptions.JSON_PROPERTY_SKIP_IF_AUDIO_TRACK_MATCHES,
  SubtitleOptions.JSON_PROPERTY_DOWNLOAD_LANGUAGES,
  SubtitleOptions.JSON_PROPERTY_DOWNLOAD_MOVIE_SUBTITLES,
  SubtitleOptions.JSON_PROPERTY_DOWNLOAD_EPISODE_SUBTITLES,
  SubtitleOptions.JSON_PROPERTY_OPEN_SUBTITLES_USERNAME,
  SubtitleOptions.JSON_PROPERTY_OPEN_SUBTITLES_PASSWORD_HASH,
  SubtitleOptions.JSON_PROPERTY_IS_OPEN_SUBTITLE_VIP_ACCOUNT,
  SubtitleOptions.JSON_PROPERTY_REQUIRE_PERFECT_MATCH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-16T17:51:50.987643556Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class SubtitleOptions {
  public static final String JSON_PROPERTY_SKIP_IF_EMBEDDED_SUBTITLES_PRESENT = "SkipIfEmbeddedSubtitlesPresent";
  @javax.annotation.Nullable
  private Boolean skipIfEmbeddedSubtitlesPresent;

  public static final String JSON_PROPERTY_SKIP_IF_AUDIO_TRACK_MATCHES = "SkipIfAudioTrackMatches";
  @javax.annotation.Nullable
  private Boolean skipIfAudioTrackMatches;

  public static final String JSON_PROPERTY_DOWNLOAD_LANGUAGES = "DownloadLanguages";
  private JsonNullable<List<String>> downloadLanguages = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_DOWNLOAD_MOVIE_SUBTITLES = "DownloadMovieSubtitles";
  @javax.annotation.Nullable
  private Boolean downloadMovieSubtitles;

  public static final String JSON_PROPERTY_DOWNLOAD_EPISODE_SUBTITLES = "DownloadEpisodeSubtitles";
  @javax.annotation.Nullable
  private Boolean downloadEpisodeSubtitles;

  public static final String JSON_PROPERTY_OPEN_SUBTITLES_USERNAME = "OpenSubtitlesUsername";
  private JsonNullable<String> openSubtitlesUsername = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_OPEN_SUBTITLES_PASSWORD_HASH = "OpenSubtitlesPasswordHash";
  private JsonNullable<String> openSubtitlesPasswordHash = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_OPEN_SUBTITLE_VIP_ACCOUNT = "IsOpenSubtitleVipAccount";
  @javax.annotation.Nullable
  private Boolean isOpenSubtitleVipAccount;

  public static final String JSON_PROPERTY_REQUIRE_PERFECT_MATCH = "RequirePerfectMatch";
  @javax.annotation.Nullable
  private Boolean requirePerfectMatch;

  public SubtitleOptions() { 
  }

  public SubtitleOptions skipIfEmbeddedSubtitlesPresent(@javax.annotation.Nullable Boolean skipIfEmbeddedSubtitlesPresent) {
    this.skipIfEmbeddedSubtitlesPresent = skipIfEmbeddedSubtitlesPresent;
    return this;
  }

  /**
   * Get skipIfEmbeddedSubtitlesPresent
   * @return skipIfEmbeddedSubtitlesPresent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP_IF_EMBEDDED_SUBTITLES_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSkipIfEmbeddedSubtitlesPresent() {
    return skipIfEmbeddedSubtitlesPresent;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_IF_EMBEDDED_SUBTITLES_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipIfEmbeddedSubtitlesPresent(@javax.annotation.Nullable Boolean skipIfEmbeddedSubtitlesPresent) {
    this.skipIfEmbeddedSubtitlesPresent = skipIfEmbeddedSubtitlesPresent;
  }


  public SubtitleOptions skipIfAudioTrackMatches(@javax.annotation.Nullable Boolean skipIfAudioTrackMatches) {
    this.skipIfAudioTrackMatches = skipIfAudioTrackMatches;
    return this;
  }

  /**
   * Get skipIfAudioTrackMatches
   * @return skipIfAudioTrackMatches
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP_IF_AUDIO_TRACK_MATCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSkipIfAudioTrackMatches() {
    return skipIfAudioTrackMatches;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_IF_AUDIO_TRACK_MATCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipIfAudioTrackMatches(@javax.annotation.Nullable Boolean skipIfAudioTrackMatches) {
    this.skipIfAudioTrackMatches = skipIfAudioTrackMatches;
  }


  public SubtitleOptions downloadLanguages(@javax.annotation.Nullable List<String> downloadLanguages) {
    this.downloadLanguages = JsonNullable.<List<String>>of(downloadLanguages);
    return this;
  }

  public SubtitleOptions addDownloadLanguagesItem(String downloadLanguagesItem) {
    if (this.downloadLanguages == null || !this.downloadLanguages.isPresent()) {
      this.downloadLanguages = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.downloadLanguages.get().add(downloadLanguagesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get downloadLanguages
   * @return downloadLanguages
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getDownloadLanguages() {
        return downloadLanguages.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DOWNLOAD_LANGUAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getDownloadLanguages_JsonNullable() {
    return downloadLanguages;
  }
  
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_LANGUAGES)
  public void setDownloadLanguages_JsonNullable(JsonNullable<List<String>> downloadLanguages) {
    this.downloadLanguages = downloadLanguages;
  }

  public void setDownloadLanguages(@javax.annotation.Nullable List<String> downloadLanguages) {
    this.downloadLanguages = JsonNullable.<List<String>>of(downloadLanguages);
  }


  public SubtitleOptions downloadMovieSubtitles(@javax.annotation.Nullable Boolean downloadMovieSubtitles) {
    this.downloadMovieSubtitles = downloadMovieSubtitles;
    return this;
  }

  /**
   * Get downloadMovieSubtitles
   * @return downloadMovieSubtitles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_MOVIE_SUBTITLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDownloadMovieSubtitles() {
    return downloadMovieSubtitles;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_MOVIE_SUBTITLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadMovieSubtitles(@javax.annotation.Nullable Boolean downloadMovieSubtitles) {
    this.downloadMovieSubtitles = downloadMovieSubtitles;
  }


  public SubtitleOptions downloadEpisodeSubtitles(@javax.annotation.Nullable Boolean downloadEpisodeSubtitles) {
    this.downloadEpisodeSubtitles = downloadEpisodeSubtitles;
    return this;
  }

  /**
   * Get downloadEpisodeSubtitles
   * @return downloadEpisodeSubtitles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_EPISODE_SUBTITLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDownloadEpisodeSubtitles() {
    return downloadEpisodeSubtitles;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_EPISODE_SUBTITLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadEpisodeSubtitles(@javax.annotation.Nullable Boolean downloadEpisodeSubtitles) {
    this.downloadEpisodeSubtitles = downloadEpisodeSubtitles;
  }


  public SubtitleOptions openSubtitlesUsername(@javax.annotation.Nullable String openSubtitlesUsername) {
    this.openSubtitlesUsername = JsonNullable.<String>of(openSubtitlesUsername);
    return this;
  }

  /**
   * Get openSubtitlesUsername
   * @return openSubtitlesUsername
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getOpenSubtitlesUsername() {
        return openSubtitlesUsername.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OPEN_SUBTITLES_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOpenSubtitlesUsername_JsonNullable() {
    return openSubtitlesUsername;
  }
  
  @JsonProperty(JSON_PROPERTY_OPEN_SUBTITLES_USERNAME)
  public void setOpenSubtitlesUsername_JsonNullable(JsonNullable<String> openSubtitlesUsername) {
    this.openSubtitlesUsername = openSubtitlesUsername;
  }

  public void setOpenSubtitlesUsername(@javax.annotation.Nullable String openSubtitlesUsername) {
    this.openSubtitlesUsername = JsonNullable.<String>of(openSubtitlesUsername);
  }


  public SubtitleOptions openSubtitlesPasswordHash(@javax.annotation.Nullable String openSubtitlesPasswordHash) {
    this.openSubtitlesPasswordHash = JsonNullable.<String>of(openSubtitlesPasswordHash);
    return this;
  }

  /**
   * Get openSubtitlesPasswordHash
   * @return openSubtitlesPasswordHash
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getOpenSubtitlesPasswordHash() {
        return openSubtitlesPasswordHash.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_OPEN_SUBTITLES_PASSWORD_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getOpenSubtitlesPasswordHash_JsonNullable() {
    return openSubtitlesPasswordHash;
  }
  
  @JsonProperty(JSON_PROPERTY_OPEN_SUBTITLES_PASSWORD_HASH)
  public void setOpenSubtitlesPasswordHash_JsonNullable(JsonNullable<String> openSubtitlesPasswordHash) {
    this.openSubtitlesPasswordHash = openSubtitlesPasswordHash;
  }

  public void setOpenSubtitlesPasswordHash(@javax.annotation.Nullable String openSubtitlesPasswordHash) {
    this.openSubtitlesPasswordHash = JsonNullable.<String>of(openSubtitlesPasswordHash);
  }


  public SubtitleOptions isOpenSubtitleVipAccount(@javax.annotation.Nullable Boolean isOpenSubtitleVipAccount) {
    this.isOpenSubtitleVipAccount = isOpenSubtitleVipAccount;
    return this;
  }

  /**
   * Get isOpenSubtitleVipAccount
   * @return isOpenSubtitleVipAccount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_OPEN_SUBTITLE_VIP_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsOpenSubtitleVipAccount() {
    return isOpenSubtitleVipAccount;
  }


  @JsonProperty(JSON_PROPERTY_IS_OPEN_SUBTITLE_VIP_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsOpenSubtitleVipAccount(@javax.annotation.Nullable Boolean isOpenSubtitleVipAccount) {
    this.isOpenSubtitleVipAccount = isOpenSubtitleVipAccount;
  }


  public SubtitleOptions requirePerfectMatch(@javax.annotation.Nullable Boolean requirePerfectMatch) {
    this.requirePerfectMatch = requirePerfectMatch;
    return this;
  }

  /**
   * Get requirePerfectMatch
   * @return requirePerfectMatch
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRE_PERFECT_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequirePerfectMatch() {
    return requirePerfectMatch;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRE_PERFECT_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequirePerfectMatch(@javax.annotation.Nullable Boolean requirePerfectMatch) {
    this.requirePerfectMatch = requirePerfectMatch;
  }


  /**
   * Return true if this SubtitleOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubtitleOptions subtitleOptions = (SubtitleOptions) o;
    return Objects.equals(this.skipIfEmbeddedSubtitlesPresent, subtitleOptions.skipIfEmbeddedSubtitlesPresent) &&
        Objects.equals(this.skipIfAudioTrackMatches, subtitleOptions.skipIfAudioTrackMatches) &&
        equalsNullable(this.downloadLanguages, subtitleOptions.downloadLanguages) &&
        Objects.equals(this.downloadMovieSubtitles, subtitleOptions.downloadMovieSubtitles) &&
        Objects.equals(this.downloadEpisodeSubtitles, subtitleOptions.downloadEpisodeSubtitles) &&
        equalsNullable(this.openSubtitlesUsername, subtitleOptions.openSubtitlesUsername) &&
        equalsNullable(this.openSubtitlesPasswordHash, subtitleOptions.openSubtitlesPasswordHash) &&
        Objects.equals(this.isOpenSubtitleVipAccount, subtitleOptions.isOpenSubtitleVipAccount) &&
        Objects.equals(this.requirePerfectMatch, subtitleOptions.requirePerfectMatch);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(skipIfEmbeddedSubtitlesPresent, skipIfAudioTrackMatches, hashCodeNullable(downloadLanguages), downloadMovieSubtitles, downloadEpisodeSubtitles, hashCodeNullable(openSubtitlesUsername), hashCodeNullable(openSubtitlesPasswordHash), isOpenSubtitleVipAccount, requirePerfectMatch);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubtitleOptions {\n");
    sb.append("    skipIfEmbeddedSubtitlesPresent: ").append(toIndentedString(skipIfEmbeddedSubtitlesPresent)).append("\n");
    sb.append("    skipIfAudioTrackMatches: ").append(toIndentedString(skipIfAudioTrackMatches)).append("\n");
    sb.append("    downloadLanguages: ").append(toIndentedString(downloadLanguages)).append("\n");
    sb.append("    downloadMovieSubtitles: ").append(toIndentedString(downloadMovieSubtitles)).append("\n");
    sb.append("    downloadEpisodeSubtitles: ").append(toIndentedString(downloadEpisodeSubtitles)).append("\n");
    sb.append("    openSubtitlesUsername: ").append(toIndentedString(openSubtitlesUsername)).append("\n");
    sb.append("    openSubtitlesPasswordHash: ").append(toIndentedString(openSubtitlesPasswordHash)).append("\n");
    sb.append("    isOpenSubtitleVipAccount: ").append(toIndentedString(isOpenSubtitleVipAccount)).append("\n");
    sb.append("    requirePerfectMatch: ").append(toIndentedString(requirePerfectMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `SkipIfEmbeddedSubtitlesPresent` to the URL query string
    if (getSkipIfEmbeddedSubtitlesPresent() != null) {
      joiner.add(String.format("%sSkipIfEmbeddedSubtitlesPresent%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSkipIfEmbeddedSubtitlesPresent()))));
    }

    // add `SkipIfAudioTrackMatches` to the URL query string
    if (getSkipIfAudioTrackMatches() != null) {
      joiner.add(String.format("%sSkipIfAudioTrackMatches%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSkipIfAudioTrackMatches()))));
    }

    // add `DownloadLanguages` to the URL query string
    if (getDownloadLanguages() != null) {
      for (int i = 0; i < getDownloadLanguages().size(); i++) {
        joiner.add(String.format("%sDownloadLanguages%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getDownloadLanguages().get(i)))));
      }
    }

    // add `DownloadMovieSubtitles` to the URL query string
    if (getDownloadMovieSubtitles() != null) {
      joiner.add(String.format("%sDownloadMovieSubtitles%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDownloadMovieSubtitles()))));
    }

    // add `DownloadEpisodeSubtitles` to the URL query string
    if (getDownloadEpisodeSubtitles() != null) {
      joiner.add(String.format("%sDownloadEpisodeSubtitles%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDownloadEpisodeSubtitles()))));
    }

    // add `OpenSubtitlesUsername` to the URL query string
    if (getOpenSubtitlesUsername() != null) {
      joiner.add(String.format("%sOpenSubtitlesUsername%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOpenSubtitlesUsername()))));
    }

    // add `OpenSubtitlesPasswordHash` to the URL query string
    if (getOpenSubtitlesPasswordHash() != null) {
      joiner.add(String.format("%sOpenSubtitlesPasswordHash%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOpenSubtitlesPasswordHash()))));
    }

    // add `IsOpenSubtitleVipAccount` to the URL query string
    if (getIsOpenSubtitleVipAccount() != null) {
      joiner.add(String.format("%sIsOpenSubtitleVipAccount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsOpenSubtitleVipAccount()))));
    }

    // add `RequirePerfectMatch` to the URL query string
    if (getRequirePerfectMatch() != null) {
      joiner.add(String.format("%sRequirePerfectMatch%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRequirePerfectMatch()))));
    }

    return joiner.toString();
  }
}

