/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubtitleOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class SubtitleOptions {
  public static final String SERIALIZED_NAME_SKIP_IF_EMBEDDED_SUBTITLES_PRESENT = "SkipIfEmbeddedSubtitlesPresent";
  @SerializedName(SERIALIZED_NAME_SKIP_IF_EMBEDDED_SUBTITLES_PRESENT)
  @javax.annotation.Nullable
  private Boolean skipIfEmbeddedSubtitlesPresent;

  public static final String SERIALIZED_NAME_SKIP_IF_AUDIO_TRACK_MATCHES = "SkipIfAudioTrackMatches";
  @SerializedName(SERIALIZED_NAME_SKIP_IF_AUDIO_TRACK_MATCHES)
  @javax.annotation.Nullable
  private Boolean skipIfAudioTrackMatches;

  public static final String SERIALIZED_NAME_DOWNLOAD_LANGUAGES = "DownloadLanguages";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_LANGUAGES)
  @javax.annotation.Nullable
  private List<String> downloadLanguages;

  public static final String SERIALIZED_NAME_DOWNLOAD_MOVIE_SUBTITLES = "DownloadMovieSubtitles";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_MOVIE_SUBTITLES)
  @javax.annotation.Nullable
  private Boolean downloadMovieSubtitles;

  public static final String SERIALIZED_NAME_DOWNLOAD_EPISODE_SUBTITLES = "DownloadEpisodeSubtitles";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_EPISODE_SUBTITLES)
  @javax.annotation.Nullable
  private Boolean downloadEpisodeSubtitles;

  public static final String SERIALIZED_NAME_OPEN_SUBTITLES_USERNAME = "OpenSubtitlesUsername";
  @SerializedName(SERIALIZED_NAME_OPEN_SUBTITLES_USERNAME)
  @javax.annotation.Nullable
  private String openSubtitlesUsername;

  public static final String SERIALIZED_NAME_OPEN_SUBTITLES_PASSWORD_HASH = "OpenSubtitlesPasswordHash";
  @SerializedName(SERIALIZED_NAME_OPEN_SUBTITLES_PASSWORD_HASH)
  @javax.annotation.Nullable
  private String openSubtitlesPasswordHash;

  public static final String SERIALIZED_NAME_IS_OPEN_SUBTITLE_VIP_ACCOUNT = "IsOpenSubtitleVipAccount";
  @SerializedName(SERIALIZED_NAME_IS_OPEN_SUBTITLE_VIP_ACCOUNT)
  @javax.annotation.Nullable
  private Boolean isOpenSubtitleVipAccount;

  public static final String SERIALIZED_NAME_REQUIRE_PERFECT_MATCH = "RequirePerfectMatch";
  @SerializedName(SERIALIZED_NAME_REQUIRE_PERFECT_MATCH)
  @javax.annotation.Nullable
  private Boolean requirePerfectMatch;

  public SubtitleOptions() {
  }

  public SubtitleOptions skipIfEmbeddedSubtitlesPresent(@javax.annotation.Nullable Boolean skipIfEmbeddedSubtitlesPresent) {
    this.skipIfEmbeddedSubtitlesPresent = skipIfEmbeddedSubtitlesPresent;
    return this;
  }

  /**
   * Get skipIfEmbeddedSubtitlesPresent
   * @return skipIfEmbeddedSubtitlesPresent
   */
  @javax.annotation.Nullable
  public Boolean getSkipIfEmbeddedSubtitlesPresent() {
    return skipIfEmbeddedSubtitlesPresent;
  }

  public void setSkipIfEmbeddedSubtitlesPresent(@javax.annotation.Nullable Boolean skipIfEmbeddedSubtitlesPresent) {
    this.skipIfEmbeddedSubtitlesPresent = skipIfEmbeddedSubtitlesPresent;
  }


  public SubtitleOptions skipIfAudioTrackMatches(@javax.annotation.Nullable Boolean skipIfAudioTrackMatches) {
    this.skipIfAudioTrackMatches = skipIfAudioTrackMatches;
    return this;
  }

  /**
   * Get skipIfAudioTrackMatches
   * @return skipIfAudioTrackMatches
   */
  @javax.annotation.Nullable
  public Boolean getSkipIfAudioTrackMatches() {
    return skipIfAudioTrackMatches;
  }

  public void setSkipIfAudioTrackMatches(@javax.annotation.Nullable Boolean skipIfAudioTrackMatches) {
    this.skipIfAudioTrackMatches = skipIfAudioTrackMatches;
  }


  public SubtitleOptions downloadLanguages(@javax.annotation.Nullable List<String> downloadLanguages) {
    this.downloadLanguages = downloadLanguages;
    return this;
  }

  public SubtitleOptions addDownloadLanguagesItem(String downloadLanguagesItem) {
    if (this.downloadLanguages == null) {
      this.downloadLanguages = new ArrayList<>();
    }
    this.downloadLanguages.add(downloadLanguagesItem);
    return this;
  }

  /**
   * Get downloadLanguages
   * @return downloadLanguages
   */
  @javax.annotation.Nullable
  public List<String> getDownloadLanguages() {
    return downloadLanguages;
  }

  public void setDownloadLanguages(@javax.annotation.Nullable List<String> downloadLanguages) {
    this.downloadLanguages = downloadLanguages;
  }


  public SubtitleOptions downloadMovieSubtitles(@javax.annotation.Nullable Boolean downloadMovieSubtitles) {
    this.downloadMovieSubtitles = downloadMovieSubtitles;
    return this;
  }

  /**
   * Get downloadMovieSubtitles
   * @return downloadMovieSubtitles
   */
  @javax.annotation.Nullable
  public Boolean getDownloadMovieSubtitles() {
    return downloadMovieSubtitles;
  }

  public void setDownloadMovieSubtitles(@javax.annotation.Nullable Boolean downloadMovieSubtitles) {
    this.downloadMovieSubtitles = downloadMovieSubtitles;
  }


  public SubtitleOptions downloadEpisodeSubtitles(@javax.annotation.Nullable Boolean downloadEpisodeSubtitles) {
    this.downloadEpisodeSubtitles = downloadEpisodeSubtitles;
    return this;
  }

  /**
   * Get downloadEpisodeSubtitles
   * @return downloadEpisodeSubtitles
   */
  @javax.annotation.Nullable
  public Boolean getDownloadEpisodeSubtitles() {
    return downloadEpisodeSubtitles;
  }

  public void setDownloadEpisodeSubtitles(@javax.annotation.Nullable Boolean downloadEpisodeSubtitles) {
    this.downloadEpisodeSubtitles = downloadEpisodeSubtitles;
  }


  public SubtitleOptions openSubtitlesUsername(@javax.annotation.Nullable String openSubtitlesUsername) {
    this.openSubtitlesUsername = openSubtitlesUsername;
    return this;
  }

  /**
   * Get openSubtitlesUsername
   * @return openSubtitlesUsername
   */
  @javax.annotation.Nullable
  public String getOpenSubtitlesUsername() {
    return openSubtitlesUsername;
  }

  public void setOpenSubtitlesUsername(@javax.annotation.Nullable String openSubtitlesUsername) {
    this.openSubtitlesUsername = openSubtitlesUsername;
  }


  public SubtitleOptions openSubtitlesPasswordHash(@javax.annotation.Nullable String openSubtitlesPasswordHash) {
    this.openSubtitlesPasswordHash = openSubtitlesPasswordHash;
    return this;
  }

  /**
   * Get openSubtitlesPasswordHash
   * @return openSubtitlesPasswordHash
   */
  @javax.annotation.Nullable
  public String getOpenSubtitlesPasswordHash() {
    return openSubtitlesPasswordHash;
  }

  public void setOpenSubtitlesPasswordHash(@javax.annotation.Nullable String openSubtitlesPasswordHash) {
    this.openSubtitlesPasswordHash = openSubtitlesPasswordHash;
  }


  public SubtitleOptions isOpenSubtitleVipAccount(@javax.annotation.Nullable Boolean isOpenSubtitleVipAccount) {
    this.isOpenSubtitleVipAccount = isOpenSubtitleVipAccount;
    return this;
  }

  /**
   * Get isOpenSubtitleVipAccount
   * @return isOpenSubtitleVipAccount
   */
  @javax.annotation.Nullable
  public Boolean getIsOpenSubtitleVipAccount() {
    return isOpenSubtitleVipAccount;
  }

  public void setIsOpenSubtitleVipAccount(@javax.annotation.Nullable Boolean isOpenSubtitleVipAccount) {
    this.isOpenSubtitleVipAccount = isOpenSubtitleVipAccount;
  }


  public SubtitleOptions requirePerfectMatch(@javax.annotation.Nullable Boolean requirePerfectMatch) {
    this.requirePerfectMatch = requirePerfectMatch;
    return this;
  }

  /**
   * Get requirePerfectMatch
   * @return requirePerfectMatch
   */
  @javax.annotation.Nullable
  public Boolean getRequirePerfectMatch() {
    return requirePerfectMatch;
  }

  public void setRequirePerfectMatch(@javax.annotation.Nullable Boolean requirePerfectMatch) {
    this.requirePerfectMatch = requirePerfectMatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubtitleOptions subtitleOptions = (SubtitleOptions) o;
    return Objects.equals(this.skipIfEmbeddedSubtitlesPresent, subtitleOptions.skipIfEmbeddedSubtitlesPresent) &&
        Objects.equals(this.skipIfAudioTrackMatches, subtitleOptions.skipIfAudioTrackMatches) &&
        Objects.equals(this.downloadLanguages, subtitleOptions.downloadLanguages) &&
        Objects.equals(this.downloadMovieSubtitles, subtitleOptions.downloadMovieSubtitles) &&
        Objects.equals(this.downloadEpisodeSubtitles, subtitleOptions.downloadEpisodeSubtitles) &&
        Objects.equals(this.openSubtitlesUsername, subtitleOptions.openSubtitlesUsername) &&
        Objects.equals(this.openSubtitlesPasswordHash, subtitleOptions.openSubtitlesPasswordHash) &&
        Objects.equals(this.isOpenSubtitleVipAccount, subtitleOptions.isOpenSubtitleVipAccount) &&
        Objects.equals(this.requirePerfectMatch, subtitleOptions.requirePerfectMatch);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(skipIfEmbeddedSubtitlesPresent, skipIfAudioTrackMatches, downloadLanguages, downloadMovieSubtitles, downloadEpisodeSubtitles, openSubtitlesUsername, openSubtitlesPasswordHash, isOpenSubtitleVipAccount, requirePerfectMatch);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubtitleOptions {\n");
    sb.append("    skipIfEmbeddedSubtitlesPresent: ").append(toIndentedString(skipIfEmbeddedSubtitlesPresent)).append("\n");
    sb.append("    skipIfAudioTrackMatches: ").append(toIndentedString(skipIfAudioTrackMatches)).append("\n");
    sb.append("    downloadLanguages: ").append(toIndentedString(downloadLanguages)).append("\n");
    sb.append("    downloadMovieSubtitles: ").append(toIndentedString(downloadMovieSubtitles)).append("\n");
    sb.append("    downloadEpisodeSubtitles: ").append(toIndentedString(downloadEpisodeSubtitles)).append("\n");
    sb.append("    openSubtitlesUsername: ").append(toIndentedString(openSubtitlesUsername)).append("\n");
    sb.append("    openSubtitlesPasswordHash: ").append(toIndentedString(openSubtitlesPasswordHash)).append("\n");
    sb.append("    isOpenSubtitleVipAccount: ").append(toIndentedString(isOpenSubtitleVipAccount)).append("\n");
    sb.append("    requirePerfectMatch: ").append(toIndentedString(requirePerfectMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SkipIfEmbeddedSubtitlesPresent");
    openapiFields.add("SkipIfAudioTrackMatches");
    openapiFields.add("DownloadLanguages");
    openapiFields.add("DownloadMovieSubtitles");
    openapiFields.add("DownloadEpisodeSubtitles");
    openapiFields.add("OpenSubtitlesUsername");
    openapiFields.add("OpenSubtitlesPasswordHash");
    openapiFields.add("IsOpenSubtitleVipAccount");
    openapiFields.add("RequirePerfectMatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubtitleOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubtitleOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubtitleOptions is not found in the empty JSON string", SubtitleOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubtitleOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubtitleOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("DownloadLanguages") != null && !jsonObj.get("DownloadLanguages").isJsonNull() && !jsonObj.get("DownloadLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DownloadLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("DownloadLanguages").toString()));
      }
      if ((jsonObj.get("OpenSubtitlesUsername") != null && !jsonObj.get("OpenSubtitlesUsername").isJsonNull()) && !jsonObj.get("OpenSubtitlesUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpenSubtitlesUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpenSubtitlesUsername").toString()));
      }
      if ((jsonObj.get("OpenSubtitlesPasswordHash") != null && !jsonObj.get("OpenSubtitlesPasswordHash").isJsonNull()) && !jsonObj.get("OpenSubtitlesPasswordHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpenSubtitlesPasswordHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpenSubtitlesPasswordHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubtitleOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubtitleOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubtitleOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubtitleOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<SubtitleOptions>() {
           @Override
           public void write(JsonWriter out, SubtitleOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubtitleOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubtitleOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubtitleOptions
   * @throws IOException if the JSON string is invalid with respect to SubtitleOptions
   */
  public static SubtitleOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubtitleOptions.class);
  }

  /**
   * Convert an instance of SubtitleOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

