/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.UserConfiguration;
import org.openapitools.client.model.UserPolicy;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class UserDto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class UserDto {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_SERVER_ID = "ServerId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  @javax.annotation.Nullable
  private String serverId;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  @javax.annotation.Nullable
  private String serverName;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_PRIMARY_IMAGE_TAG = "PrimaryImageTag";
  @SerializedName(SERIALIZED_NAME_PRIMARY_IMAGE_TAG)
  @javax.annotation.Nullable
  private String primaryImageTag;

  public static final String SERIALIZED_NAME_HAS_PASSWORD = "HasPassword";
  @SerializedName(SERIALIZED_NAME_HAS_PASSWORD)
  @javax.annotation.Nullable
  private Boolean hasPassword;

  public static final String SERIALIZED_NAME_HAS_CONFIGURED_PASSWORD = "HasConfiguredPassword";
  @SerializedName(SERIALIZED_NAME_HAS_CONFIGURED_PASSWORD)
  @javax.annotation.Nullable
  private Boolean hasConfiguredPassword;

  public static final String SERIALIZED_NAME_HAS_CONFIGURED_EASY_PASSWORD = "HasConfiguredEasyPassword";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HAS_CONFIGURED_EASY_PASSWORD)
  @javax.annotation.Nullable
  private Boolean hasConfiguredEasyPassword;

  public static final String SERIALIZED_NAME_ENABLE_AUTO_LOGIN = "EnableAutoLogin";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTO_LOGIN)
  @javax.annotation.Nullable
  private Boolean enableAutoLogin;

  public static final String SERIALIZED_NAME_LAST_LOGIN_DATE = "LastLoginDate";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime lastLoginDate;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_DATE = "LastActivityDate";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime lastActivityDate;

  public static final String SERIALIZED_NAME_CONFIGURATION = "Configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  @javax.annotation.Nullable
  private UserConfiguration _configuration;

  public static final String SERIALIZED_NAME_POLICY = "Policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nullable
  private UserPolicy policy;

  public static final String SERIALIZED_NAME_PRIMARY_IMAGE_ASPECT_RATIO = "PrimaryImageAspectRatio";
  @SerializedName(SERIALIZED_NAME_PRIMARY_IMAGE_ASPECT_RATIO)
  @javax.annotation.Nullable
  private Double primaryImageAspectRatio;

  public UserDto() {
  }

  public UserDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public UserDto serverId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Gets or sets the server identifier.
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
  }


  public UserDto serverName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Gets or sets the name of the server.  This is not used by the server and is for client-side usage only.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
  }


  public UserDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public UserDto primaryImageTag(@javax.annotation.Nullable String primaryImageTag) {
    this.primaryImageTag = primaryImageTag;
    return this;
  }

  /**
   * Gets or sets the primary image tag.
   * @return primaryImageTag
   */
  @javax.annotation.Nullable
  public String getPrimaryImageTag() {
    return primaryImageTag;
  }

  public void setPrimaryImageTag(@javax.annotation.Nullable String primaryImageTag) {
    this.primaryImageTag = primaryImageTag;
  }


  public UserDto hasPassword(@javax.annotation.Nullable Boolean hasPassword) {
    this.hasPassword = hasPassword;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance has password.
   * @return hasPassword
   */
  @javax.annotation.Nullable
  public Boolean getHasPassword() {
    return hasPassword;
  }

  public void setHasPassword(@javax.annotation.Nullable Boolean hasPassword) {
    this.hasPassword = hasPassword;
  }


  public UserDto hasConfiguredPassword(@javax.annotation.Nullable Boolean hasConfiguredPassword) {
    this.hasConfiguredPassword = hasConfiguredPassword;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance has configured password.
   * @return hasConfiguredPassword
   */
  @javax.annotation.Nullable
  public Boolean getHasConfiguredPassword() {
    return hasConfiguredPassword;
  }

  public void setHasConfiguredPassword(@javax.annotation.Nullable Boolean hasConfiguredPassword) {
    this.hasConfiguredPassword = hasConfiguredPassword;
  }


  @Deprecated
  public UserDto hasConfiguredEasyPassword(@javax.annotation.Nullable Boolean hasConfiguredEasyPassword) {
    this.hasConfiguredEasyPassword = hasConfiguredEasyPassword;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance has configured easy password.
   * @return hasConfiguredEasyPassword
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getHasConfiguredEasyPassword() {
    return hasConfiguredEasyPassword;
  }

  @Deprecated
  public void setHasConfiguredEasyPassword(@javax.annotation.Nullable Boolean hasConfiguredEasyPassword) {
    this.hasConfiguredEasyPassword = hasConfiguredEasyPassword;
  }


  public UserDto enableAutoLogin(@javax.annotation.Nullable Boolean enableAutoLogin) {
    this.enableAutoLogin = enableAutoLogin;
    return this;
  }

  /**
   * Gets or sets whether async login is enabled or not.
   * @return enableAutoLogin
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutoLogin() {
    return enableAutoLogin;
  }

  public void setEnableAutoLogin(@javax.annotation.Nullable Boolean enableAutoLogin) {
    this.enableAutoLogin = enableAutoLogin;
  }


  public UserDto lastLoginDate(@javax.annotation.Nullable OffsetDateTime lastLoginDate) {
    this.lastLoginDate = lastLoginDate;
    return this;
  }

  /**
   * Gets or sets the last login date.
   * @return lastLoginDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastLoginDate() {
    return lastLoginDate;
  }

  public void setLastLoginDate(@javax.annotation.Nullable OffsetDateTime lastLoginDate) {
    this.lastLoginDate = lastLoginDate;
  }


  public UserDto lastActivityDate(@javax.annotation.Nullable OffsetDateTime lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
    return this;
  }

  /**
   * Gets or sets the last activity date.
   * @return lastActivityDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastActivityDate() {
    return lastActivityDate;
  }

  public void setLastActivityDate(@javax.annotation.Nullable OffsetDateTime lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
  }


  public UserDto _configuration(@javax.annotation.Nullable UserConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Gets or sets the configuration.
   * @return _configuration
   */
  @javax.annotation.Nullable
  public UserConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(@javax.annotation.Nullable UserConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public UserDto policy(@javax.annotation.Nullable UserPolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Gets or sets the policy.
   * @return policy
   */
  @javax.annotation.Nullable
  public UserPolicy getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nullable UserPolicy policy) {
    this.policy = policy;
  }


  public UserDto primaryImageAspectRatio(@javax.annotation.Nullable Double primaryImageAspectRatio) {
    this.primaryImageAspectRatio = primaryImageAspectRatio;
    return this;
  }

  /**
   * Gets or sets the primary image aspect ratio.
   * @return primaryImageAspectRatio
   */
  @javax.annotation.Nullable
  public Double getPrimaryImageAspectRatio() {
    return primaryImageAspectRatio;
  }

  public void setPrimaryImageAspectRatio(@javax.annotation.Nullable Double primaryImageAspectRatio) {
    this.primaryImageAspectRatio = primaryImageAspectRatio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDto userDto = (UserDto) o;
    return Objects.equals(this.name, userDto.name) &&
        Objects.equals(this.serverId, userDto.serverId) &&
        Objects.equals(this.serverName, userDto.serverName) &&
        Objects.equals(this.id, userDto.id) &&
        Objects.equals(this.primaryImageTag, userDto.primaryImageTag) &&
        Objects.equals(this.hasPassword, userDto.hasPassword) &&
        Objects.equals(this.hasConfiguredPassword, userDto.hasConfiguredPassword) &&
        Objects.equals(this.hasConfiguredEasyPassword, userDto.hasConfiguredEasyPassword) &&
        Objects.equals(this.enableAutoLogin, userDto.enableAutoLogin) &&
        Objects.equals(this.lastLoginDate, userDto.lastLoginDate) &&
        Objects.equals(this.lastActivityDate, userDto.lastActivityDate) &&
        Objects.equals(this._configuration, userDto._configuration) &&
        Objects.equals(this.policy, userDto.policy) &&
        Objects.equals(this.primaryImageAspectRatio, userDto.primaryImageAspectRatio);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, serverId, serverName, id, primaryImageTag, hasPassword, hasConfiguredPassword, hasConfiguredEasyPassword, enableAutoLogin, lastLoginDate, lastActivityDate, _configuration, policy, primaryImageAspectRatio);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    primaryImageTag: ").append(toIndentedString(primaryImageTag)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    hasConfiguredPassword: ").append(toIndentedString(hasConfiguredPassword)).append("\n");
    sb.append("    hasConfiguredEasyPassword: ").append(toIndentedString(hasConfiguredEasyPassword)).append("\n");
    sb.append("    enableAutoLogin: ").append(toIndentedString(enableAutoLogin)).append("\n");
    sb.append("    lastLoginDate: ").append(toIndentedString(lastLoginDate)).append("\n");
    sb.append("    lastActivityDate: ").append(toIndentedString(lastActivityDate)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    primaryImageAspectRatio: ").append(toIndentedString(primaryImageAspectRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("ServerId");
    openapiFields.add("ServerName");
    openapiFields.add("Id");
    openapiFields.add("PrimaryImageTag");
    openapiFields.add("HasPassword");
    openapiFields.add("HasConfiguredPassword");
    openapiFields.add("HasConfiguredEasyPassword");
    openapiFields.add("EnableAutoLogin");
    openapiFields.add("LastLoginDate");
    openapiFields.add("LastActivityDate");
    openapiFields.add("Configuration");
    openapiFields.add("Policy");
    openapiFields.add("PrimaryImageAspectRatio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDto is not found in the empty JSON string", UserDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ServerId") != null && !jsonObj.get("ServerId").isJsonNull()) && !jsonObj.get("ServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerId").toString()));
      }
      if ((jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) && !jsonObj.get("ServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerName").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("PrimaryImageTag") != null && !jsonObj.get("PrimaryImageTag").isJsonNull()) && !jsonObj.get("PrimaryImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimaryImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimaryImageTag").toString()));
      }
      // validate the optional field `Configuration`
      if (jsonObj.get("Configuration") != null && !jsonObj.get("Configuration").isJsonNull()) {
        UserConfiguration.validateJsonElement(jsonObj.get("Configuration"));
      }
      // validate the optional field `Policy`
      if (jsonObj.get("Policy") != null && !jsonObj.get("Policy").isJsonNull()) {
        UserPolicy.validateJsonElement(jsonObj.get("Policy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDto>() {
           @Override
           public void write(JsonWriter out, UserDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDto
   * @throws IOException if the JSON string is invalid with respect to UserDto
   */
  public static UserDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDto.class);
  }

  /**
   * Convert an instance of UserDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

