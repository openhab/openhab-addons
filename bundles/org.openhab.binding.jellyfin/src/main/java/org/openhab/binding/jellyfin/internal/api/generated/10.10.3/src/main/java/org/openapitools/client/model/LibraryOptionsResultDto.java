/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LibraryOptionInfoDto;
import org.openapitools.client.model.LibraryTypeOptionsDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Library options result dto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-27T20:32:56.699980679+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class LibraryOptionsResultDto {
  public static final String SERIALIZED_NAME_METADATA_SAVERS = "MetadataSavers";
  @SerializedName(SERIALIZED_NAME_METADATA_SAVERS)
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> metadataSavers = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA_READERS = "MetadataReaders";
  @SerializedName(SERIALIZED_NAME_METADATA_READERS)
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> metadataReaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBTITLE_FETCHERS = "SubtitleFetchers";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_FETCHERS)
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> subtitleFetchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LYRIC_FETCHERS = "LyricFetchers";
  @SerializedName(SERIALIZED_NAME_LYRIC_FETCHERS)
  @javax.annotation.Nullable
  private List<LibraryOptionInfoDto> lyricFetchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_OPTIONS = "TypeOptions";
  @SerializedName(SERIALIZED_NAME_TYPE_OPTIONS)
  @javax.annotation.Nullable
  private List<LibraryTypeOptionsDto> typeOptions = new ArrayList<>();

  public LibraryOptionsResultDto() {
  }

  public LibraryOptionsResultDto metadataSavers(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataSavers) {
    this.metadataSavers = metadataSavers;
    return this;
  }

  public LibraryOptionsResultDto addMetadataSaversItem(LibraryOptionInfoDto metadataSaversItem) {
    if (this.metadataSavers == null) {
      this.metadataSavers = new ArrayList<>();
    }
    this.metadataSavers.add(metadataSaversItem);
    return this;
  }

  /**
   * Gets or sets the metadata savers.
   * @return metadataSavers
   */
  @javax.annotation.Nullable
  public List<LibraryOptionInfoDto> getMetadataSavers() {
    return metadataSavers;
  }

  public void setMetadataSavers(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataSavers) {
    this.metadataSavers = metadataSavers;
  }


  public LibraryOptionsResultDto metadataReaders(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataReaders) {
    this.metadataReaders = metadataReaders;
    return this;
  }

  public LibraryOptionsResultDto addMetadataReadersItem(LibraryOptionInfoDto metadataReadersItem) {
    if (this.metadataReaders == null) {
      this.metadataReaders = new ArrayList<>();
    }
    this.metadataReaders.add(metadataReadersItem);
    return this;
  }

  /**
   * Gets or sets the metadata readers.
   * @return metadataReaders
   */
  @javax.annotation.Nullable
  public List<LibraryOptionInfoDto> getMetadataReaders() {
    return metadataReaders;
  }

  public void setMetadataReaders(@javax.annotation.Nullable List<LibraryOptionInfoDto> metadataReaders) {
    this.metadataReaders = metadataReaders;
  }


  public LibraryOptionsResultDto subtitleFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> subtitleFetchers) {
    this.subtitleFetchers = subtitleFetchers;
    return this;
  }

  public LibraryOptionsResultDto addSubtitleFetchersItem(LibraryOptionInfoDto subtitleFetchersItem) {
    if (this.subtitleFetchers == null) {
      this.subtitleFetchers = new ArrayList<>();
    }
    this.subtitleFetchers.add(subtitleFetchersItem);
    return this;
  }

  /**
   * Gets or sets the subtitle fetchers.
   * @return subtitleFetchers
   */
  @javax.annotation.Nullable
  public List<LibraryOptionInfoDto> getSubtitleFetchers() {
    return subtitleFetchers;
  }

  public void setSubtitleFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> subtitleFetchers) {
    this.subtitleFetchers = subtitleFetchers;
  }


  public LibraryOptionsResultDto lyricFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> lyricFetchers) {
    this.lyricFetchers = lyricFetchers;
    return this;
  }

  public LibraryOptionsResultDto addLyricFetchersItem(LibraryOptionInfoDto lyricFetchersItem) {
    if (this.lyricFetchers == null) {
      this.lyricFetchers = new ArrayList<>();
    }
    this.lyricFetchers.add(lyricFetchersItem);
    return this;
  }

  /**
   * Gets or sets the list of lyric fetchers.
   * @return lyricFetchers
   */
  @javax.annotation.Nullable
  public List<LibraryOptionInfoDto> getLyricFetchers() {
    return lyricFetchers;
  }

  public void setLyricFetchers(@javax.annotation.Nullable List<LibraryOptionInfoDto> lyricFetchers) {
    this.lyricFetchers = lyricFetchers;
  }


  public LibraryOptionsResultDto typeOptions(@javax.annotation.Nullable List<LibraryTypeOptionsDto> typeOptions) {
    this.typeOptions = typeOptions;
    return this;
  }

  public LibraryOptionsResultDto addTypeOptionsItem(LibraryTypeOptionsDto typeOptionsItem) {
    if (this.typeOptions == null) {
      this.typeOptions = new ArrayList<>();
    }
    this.typeOptions.add(typeOptionsItem);
    return this;
  }

  /**
   * Gets or sets the type options.
   * @return typeOptions
   */
  @javax.annotation.Nullable
  public List<LibraryTypeOptionsDto> getTypeOptions() {
    return typeOptions;
  }

  public void setTypeOptions(@javax.annotation.Nullable List<LibraryTypeOptionsDto> typeOptions) {
    this.typeOptions = typeOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryOptionsResultDto libraryOptionsResultDto = (LibraryOptionsResultDto) o;
    return Objects.equals(this.metadataSavers, libraryOptionsResultDto.metadataSavers) &&
        Objects.equals(this.metadataReaders, libraryOptionsResultDto.metadataReaders) &&
        Objects.equals(this.subtitleFetchers, libraryOptionsResultDto.subtitleFetchers) &&
        Objects.equals(this.lyricFetchers, libraryOptionsResultDto.lyricFetchers) &&
        Objects.equals(this.typeOptions, libraryOptionsResultDto.typeOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataSavers, metadataReaders, subtitleFetchers, lyricFetchers, typeOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryOptionsResultDto {\n");
    sb.append("    metadataSavers: ").append(toIndentedString(metadataSavers)).append("\n");
    sb.append("    metadataReaders: ").append(toIndentedString(metadataReaders)).append("\n");
    sb.append("    subtitleFetchers: ").append(toIndentedString(subtitleFetchers)).append("\n");
    sb.append("    lyricFetchers: ").append(toIndentedString(lyricFetchers)).append("\n");
    sb.append("    typeOptions: ").append(toIndentedString(typeOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetadataSavers");
    openapiFields.add("MetadataReaders");
    openapiFields.add("SubtitleFetchers");
    openapiFields.add("LyricFetchers");
    openapiFields.add("TypeOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LibraryOptionsResultDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LibraryOptionsResultDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryOptionsResultDto is not found in the empty JSON string", LibraryOptionsResultDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LibraryOptionsResultDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryOptionsResultDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("MetadataSavers") != null && !jsonObj.get("MetadataSavers").isJsonNull()) {
        JsonArray jsonArraymetadataSavers = jsonObj.getAsJsonArray("MetadataSavers");
        if (jsonArraymetadataSavers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MetadataSavers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MetadataSavers` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataSavers").toString()));
          }

          // validate the optional field `MetadataSavers` (array)
          for (int i = 0; i < jsonArraymetadataSavers.size(); i++) {
            LibraryOptionInfoDto.validateJsonElement(jsonArraymetadataSavers.get(i));
          };
        }
      }
      if (jsonObj.get("MetadataReaders") != null && !jsonObj.get("MetadataReaders").isJsonNull()) {
        JsonArray jsonArraymetadataReaders = jsonObj.getAsJsonArray("MetadataReaders");
        if (jsonArraymetadataReaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MetadataReaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MetadataReaders` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataReaders").toString()));
          }

          // validate the optional field `MetadataReaders` (array)
          for (int i = 0; i < jsonArraymetadataReaders.size(); i++) {
            LibraryOptionInfoDto.validateJsonElement(jsonArraymetadataReaders.get(i));
          };
        }
      }
      if (jsonObj.get("SubtitleFetchers") != null && !jsonObj.get("SubtitleFetchers").isJsonNull()) {
        JsonArray jsonArraysubtitleFetchers = jsonObj.getAsJsonArray("SubtitleFetchers");
        if (jsonArraysubtitleFetchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SubtitleFetchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SubtitleFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleFetchers").toString()));
          }

          // validate the optional field `SubtitleFetchers` (array)
          for (int i = 0; i < jsonArraysubtitleFetchers.size(); i++) {
            LibraryOptionInfoDto.validateJsonElement(jsonArraysubtitleFetchers.get(i));
          };
        }
      }
      if (jsonObj.get("LyricFetchers") != null && !jsonObj.get("LyricFetchers").isJsonNull()) {
        JsonArray jsonArraylyricFetchers = jsonObj.getAsJsonArray("LyricFetchers");
        if (jsonArraylyricFetchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LyricFetchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LyricFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("LyricFetchers").toString()));
          }

          // validate the optional field `LyricFetchers` (array)
          for (int i = 0; i < jsonArraylyricFetchers.size(); i++) {
            LibraryOptionInfoDto.validateJsonElement(jsonArraylyricFetchers.get(i));
          };
        }
      }
      if (jsonObj.get("TypeOptions") != null && !jsonObj.get("TypeOptions").isJsonNull()) {
        JsonArray jsonArraytypeOptions = jsonObj.getAsJsonArray("TypeOptions");
        if (jsonArraytypeOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TypeOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TypeOptions` to be an array in the JSON string but got `%s`", jsonObj.get("TypeOptions").toString()));
          }

          // validate the optional field `TypeOptions` (array)
          for (int i = 0; i < jsonArraytypeOptions.size(); i++) {
            LibraryTypeOptionsDto.validateJsonElement(jsonArraytypeOptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryOptionsResultDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryOptionsResultDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryOptionsResultDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryOptionsResultDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryOptionsResultDto>() {
           @Override
           public void write(JsonWriter out, LibraryOptionsResultDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryOptionsResultDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LibraryOptionsResultDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LibraryOptionsResultDto
   * @throws IOException if the JSON string is invalid with respect to LibraryOptionsResultDto
   */
  public static LibraryOptionsResultDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryOptionsResultDto.class);
  }

  /**
   * Convert an instance of LibraryOptionsResultDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

