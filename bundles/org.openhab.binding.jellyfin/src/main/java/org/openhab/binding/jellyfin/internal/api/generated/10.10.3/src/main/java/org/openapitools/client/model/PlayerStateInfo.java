/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.10.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.client.model.PlayMethod;
import org.openapitools.client.model.PlaybackOrder;
import org.openapitools.client.model.RepeatMode;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * PlayerStateInfo
 */
@JsonPropertyOrder({
  PlayerStateInfo.JSON_PROPERTY_POSITION_TICKS,
  PlayerStateInfo.JSON_PROPERTY_CAN_SEEK,
  PlayerStateInfo.JSON_PROPERTY_IS_PAUSED,
  PlayerStateInfo.JSON_PROPERTY_IS_MUTED,
  PlayerStateInfo.JSON_PROPERTY_VOLUME_LEVEL,
  PlayerStateInfo.JSON_PROPERTY_AUDIO_STREAM_INDEX,
  PlayerStateInfo.JSON_PROPERTY_SUBTITLE_STREAM_INDEX,
  PlayerStateInfo.JSON_PROPERTY_MEDIA_SOURCE_ID,
  PlayerStateInfo.JSON_PROPERTY_PLAY_METHOD,
  PlayerStateInfo.JSON_PROPERTY_REPEAT_MODE,
  PlayerStateInfo.JSON_PROPERTY_PLAYBACK_ORDER,
  PlayerStateInfo.JSON_PROPERTY_LIVE_STREAM_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T21:48:48.410245241Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class PlayerStateInfo {
  public static final String JSON_PROPERTY_POSITION_TICKS = "PositionTicks";
  private JsonNullable<Long> positionTicks = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_CAN_SEEK = "CanSeek";
  @javax.annotation.Nullable
  private Boolean canSeek;

  public static final String JSON_PROPERTY_IS_PAUSED = "IsPaused";
  @javax.annotation.Nullable
  private Boolean isPaused;

  public static final String JSON_PROPERTY_IS_MUTED = "IsMuted";
  @javax.annotation.Nullable
  private Boolean isMuted;

  public static final String JSON_PROPERTY_VOLUME_LEVEL = "VolumeLevel";
  private JsonNullable<Integer> volumeLevel = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_AUDIO_STREAM_INDEX = "AudioStreamIndex";
  private JsonNullable<Integer> audioStreamIndex = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_SUBTITLE_STREAM_INDEX = "SubtitleStreamIndex";
  private JsonNullable<Integer> subtitleStreamIndex = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MEDIA_SOURCE_ID = "MediaSourceId";
  private JsonNullable<String> mediaSourceId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PLAY_METHOD = "PlayMethod";
  private JsonNullable<PlayMethod> playMethod = JsonNullable.<PlayMethod>undefined();

  public static final String JSON_PROPERTY_REPEAT_MODE = "RepeatMode";
  @javax.annotation.Nullable
  private RepeatMode repeatMode;

  public static final String JSON_PROPERTY_PLAYBACK_ORDER = "PlaybackOrder";
  @javax.annotation.Nullable
  private PlaybackOrder playbackOrder;

  public static final String JSON_PROPERTY_LIVE_STREAM_ID = "LiveStreamId";
  private JsonNullable<String> liveStreamId = JsonNullable.<String>undefined();

  public PlayerStateInfo() { 
  }

  public PlayerStateInfo positionTicks(@javax.annotation.Nullable Long positionTicks) {
    this.positionTicks = JsonNullable.<Long>of(positionTicks);
    return this;
  }

  /**
   * Gets or sets the now playing position ticks.
   * @return positionTicks
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getPositionTicks() {
        return positionTicks.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_POSITION_TICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getPositionTicks_JsonNullable() {
    return positionTicks;
  }
  
  @JsonProperty(JSON_PROPERTY_POSITION_TICKS)
  public void setPositionTicks_JsonNullable(JsonNullable<Long> positionTicks) {
    this.positionTicks = positionTicks;
  }

  public void setPositionTicks(@javax.annotation.Nullable Long positionTicks) {
    this.positionTicks = JsonNullable.<Long>of(positionTicks);
  }


  public PlayerStateInfo canSeek(@javax.annotation.Nullable Boolean canSeek) {
    this.canSeek = canSeek;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance can seek.
   * @return canSeek
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_SEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCanSeek() {
    return canSeek;
  }


  @JsonProperty(JSON_PROPERTY_CAN_SEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanSeek(@javax.annotation.Nullable Boolean canSeek) {
    this.canSeek = canSeek;
  }


  public PlayerStateInfo isPaused(@javax.annotation.Nullable Boolean isPaused) {
    this.isPaused = isPaused;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is paused.
   * @return isPaused
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_PAUSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsPaused() {
    return isPaused;
  }


  @JsonProperty(JSON_PROPERTY_IS_PAUSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsPaused(@javax.annotation.Nullable Boolean isPaused) {
    this.isPaused = isPaused;
  }


  public PlayerStateInfo isMuted(@javax.annotation.Nullable Boolean isMuted) {
    this.isMuted = isMuted;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is muted.
   * @return isMuted
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_MUTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsMuted() {
    return isMuted;
  }


  @JsonProperty(JSON_PROPERTY_IS_MUTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsMuted(@javax.annotation.Nullable Boolean isMuted) {
    this.isMuted = isMuted;
  }


  public PlayerStateInfo volumeLevel(@javax.annotation.Nullable Integer volumeLevel) {
    this.volumeLevel = JsonNullable.<Integer>of(volumeLevel);
    return this;
  }

  /**
   * Gets or sets the volume level.
   * @return volumeLevel
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getVolumeLevel() {
        return volumeLevel.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VOLUME_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getVolumeLevel_JsonNullable() {
    return volumeLevel;
  }
  
  @JsonProperty(JSON_PROPERTY_VOLUME_LEVEL)
  public void setVolumeLevel_JsonNullable(JsonNullable<Integer> volumeLevel) {
    this.volumeLevel = volumeLevel;
  }

  public void setVolumeLevel(@javax.annotation.Nullable Integer volumeLevel) {
    this.volumeLevel = JsonNullable.<Integer>of(volumeLevel);
  }


  public PlayerStateInfo audioStreamIndex(@javax.annotation.Nullable Integer audioStreamIndex) {
    this.audioStreamIndex = JsonNullable.<Integer>of(audioStreamIndex);
    return this;
  }

  /**
   * Gets or sets the index of the now playing audio stream.
   * @return audioStreamIndex
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getAudioStreamIndex() {
        return audioStreamIndex.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUDIO_STREAM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAudioStreamIndex_JsonNullable() {
    return audioStreamIndex;
  }
  
  @JsonProperty(JSON_PROPERTY_AUDIO_STREAM_INDEX)
  public void setAudioStreamIndex_JsonNullable(JsonNullable<Integer> audioStreamIndex) {
    this.audioStreamIndex = audioStreamIndex;
  }

  public void setAudioStreamIndex(@javax.annotation.Nullable Integer audioStreamIndex) {
    this.audioStreamIndex = JsonNullable.<Integer>of(audioStreamIndex);
  }


  public PlayerStateInfo subtitleStreamIndex(@javax.annotation.Nullable Integer subtitleStreamIndex) {
    this.subtitleStreamIndex = JsonNullable.<Integer>of(subtitleStreamIndex);
    return this;
  }

  /**
   * Gets or sets the index of the now playing subtitle stream.
   * @return subtitleStreamIndex
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getSubtitleStreamIndex() {
        return subtitleStreamIndex.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUBTITLE_STREAM_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getSubtitleStreamIndex_JsonNullable() {
    return subtitleStreamIndex;
  }
  
  @JsonProperty(JSON_PROPERTY_SUBTITLE_STREAM_INDEX)
  public void setSubtitleStreamIndex_JsonNullable(JsonNullable<Integer> subtitleStreamIndex) {
    this.subtitleStreamIndex = subtitleStreamIndex;
  }

  public void setSubtitleStreamIndex(@javax.annotation.Nullable Integer subtitleStreamIndex) {
    this.subtitleStreamIndex = JsonNullable.<Integer>of(subtitleStreamIndex);
  }


  public PlayerStateInfo mediaSourceId(@javax.annotation.Nullable String mediaSourceId) {
    this.mediaSourceId = JsonNullable.<String>of(mediaSourceId);
    return this;
  }

  /**
   * Gets or sets the now playing media version identifier.
   * @return mediaSourceId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getMediaSourceId() {
        return mediaSourceId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEDIA_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMediaSourceId_JsonNullable() {
    return mediaSourceId;
  }
  
  @JsonProperty(JSON_PROPERTY_MEDIA_SOURCE_ID)
  public void setMediaSourceId_JsonNullable(JsonNullable<String> mediaSourceId) {
    this.mediaSourceId = mediaSourceId;
  }

  public void setMediaSourceId(@javax.annotation.Nullable String mediaSourceId) {
    this.mediaSourceId = JsonNullable.<String>of(mediaSourceId);
  }


  public PlayerStateInfo playMethod(@javax.annotation.Nullable PlayMethod playMethod) {
    this.playMethod = JsonNullable.<PlayMethod>of(playMethod);
    return this;
  }

  /**
   * Gets or sets the play method.
   * @return playMethod
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public PlayMethod getPlayMethod() {
        return playMethod.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PLAY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PlayMethod> getPlayMethod_JsonNullable() {
    return playMethod;
  }
  
  @JsonProperty(JSON_PROPERTY_PLAY_METHOD)
  public void setPlayMethod_JsonNullable(JsonNullable<PlayMethod> playMethod) {
    this.playMethod = playMethod;
  }

  public void setPlayMethod(@javax.annotation.Nullable PlayMethod playMethod) {
    this.playMethod = JsonNullable.<PlayMethod>of(playMethod);
  }


  public PlayerStateInfo repeatMode(@javax.annotation.Nullable RepeatMode repeatMode) {
    this.repeatMode = repeatMode;
    return this;
  }

  /**
   * Gets or sets the repeat mode.
   * @return repeatMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPEAT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public RepeatMode getRepeatMode() {
    return repeatMode;
  }


  @JsonProperty(JSON_PROPERTY_REPEAT_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepeatMode(@javax.annotation.Nullable RepeatMode repeatMode) {
    this.repeatMode = repeatMode;
  }


  public PlayerStateInfo playbackOrder(@javax.annotation.Nullable PlaybackOrder playbackOrder) {
    this.playbackOrder = playbackOrder;
    return this;
  }

  /**
   * Gets or sets the playback order.
   * @return playbackOrder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAYBACK_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PlaybackOrder getPlaybackOrder() {
    return playbackOrder;
  }


  @JsonProperty(JSON_PROPERTY_PLAYBACK_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlaybackOrder(@javax.annotation.Nullable PlaybackOrder playbackOrder) {
    this.playbackOrder = playbackOrder;
  }


  public PlayerStateInfo liveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = JsonNullable.<String>of(liveStreamId);
    return this;
  }

  /**
   * Gets or sets the now playing live stream identifier.
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getLiveStreamId() {
        return liveStreamId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LIVE_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getLiveStreamId_JsonNullable() {
    return liveStreamId;
  }
  
  @JsonProperty(JSON_PROPERTY_LIVE_STREAM_ID)
  public void setLiveStreamId_JsonNullable(JsonNullable<String> liveStreamId) {
    this.liveStreamId = liveStreamId;
  }

  public void setLiveStreamId(@javax.annotation.Nullable String liveStreamId) {
    this.liveStreamId = JsonNullable.<String>of(liveStreamId);
  }


  /**
   * Return true if this PlayerStateInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerStateInfo playerStateInfo = (PlayerStateInfo) o;
    return equalsNullable(this.positionTicks, playerStateInfo.positionTicks) &&
        Objects.equals(this.canSeek, playerStateInfo.canSeek) &&
        Objects.equals(this.isPaused, playerStateInfo.isPaused) &&
        Objects.equals(this.isMuted, playerStateInfo.isMuted) &&
        equalsNullable(this.volumeLevel, playerStateInfo.volumeLevel) &&
        equalsNullable(this.audioStreamIndex, playerStateInfo.audioStreamIndex) &&
        equalsNullable(this.subtitleStreamIndex, playerStateInfo.subtitleStreamIndex) &&
        equalsNullable(this.mediaSourceId, playerStateInfo.mediaSourceId) &&
        equalsNullable(this.playMethod, playerStateInfo.playMethod) &&
        Objects.equals(this.repeatMode, playerStateInfo.repeatMode) &&
        Objects.equals(this.playbackOrder, playerStateInfo.playbackOrder) &&
        equalsNullable(this.liveStreamId, playerStateInfo.liveStreamId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(positionTicks), canSeek, isPaused, isMuted, hashCodeNullable(volumeLevel), hashCodeNullable(audioStreamIndex), hashCodeNullable(subtitleStreamIndex), hashCodeNullable(mediaSourceId), hashCodeNullable(playMethod), repeatMode, playbackOrder, hashCodeNullable(liveStreamId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerStateInfo {\n");
    sb.append("    positionTicks: ").append(toIndentedString(positionTicks)).append("\n");
    sb.append("    canSeek: ").append(toIndentedString(canSeek)).append("\n");
    sb.append("    isPaused: ").append(toIndentedString(isPaused)).append("\n");
    sb.append("    isMuted: ").append(toIndentedString(isMuted)).append("\n");
    sb.append("    volumeLevel: ").append(toIndentedString(volumeLevel)).append("\n");
    sb.append("    audioStreamIndex: ").append(toIndentedString(audioStreamIndex)).append("\n");
    sb.append("    subtitleStreamIndex: ").append(toIndentedString(subtitleStreamIndex)).append("\n");
    sb.append("    mediaSourceId: ").append(toIndentedString(mediaSourceId)).append("\n");
    sb.append("    playMethod: ").append(toIndentedString(playMethod)).append("\n");
    sb.append("    repeatMode: ").append(toIndentedString(repeatMode)).append("\n");
    sb.append("    playbackOrder: ").append(toIndentedString(playbackOrder)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `PositionTicks` to the URL query string
    if (getPositionTicks() != null) {
      joiner.add(String.format("%sPositionTicks%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPositionTicks()))));
    }

    // add `CanSeek` to the URL query string
    if (getCanSeek() != null) {
      joiner.add(String.format("%sCanSeek%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCanSeek()))));
    }

    // add `IsPaused` to the URL query string
    if (getIsPaused() != null) {
      joiner.add(String.format("%sIsPaused%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsPaused()))));
    }

    // add `IsMuted` to the URL query string
    if (getIsMuted() != null) {
      joiner.add(String.format("%sIsMuted%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsMuted()))));
    }

    // add `VolumeLevel` to the URL query string
    if (getVolumeLevel() != null) {
      joiner.add(String.format("%sVolumeLevel%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVolumeLevel()))));
    }

    // add `AudioStreamIndex` to the URL query string
    if (getAudioStreamIndex() != null) {
      joiner.add(String.format("%sAudioStreamIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAudioStreamIndex()))));
    }

    // add `SubtitleStreamIndex` to the URL query string
    if (getSubtitleStreamIndex() != null) {
      joiner.add(String.format("%sSubtitleStreamIndex%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSubtitleStreamIndex()))));
    }

    // add `MediaSourceId` to the URL query string
    if (getMediaSourceId() != null) {
      joiner.add(String.format("%sMediaSourceId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMediaSourceId()))));
    }

    // add `PlayMethod` to the URL query string
    if (getPlayMethod() != null) {
      joiner.add(String.format("%sPlayMethod%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPlayMethod()))));
    }

    // add `RepeatMode` to the URL query string
    if (getRepeatMode() != null) {
      joiner.add(String.format("%sRepeatMode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRepeatMode()))));
    }

    // add `PlaybackOrder` to the URL query string
    if (getPlaybackOrder() != null) {
      joiner.add(String.format("%sPlaybackOrder%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPlaybackOrder()))));
    }

    // add `LiveStreamId` to the URL query string
    if (getLiveStreamId() != null) {
      joiner.add(String.format("%sLiveStreamId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLiveStreamId()))));
    }

    return joiner.toString();
  }
}

