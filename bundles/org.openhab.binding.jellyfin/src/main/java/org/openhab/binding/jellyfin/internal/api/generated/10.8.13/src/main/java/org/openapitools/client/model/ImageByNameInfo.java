/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * ImageByNameInfo
 */
@JsonPropertyOrder({
  ImageByNameInfo.JSON_PROPERTY_NAME,
  ImageByNameInfo.JSON_PROPERTY_THEME,
  ImageByNameInfo.JSON_PROPERTY_CONTEXT,
  ImageByNameInfo.JSON_PROPERTY_FILE_LENGTH,
  ImageByNameInfo.JSON_PROPERTY_FORMAT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ImageByNameInfo {
  public static final String JSON_PROPERTY_NAME = "Name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_THEME = "Theme";
  private JsonNullable<String> theme = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CONTEXT = "Context";
  private JsonNullable<String> context = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FILE_LENGTH = "FileLength";
  @javax.annotation.Nullable
  private Long fileLength;

  public static final String JSON_PROPERTY_FORMAT = "Format";
  private JsonNullable<String> format = JsonNullable.<String>undefined();

  public ImageByNameInfo() { 
  }

  public ImageByNameInfo name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public ImageByNameInfo theme(@javax.annotation.Nullable String theme) {
    this.theme = JsonNullable.<String>of(theme);
    return this;
  }

  /**
   * Gets or sets the theme.
   * @return theme
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTheme() {
        return theme.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTheme_JsonNullable() {
    return theme;
  }
  
  @JsonProperty(JSON_PROPERTY_THEME)
  public void setTheme_JsonNullable(JsonNullable<String> theme) {
    this.theme = theme;
  }

  public void setTheme(@javax.annotation.Nullable String theme) {
    this.theme = JsonNullable.<String>of(theme);
  }


  public ImageByNameInfo context(@javax.annotation.Nullable String context) {
    this.context = JsonNullable.<String>of(context);
    return this;
  }

  /**
   * Gets or sets the context.
   * @return context
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getContext() {
        return context.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getContext_JsonNullable() {
    return context;
  }
  
  @JsonProperty(JSON_PROPERTY_CONTEXT)
  public void setContext_JsonNullable(JsonNullable<String> context) {
    this.context = context;
  }

  public void setContext(@javax.annotation.Nullable String context) {
    this.context = JsonNullable.<String>of(context);
  }


  public ImageByNameInfo fileLength(@javax.annotation.Nullable Long fileLength) {
    this.fileLength = fileLength;
    return this;
  }

  /**
   * Gets or sets the length of the file.
   * @return fileLength
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getFileLength() {
    return fileLength;
  }


  @JsonProperty(JSON_PROPERTY_FILE_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileLength(@javax.annotation.Nullable Long fileLength) {
    this.fileLength = fileLength;
  }


  public ImageByNameInfo format(@javax.annotation.Nullable String format) {
    this.format = JsonNullable.<String>of(format);
    return this;
  }

  /**
   * Gets or sets the format.
   * @return format
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getFormat() {
        return format.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFormat_JsonNullable() {
    return format;
  }
  
  @JsonProperty(JSON_PROPERTY_FORMAT)
  public void setFormat_JsonNullable(JsonNullable<String> format) {
    this.format = format;
  }

  public void setFormat(@javax.annotation.Nullable String format) {
    this.format = JsonNullable.<String>of(format);
  }


  /**
   * Return true if this ImageByNameInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageByNameInfo imageByNameInfo = (ImageByNameInfo) o;
    return equalsNullable(this.name, imageByNameInfo.name) &&
        equalsNullable(this.theme, imageByNameInfo.theme) &&
        equalsNullable(this.context, imageByNameInfo.context) &&
        Objects.equals(this.fileLength, imageByNameInfo.fileLength) &&
        equalsNullable(this.format, imageByNameInfo.format);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(name), hashCodeNullable(theme), hashCodeNullable(context), fileLength, hashCodeNullable(format));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageByNameInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    fileLength: ").append(toIndentedString(fileLength)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `Theme` to the URL query string
    if (getTheme() != null) {
      joiner.add(String.format("%sTheme%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTheme()))));
    }

    // add `Context` to the URL query string
    if (getContext() != null) {
      joiner.add(String.format("%sContext%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContext()))));
    }

    // add `FileLength` to the URL query string
    if (getFileLength() != null) {
      joiner.add(String.format("%sFileLength%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFileLength()))));
    }

    // add `Format` to the URL query string
    if (getFormat() != null) {
      joiner.add(String.format("%sFormat%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFormat()))));
    }

    return joiner.toString();
  }
}

