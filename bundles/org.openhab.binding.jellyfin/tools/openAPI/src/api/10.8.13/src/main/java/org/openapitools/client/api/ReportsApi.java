/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ReportExportType;
import org.openapitools.client.model.ReportResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getActivityLogs
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param minDate  (optional)
     * @param includeItemTypes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityLogsCall(String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Integer startIndex, Integer limit, String minDate, String includeItemTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportView", reportView));
        }

        if (displayType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayType", displayType));
        }

        if (hasQueryLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasQueryLimit", hasQueryLimit));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        if (reportColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportColumns", reportColumns));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDate", minDate));
        }

        if (includeItemTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeItemTypes", includeItemTypes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivityLogsValidateBeforeCall(String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Integer startIndex, Integer limit, String minDate, String includeItemTypes, final ApiCallback _callback) throws ApiException {
        return getActivityLogsCall(reportView, displayType, hasQueryLimit, groupBy, reportColumns, startIndex, limit, minDate, includeItemTypes, _callback);

    }

    /**
     * 
     * 
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param minDate  (optional)
     * @param includeItemTypes  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void getActivityLogs(String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Integer startIndex, Integer limit, String minDate, String includeItemTypes) throws ApiException {
        getActivityLogsWithHttpInfo(reportView, displayType, hasQueryLimit, groupBy, reportColumns, startIndex, limit, minDate, includeItemTypes);
    }

    /**
     * 
     * 
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param minDate  (optional)
     * @param includeItemTypes  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getActivityLogsWithHttpInfo(String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Integer startIndex, Integer limit, String minDate, String includeItemTypes) throws ApiException {
        okhttp3.Call localVarCall = getActivityLogsValidateBeforeCall(reportView, displayType, hasQueryLimit, groupBy, reportColumns, startIndex, limit, minDate, includeItemTypes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param minDate  (optional)
     * @param includeItemTypes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityLogsAsync(String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Integer startIndex, Integer limit, String minDate, String includeItemTypes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivityLogsValidateBeforeCall(reportView, displayType, hasQueryLimit, groupBy, reportColumns, startIndex, limit, minDate, includeItemTypes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemReport
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param enableImages  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemReportCall(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Boolean enableImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasThemeSong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasThemeSong", hasThemeSong));
        }

        if (hasThemeVideo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasThemeVideo", hasThemeVideo));
        }

        if (hasSubtitles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSubtitles", hasSubtitles));
        }

        if (hasSpecialFeature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSpecialFeature", hasSpecialFeature));
        }

        if (hasTrailer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTrailer", hasTrailer));
        }

        if (adjacentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adjacentTo", adjacentTo));
        }

        if (minIndexNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIndexNumber", minIndexNumber));
        }

        if (parentIndexNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentIndexNumber", parentIndexNumber));
        }

        if (hasParentalRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasParentalRating", hasParentalRating));
        }

        if (isHd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHd", isHd));
        }

        if (locationTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationTypes", locationTypes));
        }

        if (excludeLocationTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeLocationTypes", excludeLocationTypes));
        }

        if (isMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMissing", isMissing));
        }

        if (isUnaried != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUnaried", isUnaried));
        }

        if (minCommunityRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCommunityRating", minCommunityRating));
        }

        if (minCriticRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCriticRating", minCriticRating));
        }

        if (airedDuringSeason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airedDuringSeason", airedDuringSeason));
        }

        if (minPremiereDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPremiereDate", minPremiereDate));
        }

        if (minDateLastSaved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDateLastSaved", minDateLastSaved));
        }

        if (minDateLastSavedForUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDateLastSavedForUser", minDateLastSavedForUser));
        }

        if (maxPremiereDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPremiereDate", maxPremiereDate));
        }

        if (hasOverview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasOverview", hasOverview));
        }

        if (hasImdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasImdbId", hasImdbId));
        }

        if (hasTmdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTmdbId", hasTmdbId));
        }

        if (hasTvdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTvdbId", hasTvdbId));
        }

        if (isInBoxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInBoxSet", isInBoxSet));
        }

        if (excludeItemIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeItemIds", excludeItemIds));
        }

        if (enableTotalRecordCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableTotalRecordCount", enableTotalRecordCount));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (excludeItemTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeItemTypes", excludeItemTypes));
        }

        if (includeItemTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeItemTypes", includeItemTypes));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (isFavorite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFavorite", isFavorite));
        }

        if (isNotFavorite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isNotFavorite", isNotFavorite));
        }

        if (mediaTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaTypes", mediaTypes));
        }

        if (imageTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypes", imageTypes));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (isPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPlayed", isPlayed));
        }

        if (genres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genres", genres));
        }

        if (genreIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genreIds", genreIds));
        }

        if (officialRatings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("officialRatings", officialRatings));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (years != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("years", years));
        }

        if (enableUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUserData", enableUserData));
        }

        if (imageTypeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypeLimit", imageTypeLimit));
        }

        if (enableImageTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImageTypes", enableImageTypes));
        }

        if (person != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person", person));
        }

        if (personIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personIds", personIds));
        }

        if (personTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personTypes", personTypes));
        }

        if (studios != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("studios", studios));
        }

        if (studioIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("studioIds", studioIds));
        }

        if (artists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artists", artists));
        }

        if (excludeArtistIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeArtistIds", excludeArtistIds));
        }

        if (artistIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artistIds", artistIds));
        }

        if (albums != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("albums", albums));
        }

        if (albumIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("albumIds", albumIds));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (videoTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoTypes", videoTypes));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (minOfficialRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minOfficialRating", minOfficialRating));
        }

        if (isLocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLocked", isLocked));
        }

        if (isPlaceHolder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPlaceHolder", isPlaceHolder));
        }

        if (hasOfficialRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasOfficialRating", hasOfficialRating));
        }

        if (collapseBoxSetItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collapseBoxSetItems", collapseBoxSetItems));
        }

        if (is3D != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is3D", is3D));
        }

        if (seriesStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriesStatus", seriesStatus));
        }

        if (nameStartsWithOrGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameStartsWithOrGreater", nameStartsWithOrGreater));
        }

        if (nameStartsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameStartsWith", nameStartsWith));
        }

        if (nameLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameLessThan", nameLessThan));
        }

        if (reportView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportView", reportView));
        }

        if (displayType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayType", displayType));
        }

        if (hasQueryLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasQueryLimit", hasQueryLimit));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        if (reportColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportColumns", reportColumns));
        }

        if (enableImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImages", enableImages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemReportValidateBeforeCall(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Boolean enableImages, final ApiCallback _callback) throws ApiException {
        return getItemReportCall(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, enableImages, _callback);

    }

    /**
     * 
     * 
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param enableImages  (optional, default to true)
     * @return ReportResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ReportResult getItemReport(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Boolean enableImages) throws ApiException {
        ApiResponse<ReportResult> localVarResp = getItemReportWithHttpInfo(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, enableImages);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param enableImages  (optional, default to true)
     * @return ApiResponse&lt;ReportResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportResult> getItemReportWithHttpInfo(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Boolean enableImages) throws ApiException {
        okhttp3.Call localVarCall = getItemReportValidateBeforeCall(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, enableImages, null);
        Type localVarReturnType = new TypeToken<ReportResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param enableImages  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemReportAsync(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, Boolean enableImages, final ApiCallback<ReportResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemReportValidateBeforeCall(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, enableImages, _callback);
        Type localVarReturnType = new TypeToken<ReportResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportDownload
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param minDate  (optional)
     * @param exportType  (optional, default to CSV)
     * @param enableImages  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportDownloadCall(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, String minDate, ReportExportType exportType, Boolean enableImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Items/Download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasThemeSong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasThemeSong", hasThemeSong));
        }

        if (hasThemeVideo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasThemeVideo", hasThemeVideo));
        }

        if (hasSubtitles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSubtitles", hasSubtitles));
        }

        if (hasSpecialFeature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasSpecialFeature", hasSpecialFeature));
        }

        if (hasTrailer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTrailer", hasTrailer));
        }

        if (adjacentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adjacentTo", adjacentTo));
        }

        if (minIndexNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIndexNumber", minIndexNumber));
        }

        if (parentIndexNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentIndexNumber", parentIndexNumber));
        }

        if (hasParentalRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasParentalRating", hasParentalRating));
        }

        if (isHd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHd", isHd));
        }

        if (locationTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationTypes", locationTypes));
        }

        if (excludeLocationTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeLocationTypes", excludeLocationTypes));
        }

        if (isMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMissing", isMissing));
        }

        if (isUnaried != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUnaried", isUnaried));
        }

        if (minCommunityRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCommunityRating", minCommunityRating));
        }

        if (minCriticRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCriticRating", minCriticRating));
        }

        if (airedDuringSeason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airedDuringSeason", airedDuringSeason));
        }

        if (minPremiereDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPremiereDate", minPremiereDate));
        }

        if (minDateLastSaved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDateLastSaved", minDateLastSaved));
        }

        if (minDateLastSavedForUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDateLastSavedForUser", minDateLastSavedForUser));
        }

        if (maxPremiereDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPremiereDate", maxPremiereDate));
        }

        if (hasOverview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasOverview", hasOverview));
        }

        if (hasImdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasImdbId", hasImdbId));
        }

        if (hasTmdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTmdbId", hasTmdbId));
        }

        if (hasTvdbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasTvdbId", hasTvdbId));
        }

        if (isInBoxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInBoxSet", isInBoxSet));
        }

        if (excludeItemIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeItemIds", excludeItemIds));
        }

        if (enableTotalRecordCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableTotalRecordCount", enableTotalRecordCount));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (excludeItemTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeItemTypes", excludeItemTypes));
        }

        if (includeItemTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeItemTypes", includeItemTypes));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (isFavorite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFavorite", isFavorite));
        }

        if (isNotFavorite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isNotFavorite", isNotFavorite));
        }

        if (mediaTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaTypes", mediaTypes));
        }

        if (imageTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypes", imageTypes));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (isPlayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPlayed", isPlayed));
        }

        if (genres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genres", genres));
        }

        if (genreIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genreIds", genreIds));
        }

        if (officialRatings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("officialRatings", officialRatings));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (years != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("years", years));
        }

        if (enableUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUserData", enableUserData));
        }

        if (imageTypeLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageTypeLimit", imageTypeLimit));
        }

        if (enableImageTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImageTypes", enableImageTypes));
        }

        if (person != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person", person));
        }

        if (personIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personIds", personIds));
        }

        if (personTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personTypes", personTypes));
        }

        if (studios != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("studios", studios));
        }

        if (studioIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("studioIds", studioIds));
        }

        if (artists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artists", artists));
        }

        if (excludeArtistIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeArtistIds", excludeArtistIds));
        }

        if (artistIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artistIds", artistIds));
        }

        if (albums != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("albums", albums));
        }

        if (albumIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("albumIds", albumIds));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (videoTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoTypes", videoTypes));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (minOfficialRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minOfficialRating", minOfficialRating));
        }

        if (isLocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLocked", isLocked));
        }

        if (isPlaceHolder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPlaceHolder", isPlaceHolder));
        }

        if (hasOfficialRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasOfficialRating", hasOfficialRating));
        }

        if (collapseBoxSetItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collapseBoxSetItems", collapseBoxSetItems));
        }

        if (is3D != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is3D", is3D));
        }

        if (seriesStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriesStatus", seriesStatus));
        }

        if (nameStartsWithOrGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameStartsWithOrGreater", nameStartsWithOrGreater));
        }

        if (nameStartsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameStartsWith", nameStartsWith));
        }

        if (nameLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameLessThan", nameLessThan));
        }

        if (reportView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportView", reportView));
        }

        if (displayType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayType", displayType));
        }

        if (hasQueryLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasQueryLimit", hasQueryLimit));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        if (reportColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportColumns", reportColumns));
        }

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDate", minDate));
        }

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportType", exportType));
        }

        if (enableImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableImages", enableImages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDownloadValidateBeforeCall(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, String minDate, ReportExportType exportType, Boolean enableImages, final ApiCallback _callback) throws ApiException {
        return getReportDownloadCall(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, minDate, exportType, enableImages, _callback);

    }

    /**
     * 
     * 
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param minDate  (optional)
     * @param exportType  (optional, default to CSV)
     * @param enableImages  (optional, default to true)
     * @return ReportResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ReportResult getReportDownload(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, String minDate, ReportExportType exportType, Boolean enableImages) throws ApiException {
        ApiResponse<ReportResult> localVarResp = getReportDownloadWithHttpInfo(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, minDate, exportType, enableImages);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param minDate  (optional)
     * @param exportType  (optional, default to CSV)
     * @param enableImages  (optional, default to true)
     * @return ApiResponse&lt;ReportResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportResult> getReportDownloadWithHttpInfo(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, String minDate, ReportExportType exportType, Boolean enableImages) throws ApiException {
        okhttp3.Call localVarCall = getReportDownloadValidateBeforeCall(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, minDate, exportType, enableImages, null);
        Type localVarReturnType = new TypeToken<ReportResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hasThemeSong  (optional)
     * @param hasThemeVideo  (optional)
     * @param hasSubtitles  (optional)
     * @param hasSpecialFeature  (optional)
     * @param hasTrailer  (optional)
     * @param adjacentTo  (optional)
     * @param minIndexNumber  (optional)
     * @param parentIndexNumber  (optional)
     * @param hasParentalRating  (optional)
     * @param isHd  (optional)
     * @param locationTypes  (optional)
     * @param excludeLocationTypes  (optional)
     * @param isMissing  (optional)
     * @param isUnaried  (optional)
     * @param minCommunityRating  (optional)
     * @param minCriticRating  (optional)
     * @param airedDuringSeason  (optional)
     * @param minPremiereDate  (optional)
     * @param minDateLastSaved  (optional)
     * @param minDateLastSavedForUser  (optional)
     * @param maxPremiereDate  (optional)
     * @param hasOverview  (optional)
     * @param hasImdbId  (optional)
     * @param hasTmdbId  (optional)
     * @param hasTvdbId  (optional)
     * @param isInBoxSet  (optional)
     * @param excludeItemIds  (optional)
     * @param enableTotalRecordCount  (optional)
     * @param startIndex  (optional)
     * @param limit  (optional)
     * @param recursive  (optional)
     * @param sortOrder  (optional)
     * @param parentId  (optional)
     * @param fields  (optional)
     * @param excludeItemTypes  (optional)
     * @param includeItemTypes  (optional)
     * @param filters  (optional)
     * @param isFavorite  (optional)
     * @param isNotFavorite  (optional)
     * @param mediaTypes  (optional)
     * @param imageTypes  (optional)
     * @param sortBy  (optional)
     * @param isPlayed  (optional)
     * @param genres  (optional)
     * @param genreIds  (optional)
     * @param officialRatings  (optional)
     * @param tags  (optional)
     * @param years  (optional)
     * @param enableUserData  (optional)
     * @param imageTypeLimit  (optional)
     * @param enableImageTypes  (optional)
     * @param person  (optional)
     * @param personIds  (optional)
     * @param personTypes  (optional)
     * @param studios  (optional)
     * @param studioIds  (optional)
     * @param artists  (optional)
     * @param excludeArtistIds  (optional)
     * @param artistIds  (optional)
     * @param albums  (optional)
     * @param albumIds  (optional)
     * @param ids  (optional)
     * @param videoTypes  (optional)
     * @param userId  (optional)
     * @param minOfficialRating  (optional)
     * @param isLocked  (optional)
     * @param isPlaceHolder  (optional)
     * @param hasOfficialRating  (optional)
     * @param collapseBoxSetItems  (optional)
     * @param is3D  (optional)
     * @param seriesStatus  (optional)
     * @param nameStartsWithOrGreater  (optional)
     * @param nameStartsWith  (optional)
     * @param nameLessThan  (optional)
     * @param reportView  (optional)
     * @param displayType  (optional)
     * @param hasQueryLimit  (optional)
     * @param groupBy  (optional)
     * @param reportColumns  (optional)
     * @param minDate  (optional)
     * @param exportType  (optional, default to CSV)
     * @param enableImages  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportDownloadAsync(Boolean hasThemeSong, Boolean hasThemeVideo, Boolean hasSubtitles, Boolean hasSpecialFeature, Boolean hasTrailer, String adjacentTo, Integer minIndexNumber, Integer parentIndexNumber, Boolean hasParentalRating, Boolean isHd, String locationTypes, String excludeLocationTypes, Boolean isMissing, Boolean isUnaried, Double minCommunityRating, Double minCriticRating, Integer airedDuringSeason, String minPremiereDate, String minDateLastSaved, String minDateLastSavedForUser, String maxPremiereDate, Boolean hasOverview, Boolean hasImdbId, Boolean hasTmdbId, Boolean hasTvdbId, Boolean isInBoxSet, String excludeItemIds, Boolean enableTotalRecordCount, Integer startIndex, Integer limit, Boolean recursive, String sortOrder, String parentId, String fields, String excludeItemTypes, String includeItemTypes, String filters, Boolean isFavorite, Boolean isNotFavorite, String mediaTypes, String imageTypes, String sortBy, Boolean isPlayed, String genres, String genreIds, String officialRatings, String tags, String years, Boolean enableUserData, Integer imageTypeLimit, String enableImageTypes, String person, String personIds, String personTypes, String studios, String studioIds, String artists, String excludeArtistIds, String artistIds, String albums, String albumIds, String ids, String videoTypes, String userId, String minOfficialRating, Boolean isLocked, Boolean isPlaceHolder, Boolean hasOfficialRating, Boolean collapseBoxSetItems, Boolean is3D, String seriesStatus, String nameStartsWithOrGreater, String nameStartsWith, String nameLessThan, String reportView, String displayType, Boolean hasQueryLimit, String groupBy, String reportColumns, String minDate, ReportExportType exportType, Boolean enableImages, final ApiCallback<ReportResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDownloadValidateBeforeCall(hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, parentIndexNumber, hasParentalRating, isHd, locationTypes, excludeLocationTypes, isMissing, isUnaried, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, isInBoxSet, excludeItemIds, enableTotalRecordCount, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, isNotFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, excludeArtistIds, artistIds, albums, albumIds, ids, videoTypes, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, reportView, displayType, hasQueryLimit, groupBy, reportColumns, minDate, exportType, enableImages, _callback);
        Type localVarReturnType = new TypeToken<ReportResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportHeaders
     * @param reportView  (optional)
     * @param includeItemTypes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportHeadersCall(String reportView, String includeItemTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/Headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportView", reportView));
        }

        if (includeItemTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeItemTypes", includeItemTypes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportHeadersValidateBeforeCall(String reportView, String includeItemTypes, final ApiCallback _callback) throws ApiException {
        return getReportHeadersCall(reportView, includeItemTypes, _callback);

    }

    /**
     * 
     * 
     * @param reportView  (optional)
     * @param includeItemTypes  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void getReportHeaders(String reportView, String includeItemTypes) throws ApiException {
        getReportHeadersWithHttpInfo(reportView, includeItemTypes);
    }

    /**
     * 
     * 
     * @param reportView  (optional)
     * @param includeItemTypes  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getReportHeadersWithHttpInfo(String reportView, String includeItemTypes) throws ApiException {
        okhttp3.Call localVarCall = getReportHeadersValidateBeforeCall(reportView, includeItemTypes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param reportView  (optional)
     * @param includeItemTypes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportHeadersAsync(String reportView, String includeItemTypes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportHeadersValidateBeforeCall(reportView, includeItemTypes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
