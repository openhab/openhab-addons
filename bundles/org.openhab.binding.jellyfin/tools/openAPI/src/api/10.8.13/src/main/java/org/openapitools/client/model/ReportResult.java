/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportGroup;
import org.openapitools.client.model.ReportHeader;
import org.openapitools.client.model.ReportRow;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-26T23:32:08.795345870+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class ReportResult {
  public static final String SERIALIZED_NAME_ROWS = "Rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  @javax.annotation.Nullable
  private List<ReportRow> rows;

  public static final String SERIALIZED_NAME_HEADERS = "Headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  @javax.annotation.Nullable
  private List<ReportHeader> headers;

  public static final String SERIALIZED_NAME_GROUPS = "Groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  @javax.annotation.Nullable
  private List<ReportGroup> groups;

  public static final String SERIALIZED_NAME_TOTAL_RECORD_COUNT = "TotalRecordCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORD_COUNT)
  @javax.annotation.Nullable
  private Integer totalRecordCount;

  public static final String SERIALIZED_NAME_IS_GROUPED = "IsGrouped";
  @SerializedName(SERIALIZED_NAME_IS_GROUPED)
  @javax.annotation.Nullable
  private Boolean isGrouped;

  public ReportResult() {
  }

  public ReportResult rows(@javax.annotation.Nullable List<ReportRow> rows) {
    this.rows = rows;
    return this;
  }

  public ReportResult addRowsItem(ReportRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Get rows
   * @return rows
   */
  @javax.annotation.Nullable
  public List<ReportRow> getRows() {
    return rows;
  }

  public void setRows(@javax.annotation.Nullable List<ReportRow> rows) {
    this.rows = rows;
  }


  public ReportResult headers(@javax.annotation.Nullable List<ReportHeader> headers) {
    this.headers = headers;
    return this;
  }

  public ReportResult addHeadersItem(ReportHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public List<ReportHeader> getHeaders() {
    return headers;
  }

  public void setHeaders(@javax.annotation.Nullable List<ReportHeader> headers) {
    this.headers = headers;
  }


  public ReportResult groups(@javax.annotation.Nullable List<ReportGroup> groups) {
    this.groups = groups;
    return this;
  }

  public ReportResult addGroupsItem(ReportGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List<ReportGroup> getGroups() {
    return groups;
  }

  public void setGroups(@javax.annotation.Nullable List<ReportGroup> groups) {
    this.groups = groups;
  }


  public ReportResult totalRecordCount(@javax.annotation.Nullable Integer totalRecordCount) {
    this.totalRecordCount = totalRecordCount;
    return this;
  }

  /**
   * Get totalRecordCount
   * @return totalRecordCount
   */
  @javax.annotation.Nullable
  public Integer getTotalRecordCount() {
    return totalRecordCount;
  }

  public void setTotalRecordCount(@javax.annotation.Nullable Integer totalRecordCount) {
    this.totalRecordCount = totalRecordCount;
  }


  public ReportResult isGrouped(@javax.annotation.Nullable Boolean isGrouped) {
    this.isGrouped = isGrouped;
    return this;
  }

  /**
   * Get isGrouped
   * @return isGrouped
   */
  @javax.annotation.Nullable
  public Boolean getIsGrouped() {
    return isGrouped;
  }

  public void setIsGrouped(@javax.annotation.Nullable Boolean isGrouped) {
    this.isGrouped = isGrouped;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportResult reportResult = (ReportResult) o;
    return Objects.equals(this.rows, reportResult.rows) &&
        Objects.equals(this.headers, reportResult.headers) &&
        Objects.equals(this.groups, reportResult.groups) &&
        Objects.equals(this.totalRecordCount, reportResult.totalRecordCount) &&
        Objects.equals(this.isGrouped, reportResult.isGrouped);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rows, headers, groups, totalRecordCount, isGrouped);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportResult {\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    totalRecordCount: ").append(toIndentedString(totalRecordCount)).append("\n");
    sb.append("    isGrouped: ").append(toIndentedString(isGrouped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Rows");
    openapiFields.add("Headers");
    openapiFields.add("Groups");
    openapiFields.add("TotalRecordCount");
    openapiFields.add("IsGrouped");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportResult is not found in the empty JSON string", ReportResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Rows") != null && !jsonObj.get("Rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("Rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Rows` to be an array in the JSON string but got `%s`", jsonObj.get("Rows").toString()));
          }

          // validate the optional field `Rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            ReportRow.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      if (jsonObj.get("Headers") != null && !jsonObj.get("Headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("Headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Headers` to be an array in the JSON string but got `%s`", jsonObj.get("Headers").toString()));
          }

          // validate the optional field `Headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            ReportHeader.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if (jsonObj.get("Groups") != null && !jsonObj.get("Groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("Groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Groups` to be an array in the JSON string but got `%s`", jsonObj.get("Groups").toString()));
          }

          // validate the optional field `Groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            ReportGroup.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportResult>() {
           @Override
           public void write(JsonWriter out, ReportResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportResult
   * @throws IOException if the JSON string is invalid with respect to ReportResult
   */
  public static ReportResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportResult.class);
  }

  /**
   * Convert an instance of ReportResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

