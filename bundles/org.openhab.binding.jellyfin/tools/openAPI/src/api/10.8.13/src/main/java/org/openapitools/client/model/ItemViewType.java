/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ItemViewType
 */
@JsonAdapter(ItemViewType.Adapter.class)
public enum ItemViewType {
  
  NONE("None"),
  
  DETAIL("Detail"),
  
  EDIT("Edit"),
  
  LIST("List"),
  
  ITEM_BY_NAME_DETAILS("ItemByNameDetails"),
  
  STATUS_IMAGE("StatusImage"),
  
  EMBEDDED_IMAGE("EmbeddedImage"),
  
  SUBTITLE_IMAGE("SubtitleImage"),
  
  TRAILERS_IMAGE("TrailersImage"),
  
  SPECIALS_IMAGE("SpecialsImage"),
  
  LOCK_DATA_IMAGE("LockDataImage"),
  
  TAGS_PRIMARY_IMAGE("TagsPrimaryImage"),
  
  TAGS_BACKDROP_IMAGE("TagsBackdropImage"),
  
  TAGS_LOGO_IMAGE("TagsLogoImage"),
  
  USER_PRIMARY_IMAGE("UserPrimaryImage");

  private String value;

  ItemViewType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ItemViewType fromValue(String value) {
    for (ItemViewType b : ItemViewType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ItemViewType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ItemViewType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ItemViewType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ItemViewType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ItemViewType.fromValue(value);
  }
}

