/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets HeaderMetadata
 */
@JsonAdapter(HeaderMetadata.Adapter.class)
public enum HeaderMetadata {
  
  NONE("None"),
  
  PATH("Path"),
  
  NAME("Name"),
  
  PREMIERE_DATE("PremiereDate"),
  
  DATE_ADDED("DateAdded"),
  
  RELEASE_DATE("ReleaseDate"),
  
  RUNTIME("Runtime"),
  
  PLAY_COUNT("PlayCount"),
  
  SEASON("Season"),
  
  SEASON_NUMBER("SeasonNumber"),
  
  SERIES("Series"),
  
  NETWORK("Network"),
  
  YEAR("Year"),
  
  PARENTAL_RATING("ParentalRating"),
  
  COMMUNITY_RATING("CommunityRating"),
  
  TRAILERS("Trailers"),
  
  SPECIALS("Specials"),
  
  ALBUM_ARTIST("AlbumArtist"),
  
  ALBUM("Album"),
  
  DISC("Disc"),
  
  TRACK("Track"),
  
  AUDIO("Audio"),
  
  EMBEDDED_IMAGE("EmbeddedImage"),
  
  VIDEO("Video"),
  
  RESOLUTION("Resolution"),
  
  SUBTITLES("Subtitles"),
  
  GENRES("Genres"),
  
  COUNTRIES("Countries"),
  
  STATUS("Status"),
  
  TRACKS("Tracks"),
  
  EPISODE_SERIES("EpisodeSeries"),
  
  EPISODE_SEASON("EpisodeSeason"),
  
  EPISODE_NUMBER("EpisodeNumber"),
  
  AUDIO_ALBUM_ARTIST("AudioAlbumArtist"),
  
  MUSIC_ARTIST("MusicArtist"),
  
  AUDIO_ALBUM("AudioAlbum"),
  
  LOCKED("Locked"),
  
  IMAGE_PRIMARY("ImagePrimary"),
  
  IMAGE_BACKDROP("ImageBackdrop"),
  
  IMAGE_LOGO("ImageLogo"),
  
  ACTOR("Actor"),
  
  STUDIOS("Studios"),
  
  COMPOSER("Composer"),
  
  DIRECTOR("Director"),
  
  GUEST_STAR("GuestStar"),
  
  PRODUCER("Producer"),
  
  WRITER("Writer"),
  
  ARTIST("Artist"),
  
  YEARS("Years"),
  
  PARENTAL_RATINGS("ParentalRatings"),
  
  COMMUNITY_RATINGS("CommunityRatings"),
  
  OVERVIEW("Overview"),
  
  SHORT_OVERVIEW("ShortOverview"),
  
  TYPE("Type"),
  
  DATE("Date"),
  
  USER_PRIMARY_IMAGE("UserPrimaryImage"),
  
  SEVERITY("Severity"),
  
  ITEM("Item"),
  
  USER("User"),
  
  USER_ID("UserId");

  private String value;

  HeaderMetadata(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static HeaderMetadata fromValue(String value) {
    for (HeaderMetadata b : HeaderMetadata.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<HeaderMetadata> {
    @Override
    public void write(final JsonWriter jsonWriter, final HeaderMetadata enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public HeaderMetadata read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return HeaderMetadata.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    HeaderMetadata.fromValue(value);
  }
}

