/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BaseItemKind;
import org.openapitools.client.model.SearchHintResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for get
     * @param searchTerm The search term to filter on. (required)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param userId Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     * @param includeItemTypes If specified, only results with the specified item types are returned. This allows multiple, comma delimeted. (optional)
     * @param excludeItemTypes If specified, results with these item types are filtered out. This allows multiple, comma delimeted. (optional)
     * @param mediaTypes If specified, only results with the specified media types are returned. This allows multiple, comma delimeted. (optional)
     * @param parentId If specified, only children of the parent are returned. (optional)
     * @param isMovie Optional filter for movies. (optional)
     * @param isSeries Optional filter for series. (optional)
     * @param isNews Optional filter for news. (optional)
     * @param isKids Optional filter for kids. (optional)
     * @param isSports Optional filter for sports. (optional)
     * @param includePeople Optional filter whether to include people. (optional, default to true)
     * @param includeMedia Optional filter whether to include media. (optional, default to true)
     * @param includeGenres Optional filter whether to include genres. (optional, default to true)
     * @param includeStudios Optional filter whether to include studios. (optional, default to true)
     * @param includeArtists Optional filter whether to include artists. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search hint returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String searchTerm, Integer startIndex, Integer limit, UUID userId, List<BaseItemKind> includeItemTypes, List<BaseItemKind> excludeItemTypes, List<String> mediaTypes, UUID parentId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, Boolean includePeople, Boolean includeMedia, Boolean includeGenres, Boolean includeStudios, Boolean includeArtists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Search/Hints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (includeItemTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "includeItemTypes", includeItemTypes));
        }

        if (excludeItemTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeItemTypes", excludeItemTypes));
        }

        if (mediaTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mediaTypes", mediaTypes));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (isMovie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMovie", isMovie));
        }

        if (isSeries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSeries", isSeries));
        }

        if (isNews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isNews", isNews));
        }

        if (isKids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isKids", isKids));
        }

        if (isSports != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSports", isSports));
        }

        if (includePeople != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePeople", includePeople));
        }

        if (includeMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMedia", includeMedia));
        }

        if (includeGenres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeGenres", includeGenres));
        }

        if (includeStudios != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStudios", includeStudios));
        }

        if (includeArtists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeArtists", includeArtists));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String searchTerm, Integer startIndex, Integer limit, UUID userId, List<BaseItemKind> includeItemTypes, List<BaseItemKind> excludeItemTypes, List<String> mediaTypes, UUID parentId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, Boolean includePeople, Boolean includeMedia, Boolean includeGenres, Boolean includeStudios, Boolean includeArtists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling get(Async)");
        }

        return getCall(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, _callback);

    }

    /**
     * Gets the search hint result.
     * 
     * @param searchTerm The search term to filter on. (required)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param userId Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     * @param includeItemTypes If specified, only results with the specified item types are returned. This allows multiple, comma delimeted. (optional)
     * @param excludeItemTypes If specified, results with these item types are filtered out. This allows multiple, comma delimeted. (optional)
     * @param mediaTypes If specified, only results with the specified media types are returned. This allows multiple, comma delimeted. (optional)
     * @param parentId If specified, only children of the parent are returned. (optional)
     * @param isMovie Optional filter for movies. (optional)
     * @param isSeries Optional filter for series. (optional)
     * @param isNews Optional filter for news. (optional)
     * @param isKids Optional filter for kids. (optional)
     * @param isSports Optional filter for sports. (optional)
     * @param includePeople Optional filter whether to include people. (optional, default to true)
     * @param includeMedia Optional filter whether to include media. (optional, default to true)
     * @param includeGenres Optional filter whether to include genres. (optional, default to true)
     * @param includeStudios Optional filter whether to include studios. (optional, default to true)
     * @param includeArtists Optional filter whether to include artists. (optional, default to true)
     * @return SearchHintResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search hint returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SearchHintResult get(String searchTerm, Integer startIndex, Integer limit, UUID userId, List<BaseItemKind> includeItemTypes, List<BaseItemKind> excludeItemTypes, List<String> mediaTypes, UUID parentId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, Boolean includePeople, Boolean includeMedia, Boolean includeGenres, Boolean includeStudios, Boolean includeArtists) throws ApiException {
        ApiResponse<SearchHintResult> localVarResp = getWithHttpInfo(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists);
        return localVarResp.getData();
    }

    /**
     * Gets the search hint result.
     * 
     * @param searchTerm The search term to filter on. (required)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param userId Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     * @param includeItemTypes If specified, only results with the specified item types are returned. This allows multiple, comma delimeted. (optional)
     * @param excludeItemTypes If specified, results with these item types are filtered out. This allows multiple, comma delimeted. (optional)
     * @param mediaTypes If specified, only results with the specified media types are returned. This allows multiple, comma delimeted. (optional)
     * @param parentId If specified, only children of the parent are returned. (optional)
     * @param isMovie Optional filter for movies. (optional)
     * @param isSeries Optional filter for series. (optional)
     * @param isNews Optional filter for news. (optional)
     * @param isKids Optional filter for kids. (optional)
     * @param isSports Optional filter for sports. (optional)
     * @param includePeople Optional filter whether to include people. (optional, default to true)
     * @param includeMedia Optional filter whether to include media. (optional, default to true)
     * @param includeGenres Optional filter whether to include genres. (optional, default to true)
     * @param includeStudios Optional filter whether to include studios. (optional, default to true)
     * @param includeArtists Optional filter whether to include artists. (optional, default to true)
     * @return ApiResponse&lt;SearchHintResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search hint returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchHintResult> getWithHttpInfo(String searchTerm, Integer startIndex, Integer limit, UUID userId, List<BaseItemKind> includeItemTypes, List<BaseItemKind> excludeItemTypes, List<String> mediaTypes, UUID parentId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, Boolean includePeople, Boolean includeMedia, Boolean includeGenres, Boolean includeStudios, Boolean includeArtists) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, null);
        Type localVarReturnType = new TypeToken<SearchHintResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the search hint result. (asynchronously)
     * 
     * @param searchTerm The search term to filter on. (required)
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param userId Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     * @param includeItemTypes If specified, only results with the specified item types are returned. This allows multiple, comma delimeted. (optional)
     * @param excludeItemTypes If specified, results with these item types are filtered out. This allows multiple, comma delimeted. (optional)
     * @param mediaTypes If specified, only results with the specified media types are returned. This allows multiple, comma delimeted. (optional)
     * @param parentId If specified, only children of the parent are returned. (optional)
     * @param isMovie Optional filter for movies. (optional)
     * @param isSeries Optional filter for series. (optional)
     * @param isNews Optional filter for news. (optional)
     * @param isKids Optional filter for kids. (optional)
     * @param isSports Optional filter for sports. (optional)
     * @param includePeople Optional filter whether to include people. (optional, default to true)
     * @param includeMedia Optional filter whether to include media. (optional, default to true)
     * @param includeGenres Optional filter whether to include genres. (optional, default to true)
     * @param includeStudios Optional filter whether to include studios. (optional, default to true)
     * @param includeArtists Optional filter whether to include artists. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search hint returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String searchTerm, Integer startIndex, Integer limit, UUID userId, List<BaseItemKind> includeItemTypes, List<BaseItemKind> excludeItemTypes, List<String> mediaTypes, UUID parentId, Boolean isMovie, Boolean isSeries, Boolean isNews, Boolean isKids, Boolean isSports, Boolean includePeople, Boolean includeMedia, Boolean includeGenres, Boolean includeStudios, Boolean includeArtists, final ApiCallback<SearchHintResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, _callback);
        Type localVarReturnType = new TypeToken<SearchHintResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
