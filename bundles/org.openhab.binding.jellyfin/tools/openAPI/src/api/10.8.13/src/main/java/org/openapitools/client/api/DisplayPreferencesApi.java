/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DisplayPreferencesDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisplayPreferencesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisplayPreferencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisplayPreferencesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDisplayPreferences
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User id. (required)
     * @param client Client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Display preferences retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisplayPreferencesCall(String displayPreferencesId, UUID userId, String client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DisplayPreferences/{displayPreferencesId}"
            .replace("{" + "displayPreferencesId" + "}", localVarApiClient.escapeString(displayPreferencesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (client != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client", client));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; profile=CamelCase",
            "application/json; profile=PascalCase"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDisplayPreferencesValidateBeforeCall(String displayPreferencesId, UUID userId, String client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'displayPreferencesId' is set
        if (displayPreferencesId == null) {
            throw new ApiException("Missing the required parameter 'displayPreferencesId' when calling getDisplayPreferences(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getDisplayPreferences(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling getDisplayPreferences(Async)");
        }

        return getDisplayPreferencesCall(displayPreferencesId, userId, client, _callback);

    }

    /**
     * Get Display Preferences.
     * 
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User id. (required)
     * @param client Client. (required)
     * @return DisplayPreferencesDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Display preferences retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DisplayPreferencesDto getDisplayPreferences(String displayPreferencesId, UUID userId, String client) throws ApiException {
        ApiResponse<DisplayPreferencesDto> localVarResp = getDisplayPreferencesWithHttpInfo(displayPreferencesId, userId, client);
        return localVarResp.getData();
    }

    /**
     * Get Display Preferences.
     * 
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User id. (required)
     * @param client Client. (required)
     * @return ApiResponse&lt;DisplayPreferencesDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Display preferences retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisplayPreferencesDto> getDisplayPreferencesWithHttpInfo(String displayPreferencesId, UUID userId, String client) throws ApiException {
        okhttp3.Call localVarCall = getDisplayPreferencesValidateBeforeCall(displayPreferencesId, userId, client, null);
        Type localVarReturnType = new TypeToken<DisplayPreferencesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Display Preferences. (asynchronously)
     * 
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User id. (required)
     * @param client Client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Display preferences retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDisplayPreferencesAsync(String displayPreferencesId, UUID userId, String client, final ApiCallback<DisplayPreferencesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDisplayPreferencesValidateBeforeCall(displayPreferencesId, userId, client, _callback);
        Type localVarReturnType = new TypeToken<DisplayPreferencesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDisplayPreferences
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User Id. (required)
     * @param client Client. (required)
     * @param displayPreferencesDto New Display Preferences object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Display preferences updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDisplayPreferencesCall(String displayPreferencesId, UUID userId, String client, DisplayPreferencesDto displayPreferencesDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = displayPreferencesDto;

        // create path and map variables
        String localVarPath = "/DisplayPreferences/{displayPreferencesId}"
            .replace("{" + "displayPreferencesId" + "}", localVarApiClient.escapeString(displayPreferencesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (client != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client", client));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "CustomAuthentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDisplayPreferencesValidateBeforeCall(String displayPreferencesId, UUID userId, String client, DisplayPreferencesDto displayPreferencesDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'displayPreferencesId' is set
        if (displayPreferencesId == null) {
            throw new ApiException("Missing the required parameter 'displayPreferencesId' when calling updateDisplayPreferences(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateDisplayPreferences(Async)");
        }

        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling updateDisplayPreferences(Async)");
        }

        // verify the required parameter 'displayPreferencesDto' is set
        if (displayPreferencesDto == null) {
            throw new ApiException("Missing the required parameter 'displayPreferencesDto' when calling updateDisplayPreferences(Async)");
        }

        return updateDisplayPreferencesCall(displayPreferencesId, userId, client, displayPreferencesDto, _callback);

    }

    /**
     * Update Display Preferences.
     * 
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User Id. (required)
     * @param client Client. (required)
     * @param displayPreferencesDto New Display Preferences object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Display preferences updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void updateDisplayPreferences(String displayPreferencesId, UUID userId, String client, DisplayPreferencesDto displayPreferencesDto) throws ApiException {
        updateDisplayPreferencesWithHttpInfo(displayPreferencesId, userId, client, displayPreferencesDto);
    }

    /**
     * Update Display Preferences.
     * 
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User Id. (required)
     * @param client Client. (required)
     * @param displayPreferencesDto New Display Preferences object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Display preferences updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateDisplayPreferencesWithHttpInfo(String displayPreferencesId, UUID userId, String client, DisplayPreferencesDto displayPreferencesDto) throws ApiException {
        okhttp3.Call localVarCall = updateDisplayPreferencesValidateBeforeCall(displayPreferencesId, userId, client, displayPreferencesDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Display Preferences. (asynchronously)
     * 
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User Id. (required)
     * @param client Client. (required)
     * @param displayPreferencesDto New Display Preferences object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Display preferences updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDisplayPreferencesAsync(String displayPreferencesId, UUID userId, String client, DisplayPreferencesDto displayPreferencesDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDisplayPreferencesValidateBeforeCall(displayPreferencesId, userId, client, displayPreferencesDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
