/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HeaderMetadata;
import org.openapitools.client.model.ItemViewType;
import org.openapitools.client.model.ReportDisplayType;
import org.openapitools.client.model.ReportFieldType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportHeader
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-26T23:33:44.988406688+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class ReportHeader {
  public static final String SERIALIZED_NAME_HEADER_FIELD_TYPE = "HeaderFieldType";
  @SerializedName(SERIALIZED_NAME_HEADER_FIELD_TYPE)
  @javax.annotation.Nullable
  private ReportFieldType headerFieldType;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_FIELD_NAME = "FieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  @javax.annotation.Nullable
  private HeaderMetadata fieldName;

  public static final String SERIALIZED_NAME_SORT_FIELD = "SortField";
  @SerializedName(SERIALIZED_NAME_SORT_FIELD)
  @javax.annotation.Nullable
  private String sortField;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_ITEM_VIEW_TYPE = "ItemViewType";
  @SerializedName(SERIALIZED_NAME_ITEM_VIEW_TYPE)
  @javax.annotation.Nullable
  private ItemViewType itemViewType;

  public static final String SERIALIZED_NAME_VISIBLE = "Visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  @javax.annotation.Nullable
  private Boolean visible;

  public static final String SERIALIZED_NAME_DISPLAY_TYPE = "DisplayType";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TYPE)
  @javax.annotation.Nullable
  private ReportDisplayType displayType;

  public static final String SERIALIZED_NAME_SHOW_HEADER_LABEL = "ShowHeaderLabel";
  @SerializedName(SERIALIZED_NAME_SHOW_HEADER_LABEL)
  @javax.annotation.Nullable
  private Boolean showHeaderLabel;

  public static final String SERIALIZED_NAME_CAN_GROUP = "CanGroup";
  @SerializedName(SERIALIZED_NAME_CAN_GROUP)
  @javax.annotation.Nullable
  private Boolean canGroup;

  public ReportHeader() {
  }

  public ReportHeader headerFieldType(@javax.annotation.Nullable ReportFieldType headerFieldType) {
    this.headerFieldType = headerFieldType;
    return this;
  }

  /**
   * Get headerFieldType
   * @return headerFieldType
   */
  @javax.annotation.Nullable
  public ReportFieldType getHeaderFieldType() {
    return headerFieldType;
  }

  public void setHeaderFieldType(@javax.annotation.Nullable ReportFieldType headerFieldType) {
    this.headerFieldType = headerFieldType;
  }


  public ReportHeader name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ReportHeader fieldName(@javax.annotation.Nullable HeaderMetadata fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Get fieldName
   * @return fieldName
   */
  @javax.annotation.Nullable
  public HeaderMetadata getFieldName() {
    return fieldName;
  }

  public void setFieldName(@javax.annotation.Nullable HeaderMetadata fieldName) {
    this.fieldName = fieldName;
  }


  public ReportHeader sortField(@javax.annotation.Nullable String sortField) {
    this.sortField = sortField;
    return this;
  }

  /**
   * Get sortField
   * @return sortField
   */
  @javax.annotation.Nullable
  public String getSortField() {
    return sortField;
  }

  public void setSortField(@javax.annotation.Nullable String sortField) {
    this.sortField = sortField;
  }


  public ReportHeader type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ReportHeader itemViewType(@javax.annotation.Nullable ItemViewType itemViewType) {
    this.itemViewType = itemViewType;
    return this;
  }

  /**
   * Get itemViewType
   * @return itemViewType
   */
  @javax.annotation.Nullable
  public ItemViewType getItemViewType() {
    return itemViewType;
  }

  public void setItemViewType(@javax.annotation.Nullable ItemViewType itemViewType) {
    this.itemViewType = itemViewType;
  }


  public ReportHeader visible(@javax.annotation.Nullable Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(@javax.annotation.Nullable Boolean visible) {
    this.visible = visible;
  }


  public ReportHeader displayType(@javax.annotation.Nullable ReportDisplayType displayType) {
    this.displayType = displayType;
    return this;
  }

  /**
   * Get displayType
   * @return displayType
   */
  @javax.annotation.Nullable
  public ReportDisplayType getDisplayType() {
    return displayType;
  }

  public void setDisplayType(@javax.annotation.Nullable ReportDisplayType displayType) {
    this.displayType = displayType;
  }


  public ReportHeader showHeaderLabel(@javax.annotation.Nullable Boolean showHeaderLabel) {
    this.showHeaderLabel = showHeaderLabel;
    return this;
  }

  /**
   * Get showHeaderLabel
   * @return showHeaderLabel
   */
  @javax.annotation.Nullable
  public Boolean getShowHeaderLabel() {
    return showHeaderLabel;
  }

  public void setShowHeaderLabel(@javax.annotation.Nullable Boolean showHeaderLabel) {
    this.showHeaderLabel = showHeaderLabel;
  }


  public ReportHeader canGroup(@javax.annotation.Nullable Boolean canGroup) {
    this.canGroup = canGroup;
    return this;
  }

  /**
   * Get canGroup
   * @return canGroup
   */
  @javax.annotation.Nullable
  public Boolean getCanGroup() {
    return canGroup;
  }

  public void setCanGroup(@javax.annotation.Nullable Boolean canGroup) {
    this.canGroup = canGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportHeader reportHeader = (ReportHeader) o;
    return Objects.equals(this.headerFieldType, reportHeader.headerFieldType) &&
        Objects.equals(this.name, reportHeader.name) &&
        Objects.equals(this.fieldName, reportHeader.fieldName) &&
        Objects.equals(this.sortField, reportHeader.sortField) &&
        Objects.equals(this.type, reportHeader.type) &&
        Objects.equals(this.itemViewType, reportHeader.itemViewType) &&
        Objects.equals(this.visible, reportHeader.visible) &&
        Objects.equals(this.displayType, reportHeader.displayType) &&
        Objects.equals(this.showHeaderLabel, reportHeader.showHeaderLabel) &&
        Objects.equals(this.canGroup, reportHeader.canGroup);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(headerFieldType, name, fieldName, sortField, type, itemViewType, visible, displayType, showHeaderLabel, canGroup);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportHeader {\n");
    sb.append("    headerFieldType: ").append(toIndentedString(headerFieldType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    sortField: ").append(toIndentedString(sortField)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    itemViewType: ").append(toIndentedString(itemViewType)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    displayType: ").append(toIndentedString(displayType)).append("\n");
    sb.append("    showHeaderLabel: ").append(toIndentedString(showHeaderLabel)).append("\n");
    sb.append("    canGroup: ").append(toIndentedString(canGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HeaderFieldType");
    openapiFields.add("Name");
    openapiFields.add("FieldName");
    openapiFields.add("SortField");
    openapiFields.add("Type");
    openapiFields.add("ItemViewType");
    openapiFields.add("Visible");
    openapiFields.add("DisplayType");
    openapiFields.add("ShowHeaderLabel");
    openapiFields.add("CanGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportHeader
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportHeader is not found in the empty JSON string", ReportHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HeaderFieldType`
      if (jsonObj.get("HeaderFieldType") != null && !jsonObj.get("HeaderFieldType").isJsonNull()) {
        ReportFieldType.validateJsonElement(jsonObj.get("HeaderFieldType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `FieldName`
      if (jsonObj.get("FieldName") != null && !jsonObj.get("FieldName").isJsonNull()) {
        HeaderMetadata.validateJsonElement(jsonObj.get("FieldName"));
      }
      if ((jsonObj.get("SortField") != null && !jsonObj.get("SortField").isJsonNull()) && !jsonObj.get("SortField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SortField").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `ItemViewType`
      if (jsonObj.get("ItemViewType") != null && !jsonObj.get("ItemViewType").isJsonNull()) {
        ItemViewType.validateJsonElement(jsonObj.get("ItemViewType"));
      }
      // validate the optional field `DisplayType`
      if (jsonObj.get("DisplayType") != null && !jsonObj.get("DisplayType").isJsonNull()) {
        ReportDisplayType.validateJsonElement(jsonObj.get("DisplayType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportHeader>() {
           @Override
           public void write(JsonWriter out, ReportHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportHeader given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportHeader
   * @throws IOException if the JSON string is invalid with respect to ReportHeader
   */
  public static ReportHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportHeader.class);
  }

  /**
   * Convert an instance of ReportHeader to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

