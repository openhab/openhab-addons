/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ReportIncludeItemTypes;
import org.openapitools.client.model.ReportItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-26T23:33:44.988406688+01:00[Europe/Zurich]", comments = "Generator version: 7.10.0")
public class ReportRow {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_HAS_IMAGE_TAGS_BACKDROP = "HasImageTagsBackdrop";
  @SerializedName(SERIALIZED_NAME_HAS_IMAGE_TAGS_BACKDROP)
  @javax.annotation.Nullable
  private Boolean hasImageTagsBackdrop;

  public static final String SERIALIZED_NAME_HAS_IMAGE_TAGS_PRIMARY = "HasImageTagsPrimary";
  @SerializedName(SERIALIZED_NAME_HAS_IMAGE_TAGS_PRIMARY)
  @javax.annotation.Nullable
  private Boolean hasImageTagsPrimary;

  public static final String SERIALIZED_NAME_HAS_IMAGE_TAGS_LOGO = "HasImageTagsLogo";
  @SerializedName(SERIALIZED_NAME_HAS_IMAGE_TAGS_LOGO)
  @javax.annotation.Nullable
  private Boolean hasImageTagsLogo;

  public static final String SERIALIZED_NAME_HAS_LOCAL_TRAILER = "HasLocalTrailer";
  @SerializedName(SERIALIZED_NAME_HAS_LOCAL_TRAILER)
  @javax.annotation.Nullable
  private Boolean hasLocalTrailer;

  public static final String SERIALIZED_NAME_HAS_LOCK_DATA = "HasLockData";
  @SerializedName(SERIALIZED_NAME_HAS_LOCK_DATA)
  @javax.annotation.Nullable
  private Boolean hasLockData;

  public static final String SERIALIZED_NAME_HAS_EMBEDDED_IMAGE = "HasEmbeddedImage";
  @SerializedName(SERIALIZED_NAME_HAS_EMBEDDED_IMAGE)
  @javax.annotation.Nullable
  private Boolean hasEmbeddedImage;

  public static final String SERIALIZED_NAME_HAS_SUBTITLES = "HasSubtitles";
  @SerializedName(SERIALIZED_NAME_HAS_SUBTITLES)
  @javax.annotation.Nullable
  private Boolean hasSubtitles;

  public static final String SERIALIZED_NAME_HAS_SPECIALS = "HasSpecials";
  @SerializedName(SERIALIZED_NAME_HAS_SPECIALS)
  @javax.annotation.Nullable
  private Boolean hasSpecials;

  public static final String SERIALIZED_NAME_COLUMNS = "Columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  @javax.annotation.Nullable
  private List<ReportItem> columns;

  public static final String SERIALIZED_NAME_ROW_TYPE = "RowType";
  @SerializedName(SERIALIZED_NAME_ROW_TYPE)
  @javax.annotation.Nullable
  private ReportIncludeItemTypes rowType;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private UUID userId;

  public ReportRow() {
  }

  public ReportRow id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ReportRow hasImageTagsBackdrop(@javax.annotation.Nullable Boolean hasImageTagsBackdrop) {
    this.hasImageTagsBackdrop = hasImageTagsBackdrop;
    return this;
  }

  /**
   * Get hasImageTagsBackdrop
   * @return hasImageTagsBackdrop
   */
  @javax.annotation.Nullable
  public Boolean getHasImageTagsBackdrop() {
    return hasImageTagsBackdrop;
  }

  public void setHasImageTagsBackdrop(@javax.annotation.Nullable Boolean hasImageTagsBackdrop) {
    this.hasImageTagsBackdrop = hasImageTagsBackdrop;
  }


  public ReportRow hasImageTagsPrimary(@javax.annotation.Nullable Boolean hasImageTagsPrimary) {
    this.hasImageTagsPrimary = hasImageTagsPrimary;
    return this;
  }

  /**
   * Get hasImageTagsPrimary
   * @return hasImageTagsPrimary
   */
  @javax.annotation.Nullable
  public Boolean getHasImageTagsPrimary() {
    return hasImageTagsPrimary;
  }

  public void setHasImageTagsPrimary(@javax.annotation.Nullable Boolean hasImageTagsPrimary) {
    this.hasImageTagsPrimary = hasImageTagsPrimary;
  }


  public ReportRow hasImageTagsLogo(@javax.annotation.Nullable Boolean hasImageTagsLogo) {
    this.hasImageTagsLogo = hasImageTagsLogo;
    return this;
  }

  /**
   * Get hasImageTagsLogo
   * @return hasImageTagsLogo
   */
  @javax.annotation.Nullable
  public Boolean getHasImageTagsLogo() {
    return hasImageTagsLogo;
  }

  public void setHasImageTagsLogo(@javax.annotation.Nullable Boolean hasImageTagsLogo) {
    this.hasImageTagsLogo = hasImageTagsLogo;
  }


  public ReportRow hasLocalTrailer(@javax.annotation.Nullable Boolean hasLocalTrailer) {
    this.hasLocalTrailer = hasLocalTrailer;
    return this;
  }

  /**
   * Get hasLocalTrailer
   * @return hasLocalTrailer
   */
  @javax.annotation.Nullable
  public Boolean getHasLocalTrailer() {
    return hasLocalTrailer;
  }

  public void setHasLocalTrailer(@javax.annotation.Nullable Boolean hasLocalTrailer) {
    this.hasLocalTrailer = hasLocalTrailer;
  }


  public ReportRow hasLockData(@javax.annotation.Nullable Boolean hasLockData) {
    this.hasLockData = hasLockData;
    return this;
  }

  /**
   * Get hasLockData
   * @return hasLockData
   */
  @javax.annotation.Nullable
  public Boolean getHasLockData() {
    return hasLockData;
  }

  public void setHasLockData(@javax.annotation.Nullable Boolean hasLockData) {
    this.hasLockData = hasLockData;
  }


  public ReportRow hasEmbeddedImage(@javax.annotation.Nullable Boolean hasEmbeddedImage) {
    this.hasEmbeddedImage = hasEmbeddedImage;
    return this;
  }

  /**
   * Get hasEmbeddedImage
   * @return hasEmbeddedImage
   */
  @javax.annotation.Nullable
  public Boolean getHasEmbeddedImage() {
    return hasEmbeddedImage;
  }

  public void setHasEmbeddedImage(@javax.annotation.Nullable Boolean hasEmbeddedImage) {
    this.hasEmbeddedImage = hasEmbeddedImage;
  }


  public ReportRow hasSubtitles(@javax.annotation.Nullable Boolean hasSubtitles) {
    this.hasSubtitles = hasSubtitles;
    return this;
  }

  /**
   * Get hasSubtitles
   * @return hasSubtitles
   */
  @javax.annotation.Nullable
  public Boolean getHasSubtitles() {
    return hasSubtitles;
  }

  public void setHasSubtitles(@javax.annotation.Nullable Boolean hasSubtitles) {
    this.hasSubtitles = hasSubtitles;
  }


  public ReportRow hasSpecials(@javax.annotation.Nullable Boolean hasSpecials) {
    this.hasSpecials = hasSpecials;
    return this;
  }

  /**
   * Get hasSpecials
   * @return hasSpecials
   */
  @javax.annotation.Nullable
  public Boolean getHasSpecials() {
    return hasSpecials;
  }

  public void setHasSpecials(@javax.annotation.Nullable Boolean hasSpecials) {
    this.hasSpecials = hasSpecials;
  }


  public ReportRow columns(@javax.annotation.Nullable List<ReportItem> columns) {
    this.columns = columns;
    return this;
  }

  public ReportRow addColumnsItem(ReportItem columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public List<ReportItem> getColumns() {
    return columns;
  }

  public void setColumns(@javax.annotation.Nullable List<ReportItem> columns) {
    this.columns = columns;
  }


  public ReportRow rowType(@javax.annotation.Nullable ReportIncludeItemTypes rowType) {
    this.rowType = rowType;
    return this;
  }

  /**
   * Get rowType
   * @return rowType
   */
  @javax.annotation.Nullable
  public ReportIncludeItemTypes getRowType() {
    return rowType;
  }

  public void setRowType(@javax.annotation.Nullable ReportIncludeItemTypes rowType) {
    this.rowType = rowType;
  }


  public ReportRow userId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportRow reportRow = (ReportRow) o;
    return Objects.equals(this.id, reportRow.id) &&
        Objects.equals(this.hasImageTagsBackdrop, reportRow.hasImageTagsBackdrop) &&
        Objects.equals(this.hasImageTagsPrimary, reportRow.hasImageTagsPrimary) &&
        Objects.equals(this.hasImageTagsLogo, reportRow.hasImageTagsLogo) &&
        Objects.equals(this.hasLocalTrailer, reportRow.hasLocalTrailer) &&
        Objects.equals(this.hasLockData, reportRow.hasLockData) &&
        Objects.equals(this.hasEmbeddedImage, reportRow.hasEmbeddedImage) &&
        Objects.equals(this.hasSubtitles, reportRow.hasSubtitles) &&
        Objects.equals(this.hasSpecials, reportRow.hasSpecials) &&
        Objects.equals(this.columns, reportRow.columns) &&
        Objects.equals(this.rowType, reportRow.rowType) &&
        Objects.equals(this.userId, reportRow.userId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hasImageTagsBackdrop, hasImageTagsPrimary, hasImageTagsLogo, hasLocalTrailer, hasLockData, hasEmbeddedImage, hasSubtitles, hasSpecials, columns, rowType, userId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportRow {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hasImageTagsBackdrop: ").append(toIndentedString(hasImageTagsBackdrop)).append("\n");
    sb.append("    hasImageTagsPrimary: ").append(toIndentedString(hasImageTagsPrimary)).append("\n");
    sb.append("    hasImageTagsLogo: ").append(toIndentedString(hasImageTagsLogo)).append("\n");
    sb.append("    hasLocalTrailer: ").append(toIndentedString(hasLocalTrailer)).append("\n");
    sb.append("    hasLockData: ").append(toIndentedString(hasLockData)).append("\n");
    sb.append("    hasEmbeddedImage: ").append(toIndentedString(hasEmbeddedImage)).append("\n");
    sb.append("    hasSubtitles: ").append(toIndentedString(hasSubtitles)).append("\n");
    sb.append("    hasSpecials: ").append(toIndentedString(hasSpecials)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    rowType: ").append(toIndentedString(rowType)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("HasImageTagsBackdrop");
    openapiFields.add("HasImageTagsPrimary");
    openapiFields.add("HasImageTagsLogo");
    openapiFields.add("HasLocalTrailer");
    openapiFields.add("HasLockData");
    openapiFields.add("HasEmbeddedImage");
    openapiFields.add("HasSubtitles");
    openapiFields.add("HasSpecials");
    openapiFields.add("Columns");
    openapiFields.add("RowType");
    openapiFields.add("UserId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportRow is not found in the empty JSON string", ReportRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (jsonObj.get("Columns") != null && !jsonObj.get("Columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("Columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Columns` to be an array in the JSON string but got `%s`", jsonObj.get("Columns").toString()));
          }

          // validate the optional field `Columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            ReportItem.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      // validate the optional field `RowType`
      if (jsonObj.get("RowType") != null && !jsonObj.get("RowType").isJsonNull()) {
        ReportIncludeItemTypes.validateJsonElement(jsonObj.get("RowType"));
      }
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportRow>() {
           @Override
           public void write(JsonWriter out, ReportRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportRow
   * @throws IOException if the JSON string is invalid with respect to ReportRow
   */
  public static ReportRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportRow.class);
  }

  /**
   * Convert an instance of ReportRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

