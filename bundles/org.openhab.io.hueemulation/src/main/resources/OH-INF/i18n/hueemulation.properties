# add-on

addon.hueemulation.name = Hue Emulation
addon.hueemulation.description = Exposes openHAB as Hue Devices.

io.config.hueemulation.createNewUserOnEveryEndpoint.label = Pairing: Add Unknown User-keys
io.config.hueemulation.createNewUserOnEveryEndpoint.description = Set this option to create new users on the fly during the next pairing mode period. This helps with Amazon Echo device discovery. This option is automatically switched off after the timeout.
io.config.hueemulation.discoveryHttpPort.label = Optional Discovery Web Port
io.config.hueemulation.discoveryHttpPort.description = Some Hue applications require a different port (80) then what openHAB runs on by default (8080). This option will only advertise a different port then what we are listening on. Useful if you have an iptables rule redirect traffic from this port to the openHAB port.
io.config.hueemulation.discoveryIp.label = Optional Discovery Address
io.config.hueemulation.discoveryIp.description = If your host has multiple IP addresses you may specify the IP(s) you would like to advertise in the UPNP discovery process. You may safely leave this empty on most systems. Use commas to separate multiple entries.
io.config.hueemulation.ignoreItemsWithTags.label = Ignore Items by Tag
io.config.hueemulation.ignoreItemsWithTags.description = All items that are tagged with the given tags are ignore by the Hue Emulation Service. Use commas to separate multiple entries.
io.config.hueemulation.pairingEnabled.label = Device Pairing
io.config.hueemulation.pairingEnabled.description = Pairing must be enabled to connect a new device. Pairing is automatically disabled after the configured pairing time (usually 60 seconds).
io.config.hueemulation.pairingTimeout.label = Pairing Timeout
io.config.hueemulation.pairingTimeout.description = Pairing is automatically disabled after the given time in seconds.
io.config.hueemulation.permanentV1bridge.label = Permanently Emulate V1 Hue Bridge
io.config.hueemulation.permanentV1bridge.description = There is no obvious reason to not emulate the newer bridge all the time, but here is the option if you want the old (round Hue bridge) to be emulated.
io.config.hueemulation.restrictToTagsColorLights.label = Color Item Tags
io.config.hueemulation.restrictToTagsColorLights.description = The HUE emulation can either publish all Color items if this is set to an empty string or filter items by tags. Use commas to separate multiple entries.
io.config.hueemulation.restrictToTagsSwitches.label = Switch Item Tags
io.config.hueemulation.restrictToTagsSwitches.description = The HUE emulation can either publish Switch items if this is set to an empty string or filter items by tags. Use commas to separate multiple entries.
io.config.hueemulation.restrictToTagsWhiteLights.label = White Item Tags
io.config.hueemulation.restrictToTagsWhiteLights.description = The HUE emulation can either publish all Dimmer items if this is set to an empty string or filter items by tags. Use commas to separate multiple entries.
io.config.hueemulation.temporarilyEmulateV1bridge.label = Pairing: Temporarily Emulate V1 Hue Bridge
io.config.hueemulation.temporarilyEmulateV1bridge.description = Some Amazon Echos only support V1 bridges (round hardware bridge). This option is only active during discovery and automatically switched off after the timeout.
io.config.hueemulation.uuid.label = Unique Bridge ID
io.config.hueemulation.uuid.description = Each Hue bridge has a universal unique id (UUID) assigned. This is random generated if no value has been assigned. Note on Amazon Alexa Echo devices: It might help to change the UUID after you have changed item ids. The Echos will recognize this service as a new bridge.

# hue.ruleCondition

module-type.hue.ruleCondition.label = A condition especially for Hue rules
module-type.hue.ruleCondition.description = Depending on the operator and item state this condition will be satisfied or not
module-type.hue.ruleCondition.config.operator.label = Operator
module-type.hue.ruleCondition.config.operator.description = The operator that compares either the hue bridge time or a light/sensor state with a given static value
module-type.hue.ruleCondition.config.operator.option.eq = Equal
module-type.hue.ruleCondition.config.operator.option.gt = Greater than
module-type.hue.ruleCondition.config.operator.option.lt = Lower than
module-type.hue.ruleCondition.config.operator.option.dx = On item state change
module-type.hue.ruleCondition.config.operator.option.ddx = On item state change, delayed
module-type.hue.ruleCondition.config.operator.option.stable = Item has been updated but did not change
module-type.hue.ruleCondition.config.operator.option.not_stable = Item has been updated and has changed
module-type.hue.ruleCondition.config.operator.option.in = The current time is in range of the given time
module-type.hue.ruleCondition.config.operator.option.not_in = The current time is NOT in range of the given time
module-type.hue.ruleCondition.config.address.label = Hue link address
module-type.hue.ruleCondition.config.address.description = A hue local link address like /sensors/2/state/buttonevent or /config/localtime
module-type.hue.ruleCondition.config.value.label = An optional compare value
module-type.hue.ruleCondition.config.value.description = Only valid for eq,lg,lt operators and a number or boolean item type or in,not_in. For the later it must be in the format of W127/T12:12:12/T14:00:00 describing the valid weekdays (binary encoded), the start time and stop time.

# rules.HttpAction

module-type.rules.HttpAction.label = Remove rule
module-type.rules.HttpAction.description = Removes a rule permanently
module-type.rules.HttpAction.config.method.label = Http method
module-type.rules.HttpAction.config.method.description = The http method to be used
module-type.rules.HttpAction.config.method.option.GET = GET
module-type.rules.HttpAction.config.method.option.POST = POST
module-type.rules.HttpAction.config.method.option.PUT = PUT
module-type.rules.HttpAction.config.method.option.HEAD = HEAD
module-type.rules.HttpAction.config.method.option.DELETE = DELETE
module-type.rules.HttpAction.config.url.label = URL
module-type.rules.HttpAction.config.url.description = The url that the http request should be done on. Can be a relative one, starting with '/'. For example '/api/foo/bar'
module-type.rules.HttpAction.config.body.label = Data
module-type.rules.HttpAction.config.body.description = For post and put request you can send data with the request
module-type.rules.HttpAction.config.mimetype.label = Mimetype
module-type.rules.HttpAction.config.mimetype.description = For post and put request you can send data with the request. Set the mimetype of that date here.
module-type.rules.HttpAction.config.mimetype.option.text/plain = Text
module-type.rules.HttpAction.config.mimetype.option.application/json = Json
module-type.rules.HttpAction.config.mimetype.option.application/xml = XML
module-type.rules.HttpAction.config.mimetype.option.application/octet-stream = Binary
module-type.rules.HttpAction.config.timeout.label = Timeout in sec
module-type.rules.HttpAction.config.timeout.description = The timeout of this request in seconds.

# rules.RemoveRuleAction

module-type.rules.RemoveRuleAction.label = Remove rule
module-type.rules.RemoveRuleAction.description = Removes a rule permanently
module-type.rules.RemoveRuleAction.config.removeuid.label = Rule
module-type.rules.RemoveRuleAction.config.removeuid.description = The rule that should be removed

# timer.AbsoluteDateTimeTrigger

module-type.timer.AbsoluteDateTimeTrigger.label = Absolute date/time Trigger
module-type.timer.AbsoluteDateTimeTrigger.description = This triggers a rule based on a fixed date/time
module-type.timer.AbsoluteDateTimeTrigger.config.date.label = Date
module-type.timer.AbsoluteDateTimeTrigger.config.date.description = A date with the pattern yyyy-mm-dd
module-type.timer.AbsoluteDateTimeTrigger.config.time.label = Time
module-type.timer.AbsoluteDateTimeTrigger.config.time.description = A time with the pattern hh:mm:ss
module-type.timer.AbsoluteDateTimeTrigger.config.randomizeTime.label = Randomized Time bound
module-type.timer.AbsoluteDateTimeTrigger.config.randomizeTime.description = An upper time bound with the pattern hh:mm:ss. If this is given, the trigger triggers on a random time between Time and Randomized Time

# timer.TimerTrigger

module-type.timer.TimerTrigger.label = Timer Trigger
module-type.timer.TimerTrigger.description = This triggers a rule based on a timer
module-type.timer.TimerTrigger.config.time.label = Duration
module-type.timer.TimerTrigger.config.time.description = A duration before this timer expires with the pattern hh:mm:ss. The shortest duration is therefore 1 second, the longest is 99 hours.
module-type.timer.TimerTrigger.config.randomizeTime.label = Duration Upper Bound
module-type.timer.TimerTrigger.config.randomizeTime.description = An optional upper bound duration before this timer expires with the pattern hh:mm:ss. A random duration between Duration and Duration Upper Bound will be chosen.
module-type.timer.TimerTrigger.config.repeat.label = Repeat
module-type.timer.TimerTrigger.config.repeat.description = You can make this timer a recurring timer by setting a value above 1. The default is 1. If you set a value below 0 like -1 this timer will be repeated indefinitely
