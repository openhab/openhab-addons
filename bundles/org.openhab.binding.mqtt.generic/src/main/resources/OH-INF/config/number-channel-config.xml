<?xml version="1.0" encoding="UTF-8"?>
<config-description:config-descriptions
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:config-description="https://openhab.org/schemas/config-description/v1.0.0"
	xsi:schemaLocation="https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd">

	<config-description uri="thing-type:mqtt:number_channel">
		<parameter-group name="transformations">
			<label>Transform Values</label>
			<description>These configuration parameters allow you to alter a value before it is published to MQTT or before a
				received value is assigned to an item.</description>
			<advanced>true</advanced>
		</parameter-group>

		<parameter name="stateTopic" type="text">
			<label>MQTT State Topic</label>
			<description>An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the
				channel will be state-less command-only channel.</description>
		</parameter>
		<parameter name="commandTopic" type="text">
			<label>MQTT Command Topic</label>
			<description>An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.</description>
		</parameter>
		<parameter name="transformationPattern" type="text" groupName="transformations">
			<label>Incoming Value Transformations</label>
			<description><![CDATA[
			Applies transformations to an incoming MQTT topic value.
			A transformation example for a received JSON would be "JSONPATH:$.device.status.temperature" for
			a json {device: {status: { temperature: 23.2 }}}.

			You can chain transformations by separating them with the intersection character ∩.
			]]></description>
			<advanced>true</advanced>
		</parameter>
		<parameter name="transformationPatternOut" type="text" groupName="transformations">
			<label>Outgoing Value Transformation</label>
			<description><![CDATA[
			Applies a transformation before publishing a MQTT topic value.

			Transformations are specialised in extracting a value, but some transformations like
			the MAP one could be useful.
			]]></description>
			<advanced>true</advanced>
		</parameter>
		<parameter name="formatBeforePublish" type="text" groupName="transformations">
			<label>Outgoing Value Format</label>
			<description><![CDATA[
			Format a value before it is published to the MQTT broker.
			The default is to just pass the channel/item state.

			If you want to apply a prefix, say "MYCOLOR,", you would use "MYCOLOR,%s".
			If you want to adjust the precision of a number to for example 4 digits, you would use "%.4f".
			]]></description>
			<advanced>true</advanced>
			<default>%s</default>
		</parameter>
		<parameter name="qos" type="integer" min="0" max="2" required="false">
			<label>QoS</label>
			<description>MQTT QoS of this channel (0, 1, 2). Default is QoS of the broker connection.</description>
			<options>
				<option value="0">At most once (best effort delivery "fire and forget")</option>
				<option value="1">At least once (guaranteed that a message will be delivered at least once)</option>
				<option value="2">Exactly once (guarantees that each message is received only once by the counterpart)</option>
			</options>
			<advanced>true</advanced>
		</parameter>
		<parameter name="retained" type="boolean">
			<label>Retained</label>
			<description>The value will be published to the command topic as retained message. A retained value stays on the
				broker and can even be seen by MQTT clients that are subscribing at a later point in time.</description>
			<default>false</default>
			<advanced>true</advanced>
		</parameter>
		<parameter name="postCommand" type="boolean">
			<label>Is Command</label>
			<description>If the received MQTT value should not only update the state of linked items, but command them, enable
				this option. Note that if the value is NaN (interpreted as UNDEF), it can only update; commands are not possible.</description>
			<default>false</default>
			<advanced>true</advanced>
		</parameter>

		<parameter name="min" type="decimal">
			<label>Absolute Minimum</label>
			<description>This configuration represents the minimum of the allowed range. For a percentage channel that equals
				zero percent.</description>
		</parameter>
		<parameter name="max" type="decimal">
			<label>Absolute Maximum</label>
			<description>This configuration represents the maximum of the allowed range. For a percentage channel that equals
				one-hundred percent.</description>
		</parameter>
		<parameter name="step" type="decimal">
			<label>Delta Value</label>
			<description>A number/dimmer channel can receive INCREASE/DECREASE commands and computes the target number by adding
				or subtracting this delta value.</description>
			<default>1.0</default>
			<advanced>true</advanced>
		</parameter>
		<parameter name="unit" type="text">
			<label>Unit Of Measurement</label>
			<description>Unit of measurement (optional). The unit is used for representing the value in the GUI as well as for
				converting incoming values (like from '°F' to '°C'). Examples: "°C", "°F"</description>
			<advanced>true</advanced>
		</parameter>
	</config-description>
</config-description:config-descriptions>
