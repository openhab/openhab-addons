<thing:thing-descriptions bindingId="modbus"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:thing="https://openhab.org/schemas/thing-description/v1.0.0"
	xsi:schemaLocation="https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd">
	<thing-type id="data">
		<supported-bridge-type-refs>
			<bridge-type-ref id="poller"/>
			<bridge-type-ref id="tcp"/>
			<bridge-type-ref id="serial"/>
		</supported-bridge-type-refs>
		<label>Modbus Data</label>
		<description>Data thing extracts values from binary data received from Modbus slave. Similarly, it is responsible of
			translating openHAB commands to Modbus write requests</description>
		<channels>
			<channel id="number" typeId="number-type"/>
			<channel id="switch" typeId="switch-type"/>
			<channel id="contact" typeId="contact-type"/>
			<channel id="dimmer" typeId="dimmer-type"/>
			<channel id="datetime" typeId="datetime-type"/>
			<channel id="string" typeId="string-type"/>
			<channel id="rollershutter" typeId="rollershutter-type"/>
			<channel id="lastReadSuccess" typeId="last-successful-read-type"/>
			<channel id="lastReadError" typeId="last-erroring-read-type"/>
			<channel id="lastWriteSuccess" typeId="last-successful-write-type"/>
			<channel id="lastWriteError" typeId="last-erroring-write-type"/>
		</channels>
		<config-description>
			<!-- what to read -->
			<parameter name="readStart" type="text" pattern="^(0|[0-9][0-9]*(\.[0-9]{1,2})?)?$">
				<label>Read Address</label>
				<description><![CDATA[Start address to start reading the value. Use empty for write-only things.
				<br />
				<br />Input as zero-based index number, e.g. in place of 400001 (first holding register), use the address 0.  Must be between (poller start) and (poller start + poller length - 1) (inclusive).
				<br />
				<br />With registers and value type less than 16 bits, you must use X.Y format where Y specifies the sub-element to read from the 16 bit register:
				<ul>
					<li>For example, 3.1 would mean pick second bit from register index 3 with bit value type. </li>
					<li>With int8 valuetype, it would pick the high byte of register index 3.</li>
				</ul>
				]]>
				</description>
			</parameter>
			<parameter name="readTransform" type="text" multiple="true">
				<label>Read Transform</label>
				<description><![CDATA[Transformation to apply to polled data, after it has been converted to number using readValueType
	<br /><br />Use "default" to communicate that no transformation is done and value should be passed as is.
	<br />Use SERVICENAME(ARG) or SERVICENAME:ARG to use transformation service.
	<br />Any other value than the above types will be interpreted as static text, in which case the actual content of the polled
		value is ignored.
	<br />Multiple transformations can be chained by listing each transformation on a separate line,
	or by concatenating them with "∩", for example SERVICE1(ARG1)∩SERVICE2(ARG2)]]></description>
				<default>default</default>
			</parameter>
			<parameter name="readValueType" type="text">
				<label>Read Value Type</label>
				<description><![CDATA[How data is read from modbus. Use empty for write-only things.

				<br /><br />With registers all value types are applicable.]]></description>
				<options>
					<option value="int64">64bit signed integer (int64)</option>
					<option value="uint64">64bit unsigned integer (uint64)</option>
					<option value="int64_swap">64bit signed integer, 16bit words in reverse order (dcba) (int64_swap)</option>
					<option value="uint64_swap">64bit unsigned integer, 16bit words in reverse order (dcba) (uint64_swap)</option>

					<option value="float32">32bit floating point (float32)</option>
					<option value="float32_swap">32bit floating point, 16bit words swapped (float32_swap)</option>

					<option value="int32">32bit signed integer (int32)</option>
					<option value="uint32">32bit unsigned integer (uint32)</option>
					<option value="int32_swap">32bit signed integer, 16bit words swapped (int32_swap)</option>
					<option value="uint32_swap">32bit unsigned integer, 16bit words swapped (uint32_swap)</option>

					<option value="int16">16bit signed integer (int16)</option>
					<option value="uint16">16bit unsigned integer (uint16)</option>

					<option value="int8">8bit signed integer (int8)</option>
					<option value="uint8">8bit unsigned integer (uint8)</option>

					<option value="bit">individual bit (bit)</option>
				</options>
			</parameter>
			<parameter name="writeStart" type="text">
				<label>Write Address</label>
				<description><![CDATA[Start address of the first holding register or coil in the write. Use empty for read-only things.
				<br />Use zero based address, e.g. in place of 400001 (first holding register), use the address 0. This address is passed to data frame as is.
				<br />One can write individual bits of a register using X.Y format where X is the register and Y is the bit (0 refers to least significant bit).
				]]></description>
			</parameter>
			<parameter name="writeType" type="text">
				<label>Write Type</label>
				<description><![CDATA[Type of data to write. Leave empty for read-only things.
				<br />
				<br />
				Coil uses function code (FC) FC05 or FC15. Holding register uses FC06 or FC16. See writeMultipleEvenWithSingleRegisterOrCoil parameter.]]></description>
				<options>
					<option value="coil">coil, or digital out (DO)</option>
					<option value="holding">holding register</option>
				</options>
			</parameter>
			<parameter name="writeTransform" type="text" multiple="true">
				<label>Write Transform</label>
				<description><![CDATA[Transformation to apply to received commands.
	<br /><br />Use "default" to communicate that no transformation is done and value should be passed as is.
	<br />Use SERVICENAME(ARG) or SERVICENAME:ARG to use transformation service.
	<br />Any other value than the above types will be interpreted as static text, in which case the actual content of the command
	value is ignored.
	<br />Multiple transformations can be chained by listing each transformation on a separate line,
	or by concatenating them with "∩", for example SERVICE1(ARG1)∩SERVICE2(ARG2)]]></description>
				<default>default</default>
			</parameter>
			<parameter name="writeValueType" type="text">
				<label>Write Value Type</label>
				<description><![CDATA[How data is written to modbus. Only applicable to registers, you can leave this undefined for coil.
				<br /><br />Negative integers are encoded with two's complement, while positive integers are encoded as is.
				]]>
				</description>
				<options>
					<option value="int64">64bit positive or negative integer, 4 registers (int64, uint64)</option>
					<option value="int64_swap">64bit positive or negative integer, 4 registers but with 16bit words/registers in reverse
						order (dcba)
						(int64_swap, uint64_swap)</option>
					<option value="float32">32bit floating point (float32)</option>
					<option value="float32_swap">32bit floating point, 16bit words swapped (float32_swap)</option>
					<option value="int32">32bit positive or negative integer, 2 registers (int32, uint32)</option>
					<option value="int32_swap">32bit positive or negative integer, 2 registers but with 16bit words/registers in reverse
						order (ba)
						(int32_swap, uint32_swap)</option>
					<option value="int16">16bit positive or negative integer, 1 register (int16, uint16)</option>
					<option value="bit">individual bit (bit)</option>
				</options>
			</parameter>
			<parameter name="writeMultipleEvenWithSingleRegisterOrCoil" type="boolean">
				<label>Write Multiple Even with Single Register or Coil</label>
				<default>false</default>
				<description><![CDATA[Whether single register / coil of data is written using FC16 ("Write Multiple Holding Registers") / FC15 ("Write Multiple Coils"), respectively.
				<br />
				<br />If false, FC6/FC5 are used with single register and single coil, respectively.]]></description>
			</parameter>
			<parameter name="writeMaxTries" type="integer" min="1">
				<label>Maximum Tries When Writing</label>
				<default>3</default>
				<description>Number of tries when writing data, if some of the writes fail. For single try, enter 1.</description>
			</parameter>
			<parameter name="updateUnchangedValuesEveryMillis" type="integer" min="0" unit="ms">
				<label>Interval for Updating Unchanged Values</label>
				<default>1000</default>
				<description>Interval to update unchanged values. Normally unchanged values are not updated. In milliseconds.</description>
				<advanced>true</advanced>
			</parameter>
		</config-description>
	</thing-type>
</thing:thing-descriptions>
