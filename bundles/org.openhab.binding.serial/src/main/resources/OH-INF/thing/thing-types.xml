<?xml version="1.0" encoding="UTF-8"?>
<thing:thing-descriptions bindingId="serial"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:thing="https://openhab.org/schemas/thing-description/v1.0.0"
	xsi:schemaLocation="https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd">

	<!-- Thing Types -->
	<bridge-type id="serialBridge">
		<label>Serial Bridge</label>
		<description>Serial port which can send and receive data</description>
		<semantic-equipment-tag>NetworkAppliance</semantic-equipment-tag>

		<channels>
			<channel id="string" typeId="stringData"/>
			<channel id="binary" typeId="binaryData"/>
			<channel id="data" typeId="system.rawbutton"/>
		</channels>

		<config-description>
			<parameter name="serialPort" type="text" required="true">
				<context>serial-port</context>
				<label>Serial Port</label>
				<description>The serial port to use (e.g. Linux: /dev/ttyUSB0, Windows: COM1)</description>
			</parameter>
			<parameter name="baudRate" type="integer">
				<advanced>true</advanced>
				<label>Baud Rate</label>
				<description>Set the baud rate</description>
				<limitToOptions>false</limitToOptions>
				<default>9600</default>
				<options>
					<option value="2400">2400</option>
					<option value="4800">4800</option>
					<option value="9600">9600</option>
					<option value="19200">19200</option>
					<option value="38400">38400</option>
					<option value="57600">57600</option>
					<option value="115200">115200</option>
				</options>
			</parameter>
			<parameter name="dataBits" type="integer">
				<advanced>true</advanced>
				<label>Data Bits</label>
				<description>Set the data bits</description>
				<default>8</default>
				<options>
					<option value="5">5</option>
					<option value="6">6</option>
					<option value="7">7</option>
					<option value="8">8</option>
				</options>
			</parameter>
			<parameter name="parity" type="text">
				<advanced>true</advanced>
				<label>Parity</label>
				<description>Set the parity</description>
				<default>N</default>
				<options>
					<option value="N">N(one)</option>
					<option value="O">O(dd)</option>
					<option value="E">E(even)</option>
					<option value="M">M(ark)</option>
					<option value="S">S(pace)</option>
				</options>
			</parameter>
			<parameter name="stopBits" type="text">
				<advanced>true</advanced>
				<label>Stop Bits</label>
				<description>Set the stop bits</description>
				<default>1</default>
				<options>
					<option value="1">1</option>
					<option value="1.5">1.5</option>
					<option value="2">2</option>
				</options>
			</parameter>
			<parameter name="charset" type="text">
				<advanced>true</advanced>
				<label>Charset</label>
				<description>The charset to use for converting between bytes and string (e.g. UTF-8, ISO-8859-1). Enter 'HEX' to
					convert binary data into hexadecimal strings, separated by space.</description>
			</parameter>
			<parameter name="eolPattern" type="text">
				<advanced>true</advanced>
				<label>EOL Pattern</label>
				<description>Only for Charset = HEX: 'End of line' pattern as regular expression. For example, "0D 10" matches \r\n,
					"\\bFF" matches 0xFF. Please note that the matched pattern will be part of the result string.</description>
			</parameter>
		</config-description>
	</bridge-type>

	<bridge-type id="tcpBridge">
		<label>TCP Bridge</label>
		<description>TCP socket which can send and receive data</description>

		<channels>
			<channel id="string" typeId="stringData"/>
			<channel id="binary" typeId="binaryData"/>
			<channel id="data" typeId="system.rawbutton"/>
		</channels>

		<config-description>
			<parameter name="address" type="text" required="true">
				<context>network-address</context>
				<label>Address</label>
				<description>The IP address or hostname</description>
			</parameter>
			<parameter name="port" type="integer" min="1" max="65535" required="true">
				<label>Port</label>
				<description>TCP port to connect</description>
				<limitToOptions>false</limitToOptions>
			</parameter>
			<parameter name="timeout" type="integer" min="0">
				<advanced>true</advanced>
				<label>Socket Timeout</label>
				<description>Timeout in seconds</description>
			</parameter>
			<parameter name="keepAlive" type="boolean">
				<advanced>true</advanced>
				<label>Keep-Alive</label>
				<description>Send keep-alive</description>
			</parameter>
			<parameter name="reconnectInterval" type="integer" min="0">
				<advanced>true</advanced>
				<label>Reconnect Interval</label>
				<description>Reconnection interval in seconds after connection failure (0 = disabled)</description>
				<default>10</default>
			</parameter>
			<parameter name="charset" type="text">
				<advanced>true</advanced>
				<label>Charset or HEX</label>
				<description>The charset to use for converting between bytes and string (e.g. UTF-8, ISO-8859-1). Enter 'HEX' to
					convert binary data into hexadecimal strings, separated by space.</description>
			</parameter>
			<parameter name="eolPattern" type="text">
				<advanced>true</advanced>
				<label>EOL pattern</label>
				<description>Only for Charset = HEX: 'End of line' pattern as regular expression. For example, "0D 10" matches \r\n,
					"\\bFF" matches 0xFF. Please note that the matched pattern will be part of the result string.</description>
			</parameter>
		</config-description>
	</bridge-type>

	<bridge-type id="tcpServerBridge">
		<label>TCP Server Bridge</label>
		<description>Like TCP bridge, but listens on a local port for incoming connections</description>

		<config-description>
			<parameter name="port" type="integer" min="1" max="65535" required="true">
				<label>Port</label>
				<description>Listening TCP port</description>
				<limitToOptions>false</limitToOptions>
			</parameter>
			<parameter name="bindAddress" type="text">
				<context>network-address</context>
				<limitToOptions>false</limitToOptions>
				<label>Address</label>
				<default>0.0.0.0</default>
				<description>The IP address to bind to (default: 0.0.0.0)</description>
			</parameter>
			<parameter name="timeout" type="integer" min="0">
				<advanced>true</advanced>
				<label>Socket Timeout</label>
				<description>Timeout in seconds</description>
			</parameter>
			<parameter name="keepAlive" type="boolean">
				<advanced>true</advanced>
				<label>Keep-Alive</label>
				<description>Send keep-alive</description>
			</parameter>
			<parameter name="charset" type="text">
				<advanced>true</advanced>
				<label>Charset or HEX</label>
				<description>The charset to use for converting between bytes and string (e.g. UTF-8, ISO-8859-1). Enter 'HEX' to
					convert binary data into hexadecimal strings, separated by space.</description>
			</parameter>
			<parameter name="eolPattern" type="text">
				<advanced>true</advanced>
				<label>EOL pattern</label>
				<description>Only for Charset = HEX: 'End of line' pattern as regular expression. For example, "0D 10" matches \r\n,
					"\\bFF" matches 0xFF. Please note that the matched pattern will be part of the result string.</description>
			</parameter>
		</config-description>
	</bridge-type>

	<thing-type id="serialDevice" extensible="string, number, dimmer, switch, rollershutter">
		<supported-bridge-type-refs>
			<bridge-type-ref id="serialBridge"/>
			<bridge-type-ref id="tcpBridge"/>
			<bridge-type-ref id="tcpServerBridge"/>
		</supported-bridge-type-refs>

		<label>Serial Device</label>
		<description>Represents a device</description>

		<config-description>
			<parameter name="patternMatch" type="text" required="true">
				<label>Patern Match</label>
				<context>pattern-match</context>
				<description>Regular expression used to identify device from received data (must match the whole line)</description>
			</parameter>
		</config-description>
	</thing-type>

	<!-- Channel Types -->
	<channel-type id="stringData">
		<item-type>String</item-type>
		<label>String Data</label>
		<description>Channel for sending/receiving data as a string to/from the serial port</description>
	</channel-type>

	<channel-type id="binaryData">
		<item-type>String</item-type>
		<label>Binary Data</label>
		<description>Channel for sending/receiving data encoded as Base64 to/from the serial port</description>
	</channel-type>

	<channel-type id="string">
		<item-type>String</item-type>
		<label>String</label>
		<description>Channel to receive commands as a string</description>
		<config-description>
			<parameter name="stateTransformation" type="text" multiple="true">
				<label>State Transformation</label>
				<description><![CDATA[Transformation used to convert device data to channel state, e.g.
					<code>REGEX(.*?STATE=(.*?);.*)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="commandFormat" type="text">
				<label>String Format</label>
				<description>Format string applied to the command, e.g. ID=671;COMMAND=%s</description>
			</parameter>
			<parameter name="commandTransformation" type="text" multiple="true">
				<label>Command Transformation</label>
				<description><![CDATA[Transformation used to convert command to device data, e.g.
					<code>JS(device.js)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="refreshValue" type="text">
				<label>Refresh Value</label>
				<description>Send this value to receive the current state</description>
			</parameter>
			<parameter name="refreshInterval" type="integer" min="0">
				<label>Refresh Interval</label>
				<description>Interval for the automatic channel update in seconds. This value is only required if the peer has to
					send the “Refresh Value” command regularly in order to return the current properties. It is not required if the
					peer automatically forwards changed values to its clients.</description>
			</parameter>
		</config-description>
	</channel-type>

	<channel-type id="number">
		<item-type>Number</item-type>
		<label>Number</label>
		<description>Channel to receive commands as a number</description>
		<config-description>
			<parameter name="stateTransformation" type="text" multiple="true">
				<label>State Transformation</label>
				<description><![CDATA[Transformation used to convert device data to channel state, e.g.
					<code>REGEX(.*?STATE=(.*?);.*)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="commandFormat" type="text">
				<label>Number Format</label>
				<description>Format string applied to the command, e.g. ID=671;VAL=%f</description>
			</parameter>
			<parameter name="commandTransformation" type="text" multiple="true">
				<label>Command Transformation</label>
				<description><![CDATA[Transformation used to convert command to device data, e.g.
					<code>JS(device.js)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="refreshValue" type="text">
				<label>Refresh Value</label>
				<description>Send this value to receive the current state</description>
			</parameter>
			<parameter name="refreshInterval" type="integer" min="0">
				<label>Refresh Interval</label>
				<description>Interval for the automatic channel update in seconds. This value is only required if the peer has to
					send the “Refresh Value” command regularly in order to return the current properties. It is not required if the
					peer automatically forwards changed values to its clients.</description>
			</parameter>
		</config-description>
	</channel-type>

	<channel-type id="dimmer">
		<item-type>Dimmer</item-type>
		<label>Dimmer</label>
		<description>Channel to receive commands from a Dimmer</description>
		<tags>
			<tag>Control</tag>
			<tag>Brightness</tag>
		</tags>
		<config-description>
			<parameter name="stateTransformation" type="text" multiple="true">
				<label>State Transformation</label>
				<description><![CDATA[Transformation used to convert device data to channel state, e.g.
					<code>REGEX(.*?STATE=(.*?);.*)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="onValue" type="text">
				<label>On Value</label>
				<description>Send this value when receiving an ON command</description>
			</parameter>
			<parameter name="offValue" type="text">
				<label>Off Value</label>
				<description>Send this value when receiving an OFF command</description>
			</parameter>
			<parameter name="increaseValue" type="text">
				<label>Increase Value</label>
				<description>Send this value when receiving an INCREASE command</description>
			</parameter>
			<parameter name="decreaseValue" type="text">
				<label>Decrease Value</label>
				<description>Send this value when receiving a DECREASE command</description>
			</parameter>
			<parameter name="commandFormat" type="text">
				<label>Percent Format</label>
				<description>Format string applied to the percent command, e.g. ID=671;VAL=%d</description>
			</parameter>
			<parameter name="commandTransformation" type="text" multiple="true">
				<label>Command Transformation</label>
				<description><![CDATA[Transformation used to convert command to device data, e.g.
					<code>JS(device.js)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="refreshValue" type="text">
				<label>Refresh Value</label>
				<description>Send this value to receive the current state</description>
			</parameter>
			<parameter name="refreshInterval" type="integer" min="0">
				<label>Refresh Interval</label>
				<description>Interval for the automatic channel update in seconds. This value is only required if the peer has to
					send the “Refresh Value” command regularly in order to return the current properties. It is not required if the
					peer automatically forwards changed values to its clients.</description>
			</parameter>
		</config-description>
	</channel-type>

	<channel-type id="switch">
		<item-type>Switch</item-type>
		<label>Switch</label>
		<description>Channel to receive commands from a Switch</description>
		<tags>
			<tag>Switch</tag>
			<tag>Power</tag>
		</tags>
		<config-description>
			<parameter name="stateTransformation" type="text" multiple="true">
				<label>State Transformation</label>
				<description><![CDATA[Transformation used to convert device data to channel state, e.g.
					<code>REGEX(.*?STATE=(.*?);.*)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="onValue" type="text">
				<label>On Value</label>
				<description>Send this value when receiving an ON command</description>
			</parameter>
			<parameter name="offValue" type="text">
				<label>Off Value</label>
				<description>Send this value when receiving an OFF command</description>
			</parameter>
			<parameter name="commandTransformation" type="text" multiple="true">
				<label>Command Transformation</label>
				<description><![CDATA[Transformation used to convert command to device data, e.g.
					<code>JS(device.js)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="refreshValue" type="text">
				<label>Refresh Value</label>
				<description>Send this value to receive the current state</description>
			</parameter>
			<parameter name="refreshInterval" type="integer" min="0">
				<label>Refresh Interval</label>
				<description>Interval for the automatic channel update in seconds. This value is only required if the peer has to
					send the “Refresh Value” command regularly in order to return the current properties. It is not required if the
					peer automatically forwards changed values to its clients.</description>
			</parameter>
		</config-description>
	</channel-type>

	<channel-type id="rollershutter">
		<item-type>Rollershutter</item-type>
		<label>Rollershutter</label>
		<description>Channel to receive commands from a Rollershutter</description>
		<tags>
			<tag>Control</tag>
			<tag>OpenLevel</tag>
		</tags>
		<config-description>
			<parameter name="stateTransformation" type="text" multiple="true">
				<label>State Transformation</label>
				<description><![CDATA[Transformation used to convert device data to channel state, e.g.
					<code>REGEX(.*?STATE=(.*?);.*)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="upValue" type="text">
				<label>Up Value</label>
				<description>Send this value when receiving an UP command</description>
			</parameter>
			<parameter name="downValue" type="text">
				<label>Down Value</label>
				<description>Send this value when receiving a DOWN command</description>
			</parameter>
			<parameter name="stopValue" type="text">
				<label>Stop Value</label>
				<description>Send this value when receiving a STOP command</description>
			</parameter>
			<parameter name="commandFormat" type="text">
				<label>Percent Format</label>
				<description>Format string applied to the percent command, e.g. ID=671;VAL=%d</description>
			</parameter>
			<parameter name="commandTransformation" type="text" multiple="true">
				<label>Command Transformation</label>
				<description><![CDATA[Transformation used to convert command to device data, e.g.
					<code>JS(device.js)</code>.
					Multiple transformations can be chained by listing each transformation on a separate line,
					or by concatenating them with "∩".]]></description>
			</parameter>
			<parameter name="refreshValue" type="text">
				<label>Refresh Value</label>
				<description>Send this value to receive the current state</description>
			</parameter>
			<parameter name="refreshInterval" type="integer" min="0">
				<label>Refresh Interval</label>
				<description>Interval for the automatic channel update in seconds. This value is only required if the peer has to
					send the “Refresh Value” command regularly in order to return the current properties. It is not required if the
					peer automatically forwards changed values to its clients.</description>
			</parameter>
		</config-description>
	</channel-type>

</thing:thing-descriptions>
