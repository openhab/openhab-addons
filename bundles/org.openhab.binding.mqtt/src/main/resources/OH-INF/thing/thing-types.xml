<?xml version="1.0" encoding="UTF-8"?>
<thing:thing-descriptions bindingId="mqtt"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:thing="https://openhab.org/schemas/thing-description/v1.0.0"
	xsi:schemaLocation="https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd">

	<bridge-type id="broker" extensible="publishTrigger">
		<label>MQTT Broker</label>
		<description>A connection to a MQTT broker</description>

		<config-description>
			<parameter name="host" type="text" required="true">
				<label>Broker Hostname/IP</label>
				<description>The IP/Hostname of the MQTT broker</description>
				<context>network-address</context>
			</parameter>

			<parameter name="port" type="integer">
				<label>Broker Port</label>
				<description>The port is optional, if none is provided, the typical
					ports 1883 and 8883 (SSL) are used.</description>
				<context>network-address</context>
				<advanced>true</advanced>
			</parameter>

			<parameter name="secure" type="boolean" required="true">
				<label>Secure Connection</label>
				<description>Uses TLS/SSL to establish a secure connection to the broker.</description>
				<default>false</default>
			</parameter>

			<parameter name="hostnameValidated" type="boolean">
				<label>Hostname Validated</label>
				<description>Validate hostname from certificate against server hostname for secure connection.</description>
				<default>true</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="protocol" type="text">
				<label>Protocol</label>
				<description>The protocol used for communicating with the broker.</description>
				<options>
					<option value="TCP">TCP</option>
					<option value="WEBSOCKETS">WebSockets</option>
				</options>
				<default>TCP</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="mqttVersion" type="text">
				<label>MQTT Version</label>
				<description>The MQTT version used for communicating with the broker.</description>
				<options>
					<option value="V3">Version 3</option>
					<option value="V5">Version 5</option>
				</options>
				<default>V3</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="qos" type="integer">
				<label>Quality of Service</label>
				<options>
					<option value="0">At most once (0)</option>
					<option value="1">At least once (1)</option>
					<option value="2">Exactly once (2)</option>
				</options>
				<default>0</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="clientID" type="text">
				<label>Client ID</label>
				<description>Use a fixed client ID. Defaults to empty which means a
					client ID is generated for this connection.</description>
				<advanced>true</advanced>
			</parameter>

			<parameter name="reconnectTime" type="integer">
				<label>Reconnect Time</label>
				<description>Reconnect time in ms. If a connection is lost, the binding will wait this time before it tries to
					reconnect.</description>
				<default>60000</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="keepAlive" type="integer">
				<label>Heartbeat</label>
				<description>Keep alive / heartbeat timer in s. It can take up to this time to determine if a server connection is
					lost. A lower value may keep the broker unnecessarily busy for no or little additional value.</description>
				<default>60</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="lwtMessage" type="text">
				<label>Last Will Message</label>
				<description>The last will message.</description>
				<advanced>true</advanced>
			</parameter>

			<parameter name="lwtTopic" type="text">
				<label>Last Will Topic</label>
				<description>Defaults to empty and therefore disables the last will.</description>
				<advanced>true</advanced>
			</parameter>

			<parameter name="lwtQos" type="integer">
				<label>Last Will QoS</label>
				<description>The quality of service parameter of the last will.</description>
				<options>
					<option value="0">At most once (0)</option>
					<option value="1">At least once (1)</option>
					<option value="2">Exactly once (2)</option>
				</options>
				<default>0</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="lwtRetain" type="boolean">
				<label>Last Will Retain</label>
				<description>True if last Will should be retained (defaults to false)</description>
				<default>true</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="birthMessage" type="text">
				<label>Birth Message</label>
				<description>The message to send to the broker when a connection is established.</description>
				<advanced>true</advanced>
			</parameter>

			<parameter name="birthTopic" type="text">
				<label>Birth Topic</label>
				<description>Defaults to empty and therefore disables the birth message.</description>
				<advanced>true</advanced>
			</parameter>

			<parameter name="birthRetain" type="boolean">
				<label>Birth Message Retain</label>
				<description>True if the birth message should be retained (defaults to true)</description>
				<default>true</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="shutdownMessage" type="text">
				<label>Shutdown Message</label>
				<description>The message to send to the broker before the connection terminates.</description>
				<advanced>true</advanced>
			</parameter>

			<parameter name="shutdownTopic" type="text">
				<label>Shutdown Topic</label>
				<description>Defaults to empty and therefore disables the shutdown message.</description>
				<advanced>true</advanced>
			</parameter>

			<parameter name="shutdownRetain" type="boolean">
				<label>Shutdown Message Retain</label>
				<description>True if the shutdown message should be retained (defaults to true)</description>
				<default>true</default>
				<advanced>true</advanced>
			</parameter>

			<parameter name="username" type="text">
				<label>Username</label>
				<description>The MQTT username</description>
				<advanced>true</advanced>
			</parameter>
			<parameter name="password" type="text">
				<label>Password</label>
				<description>The MQTT password</description>
				<context>password</context>
				<advanced>true</advanced>
			</parameter>
			<parameter name="certificatepin" type="boolean">
				<label>Certificate Pinning</label>
				<description>If this and SSL is set: After the next connection has been successfully established, the certificate is
					pinned. The connection will be refused if another certificate is used. Clear **certificate** to allow a new
					certificate for the next connection attempt. This option can increase security.</description>
				<default>true</default>
				<advanced>true</advanced>
			</parameter>
			<parameter name="certificate" type="text">
				<label>Certificate Hash</label>
				<description>If **certificatepin** is set this hash is used to verify the connection. Clear to allow a new
					certificate pinning on the next connection attempt. If empty will be filled automatically by the next successful
					connection. An example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`.</description>
				<advanced>true</advanced>
			</parameter>
			<parameter name="publickeypin" type="boolean">
				<label>Public Key Pinning</label>
				<description>If this and SSL is set: After the next connection has been successfully established, the public key of
					the broker is pinned. The connection will be refused if another public key is used. Clear **publickey** to allow a
					new public key for the next connection attempt. This option can increase security.</description>
				<default>true</default>
				<advanced>true</advanced>
			</parameter>
			<parameter name="publickey" type="text">
				<label>Public Key Hash</label>
				<description>If **publickeypin** is set this hash is used to verify the connection. Clear to allow a new public key
					pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An
					example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`</description>
				<advanced>true</advanced>
			</parameter>
			<parameter name="enableDiscovery" type="boolean">
				<label>Enable Discovery</label>
				<description>If set to true enables this broker for all discovery services.</description>
				<advanced>true</advanced>
				<default>true</default>
			</parameter>
		</config-description>
	</bridge-type>

	<channel-type id="publishTrigger">
		<kind>trigger</kind>
		<label>Publish Trigger</label>
		<description>This channel is triggered when a value is published to the configured MQTT topic on this broker
			connection. The event payload will be the received MQTT topic value.</description>
		<event></event>
		<config-description>
			<parameter name="stateTopic" type="text" required="true">
				<label>MQTT Topic</label>
				<description>This channel will trigger on this MQTT topic. This topic can contain wildcards like + and # for example
					"all/in/#" or "sensors/+/config".</description>
			</parameter>
			<parameter name="payload" type="text" required="false">
				<label>Payload Condition</label>
				<description>An optional condition on the value of the MQTT topic that must match before this channel is triggered.</description>
			</parameter>
			<parameter name="separator" type="text" required="false">
				<label>Separator Character</label>
				<description>The trigger channel payload usually only contains the received MQTT topic value. If you define a
					separator character, for example '#', the topic and received value will be in the trigger channel payload. For
					example: my_topic#my_received_value.</description>
			</parameter>
		</config-description>
	</channel-type>
</thing:thing-descriptions>
