# add-on

addon.mqtt.name = MQTT Binding
addon.mqtt.description = Allows management of MQTT broker connections and linking of MQTT topics to Things and Channels

# thing types

thing-type.mqtt.broker.label = MQTT Broker
thing-type.mqtt.broker.description = A connection to a MQTT broker
thing-type.mqtt.topic.label = Generic MQTT Thing
thing-type.mqtt.topic.description = You need a configured Broker first. Dynamically add channels of various types to this Thing. Link different MQTT topics to each channel.

# thing types config

thing-type.config.mqtt.broker.birthMessage.label = Birth Message
thing-type.config.mqtt.broker.birthMessage.description = The message to send to the broker when a connection is established.
thing-type.config.mqtt.broker.birthRetain.label = Birth Message Retain
thing-type.config.mqtt.broker.birthRetain.description = True if the birth message should be retained (defaults to true)
thing-type.config.mqtt.broker.birthTopic.label = Birth Topic
thing-type.config.mqtt.broker.birthTopic.description = Defaults to empty and therefore disables the birth message.
thing-type.config.mqtt.broker.certificate.label = Certificate Hash
thing-type.config.mqtt.broker.certificate.description = If **certificatepin** is set this hash is used to verify the connection. Clear to allow a new certificate pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`.
thing-type.config.mqtt.broker.certificatepin.label = Certificate Pinning
thing-type.config.mqtt.broker.certificatepin.description = If this and SSL is set: After the next connection has been successfully established, the certificate is pinned. The connection will be refused if another certificate is used. Clear **certificate** to allow a new certificate for the next connection attempt. This option can increase security.
thing-type.config.mqtt.broker.clientID.label = Client ID
thing-type.config.mqtt.broker.clientID.description = Use a fixed client ID. Defaults to empty which means a client ID is generated for this connection.
thing-type.config.mqtt.broker.enableDiscovery.label = Enable Discovery
thing-type.config.mqtt.broker.enableDiscovery.description = If set to true enables this broker for all discovery services.
thing-type.config.mqtt.broker.host.label = Broker Hostname/IP
thing-type.config.mqtt.broker.host.description = The IP/Hostname of the MQTT broker
thing-type.config.mqtt.broker.hostnameValidated.label = Hostname Validated
thing-type.config.mqtt.broker.hostnameValidated.description = Validate hostname from certificate against server hostname for secure connection.
thing-type.config.mqtt.broker.keepAlive.label = Heartbeat
thing-type.config.mqtt.broker.keepAlive.description = Keep alive / heartbeat timer in s. It can take up to this time to determine if a server connection is lost. A lower value may keep the broker unnecessarily busy for no or little additional value.
thing-type.config.mqtt.broker.lwtMessage.label = Last Will Message
thing-type.config.mqtt.broker.lwtMessage.description = The last will message.
thing-type.config.mqtt.broker.lwtQos.label = Last Will QoS
thing-type.config.mqtt.broker.lwtQos.description = The quality of service parameter of the last will.
thing-type.config.mqtt.broker.lwtQos.option.0 = At most once (0)
thing-type.config.mqtt.broker.lwtQos.option.1 = At least once (1)
thing-type.config.mqtt.broker.lwtQos.option.2 = Exactly once (2)
thing-type.config.mqtt.broker.lwtRetain.label = Last Will Retain
thing-type.config.mqtt.broker.lwtRetain.description = True if last Will should be retained (defaults to false)
thing-type.config.mqtt.broker.lwtTopic.label = Last Will Topic
thing-type.config.mqtt.broker.lwtTopic.description = Defaults to empty and therefore disables the last will.
thing-type.config.mqtt.broker.mqttVersion.label = MQTT Version
thing-type.config.mqtt.broker.mqttVersion.description = The MQTT version used for communicating with the broker.
thing-type.config.mqtt.broker.mqttVersion.option.V3 = Version 3
thing-type.config.mqtt.broker.mqttVersion.option.V5 = Version 5
thing-type.config.mqtt.broker.password.label = Password
thing-type.config.mqtt.broker.password.description = The MQTT password
thing-type.config.mqtt.broker.port.label = Broker Port
thing-type.config.mqtt.broker.port.description = The port is optional, if none is provided, the typical ports 1883 and 8883 (SSL) are used.
thing-type.config.mqtt.broker.protocol.label = Protocol
thing-type.config.mqtt.broker.protocol.description = The protocol used for communicating with the broker.
thing-type.config.mqtt.broker.protocol.option.TCP = TCP
thing-type.config.mqtt.broker.protocol.option.WEBSOCKETS = WebSockets
thing-type.config.mqtt.broker.publickey.label = Public Key Hash
thing-type.config.mqtt.broker.publickey.description = If **publickeypin** is set this hash is used to verify the connection. Clear to allow a new public key pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`
thing-type.config.mqtt.broker.publickeypin.label = Public Key Pinning
thing-type.config.mqtt.broker.publickeypin.description = If this and SSL is set: After the next connection has been successfully established, the public key of the broker is pinned. The connection will be refused if another public key is used. Clear **publickey** to allow a new public key for the next connection attempt. This option can increase security.
thing-type.config.mqtt.broker.qos.label = Quality of Service
thing-type.config.mqtt.broker.qos.option.0 = At most once (0)
thing-type.config.mqtt.broker.qos.option.1 = At least once (1)
thing-type.config.mqtt.broker.qos.option.2 = Exactly once (2)
thing-type.config.mqtt.broker.reconnectTime.label = Reconnect Time
thing-type.config.mqtt.broker.reconnectTime.description = Reconnect time in ms. If a connection is lost, the binding will wait this time before it tries to reconnect.
thing-type.config.mqtt.broker.secure.label = Secure Connection
thing-type.config.mqtt.broker.secure.description = Uses TLS/SSL to establish a secure connection to the broker.
thing-type.config.mqtt.broker.shutdownMessage.label = Shutdown Message
thing-type.config.mqtt.broker.shutdownMessage.description = The message to send to the broker before the connection terminates.
thing-type.config.mqtt.broker.shutdownRetain.label = Shutdown Message Retain
thing-type.config.mqtt.broker.shutdownRetain.description = True if the shutdown message should be retained (defaults to true)
thing-type.config.mqtt.broker.shutdownTopic.label = Shutdown Topic
thing-type.config.mqtt.broker.shutdownTopic.description = Defaults to empty and therefore disables the shutdown message.
thing-type.config.mqtt.broker.username.label = Username
thing-type.config.mqtt.broker.username.description = The MQTT username
thing-type.config.mqtt.topic.availabilityTopic.label = Availability Topic
thing-type.config.mqtt.topic.availabilityTopic.description = Topic of the LWT of the device
thing-type.config.mqtt.topic.payloadAvailable.label = Device Available Payload
thing-type.config.mqtt.topic.payloadAvailable.description = Payload of the 'Availability Topic', when the device is available. Default: 'ON'
thing-type.config.mqtt.topic.payloadNotAvailable.label = Device Unavailable Payload
thing-type.config.mqtt.topic.payloadNotAvailable.description = Payload of the 'Availability Topic', when the device is *not* available. Default: 'OFF'
thing-type.config.mqtt.topic.transformationPattern.label = Availability Payload Transformations
thing-type.config.mqtt.topic.transformationPattern.description = Applies transformations to the incoming availability payload. A transformation example for a received JSON would be "JSONPATH:$.status" for a json {status: "Online"}. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.

# channel types

channel-type.mqtt.color.label = Color Value (HSB, RGB or CIE xyY)
channel-type.mqtt.colorHSB.label = Color Value (Hue,Saturation,Brightness)
channel-type.mqtt.colorRGB.label = Color Value (Red,Green,Blue)
channel-type.mqtt.contact.label = Open/Close Contact
channel-type.mqtt.datetime.label = Date/Time Value
channel-type.mqtt.datetime.description = Current date and/or time
channel-type.mqtt.dimmer.label = Dimmer
channel-type.mqtt.image.label = Image
channel-type.mqtt.image.description = An image to display. Send a binary bmp, jpg, png or any other supported format to this channel.
channel-type.mqtt.location.label = Location
channel-type.mqtt.location.description = GPS coordinates as Latitude,Longitude,Altitude
channel-type.mqtt.number.label = Number Value
channel-type.mqtt.publishTrigger.label = Publish Trigger
channel-type.mqtt.publishTrigger.description = This channel is triggered when a value is published to the configured MQTT topic on this broker connection. The event payload will be the received MQTT topic value.
channel-type.mqtt.rollershutter.label = Rollershutter
channel-type.mqtt.string.label = Text Value
channel-type.mqtt.switch.label = On/Off Switch
channel-type.mqtt.trigger.label = Trigger

# channel types config

channel-type.config.mqtt.publishTrigger.payload.label = Payload Condition
channel-type.config.mqtt.publishTrigger.payload.description = An optional condition on the value of the MQTT topic that must match before this channel is triggered.
channel-type.config.mqtt.publishTrigger.separator.label = Separator Character
channel-type.config.mqtt.publishTrigger.separator.description = The trigger channel payload usually only contains the received MQTT topic value. If you define a separator character, for example '#', the topic and received value will be in the trigger channel payload. For example: my_topic#my_received_value.
channel-type.config.mqtt.publishTrigger.stateTopic.label = MQTT Topic
channel-type.config.mqtt.publishTrigger.stateTopic.description = This channel will trigger on this MQTT topic. This topic can contain wildcards like + and # for example "all/in/#" or "sensors/+/config".
thing-type.config.mqtt.color_channel.colorMode.label = Color Mode
thing-type.config.mqtt.color_channel.colorMode.description = Defines the color representation format of the payload. "HSB" by default.
thing-type.config.mqtt.color_channel.colorMode.option.HSB = HSB (Hue, Saturation, Brightness)
thing-type.config.mqtt.color_channel.colorMode.option.RGB = RGB (Red, Green, Blue)
thing-type.config.mqtt.color_channel.colorMode.option.XYY = CIE xyY (x, y, Brightness)
thing-type.config.mqtt.color_channel.commandTopic.label = MQTT Command Topic
thing-type.config.mqtt.color_channel.commandTopic.description = An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.
thing-type.config.mqtt.color_channel.formatBeforePublish.label = Outgoing Value Format
thing-type.config.mqtt.color_channel.formatBeforePublish.description = Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say "MYCOLOR,", you would use "MYCOLOR,%s". If you want to adjust the precision of a number to for example 4 digits, you would use "%.4f".
thing-type.config.mqtt.color_channel.group.transformations.label = Transform Values
thing-type.config.mqtt.color_channel.group.transformations.description = These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item.
thing-type.config.mqtt.color_channel.off.label = Custom OFF Command
thing-type.config.mqtt.color_channel.off.description = A string (like "OFF") that is sent to MQTT when an OFF command is received, instead of a color command with a brightness of 0%. The Outgoing Value Format is not applied to this value.
thing-type.config.mqtt.color_channel.on.label = Custom ON Command
thing-type.config.mqtt.color_channel.on.description = A string (like "ON") that is sent to MQTT when an ON command is received, instead of a color command with a brightness of 100%. The Outgoing Value Format is not applied to this value.
thing-type.config.mqtt.color_channel.onBrightness.label = Initial Brightness
thing-type.config.mqtt.color_channel.onBrightness.description = If you connect this channel to a Switch item and turn it on, color and saturation are preserved from the last state, but the brightness will be set to this configured initial brightness percentage.
thing-type.config.mqtt.color_channel.postCommand.label = Is Command
thing-type.config.mqtt.color_channel.postCommand.description = If the received MQTT value should not only update the state of linked items, but command them, enable this option.
thing-type.config.mqtt.color_channel.qos.label = QoS
thing-type.config.mqtt.color_channel.qos.description = MQTT QoS of this channel (0, 1, 2). Default is QoS of the broker connection.
thing-type.config.mqtt.color_channel.qos.option.0 = At most once (best effort delivery "fire and forget")
thing-type.config.mqtt.color_channel.qos.option.1 = At least once (guaranteed that a message will be delivered at least once)
thing-type.config.mqtt.color_channel.qos.option.2 = Exactly once (guarantees that each message is received only once by the counterpart)
thing-type.config.mqtt.color_channel.retained.label = Retained
thing-type.config.mqtt.color_channel.retained.description = The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.
thing-type.config.mqtt.color_channel.stateTopic.label = MQTT State Topic
thing-type.config.mqtt.color_channel.stateTopic.description = An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.
thing-type.config.mqtt.color_channel.transformationPattern.label = Incoming Value Transformations
thing-type.config.mqtt.color_channel.transformationPattern.description = Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be "JSONPATH:$.device.status.temperature" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.
thing-type.config.mqtt.color_channel.transformationPatternOut.label = Outgoing Value Transformation
thing-type.config.mqtt.color_channel.transformationPatternOut.description = Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.
thing-type.config.mqtt.dimmer_channel.commandTopic.label = MQTT Command Topic
thing-type.config.mqtt.dimmer_channel.commandTopic.description = An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.
thing-type.config.mqtt.dimmer_channel.formatBeforePublish.label = Outgoing Value Format
thing-type.config.mqtt.dimmer_channel.formatBeforePublish.description = Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say "MYCOLOR,", you would use "MYCOLOR,%s". If you want to adjust the precision of a number to for example 4 digits, you would use "%.4f".
thing-type.config.mqtt.dimmer_channel.group.transformations.label = Transform Values
thing-type.config.mqtt.dimmer_channel.group.transformations.description = These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item.
thing-type.config.mqtt.dimmer_channel.max.label = Absolute Maximum
thing-type.config.mqtt.dimmer_channel.max.description = This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.
thing-type.config.mqtt.dimmer_channel.min.label = Absolute Minimum
thing-type.config.mqtt.dimmer_channel.min.description = This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.
thing-type.config.mqtt.dimmer_channel.off.label = Custom OFF Command
thing-type.config.mqtt.dimmer_channel.off.description = A string (like "OFF") that is sent to MQTT when an OFF command is received, instead of an explicit 0%. The Outgoing Value Format is not applied to this value.
thing-type.config.mqtt.dimmer_channel.on.label = Custom ON Command
thing-type.config.mqtt.dimmer_channel.on.description = A string (like "ON") that is sent to MQTT when an ON command is received, instead of an explicit 100%. The Outgoing Value Format is not applied to this value.
thing-type.config.mqtt.dimmer_channel.postCommand.label = Is Command
thing-type.config.mqtt.dimmer_channel.postCommand.description = If the received MQTT value should not only update the state of linked items, but command them, enable this option.
thing-type.config.mqtt.dimmer_channel.qos.label = QoS
thing-type.config.mqtt.dimmer_channel.qos.description = MQTT QoS of this channel (0, 1, 2). Default is QoS of the broker connection.
thing-type.config.mqtt.dimmer_channel.qos.option.0 = At most once (best effort delivery "fire and forget")
thing-type.config.mqtt.dimmer_channel.qos.option.1 = At least once (guaranteed that a message will be delivered at least once)
thing-type.config.mqtt.dimmer_channel.qos.option.2 = Exactly once (guarantees that each message is received only once by the counterpart)
thing-type.config.mqtt.dimmer_channel.retained.label = Retained
thing-type.config.mqtt.dimmer_channel.retained.description = The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.
thing-type.config.mqtt.dimmer_channel.stateTopic.label = MQTT State Topic
thing-type.config.mqtt.dimmer_channel.stateTopic.description = An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.
thing-type.config.mqtt.dimmer_channel.step.label = Delta Value
thing-type.config.mqtt.dimmer_channel.step.description = A number/dimmer channel can receive INCREASE/DECREASE commands and computes the target number by adding or subtracting this delta value.
thing-type.config.mqtt.dimmer_channel.transformationPattern.label = Incoming Value Transformations
thing-type.config.mqtt.dimmer_channel.transformationPattern.description = Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be "JSONPATH:$.device.status.temperature" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.
thing-type.config.mqtt.dimmer_channel.transformationPatternOut.label = Outgoing Value Transformation
thing-type.config.mqtt.dimmer_channel.transformationPatternOut.description = Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.
thing-type.config.mqtt.number_channel.commandTopic.label = MQTT Command Topic
thing-type.config.mqtt.number_channel.commandTopic.description = An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.
thing-type.config.mqtt.number_channel.formatBeforePublish.label = Outgoing Value Format
thing-type.config.mqtt.number_channel.formatBeforePublish.description = Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say "MYCOLOR,", you would use "MYCOLOR,%s". If you want to adjust the precision of a number to for example 4 digits, you would use "%.4f".
thing-type.config.mqtt.number_channel.group.transformations.label = Transform Values
thing-type.config.mqtt.number_channel.group.transformations.description = These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item.
thing-type.config.mqtt.number_channel.max.label = Absolute Maximum
thing-type.config.mqtt.number_channel.max.description = This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.
thing-type.config.mqtt.number_channel.min.label = Absolute Minimum
thing-type.config.mqtt.number_channel.min.description = This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.
thing-type.config.mqtt.number_channel.postCommand.label = Is Command
thing-type.config.mqtt.number_channel.postCommand.description = If the received MQTT value should not only update the state of linked items, but command them, enable this option. Note that if the value is NaN (interpreted as UNDEF), it can only update; commands are not possible.
thing-type.config.mqtt.number_channel.qos.label = QoS
thing-type.config.mqtt.number_channel.qos.description = MQTT QoS of this channel (0, 1, 2). Default is QoS of the broker connection.
thing-type.config.mqtt.number_channel.qos.option.0 = At most once (best effort delivery "fire and forget")
thing-type.config.mqtt.number_channel.qos.option.1 = At least once (guaranteed that a message will be delivered at least once)
thing-type.config.mqtt.number_channel.qos.option.2 = Exactly once (guarantees that each message is received only once by the counterpart)
thing-type.config.mqtt.number_channel.retained.label = Retained
thing-type.config.mqtt.number_channel.retained.description = The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.
thing-type.config.mqtt.number_channel.stateTopic.label = MQTT State Topic
thing-type.config.mqtt.number_channel.stateTopic.description = An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.
thing-type.config.mqtt.number_channel.step.label = Delta Value
thing-type.config.mqtt.number_channel.step.description = A number/dimmer channel can receive INCREASE/DECREASE commands and computes the target number by adding or subtracting this delta value.
thing-type.config.mqtt.number_channel.transformationPattern.label = Incoming Value Transformations
thing-type.config.mqtt.number_channel.transformationPattern.description = Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be "JSONPATH:$.device.status.temperature" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.
thing-type.config.mqtt.number_channel.transformationPatternOut.label = Outgoing Value Transformation
thing-type.config.mqtt.number_channel.transformationPatternOut.description = Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.
thing-type.config.mqtt.number_channel.unit.label = Unit Of Measurement
thing-type.config.mqtt.number_channel.unit.description = Unit of measurement (optional). The unit is used for representing the value in the GUI as well as for converting incoming values (like from Â°F to Â°C). Examples: <code>Â°C</code>, <code>Â°F</code>, <code>kW</code>, etc.
thing-type.config.mqtt.rollershutter_channel.commandTopic.label = MQTT Command Topic
thing-type.config.mqtt.rollershutter_channel.commandTopic.description = An MQTT topic that this thing will send a command to. If not set, this will be a read-only rollershutter.
thing-type.config.mqtt.rollershutter_channel.formatBeforePublish.label = Outgoing Value Format
thing-type.config.mqtt.rollershutter_channel.formatBeforePublish.description = Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say "MYCOLOR,", you would use "MYCOLOR,%s". If you want to adjust the precision of a number to for example 4 digits, you would use "%.4f".
thing-type.config.mqtt.rollershutter_channel.group.transformations.label = Transform Values
thing-type.config.mqtt.rollershutter_channel.group.transformations.description = These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item.
thing-type.config.mqtt.rollershutter_channel.invert.label = Invert
thing-type.config.mqtt.rollershutter_channel.invert.description = Enable if your device uses 100 as UP and 0 as DOWN, instead of the normal openHAB convention of 0 as UP and 100 as DOWN.
thing-type.config.mqtt.rollershutter_channel.off.label = Down Command Value
thing-type.config.mqtt.rollershutter_channel.off.description = A string (like "CLOSE") that is sent when commanding the rollershutter to close. If not provided, 100 (or 0, if inverted) will be sent instead. The Outgoing Value Format is not applied to this value.
thing-type.config.mqtt.rollershutter_channel.offState.label = Down State Value
thing-type.config.mqtt.rollershutter_channel.offState.description = A string (like "CLOSED") that is recognised as DOWN state. You can use this parameter for a second keyword, next to DOWN. Defaults to the Down Command Value.
thing-type.config.mqtt.rollershutter_channel.on.label = Up Command Value
thing-type.config.mqtt.rollershutter_channel.on.description = A string (like "OPEN") that is sent when commanding the rollershutter to open. If not provided, 0 (or 100, if inverted) will be sent instead. The Outgoing Value Format is not applied to this value.
thing-type.config.mqtt.rollershutter_channel.onState.label = Up State Value
thing-type.config.mqtt.rollershutter_channel.onState.description = A string (like "OPENED") that is recognised as UP state. You can use this parameter for a second keyword, next to UP. Defaults to the Up Command Value.
thing-type.config.mqtt.rollershutter_channel.postCommand.label = Is Command
thing-type.config.mqtt.rollershutter_channel.postCommand.description = If the received MQTT value should not only update the state of linked items, but command them, enable this option.
thing-type.config.mqtt.rollershutter_channel.qos.label = QoS
thing-type.config.mqtt.rollershutter_channel.qos.description = MQTT QoS of this channel (0, 1, 2). Default is QoS of the broker connection.
thing-type.config.mqtt.rollershutter_channel.qos.option.0 = At most once (best effort delivery "fire and forget")
thing-type.config.mqtt.rollershutter_channel.qos.option.1 = At least once (guaranteed that a message will be delivered at least once)
thing-type.config.mqtt.rollershutter_channel.qos.option.2 = Exactly once (guarantees that each message is received only once by the counterpart)
thing-type.config.mqtt.rollershutter_channel.retained.label = Retained
thing-type.config.mqtt.rollershutter_channel.retained.description = The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.
thing-type.config.mqtt.rollershutter_channel.stateTopic.label = MQTT State Topic
thing-type.config.mqtt.rollershutter_channel.stateTopic.description = An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.
thing-type.config.mqtt.rollershutter_channel.stop.label = Stop Command
thing-type.config.mqtt.rollershutter_channel.stop.description = A string (like "STOP") that is sent when commanding the rollershutter to stop. The Outgoing Value Format is not applied to this value.
thing-type.config.mqtt.rollershutter_channel.stopCommandTopic.label = MQTT Stop Command Topic
thing-type.config.mqtt.rollershutter_channel.stopCommandTopic.description = An MQTT topic that this thing will send a STOP command to. If not set, it will send STOP commands to the main commandTopic.
thing-type.config.mqtt.rollershutter_channel.transformExtentsToString.label = Transform Commands at Extents to String
thing-type.config.mqtt.rollershutter_channel.transformExtentsToString.description = If a command is 0 or 100, send that as UP or DOWN commands instead. Useful if your device doesn't support going to a specific position - only opening or closing, but you have front ends (say HomeKit) or rules that will only send percentage commands instead of UP/DOWN.
thing-type.config.mqtt.rollershutter_channel.transformationPattern.label = Incoming Value Transformations
thing-type.config.mqtt.rollershutter_channel.transformationPattern.description = Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be "JSONPATH:$.device.status.temperature" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.
thing-type.config.mqtt.rollershutter_channel.transformationPatternOut.label = Outgoing Value Transformation
thing-type.config.mqtt.rollershutter_channel.transformationPatternOut.description = Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.
thing-type.config.mqtt.string_channel.allowedStates.label = Allowed States
thing-type.config.mqtt.string_channel.allowedStates.description = If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF
thing-type.config.mqtt.string_channel.commandTopic.label = MQTT Command Topic
thing-type.config.mqtt.string_channel.commandTopic.description = An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.
thing-type.config.mqtt.string_channel.formatBeforePublish.label = Outgoing Value Format
thing-type.config.mqtt.string_channel.formatBeforePublish.description = Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say "MYCOLOR,", you would use "MYCOLOR,%s". If you want to adjust the precision of a number to for example 4 digits, you would use "%.4f".
thing-type.config.mqtt.string_channel.group.transformations.label = Transform Values
thing-type.config.mqtt.string_channel.group.transformations.description = These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item.
thing-type.config.mqtt.string_channel.nullValue.label = NULL Value
thing-type.config.mqtt.string_channel.nullValue.description = If the received MQTT value matches this, treat it as NULL.
thing-type.config.mqtt.string_channel.postCommand.label = Is Command
thing-type.config.mqtt.string_channel.postCommand.description = If the received MQTT value should not only update the state of linked items, but command them, enable this option.
thing-type.config.mqtt.string_channel.qos.label = QoS
thing-type.config.mqtt.string_channel.qos.description = MQTT QoS of this channel (0, 1, 2). Default is QoS of the broker connection.
thing-type.config.mqtt.string_channel.qos.option.0 = At most once (best effort delivery "fire and forget")
thing-type.config.mqtt.string_channel.qos.option.1 = At least once (guaranteed that a message will be delivered at least once)
thing-type.config.mqtt.string_channel.qos.option.2 = Exactly once (guarantees that each message is received only once by the counterpart)
thing-type.config.mqtt.string_channel.retained.label = Retained
thing-type.config.mqtt.string_channel.retained.description = The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.
thing-type.config.mqtt.string_channel.stateTopic.label = MQTT State Topic
thing-type.config.mqtt.string_channel.stateTopic.description = An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.
thing-type.config.mqtt.string_channel.transformationPattern.label = Incoming Value Transformations
thing-type.config.mqtt.string_channel.transformationPattern.description = Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be "JSONPATH:$.device.status.temperature" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.
thing-type.config.mqtt.string_channel.transformationPatternOut.label = Outgoing Value Transformation
thing-type.config.mqtt.string_channel.transformationPatternOut.description = Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.
thing-type.config.mqtt.switch_channel.commandTopic.label = MQTT Command Topic
thing-type.config.mqtt.switch_channel.commandTopic.description = An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.
thing-type.config.mqtt.switch_channel.formatBeforePublish.label = Outgoing Value Format
thing-type.config.mqtt.switch_channel.formatBeforePublish.description = Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say "MYCOLOR,", you would use "MYCOLOR,%s". If you want to adjust the precision of a number to for example 4 digits, you would use "%.4f".
thing-type.config.mqtt.switch_channel.group.transformations.label = Transform Values
thing-type.config.mqtt.switch_channel.group.transformations.description = These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item.
thing-type.config.mqtt.switch_channel.off.label = Custom Off/Closed Value
thing-type.config.mqtt.switch_channel.off.description = A number (like 0, -10) or a string (like "disabled") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).
thing-type.config.mqtt.switch_channel.on.label = Custom On/Open Value
thing-type.config.mqtt.switch_channel.on.description = A number (like 1, 10) or a string (like "enabled") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).
thing-type.config.mqtt.switch_channel.postCommand.label = Is Command
thing-type.config.mqtt.switch_channel.postCommand.description = If the received MQTT value should not only update the state of linked items, but command them, enable this option.
thing-type.config.mqtt.switch_channel.qos.label = QoS
thing-type.config.mqtt.switch_channel.qos.description = MQTT QoS of this channel (0, 1, 2). Default is QoS of the broker connection.
thing-type.config.mqtt.switch_channel.qos.option.0 = At most once (best effort delivery "fire and forget")
thing-type.config.mqtt.switch_channel.qos.option.1 = At least once (guaranteed that a message will be delivered at least once)
thing-type.config.mqtt.switch_channel.qos.option.2 = Exactly once (guarantees that each message is received only once by the counterpart)
thing-type.config.mqtt.switch_channel.retained.label = Retained
thing-type.config.mqtt.switch_channel.retained.description = The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.
thing-type.config.mqtt.switch_channel.stateTopic.label = MQTT State Topic
thing-type.config.mqtt.switch_channel.stateTopic.description = An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.
thing-type.config.mqtt.switch_channel.transformationPattern.label = Incoming Value Transformations
thing-type.config.mqtt.switch_channel.transformationPattern.description = Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be "JSONPATH:$.device.status.temperature" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.
thing-type.config.mqtt.switch_channel.transformationPatternOut.label = Outgoing Value Transformation
thing-type.config.mqtt.switch_channel.transformationPatternOut.description = Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.
thing-type.config.mqtt.trigger_channel.group.transformations.label = Transform Values
thing-type.config.mqtt.trigger_channel.group.transformations.description = These configuration parameters allow you to alter before a received value is used in the trigger.
thing-type.config.mqtt.trigger_channel.stateTopic.label = MQTT Trigger Topic
thing-type.config.mqtt.trigger_channel.stateTopic.description = An MQTT topic that this thing will subscribe to, to receive the trigger
thing-type.config.mqtt.trigger_channel.transformationPattern.label = Incoming Value Transformations
thing-type.config.mqtt.trigger_channel.transformationPattern.description = Applies transformations to an incoming MQTT topic value. This can be used to map the events sent by the device to common values for all devices using, e.g. the MAP transformation. You can chain transformations by listing each transformation on a separate line, or by separating them with the intersection character âˆ©.

# thing actions

actionInputTopicLabel = MQTT Topic
actionInputTopicDesc = The topic to publish a value to.
actionInputValueLabel = Value
actionInputValueDesc = The value to publish
actionInputRetainLabel = Retain
actionInputRetainDesc = Retain message
actionLabel = publish an MQTT message
actionDesc = Publishes a value to the given MQTT topic.
actionRetainLabel = publish an MQTT message with given retain option
actionRetainDesc = Publishes a value with given retain option to the given MQTT topic.

# thing status

offline.notextualconfig = The system connection with the name {0} doesn't exist anymore.
offline.sharedremoved = Another binding unexpectedly removed the internal broker connection.
