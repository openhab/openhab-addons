/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.binding.mybmw.internal.handler.backend;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.List;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.junit.jupiter.api.Test;
import org.openhab.binding.mybmw.internal.dto.charge.ChargingSessionsContainer;
import org.openhab.binding.mybmw.internal.dto.charge.ChargingStatisticsContainer;
import org.openhab.binding.mybmw.internal.dto.remote.ExecutionStatusContainer;
import org.openhab.binding.mybmw.internal.dto.vehicle.VehicleBase;
import org.openhab.binding.mybmw.internal.dto.vehicle.VehicleStateContainer;
import org.openhab.binding.mybmw.internal.util.FileReader;

import com.google.gson.Gson;

/**
 * This test checks if the file can be parsed correctly to the object. Additionally
 * it can be used to check if there are properties in the files not mapped to the objects
 * The output of Junit (at least in VSCode) shows the differences between the original file
 * and the string generated by GSON to identify the gap.
 *
 * @author Martin Grassl - Initial contribution
 */
@NonNullByDefault
public class JsonStringDeserializerTest {

    Gson gson = new Gson();

    void testGetChargeSessions() {
        String content = FileReader.fileToString("responses/BEV/charging_sessions.json");
        ChargingSessionsContainer chargeSessionsContainer = JsonStringDeserializer.getChargingSessions(content);
        assertNotNull(chargeSessionsContainer);
    }

    @Test
    void testGetChargeStatistics() {
        String content = FileReader.fileToString("responses/BEV/charging_statistics.json");
        ChargingStatisticsContainer chargeStatisticsContainer = JsonStringDeserializer.getChargingStatistics(content);
        assertNotNull(chargeStatisticsContainer);
    }

    @Test
    void testGetExecutionStatus() {
        String content = FileReader.fileToString("responses/MILD_HYBRID/remote_service_status.json");
        ExecutionStatusContainer executionStatusContainer = JsonStringDeserializer.getExecutionStatus(content);
        assertNotNull(executionStatusContainer);
    }

    @Test
    void testGetExecutionError() {
        String content = FileReader.fileToString("responses/MILD_HYBRID/remote_service_error.json");
        ExecutionStatusContainer executionStatusContainer = JsonStringDeserializer.getExecutionStatus(content);
        assertNotNull(executionStatusContainer);
    }

    @Test
    void testGetVehicleBaseList() {
        String content = FileReader.fileToString("responses/BEV/vehicles_base.json");
        List<VehicleBase> vehicleBases = JsonStringDeserializer.getVehicleBaseList(content);
        assertNotNull(vehicleBases);
        assertFalse(vehicleBases.isEmpty());
        assertEquals(1, vehicleBases.size());
    }

    @Test
    void testGetVehicleStateBEV() {
        String content = FileReader.fileToString("responses/BEV/vehicles_state.json");
        VehicleStateContainer vehicleStateContainer = JsonStringDeserializer.getVehicleState(content);
        assertNotNull(vehicleStateContainer);

        vehicleStateContainer.setRawStateJson(null);
        String jsonString = gson.toJson(vehicleStateContainer);
        assertNotNull(jsonString);
    }

    @Test
    void testGetVehicleStateMILDHYBRID() {
        String content = FileReader.fileToString("responses/MILD_HYBRID/vehicles_state.json");
        VehicleStateContainer vehicleStateContainer = JsonStringDeserializer.getVehicleState(content);
        assertNotNull(vehicleStateContainer);
    }

    @Test
    void testGetVehicleStatePHEV() {
        String content = FileReader.fileToString("responses/PHEV/vehicles_state.json");
        VehicleStateContainer vehicleStateContainer = JsonStringDeserializer.getVehicleState(content);
        assertNotNull(vehicleStateContainer);
    }

    @Test
    void testGetVehicleStateICE() {
        String content = FileReader.fileToString("responses/ICE/vehicles_state.json");
        VehicleStateContainer vehicleStateContainer = JsonStringDeserializer.getVehicleState(content);
        assertNotNull(vehicleStateContainer);
    }
}
