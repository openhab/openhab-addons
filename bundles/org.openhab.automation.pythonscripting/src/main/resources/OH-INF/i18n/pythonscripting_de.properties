# add-on

addon.pythonscripting.name = Python Scripting
addon.pythonscripting.description = Fügt eine Python 3.x Skript-Engine hinzu.

# add-on config

automation.config.pythonscripting.cachingEnabled.label = Zwischenspeichern von kompilierten openHAB Python-Helfermodulen (.pyc Dateien)
automation.config.pythonscripting.cachingEnabled.description = Zwischenspeichern der openHAB Python-Module für eine verbesserte Startup-Performance.<br> Deaktivieren dieser Option führt zu einer langsameren Start-Performance, da Skripte bei jedem Start neu kompiliert werden müssen.
automation.config.pythonscripting.dependencyTrackingEnabled.label = Abhängigkeitsüberwachung aktivieren
automation.config.pythonscripting.dependencyTrackingEnabled.description = Die Abhängigkeitsüberwachung ermöglicht es Ihren Skripten, automatisch neu zu laden, wenn eine ihrer Abhängigkeiten aktualisiert wird. Sie können die Überwachung von Abhängigkeiten deaktivieren, wenn Sie eine gemeinsam genutzte Bibliothek bearbeiten oder aktualisieren möchten, aber nicht wollen, dass alle Skripte neu geladen werden, bis Sie sie testen können.
automation.config.pythonscripting.group.environment.label = Python-Umgebung
automation.config.pythonscripting.group.environment.description = Diese Gruppe definiert die Python-Umgebung.
automation.config.pythonscripting.group.system.label = Systemverhalten
automation.config.pythonscripting.group.system.description = Diese Gruppe definiert das Systemverhalten von Python.
automation.config.pythonscripting.helperEnabled.label = Installieren und automatisches Aktualisieren der openHAB Python-Helfermodule (erfordert Scope-Modul)
automation.config.pythonscripting.helperEnabled.description = OpenHAB Python-Helfermodule wie 'rule', 'logger', 'Registry', 'Timer', usw. bereitstellen und aktualisieren.<br> Wenn deaktiviert, kann das openHAB Python-Helfermodul manuell installiert werden, indem es nach "/conf/automation/python/lib/openhab" kopiert wird.
automation.config.pythonscripting.injectionEnabled.label = Bereitstellung von Scope- und Helfer-Objekten für UI-basierte Regeln (erfordert Helfer-Module)
automation.config.pythonscripting.injectionEnabled.description = Dies bettet das Scope-Modul und die Kern-Helfermodule 'Registry' und 'logger' in UI-basierte Regeln ein.
automation.config.pythonscripting.injectionEnabled.option.2 = Automatische Einbettung nur für UI und Transformationsskripte aktivieren (bevorzugt)
automation.config.pythonscripting.injectionEnabled.option.1 = Automatische Einbettung für alle Skripte aktivieren
automation.config.pythonscripting.injectionEnabled.option.0 = Automatische Einbettung deaktivieren und stattdessen 'import'-Anweisungen verwenden
automation.config.pythonscripting.jythonEmulation.label = Jython-Emulation aktivieren
automation.config.pythonscripting.jythonEmulation.description = Ermöglicht Jython-Emulation in GraalPy. Es wird dringend empfohlen, Code auf GraalPy und Python 3 zu aktualisieren, da die Emulation zu Performanceeinbußen führen kann. Für Tipps und Anweisungen wird auf <a href\="https\://www.graalvm.org/latest/reference-manual/python/Modern-Python-on-JVM">Jython Migration Guide</a> verwiesen.
automation.config.pythonscripting.scopeEnabled.label = Scope und Import Wrapper verwenden
automation.config.pythonscripting.scopeEnabled.description = Aktiviert ein Scope-Modul und Import-Wrapper.<br> Ein Scope-Modul ist ein eingekapseltes Modul mit allen openHAB JSR223 Objekten und kann mit <code>import scope</code><br> importiert werden. Zusätzlich können Sie einen Import, wie <code>from org.openhab.core import OpenHAB</code> verwenden.
