# add-on

addon.pythonscripting.name = Python Scripting
addon.pythonscripting.description = This adds a Python 3.x script engine.

# add-on config

automation.config.pythonscripting.cachingEnabled.label = Cache compiled openHAB Python helper modules (.pyc files)
automation.config.pythonscripting.cachingEnabled.description = Cache the openHAB python modules for improved startup performance.<br> Disable this option will result in a slower startup performance, because scripts have to be recompiled on every startup.
automation.config.pythonscripting.dependencyTrackingEnabled.label = Enable Dependency Tracking
automation.config.pythonscripting.dependencyTrackingEnabled.description = Dependency tracking allows your scripts to automatically reload when one of its dependencies is updated. You may want to disable dependency tracking if you plan on editing or updating a shared library, but don't want all your scripts to reload until you can test it.
automation.config.pythonscripting.group.environment.label = Python Environment
automation.config.pythonscripting.group.environment.description = This group defines Python's environment.
automation.config.pythonscripting.group.system.label = System Behavior
automation.config.pythonscripting.group.system.description = This group defines Python's system behavior.
automation.config.pythonscripting.helperEnabled.label = Install openHAB Python helper modules and keep it updated (requires scope module)
automation.config.pythonscripting.helperEnabled.description = Deploy and update openHAB Python helper modules like rule, logger, Registry, Timer etc...<br> If disabled, the openHAB Python helper module can be installed manually by copying it to /conf/automation/python/lib/openhab"
automation.config.pythonscripting.injectionEnabled.label = Inject scope and helper objects into UI based rules (requires helper modules)
automation.config.pythonscripting.injectionEnabled.description = This injects the scope module and core helper Registry and logger into UI based rules.
automation.config.pythonscripting.injectionEnabled.option.2 = Auto injection enabled only for UI and Transformation scripts (preferred)
automation.config.pythonscripting.injectionEnabled.option.1 = Auto injection enabled for all scripts
automation.config.pythonscripting.injectionEnabled.option.0 = Disable auto injection and use 'import' statements instead
automation.config.pythonscripting.jythonEmulation.label = Enable Jython emulation
automation.config.pythonscripting.jythonEmulation.description = This enables Jython emulation in GraalPy. It is strongly recommended to update code to GraalPy and Python 3 as the emulation can have performance degradation. For tips and instructions, please refer to <a href="https://www.graalvm.org/latest/reference-manual/python/Modern-Python-on-JVM">Jython Migration Guide</a>.
automation.config.pythonscripting.scopeEnabled.label = Use scope and import wrapper
automation.config.pythonscripting.scopeEnabled.description = This enables a scope module and and import wrapper.<br> An scope module is an encapsulated module containing all openHAB jsr223 objects and can be imported with <code>import scope</code><br> Additionally you can run an import like <code>from org.openhab.core import OpenHAB</code>
