<?xml version="1.0" encoding="UTF-8"?>
<config-description:config-descriptions
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:config-description="https://openhab.org/schemas/config-description/v1.0.0"
	xsi:schemaLocation="https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd">
	<config-description uri="automation:pythonscripting">
		<parameter-group name="environment">
			<label>Python Environment</label>
			<description>This group defines Python's environment.</description>
			<advanced>true</advanced>
		</parameter-group>

		<parameter-group name="system">
			<label>System Behavior</label>
			<description>This group defines Python's system behavior.</description>
			<advanced>true</advanced>
		</parameter-group>

		<parameter name="scopeEnabled" type="boolean" required="true" groupName="environment">
			<label>Use scope and import wrapper</label>
			<description><![CDATA[
			This enables a scope module and import wrapper.<br>
			A scope module is an encapsulated module containing all openHAB jsr223 objects and can be imported with <code>import scope</code><br>
			Additionally, you can run an import like <code>from org.openhab.core import openHAB</code>
			]]></description>
			<default>true</default>
			<advanced>true</advanced>
		</parameter>
		<parameter name="helperEnabled" type="boolean" required="true" groupName="environment">
			<label>Install openHAB Python helper module (requires scope module)</label>
			<description><![CDATA[
			Install openHAB Python helper module to support helper classes like rule, logger, Registry, Timer, etc.<br>
			If disabled, the openHAB python helper module can be installed manually by copying it to /conf/automation/python/lib/openhab"
			]]></description>
			<default>true</default>
		</parameter>
		<parameter name="injectionEnabled" type="integer" required="true" min="0" max="2" groupName="environment">
			<label>Inject scope and helper objects into rules (requires helper modules)</label>
			<description>This injects the scope and helper Registry and logger into rules.</description>
			<options>
				<option value="2">Auto injection enabled only for UI and Transformation scripts (preferred)</option>
				<option value="1">Auto injection enabled for all scripts</option>
				<option value="0">Disable auto injection and use 'import' statements instead</option>
			</options>
			<default>2</default>
		</parameter>
		<parameter name="pipModules" type="text" required="false" groupName="system">
			<label>Python pip modules (requires a manually configured venv)</label>
			<description>
				<![CDATA[A comma separated list of Python modules to install.
				Versions may be constrained by separating with an <code>==</code> followed by standard
				python pip version constraint, such as "<code>tzdata==2025.2</code>".]]>
			</description>
			<default></default>
			<advanced>true</advanced>
		</parameter>
		<parameter name="nativeModules" type="boolean" required="false" groupName="system">
			<label>Enables native modules (requires a manually configured venv)</label>
			<description>Native modules are sometimes necessary for pip modules which depends on native libraries.</description>
			<default>false</default>
			<advanced>true</advanced>
		</parameter>
		<parameter name="dependencyTrackingEnabled" type="boolean" required="true" groupName="system">
			<label>Enable dependency tracking</label>
			<description>Dependency tracking allows your scripts to automatically reload when one of its dependencies is updated.
				You may want to disable dependency tracking if you plan on editing or updating a shared library, but don't want all
				your scripts to reload until you can test it.</description>
			<default>true</default>
			<advanced>true</advanced>
		</parameter>
		<parameter name="cachingEnabled" type="boolean" required="true" groupName="system">
			<label>Cache compiled openHAB Python modules (.pyc files)</label>
			<description><![CDATA[
			Cache the openHAB python modules for improved startup performance.<br>
			Disabling this option will result in slower startup performance, because scripts have to be recompiled on every startup.
			]]></description>
			<default>true</default>
			<advanced>true</advanced>
		</parameter>
		<parameter name="jythonEmulation" type="boolean" required="true" groupName="system">
			<label>Enable Jython emulation</label>
			<description><![CDATA[
			This enables Jython emulation in GraalPy. It is strongly recommended to update code to GraalPy and Python 3 as the emulation can have performance degradation.
			For tips and instructions, please refer to <a href="https://www.graalvm.org/latest/reference-manual/python/Modern-Python-on-JVM">Jython Migration Guide</a>.
			]]></description>
			<default>false</default>
			<advanced>true</advanced>
		</parameter>
	</config-description>
</config-description:config-descriptions>
